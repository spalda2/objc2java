// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2012-12-09 16:16:21

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BOOL_LITERAL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'NS_INLINE'", "'['", "']'", "'^'", "'^('", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BOOL_LITERAL=11;
    public static final int BREAK_STMT=12;
    public static final int CASE_STMT=13;
    public static final int CATCH_STMT=14;
    public static final int CATEGORY=15;
    public static final int CLASS_NAME=16;
    public static final int CODE=17;
    public static final int CONTINUE_STMT=18;
    public static final int DEFAULT_STMT=19;
    public static final int DEFINE=20;
    public static final int DEFINE_LITERAL=21;
    public static final int DIGIT=22;
    public static final int DIRECTIVE=23;
    public static final int DO_STMT=24;
    public static final int ELSE_STMT=25;
    public static final int ENUM=26;
    public static final int ENUM_DEC=27;
    public static final int ENUM_FIELD=28;
    public static final int EXPR_COMPLEMENT=29;
    public static final int EXPR_NEGATE=30;
    public static final int EXPR_NOT=31;
    public static final int EXTERN=32;
    public static final int EscapeSequence=33;
    public static final int FIELD=34;
    public static final int FIELDS=35;
    public static final int FIELD_NAME=36;
    public static final int FINALLY_STMT=37;
    public static final int FORWARD_DECLARATION=38;
    public static final int FOR_IN_STMT=39;
    public static final int FOR_STMT=40;
    public static final int FUNC_POINTER=41;
    public static final int GOTO=42;
    public static final int GROUP_MODIFIER=43;
    public static final int HexDigit=44;
    public static final int ID=45;
    public static final int IF0_COMMENT=46;
    public static final int IF_STMT=47;
    public static final int IMPLEMENTATION=48;
    public static final int IMPLEMENTS_INTERFACES=49;
    public static final int IMPLEMENTS_INTERFACE_NAME=50;
    public static final int INTERFACE=51;
    public static final int INTERFACE_NAME=52;
    public static final int LETTER=53;
    public static final int METHOD=54;
    public static final int METHOD_CALL=55;
    public static final int METHOD_IMPL=56;
    public static final int METHOD_MSG=57;
    public static final int METHOD_NAME=58;
    public static final int METHOD_PARAM=59;
    public static final int METHOD_PARAMS=60;
    public static final int MODIFIER=61;
    public static final int MULTI_COMMENT=62;
    public static final int MULTI_COMMENT_LIT=63;
    public static final int NAME=64;
    public static final int NUMBER=65;
    public static final int NUMBER_LITERAL=66;
    public static final int OBJECT_ACCESS=67;
    public static final int OP=68;
    public static final int PARAMS=69;
    public static final int PARAM_NAME=70;
    public static final int PARAM_PREFIX=71;
    public static final int PREFIX=72;
    public static final int PREPROCESSOR_DECLARATION=73;
    public static final int PROPERTY=74;
    public static final int PROTOCOL=75;
    public static final int PROTOCOL_NAME=76;
    public static final int QUESTION_MARK_IF=77;
    public static final int RETURN_STMT=78;
    public static final int SIMPLE_EXPR=79;
    public static final int SINGLE_COMMENT=80;
    public static final int SINGLE_COMMENT_LIT=81;
    public static final int STATIC=82;
    public static final int STATIC_METHOD=83;
    public static final int STATIC_VARIABLE=84;
    public static final int STRING=85;
    public static final int STRING_LITERAL=86;
    public static final int STRING_OBJC=87;
    public static final int STRUCT=88;
    public static final int STRUCT_DEC=89;
    public static final int SUPERCLASS_NAME=90;
    public static final int SWITCH_STMT=91;
    public static final int SYNCHRONIZED=92;
    public static final int SYNTHETIZE=93;
    public static final int TEMPLATE_TYPE=94;
    public static final int THROW_STMT=95;
    public static final int TRY_STMT=96;
    public static final int TYPEDEF=97;
    public static final int TYPEDEF_NAME=98;
    public static final int TYPE_CAST=99;
    public static final int TYPE_PLAIN=100;
    public static final int UNION=101;
    public static final int UNION_DEC=102;
    public static final int UnicodeEscape=103;
    public static final int VALUE=104;
    public static final int VARIABLE=105;
    public static final int VARIABLE_ASSIGNMENT=106;
    public static final int VA_ARGS=107;
    public static final int WHILE_STMT=108;
    public static final int WHITESPACE=109;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:115:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:115:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==116||LA1_0==143||(LA1_0 >= 147 && LA1_0 <= 148)||LA1_0==153||LA1_0==167||(LA1_0 >= 172 && LA1_0 <= 173)||LA1_0==176||(LA1_0 >= 179 && LA1_0 <= 180)||(LA1_0 >= 182 && LA1_0 <= 184)||(LA1_0 >= 186 && LA1_0 <= 188)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code473);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 116:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:119:1: code_internal : ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_wrapper_return implementation_wrapper2 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration3 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper4 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper5 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper6 =null;

        ObjcParser.define_declaration_return define_declaration7 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper8 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper9 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper10 =null;

        ObjcParser.comments_return comments11 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:2: ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments )
            int alt2=10;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt2=1;
                }
                break;
            case 143:
                {
                alt2=2;
                }
                break;
            case 153:
                {
                alt2=3;
                }
                break;
            case 148:
                {
                alt2=4;
                }
                break;
            case 173:
                {
                alt2=5;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt2=6;
                }
                break;
            case 186:
                {
                alt2=7;
                }
                break;
            case 183:
                {
                alt2=8;
                }
                break;
            case ID:
            case 116:
            case 167:
            case 172:
            case 176:
            case 179:
            case 180:
            case 182:
            case 184:
            case 187:
            case 188:
                {
                alt2=9;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt2=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal495);
                    implementation_wrapper2=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal500);
                    forward_class_declaration3=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal506);
                    protocol_declaration_wrapper4=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal513);
                    interface_declaration_wrapper5=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal520);
                    extern_declaration_wrapper6=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal526);
                    define_declaration7=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal532);
                    typedef_declaration_wrapper8=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal538);
                    static_declaration_wrapper9=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal544);
                    variable_declaration_wrapper10=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal550);
                    comments11=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:132:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment12 =null;

        ObjcParser.multi_comment_return multi_comment13 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:133:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:133:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments562);
                    single_comment12=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment12.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:134:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments568);
                    multi_comment13=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment13.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT14=null;

        Object SINGLE_COMMENT_LIT14_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT14=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment583); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT14);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 138:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT15=null;

        Object MULTI_COMMENT_LIT15_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT15=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment605); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT15);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:149:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern16 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:150:3: ( extern -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:150:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper633);
            extern16=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern.add(extern16.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 150:12: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:150:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:2: extern : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal17=null;
        Token string_literal18=null;
        Token char_literal19=null;
        Token set20=null;
        Token char_literal21=null;

        Object string_literal17_tree=null;
        Object string_literal18_tree=null;
        Object char_literal19_tree=null;
        Object set20_tree=null;
        Object char_literal21_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:9: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:11: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal17=(Token)match(input,173,FOLLOW_173_in_extern652); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal17_tree = 
            (Object)adaptor.create(string_literal17)
            ;
            adaptor.addChild(root_0, string_literal17_tree);
            }

            string_literal18=(Token)match(input,112,FOLLOW_112_in_extern655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal18_tree = 
            (Object)adaptor.create(string_literal18)
            ;
            adaptor.addChild(root_0, string_literal18_tree);
            }

            char_literal19=(Token)match(input,116,FOLLOW_116_in_extern658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal19_tree = 
            (Object)adaptor.create(char_literal19)
            ;
            adaptor.addChild(root_0, char_literal19_tree);
            }

            set20=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 116)||(input.LA(1) >= 118 && input.LA(1) <= 195) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set20)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal21=(Token)match(input,117,FOLLOW_117_in_extern665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal21_tree = 
            (Object)adaptor.create(char_literal21)
            ;
            adaptor.addChild(root_0, char_literal21_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:156:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation22 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper680);
            implementation22=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation22.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 157:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:1: implementation : '@implementation' name ( category )? ( implementation_body )+ '@end' ( ';' )? ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal23=null;
        Token string_literal27=null;
        Token char_literal28=null;
        ObjcParser.name_return name24 =null;

        ObjcParser.category_return category25 =null;

        ObjcParser.implementation_body_return implementation_body26 =null;


        Object string_literal23_tree=null;
        Object string_literal27_tree=null;
        Object char_literal28_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:2: ( '@implementation' name ( category )? ( implementation_body )+ '@end' ( ';' )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:4: '@implementation' name ( category )? ( implementation_body )+ '@end' ( ';' )?
            {
            root_0 = (Object)adaptor.nil();


            string_literal23=(Token)match(input,147,FOLLOW_147_in_implementation699); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal23_tree = 
            (Object)adaptor.create(string_literal23)
            ;
            adaptor.addChild(root_0, string_literal23_tree);
            }

            pushFollow(FOLLOW_name_in_implementation702);
            name24=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name24.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==116) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==117) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation705);
                    category25=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category25.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:3: ( implementation_body )+
            int cnt5=0;
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==116||LA5_0==120||LA5_0==124||LA5_0==130||LA5_0==144||LA5_0==157||LA5_0==167||LA5_0==172||LA5_0==176||(LA5_0 >= 179 && LA5_0 <= 180)||(LA5_0 >= 182 && LA5_0 <= 184)||(LA5_0 >= 186 && LA5_0 <= 188)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation710);
            	    implementation_body26=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body26.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);


            string_literal27=(Token)match(input,145,FOLLOW_145_in_implementation715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal27_tree = 
            (Object)adaptor.create(string_literal27)
            ;
            adaptor.addChild(root_0, string_literal27_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:11: ( ';' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==130) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:11: ';'
                    {
                    char_literal28=(Token)match(input,130,FOLLOW_130_in_implementation718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal28_tree = 
                    (Object)adaptor.create(char_literal28)
                    ;
                    adaptor.addChild(root_0, char_literal28_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:1: implementation_body : ( implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal36=null;
        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper29 =null;

        ObjcParser.directives_return directives30 =null;

        ObjcParser.define_declaration_return define_declaration31 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper32 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper33 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper34 =null;

        ObjcParser.comments_return comments35 =null;


        Object char_literal36_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:3: ( implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt7=8;
            switch ( input.LA(1) ) {
            case 120:
            case 124:
                {
                alt7=1;
                }
                break;
            case 144:
            case 157:
                {
                alt7=2;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt7=3;
                }
                break;
            case 186:
                {
                alt7=4;
                }
                break;
            case 183:
                {
                alt7=5;
                }
                break;
            case ID:
            case 116:
            case 167:
            case 172:
            case 176:
            case 179:
            case 180:
            case 182:
            case 184:
            case 187:
            case 188:
                {
                alt7=6;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt7=7;
                }
                break;
            case 130:
                {
                alt7=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }

            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body733);
                    implementation_method_wrapper29=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper29.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:167:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body739);
                    directives30=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives30.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body745);
                    define_declaration31=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration31.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body750);
                    typedef_declaration_wrapper32=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper32.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body755);
                    static_declaration_wrapper33=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body761);
                    variable_declaration_wrapper34=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body767);
                    comments35=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments35.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal36=(Token)match(input,130,FOLLOW_130_in_implementation_body772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal36_tree = 
                    (Object)adaptor.create(char_literal36)
                    ;
                    adaptor.addChild(root_0, char_literal36_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize37 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives783);
            synthesize37=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize37.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 177:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal38=null;
        Token string_literal39=null;
        Token ID40=null;
        Token char_literal41=null;
        Token char_literal43=null;
        ObjcParser.name_return name42 =null;


        Object string_literal38_tree=null;
        Object string_literal39_tree=null;
        Object ID40_tree=null;
        Object char_literal41_tree=null;
        Object char_literal43_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:4: ( '@synthesize' | '@dynamic' )
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==157) ) {
                alt8=1;
            }
            else if ( (LA8_0==144) ) {
                alt8=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;

            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:5: '@synthesize'
                    {
                    string_literal38=(Token)match(input,157,FOLLOW_157_in_synthesize805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal38);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:21: '@dynamic'
                    {
                    string_literal39=(Token)match(input,144,FOLLOW_144_in_synthesize809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_144.add(string_literal39);


                    }
                    break;

            }


            ID40=(Token)match(input,ID,FOLLOW_ID_in_synthesize813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID40);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:37: ( '=' name )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==135) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:38: '=' name
                    {
                    char_literal41=(Token)match(input,135,FOLLOW_135_in_synthesize816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal41);


                    pushFollow(FOLLOW_name_in_synthesize818);
                    name42=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name42.getTree());

                    }
                    break;

            }


            char_literal43=(Token)match(input,130,FOLLOW_130_in_synthesize822); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal43);


            // AST REWRITE
            // elements: name, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 181:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal44=null;
        ObjcParser.field_declaration_return field_declaration45 =null;


        Object string_literal44_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:4: 'static' field_declaration
            {
            string_literal44=(Token)match(input,183,FOLLOW_183_in_static_declaration_wrapper846); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal44);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper848);
            field_declaration45=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration45.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 185:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:1: block_call_predicate : '^(' ;
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;

        Object string_literal46_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:189:3: ( '^(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:189:5: '^('
            {
            root_0 = (Object)adaptor.nil();


            string_literal46=(Token)match(input,164,FOLLOW_164_in_block_call_predicate868); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal46_tree = 
            (Object)adaptor.create(string_literal46)
            ;
            adaptor.addChild(root_0, string_literal46_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call47 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper883);
            block_call47=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call47.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 193:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:196:1: block_call : ( '^(' ( block_params )? ')' ) block_multiline_wrapper ;
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal48=null;
        Token char_literal50=null;
        ObjcParser.block_params_return block_params49 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper51 =null;


        Object string_literal48_tree=null;
        Object char_literal50_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:3: ( ( '^(' ( block_params )? ')' ) block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^(' ( block_params )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:6: '^(' ( block_params )? ')'
            {
            string_literal48=(Token)match(input,164,FOLLOW_164_in_block_call905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal48_tree = 
            (Object)adaptor.create(string_literal48)
            ;
            adaptor.addChild(root_0, string_literal48_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:11: ( block_params )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID||LA10_0==116||LA10_0==167||LA10_0==172||LA10_0==176||(LA10_0 >= 179 && LA10_0 <= 180)||LA10_0==182||LA10_0==184||(LA10_0 >= 187 && LA10_0 <= 188)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:11: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_call907);
                    block_params49=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params49.getTree());

                    }
                    break;

            }


            char_literal50=(Token)match(input,117,FOLLOW_117_in_block_call910); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal50_tree = 
            (Object)adaptor.create(char_literal50)
            ;
            adaptor.addChild(root_0, char_literal50_tree);
            }

            }


            pushFollow(FOLLOW_block_multiline_wrapper_in_block_call913);
            block_multiline_wrapper51=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper51.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:200:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call52 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper926);
            synchronized_call52=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call52.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 201:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal53=null;
        Token char_literal54=null;
        Token char_literal56=null;
        ObjcParser.element_value_return element_value55 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper57 =null;


        Object string_literal53_tree=null;
        Object char_literal54_tree=null;
        Object char_literal56_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal53=(Token)match(input,156,FOLLOW_156_in_synchronized_call949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal53_tree = 
            (Object)adaptor.create(string_literal53)
            ;
            adaptor.addChild(root_0, string_literal53_tree);
            }

            char_literal54=(Token)match(input,116,FOLLOW_116_in_synchronized_call951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal54_tree = 
            (Object)adaptor.create(char_literal54)
            ;
            adaptor.addChild(root_0, char_literal54_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call953);
            element_value55=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value55.getTree());

            char_literal56=(Token)match(input,117,FOLLOW_117_in_synchronized_call955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal56_tree = 
            (Object)adaptor.create(char_literal56)
            ;
            adaptor.addChild(root_0, char_literal56_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call957);
            block_multiline_wrapper57=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper57.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:208:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal59=null;
        ObjcParser.classical_param_return classical_param58 =null;

        ObjcParser.classical_param_return classical_param60 =null;


        Object char_literal59_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params973);
            classical_param58=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param58.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:22: ( ',' classical_param )*
            loop11:
            do {
                int alt11=2;
                int LA11_0 = input.LA(1);

                if ( (LA11_0==123) ) {
                    alt11=1;
                }


                switch (alt11) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:23: ',' classical_param
            	    {
            	    char_literal59=(Token)match(input,123,FOLLOW_123_in_block_params976); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal59);


            	    pushFollow(FOLLOW_classical_param_in_block_params978);
            	    classical_param60=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param60.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 209:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline61 =null;

        ObjcParser.block_singleline_return block_singleline62 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==190) ) {
                alt12=1;
            }
            else if ( (LA12_0==ID||LA12_0==MULTI_COMMENT_LIT||LA12_0==SINGLE_COMMENT_LIT||LA12_0==130||LA12_0==156||LA12_0==161||LA12_0==165||LA12_0==168||(LA12_0 >= 170 && LA12_0 <= 171)||(LA12_0 >= 174 && LA12_0 <= 175)||LA12_0==177||LA12_0==181||LA12_0==185||LA12_0==189) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1007);
                    block_multiline61=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline61.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 214:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1019);
                    block_singleline62=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline62.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 215:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:218:1: block_multiline : '{' ( block_internal )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal63=null;
        Token char_literal65=null;
        ObjcParser.block_internal_return block_internal64 =null;


        Object char_literal63_tree=null;
        Object char_literal65_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:2: ( '{' ( block_internal )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:3: '{' ( block_internal )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal63=(Token)match(input,190,FOLLOW_190_in_block_multiline1041); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal63_tree = 
            (Object)adaptor.create(char_literal63)
            ;
            adaptor.addChild(root_0, char_literal63_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:4: ( block_internal )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==ID||LA13_0==MULTI_COMMENT_LIT||LA13_0==SINGLE_COMMENT_LIT||LA13_0==116||LA13_0==130||LA13_0==156||(LA13_0 >= 158 && LA13_0 <= 159)||LA13_0==161||LA13_0==165||(LA13_0 >= 167 && LA13_0 <= 168)||(LA13_0 >= 170 && LA13_0 <= 172)||(LA13_0 >= 174 && LA13_0 <= 177)||(LA13_0 >= 179 && LA13_0 <= 185)||(LA13_0 >= 187 && LA13_0 <= 190)) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:4: block_internal
            	    {
            	    pushFollow(FOLLOW_block_internal_in_block_multiline1046);
            	    block_internal64=block_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal64.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            char_literal65=(Token)match(input,194,FOLLOW_194_in_block_multiline1053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal65_tree = 
            (Object)adaptor.create(char_literal65)
            ;
            adaptor.addChild(root_0, char_literal65_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:225:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline66 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1065);
            block_multiline66=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline66.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 226:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:229:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline67 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1086);
            block_singleline67=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline67.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 230:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:233:1: block_singleline : ( synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal76=null;
        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper68 =null;

        ObjcParser.do_stmt_return do_stmt69 =null;

        ObjcParser.if_stmt_return if_stmt70 =null;

        ObjcParser.else_stmt_return else_stmt71 =null;

        ObjcParser.switch_stmt_return switch_stmt72 =null;

        ObjcParser.return_stmt_return return_stmt73 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper74 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper75 =null;

        ObjcParser.break_stmt_return break_stmt77 =null;

        ObjcParser.continue_stmt_return continue_stmt78 =null;

        ObjcParser.goto_stmt_return goto_stmt79 =null;

        ObjcParser.method_msg_return method_msg80 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper81 =null;

        ObjcParser.comments_return comments82 =null;


        Object char_literal76_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:2: ( synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments )
            int alt14=15;
            switch ( input.LA(1) ) {
            case 156:
                {
                alt14=1;
                }
                break;
            case 170:
                {
                alt14=2;
                }
                break;
            case 177:
                {
                alt14=3;
                }
                break;
            case 171:
                {
                alt14=4;
                }
                break;
            case 185:
                {
                alt14=5;
                }
                break;
            case 181:
                {
                alt14=6;
                }
                break;
            case 174:
                {
                alt14=7;
                }
                break;
            case 189:
                {
                alt14=8;
                }
                break;
            case 130:
                {
                alt14=9;
                }
                break;
            case 165:
                {
                alt14=10;
                }
                break;
            case 168:
                {
                alt14=11;
                }
                break;
            case 175:
                {
                alt14=12;
                }
                break;
            case 161:
                {
                alt14=13;
                }
                break;
            case ID:
                {
                alt14=14;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt14=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1108);
                    synchronized_call_wrapper68=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper68.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1113);
                    do_stmt69=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt69.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:236:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1118);
                    if_stmt70=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt70.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:237:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1123);
                    else_stmt71=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt71.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:238:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1128);
                    switch_stmt72=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt72.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1133);
                    return_stmt73=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt73.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1138);
                    for_stmt_wrapper74=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper74.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1143);
                    while_stmt_wrapper75=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper75.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:242:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal76=(Token)match(input,130,FOLLOW_130_in_block_singleline1148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal76_tree = 
                    (Object)adaptor.create(char_literal76)
                    ;
                    adaptor.addChild(root_0, char_literal76_tree);
                    }

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:243:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1154);
                    break_stmt77=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt77.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1160);
                    continue_stmt78=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt78.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1165);
                    goto_stmt79=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt79.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:4: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1170);
                    method_msg80=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg80.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1176);
                    variable_assignment_wrapper81=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper81.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:248:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1182);
                    comments82=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments82.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | variable_declaration_wrapper | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal95=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper83 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper84 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper85 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper86 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper87 =null;

        ObjcParser.do_stmt_return do_stmt88 =null;

        ObjcParser.if_stmt_return if_stmt89 =null;

        ObjcParser.else_stmt_return else_stmt90 =null;

        ObjcParser.switch_stmt_return switch_stmt91 =null;

        ObjcParser.return_stmt_return return_stmt92 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper93 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper94 =null;

        ObjcParser.break_stmt_return break_stmt96 =null;

        ObjcParser.continue_stmt_return continue_stmt97 =null;

        ObjcParser.goto_stmt_return goto_stmt98 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper99 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper100 =null;

        ObjcParser.method_msg_return method_msg101 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper102 =null;

        ObjcParser.comments_return comments103 =null;


        Object char_literal95_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | variable_declaration_wrapper | method_msg | variable_assignment_wrapper | comments )
            int alt15=21;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA15_1 = input.LA(2);

                if ( ((LA15_1 >= 127 && LA15_1 <= 128)) ) {
                    int LA15_31 = input.LA(3);

                    if ( (LA15_31==ID) ) {
                        int LA15_40 = input.LA(4);

                        if ( (LA15_40==116) && (synpred1_Objc())) {
                            alt15=1;
                        }
                        else if ( ((LA15_40 >= 127 && LA15_40 <= 128)) ) {
                            int LA15_42 = input.LA(5);

                            if ( (synpred1_Objc()) ) {
                                alt15=1;
                            }
                            else if ( (true) ) {
                                alt15=20;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 15, 42, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA15_40==115||LA15_40==117||LA15_40==119||LA15_40==122||LA15_40==126||LA15_40==133||LA15_40==135||LA15_40==140||LA15_40==192) ) {
                            alt15=20;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 15, 40, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 15, 31, input);

                        throw nvae;

                    }
                }
                else if ( (LA15_1==116) && (synpred1_Objc())) {
                    alt15=1;
                }
                else if ( (LA15_1==ID||LA15_1==114||LA15_1==118||LA15_1==161||LA15_1==167) ) {
                    alt15=18;
                }
                else if ( (LA15_1==115||LA15_1==117||LA15_1==119||LA15_1==122||LA15_1==126||LA15_1==133||LA15_1==135||LA15_1==140||LA15_1==192) ) {
                    alt15=20;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 1, input);

                    throw nvae;

                }
                }
                break;
            case 156:
                {
                alt15=2;
                }
                break;
            case 159:
                {
                alt15=3;
                }
                break;
            case 158:
                {
                alt15=4;
                }
                break;
            case 183:
                {
                alt15=5;
                }
                break;
            case 170:
                {
                alt15=6;
                }
                break;
            case 177:
                {
                alt15=7;
                }
                break;
            case 171:
                {
                alt15=8;
                }
                break;
            case 185:
                {
                alt15=9;
                }
                break;
            case 181:
                {
                alt15=10;
                }
                break;
            case 174:
                {
                alt15=11;
                }
                break;
            case 189:
                {
                alt15=12;
                }
                break;
            case 130:
                {
                alt15=13;
                }
                break;
            case 165:
                {
                alt15=14;
                }
                break;
            case 168:
                {
                alt15=15;
                }
                break;
            case 175:
                {
                alt15=16;
                }
                break;
            case 190:
                {
                alt15=17;
                }
                break;
            case 116:
            case 167:
            case 172:
            case 176:
            case 179:
            case 180:
            case 182:
            case 184:
            case 187:
            case 188:
                {
                alt15=18;
                }
                break;
            case 161:
                {
                alt15=19;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt15=21;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }

            switch (alt15) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1199);
                    classical_method_call_wrapper83=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper83.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:253:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1205);
                    synchronized_call_wrapper84=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper84.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1211);
                    try_stmt_wrapper85=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper85.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1216);
                    throw_stmt_wrapper86=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper86.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1221);
                    static_declaration_wrapper87=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper87.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:257:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1226);
                    do_stmt88=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt88.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1231);
                    if_stmt89=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt89.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1236);
                    else_stmt90=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt90.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1241);
                    switch_stmt91=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt91.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:261:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1246);
                    return_stmt92=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt92.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1251);
                    for_stmt_wrapper93=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper93.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1256);
                    while_stmt_wrapper94=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper94.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal95=(Token)match(input,130,FOLLOW_130_in_block_internal1261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal95_tree = 
                    (Object)adaptor.create(char_literal95)
                    ;
                    adaptor.addChild(root_0, char_literal95_tree);
                    }

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1266);
                    break_stmt96=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt96.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1271);
                    continue_stmt97=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt97.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1276);
                    goto_stmt98=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt98.getTree());

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1281);
                    block_multiline_wrapper99=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper99.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1287);
                    variable_declaration_wrapper100=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper100.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1293);
                    method_msg101=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg101.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1299);
                    variable_assignment_wrapper102=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper102.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1305);
                    comments103=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments103.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal104=null;
        Token char_literal105=null;
        Token ID106=null;
        Token char_literal107=null;

        Object string_literal104_tree=null;
        Object char_literal105_tree=null;
        Object ID106_tree=null;
        Object char_literal107_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:5: 'goto' ':' ID ';'
            {
            string_literal104=(Token)match(input,175,FOLLOW_175_in_goto_stmt1317); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal104);


            char_literal105=(Token)match(input,129,FOLLOW_129_in_goto_stmt1319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal105);


            ID106=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1321); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID106);


            char_literal107=(Token)match(input,130,FOLLOW_130_in_goto_stmt1323); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal107);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt108 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1346);
            while_stmt108=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt108.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal109=null;
        Token char_literal110=null;
        Token char_literal112=null;
        ObjcParser.element_value_return element_value111 =null;

        ObjcParser.block_return block113 =null;


        Object string_literal109_tree=null;
        Object char_literal110_tree=null;
        Object char_literal112_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal109=(Token)match(input,189,FOLLOW_189_in_while_stmt1369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal109_tree = 
            (Object)adaptor.create(string_literal109)
            ;
            adaptor.addChild(root_0, string_literal109_tree);
            }

            char_literal110=(Token)match(input,116,FOLLOW_116_in_while_stmt1371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal110_tree = 
            (Object)adaptor.create(char_literal110)
            ;
            adaptor.addChild(root_0, char_literal110_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1373);
            element_value111=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value111.getTree());

            char_literal112=(Token)match(input,117,FOLLOW_117_in_while_stmt1375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal112_tree = 
            (Object)adaptor.create(char_literal112)
            ;
            adaptor.addChild(root_0, char_literal112_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1377);
            block113=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block113.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal114=null;
        ObjcParser.element_value_return element_value115 =null;


        Object string_literal114_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:5: 'in' element_value
            {
            string_literal114=(Token)match(input,178,FOLLOW_178_in_for_in_stmt1392); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal114);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1394);
            element_value115=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value115.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal116=null;
        Token char_literal118=null;
        ObjcParser.element_value_return element_value117 =null;

        ObjcParser.element_value_return element_value119 =null;


        Object char_literal116_tree=null;
        Object char_literal118_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal116=(Token)match(input,130,FOLLOW_130_in_for_classic_stmt1417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal116_tree = 
            (Object)adaptor.create(char_literal116)
            ;
            adaptor.addChild(root_0, char_literal116_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:9: ( element_value )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==BOOL_LITERAL||LA16_0==ID||LA16_0==NUMBER_LITERAL||(LA16_0 >= STRING_LITERAL && LA16_0 <= STRING_OBJC)||LA16_0==110||LA16_0==114||LA16_0==116||LA16_0==121||(LA16_0 >= 124 && LA16_0 <= 125)||LA16_0==155||LA16_0==161||LA16_0==164||LA16_0==195) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1419);
                    element_value117=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value117.getTree());

                    }
                    break;

            }


            char_literal118=(Token)match(input,130,FOLLOW_130_in_for_classic_stmt1422); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal118_tree = 
            (Object)adaptor.create(char_literal118)
            ;
            adaptor.addChild(root_0, char_literal118_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:28: ( element_value )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==BOOL_LITERAL||LA17_0==ID||LA17_0==NUMBER_LITERAL||(LA17_0 >= STRING_LITERAL && LA17_0 <= STRING_OBJC)||LA17_0==110||LA17_0==114||LA17_0==116||LA17_0==121||(LA17_0 >= 124 && LA17_0 <= 125)||LA17_0==155||LA17_0==161||LA17_0==164||LA17_0==195) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1424);
                    element_value119=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value119.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block | variable_assignment_wrapper for_classic_stmt ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal122=null;
        Token char_literal126=null;
        Token char_literal133=null;
        Token char_literal137=null;
        ObjcParser.name_return name120 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt121 =null;

        ObjcParser.block_return block123 =null;

        ObjcParser.name_return name124 =null;

        ObjcParser.for_in_stmt_return for_in_stmt125 =null;

        ObjcParser.block_return block127 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple128 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper129 =null;

        ObjcParser.element_value_return element_value130 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt131 =null;

        ObjcParser.for_in_stmt_return for_in_stmt132 =null;

        ObjcParser.block_return block134 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper135 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt136 =null;

        ObjcParser.block_return block138 =null;


        Object char_literal122_tree=null;
        Object char_literal126_tree=null;
        Object char_literal133_tree=null;
        Object char_literal137_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block | variable_assignment_wrapper for_classic_stmt ')' block )
            int alt19=4;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==ID) ) {
                int LA19_1 = input.LA(2);

                if ( (LA19_1==130) && (synpred2_Objc())) {
                    alt19=1;
                }
                else if ( (LA19_1==178) && (synpred3_Objc())) {
                    alt19=2;
                }
                else if ( (LA19_1==ID||LA19_1==114||LA19_1==118||LA19_1==161||LA19_1==167) ) {
                    alt19=3;
                }
                else if ( (LA19_1==115||LA19_1==117||LA19_1==119||LA19_1==122||(LA19_1 >= 126 && LA19_1 <= 128)||LA19_1==133||LA19_1==135||LA19_1==140||LA19_1==192) ) {
                    alt19=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 19, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA19_0==116||LA19_0==167||LA19_0==172||LA19_0==176||(LA19_0 >= 179 && LA19_0 <= 180)||LA19_0==182||LA19_0==184||(LA19_0 >= 187 && LA19_0 <= 188)) ) {
                alt19=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 19, 0, input);

                throw nvae;

            }
            switch (alt19) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1447);
                    name120=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name120.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1449);
                    for_classic_stmt121=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt121.getTree());

                    char_literal122=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1451); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal122_tree = 
                    (Object)adaptor.create(char_literal122)
                    ;
                    adaptor.addChild(root_0, char_literal122_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1453);
                    block123=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block123.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1466);
                    name124=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name124.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1468);
                    for_in_stmt125=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt125.getTree());

                    char_literal126=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal126_tree = 
                    (Object)adaptor.create(char_literal126)
                    ;
                    adaptor.addChild(root_0, char_literal126_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1472);
                    block127=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block127.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1478);
                    field_declaration_simple128=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple128.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==115||LA18_0==119||LA18_0==122||LA18_0==126||LA18_0==133||LA18_0==135||LA18_0==140||LA18_0==192) ) {
                        alt18=1;
                    }
                    else if ( (LA18_0==178) ) {
                        alt18=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 18, 0, input);

                        throw nvae;

                    }
                    switch (alt18) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1482);
                            op_assign_wrapper129=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper129.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1484);
                            element_value130=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value130.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1486);
                            for_classic_stmt131=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt131.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1491);
                            for_in_stmt132=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt132.getTree());

                            }
                            break;

                    }


                    char_literal133=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal133_tree = 
                    (Object)adaptor.create(char_literal133)
                    ;
                    adaptor.addChild(root_0, char_literal133_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1496);
                    block134=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block134.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:5: variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1502);
                    variable_assignment_wrapper135=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper135.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1504);
                    for_classic_stmt136=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt136.getTree());

                    char_literal137=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal137_tree = 
                    (Object)adaptor.create(char_literal137)
                    ;
                    adaptor.addChild(root_0, char_literal137_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1508);
                    block138=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block138.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal139=null;
        Token char_literal140=null;
        ObjcParser.for_stmt_body_return for_stmt_body141 =null;


        Object string_literal139_tree=null;
        Object char_literal140_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal139=(Token)match(input,174,FOLLOW_174_in_for_stmt1521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal139_tree = 
            (Object)adaptor.create(string_literal139)
            ;
            adaptor.addChild(root_0, string_literal139_tree);
            }

            char_literal140=(Token)match(input,116,FOLLOW_116_in_for_stmt1523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal140_tree = 
            (Object)adaptor.create(char_literal140)
            ;
            adaptor.addChild(root_0, char_literal140_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1525);
            for_stmt_body141=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body141.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt142 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:307:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:307:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1538);
            for_stmt142=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt142.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 307:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:307:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal143=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon144 =null;


        Object string_literal143_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:5: 'return' element_value_or_semicolon
            {
            string_literal143=(Token)match(input,181,FOLLOW_181_in_return_stmt1561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal143);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1563);
            element_value_or_semicolon144=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon144.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 311:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:314:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal145=null;
        Token char_literal146=null;
        Token char_literal148=null;
        Token char_literal149=null;
        Token char_literal151=null;
        ObjcParser.element_value_return element_value147 =null;

        ObjcParser.switch_body_return switch_body150 =null;


        Object string_literal145_tree=null;
        Object char_literal146_tree=null;
        Object char_literal148_tree=null;
        Object char_literal149_tree=null;
        Object char_literal151_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal145=(Token)match(input,185,FOLLOW_185_in_switch_stmt1586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal145);


            char_literal146=(Token)match(input,116,FOLLOW_116_in_switch_stmt1588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal146);


            pushFollow(FOLLOW_element_value_in_switch_stmt1590);
            element_value147=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value147.getTree());

            char_literal148=(Token)match(input,117,FOLLOW_117_in_switch_stmt1592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal148);


            char_literal149=(Token)match(input,190,FOLLOW_190_in_switch_stmt1594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(char_literal149);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:41: ( switch_body )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==ID||LA20_0==MULTI_COMMENT_LIT||LA20_0==SINGLE_COMMENT_LIT||LA20_0==130||LA20_0==156||LA20_0==161||(LA20_0 >= 165 && LA20_0 <= 166)||(LA20_0 >= 168 && LA20_0 <= 171)||(LA20_0 >= 174 && LA20_0 <= 175)||LA20_0==177||LA20_0==181||LA20_0==185||(LA20_0 >= 189 && LA20_0 <= 190)) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1597);
            	    switch_body150=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body150.getTree());

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);


            }


            char_literal151=(Token)match(input,194,FOLLOW_194_in_switch_stmt1601); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_194.add(char_literal151);


            // AST REWRITE
            // elements: switch_body, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 315:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:318:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt152 =null;

        ObjcParser.default_stmt_return default_stmt153 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper154 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper155 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt21=4;
            switch ( input.LA(1) ) {
            case 166:
                {
                alt21=1;
                }
                break;
            case 169:
                {
                alt21=2;
                }
                break;
            case 190:
                {
                alt21=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 130:
            case 156:
            case 161:
            case 165:
            case 168:
            case 170:
            case 171:
            case 174:
            case 175:
            case 177:
            case 181:
            case 185:
            case 189:
                {
                alt21=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }

            switch (alt21) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1627);
                    case_stmt152=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt152.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1633);
                    default_stmt153=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt153.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1639);
                    block_multiline_wrapper154=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper154.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1645);
                    block_singleline_wrapper155=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper155.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal156=null;
        Token char_literal158=null;
        ObjcParser.name_number_return name_number157 =null;


        Object string_literal156_tree=null;
        Object char_literal158_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:326:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:326:5: 'case' name_number ':'
            {
            string_literal156=(Token)match(input,166,FOLLOW_166_in_case_stmt1660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal156);


            pushFollow(FOLLOW_name_number_in_case_stmt1662);
            name_number157=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number157.getTree());

            char_literal158=(Token)match(input,129,FOLLOW_129_in_case_stmt1664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal158);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 326:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:326:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal159=null;
        Token char_literal160=null;

        Object string_literal159_tree=null;
        Object char_literal160_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:5: 'default' ':'
            {
            string_literal159=(Token)match(input,169,FOLLOW_169_in_default_stmt1687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal159);


            char_literal160=(Token)match(input,129,FOLLOW_129_in_default_stmt1689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal160);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 330:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal161=null;
        Token string_literal163=null;
        Token char_literal164=null;
        Token char_literal166=null;
        ObjcParser.block_return block162 =null;

        ObjcParser.element_value_return element_value165 =null;


        Object string_literal161_tree=null;
        Object string_literal163_tree=null;
        Object char_literal164_tree=null;
        Object char_literal166_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal161=(Token)match(input,170,FOLLOW_170_in_do_stmt1710); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal161);


            pushFollow(FOLLOW_block_in_do_stmt1712);
            block162=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block162.getTree());

            string_literal163=(Token)match(input,189,FOLLOW_189_in_do_stmt1714); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal163);


            char_literal164=(Token)match(input,116,FOLLOW_116_in_do_stmt1716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal164);


            pushFollow(FOLLOW_element_value_in_do_stmt1718);
            element_value165=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value165.getTree());

            char_literal166=(Token)match(input,117,FOLLOW_117_in_do_stmt1720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal166);


            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 334:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:337:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal167=null;
        Token char_literal168=null;
        Token char_literal170=null;
        ObjcParser.element_value_return element_value169 =null;

        ObjcParser.block_return block171 =null;


        Object string_literal167_tree=null;
        Object char_literal168_tree=null;
        Object char_literal170_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:5: 'if' '(' element_value ')' block
            {
            string_literal167=(Token)match(input,177,FOLLOW_177_in_if_stmt1745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal167);


            char_literal168=(Token)match(input,116,FOLLOW_116_in_if_stmt1747); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal168);


            pushFollow(FOLLOW_element_value_in_if_stmt1749);
            element_value169=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value169.getTree());

            char_literal170=(Token)match(input,117,FOLLOW_117_in_if_stmt1751); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal170);


            pushFollow(FOLLOW_block_in_if_stmt1753);
            block171=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block171.getTree());

            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:341:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal172=null;
        ObjcParser.block_return block173 =null;


        Object string_literal172_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:5: 'else' block
            {
            string_literal172=(Token)match(input,171,FOLLOW_171_in_else_stmt1776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal172);


            pushFollow(FOLLOW_block_in_else_stmt1778);
            block173=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block173.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:345:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal174=null;
        ObjcParser.block_return block175 =null;

        ObjcParser.catch_stmt_return catch_stmt176 =null;

        ObjcParser.finally_stmt_return finally_stmt177 =null;


        Object string_literal174_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal174=(Token)match(input,159,FOLLOW_159_in_try_stmt_wrapper1800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal174);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper1803);
            block175=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block175.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:19: ( catch_stmt )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==142) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper1806);
            	    catch_stmt176=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt176.getTree());

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:31: ( finally_stmt )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==146) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper1809);
                    finally_stmt177=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt177.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: catch_stmt, finally_stmt, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:349:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal178=null;
        Token char_literal179=null;
        Token char_literal181=null;
        Token char_literal183=null;
        ObjcParser.name_return name180 =null;

        ObjcParser.name_return name182 =null;

        ObjcParser.block_return block184 =null;


        Object string_literal178_tree=null;
        Object char_literal179_tree=null;
        Object char_literal181_tree=null;
        Object char_literal183_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:4: '@catch' '(' name '*' name ')' block
            {
            string_literal178=(Token)match(input,142,FOLLOW_142_in_catch_stmt1835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal178);


            char_literal179=(Token)match(input,116,FOLLOW_116_in_catch_stmt1838); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal179);


            pushFollow(FOLLOW_name_in_catch_stmt1841);
            name180=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name180.getTree());

            char_literal181=(Token)match(input,118,FOLLOW_118_in_catch_stmt1844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal181);


            pushFollow(FOLLOW_name_in_catch_stmt1846);
            name182=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name182.getTree());

            char_literal183=(Token)match(input,117,FOLLOW_117_in_catch_stmt1849); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal183);


            pushFollow(FOLLOW_block_in_catch_stmt1852);
            block184=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block184.getTree());

            // AST REWRITE
            // elements: block, name, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal185=null;
        ObjcParser.block_return block186 =null;


        Object string_literal185_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:4: '@finally' block
            {
            string_literal185=(Token)match(input,146,FOLLOW_146_in_finally_stmt1876); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal185);


            pushFollow(FOLLOW_block_in_finally_stmt1879);
            block186=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block186.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt187 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1898);
            throw_stmt187=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt187.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:361:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal188=null;
        Token char_literal190=null;
        ObjcParser.element_value_return element_value189 =null;


        Object string_literal188_tree=null;
        Object char_literal190_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal188=(Token)match(input,158,FOLLOW_158_in_throw_stmt1917); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal188_tree = 
            (Object)adaptor.create(string_literal188)
            ;
            adaptor.addChild(root_0, string_literal188_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt1919);
            element_value189=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value189.getTree());

            char_literal190=(Token)match(input,130,FOLLOW_130_in_throw_stmt1921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal190_tree = 
            (Object)adaptor.create(char_literal190)
            ;
            adaptor.addChild(root_0, char_literal190_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:365:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID191=null;

        Object ID191_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:4: ID
            {
            ID191=(Token)match(input,ID,FOLLOW_ID_in_name1932); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID191);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:369:1: name_number : ( ID -> ^( NAME ID ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID192=null;
        Token NUMBER_LITERAL193=null;

        Object ID192_tree=null;
        Object NUMBER_LITERAL193_tree=null;
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:3: ( ID -> ^( NAME ID ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) )
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ID) ) {
                alt24=1;
            }
            else if ( (LA24_0==NUMBER_LITERAL) ) {
                alt24=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }
            switch (alt24) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:5: ID
                    {
                    ID192=(Token)match(input,ID,FOLLOW_ID_in_name_number1952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID192);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 370:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:5: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL193=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number1966); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL193);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 371:20: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:23: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper194 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper1989);
            field_declaration_wrapper194=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper194.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment195 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2012);
            variable_assignment195=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment195.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper196 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper197 =null;

        ObjcParser.element_value_return element_value198 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2035);
            object_access_wrapper196=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper196.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2037);
            op_assign_wrapper197=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper197.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2039);
            element_value198=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value198.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper199 =null;

        ObjcParser.method_implementation_common_return method_implementation_common200 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2052);
            method_modifier_wrapper199=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper199.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2054);
            method_implementation_common200=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common200.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:389:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal201=null;
        Token char_literal203=null;
        ObjcParser.type_declaration_return type_declaration202 =null;

        ObjcParser.method_name_return method_name204 =null;

        ObjcParser.method_params_return method_params205 =null;


        Object char_literal201_tree=null;
        Object char_literal203_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:6: '(' type_declaration ')' method_name
            {
            char_literal201=(Token)match(input,116,FOLLOW_116_in_method_implementation_common2067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal201_tree = 
            (Object)adaptor.create(char_literal201)
            ;
            adaptor.addChild(root_0, char_literal201_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2069);
            type_declaration202=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration202.getTree());

            char_literal203=(Token)match(input,117,FOLLOW_117_in_method_implementation_common2071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal203_tree = 
            (Object)adaptor.create(char_literal203)
            ;
            adaptor.addChild(root_0, char_literal203_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2073);
            method_name204=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name204.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:44: ( method_params )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ID||LA25_0==129) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2076);
                    method_params205=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params205.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation206 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper207 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:393:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:393:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2088);
            method_implementation206=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation206.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2092);
            block_multiline_wrapper207=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper207.getTree());

            // AST REWRITE
            // elements: block_multiline_wrapper, method_implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 394:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:397:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call208 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2115);
            classical_method_call208=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call208.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 398:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:401:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal212=null;
        ObjcParser.name_return name209 =null;

        ObjcParser.access_wrapper_return access_wrapper210 =null;

        ObjcParser.name_return name211 =null;


        Object char_literal212_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2136);
            name209=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name209.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:10: ( access_wrapper name )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( ((LA26_0 >= 127 && LA26_0 <= 128)) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2139);
            	    access_wrapper210=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper210.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2141);
            	    name211=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name211.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            char_literal212=(Token)match(input,116,FOLLOW_116_in_clasical_method_call_predicate2145); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal212_tree = 
            (Object)adaptor.create(char_literal212)
            ;
            adaptor.addChild(root_0, char_literal212_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:405:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal216=null;
        Token char_literal218=null;
        ObjcParser.name_return name213 =null;

        ObjcParser.access_wrapper_return access_wrapper214 =null;

        ObjcParser.name_return name215 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push217 =null;


        Object char_literal216_tree=null;
        Object char_literal218_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2160);
            name213=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name213.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:10: ( access_wrapper name )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( ((LA27_0 >= 127 && LA27_0 <= 128)) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2163);
            	    access_wrapper214=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper214.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2165);
            	    name215=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name215.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal216=(Token)match(input,116,FOLLOW_116_in_classical_method_call2170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal216_tree = 
            (Object)adaptor.create(char_literal216)
            ;
            adaptor.addChild(root_0, char_literal216_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:38: ( classical_method_params_push )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==BOOL_LITERAL||LA28_0==ID||LA28_0==NUMBER_LITERAL||(LA28_0 >= STRING_LITERAL && LA28_0 <= STRING_OBJC)||LA28_0==110||LA28_0==114||LA28_0==116||LA28_0==121||(LA28_0 >= 124 && LA28_0 <= 125)||LA28_0==155||LA28_0==161||LA28_0==164||LA28_0==195) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2172);
                    classical_method_params_push217=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push217.getTree());

                    }
                    break;

            }


            char_literal218=(Token)match(input,117,FOLLOW_117_in_classical_method_call2175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal218_tree = 
            (Object)adaptor.create(char_literal218)
            ;
            adaptor.addChild(root_0, char_literal218_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal220=null;
        ObjcParser.method_param_push_return method_param_push219 =null;

        ObjcParser.method_param_push_return method_param_push221 =null;


        Object char_literal220_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2190);
            method_param_push219=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push219.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:24: ( ',' method_param_push )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==123) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:25: ',' method_param_push
            	    {
            	    char_literal220=(Token)match(input,123,FOLLOW_123_in_classical_method_params_push2193); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal220);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2195);
            	    method_param_push221=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push221.getTree());

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:413:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal224=null;
        Token char_literal225=null;
        ObjcParser.method_param_push_return method_param_push222 =null;

        ObjcParser.prefix_return prefix223 =null;

        ObjcParser.method_param_push_return method_param_push226 =null;


        Object char_literal224_tree=null;
        Object char_literal225_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2219);
            method_param_push222=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push222.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ID||LA31_0==123) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:23: ( ( prefix ':' ) | ',' )
            	    int alt30=2;
            	    int LA30_0 = input.LA(1);

            	    if ( (LA30_0==ID) ) {
            	        alt30=1;
            	    }
            	    else if ( (LA30_0==123) ) {
            	        alt30=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 30, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt30) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2224);
            	            prefix223=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix223.getTree());

            	            char_literal224=(Token)match(input,129,FOLLOW_129_in_method_params_push2226); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_129.add(char_literal224);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:39: ','
            	            {
            	            char_literal225=(Token)match(input,123,FOLLOW_123_in_method_params_push2231); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_123.add(char_literal225);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2234);
            	    method_param_push226=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push226.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 414:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:1: method_param_push : element_value -> ^( METHOD_PARAM element_value ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.element_value_return element_value227 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:417:3: ( element_value -> ^( METHOD_PARAM element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:417:5: element_value
            {
            pushFollow(FOLLOW_element_value_in_method_param_push2255);
            element_value227=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value227.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 417:19: -> ^( METHOD_PARAM element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:417:22: ^( METHOD_PARAM element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal228=null;
        Token char_literal231=null;
        Token char_literal233=null;
        ObjcParser.element_value_return element_value229 =null;

        ObjcParser.method_name_return method_name230 =null;

        ObjcParser.method_params_push_return method_params_push232 =null;


        Object char_literal228_tree=null;
        Object char_literal231_tree=null;
        Object char_literal233_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal228=(Token)match(input,161,FOLLOW_161_in_method_msg2277); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(char_literal228);


            pushFollow(FOLLOW_element_value_in_method_msg2279);
            element_value229=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value229.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2281);
            method_name230=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name230.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:35: ( ':' method_params_push )?
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==129) ) {
                alt32=1;
            }
            switch (alt32) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:36: ':' method_params_push
                    {
                    char_literal231=(Token)match(input,129,FOLLOW_129_in_method_msg2284); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal231);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2286);
                    method_params_push232=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push232.getTree());

                    }
                    break;

            }


            char_literal233=(Token)match(input,162,FOLLOW_162_in_method_msg2290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(char_literal233);


            // AST REWRITE
            // elements: element_value, method_name, method_params_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 421:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:1: questionmark_if_stmt : ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal234=null;
        Token char_literal236=null;
        ObjcParser.element_value_return element_value235 =null;

        ObjcParser.element_value_return element_value237 =null;


        Object char_literal234_tree=null;
        Object char_literal236_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:3: ( ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:5: ( '?' element_value ':' element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:5: ( '?' element_value ':' element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:6: '?' element_value ':' element_value
            {
            char_literal234=(Token)match(input,141,FOLLOW_141_in_questionmark_if_stmt2316); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal234);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2318);
            element_value235=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value235.getTree());

            char_literal236=(Token)match(input,129,FOLLOW_129_in_questionmark_if_stmt2320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal236);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2322);
            element_value237=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value237.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 425:43: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:46: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression238 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:2: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:4: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2347);
            simple_expression238=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression238.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 429:22: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:429:25: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal239=null;
        ObjcParser.element_value_return element_value240 =null;


        Object char_literal239_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:5: ( ';' | element_value )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==130) ) {
                alt33=1;
            }
            else if ( (LA33_0==BOOL_LITERAL||LA33_0==ID||LA33_0==NUMBER_LITERAL||(LA33_0 >= STRING_LITERAL && LA33_0 <= STRING_OBJC)||LA33_0==110||LA33_0==114||LA33_0==116||LA33_0==121||(LA33_0 >= 124 && LA33_0 <= 125)||LA33_0==155||LA33_0==161||LA33_0==164||LA33_0==195) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;

            }
            switch (alt33) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:6: ';'
                    {
                    char_literal239=(Token)match(input,130,FOLLOW_130_in_element_value_or_semicolon2370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal239_tree = 
                    (Object)adaptor.create(char_literal239)
                    ;
                    adaptor.addChild(root_0, char_literal239_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2374);
                    element_value240=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value240.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:1: element_value_or_array_init : ( '{' element_value ( ',' element_value )* '}' -> ^( ARRAY_INIT ( element_value )+ ) | element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal241=null;
        Token char_literal243=null;
        Token char_literal245=null;
        ObjcParser.element_value_return element_value242 =null;

        ObjcParser.element_value_return element_value244 =null;

        ObjcParser.element_value_return element_value246 =null;


        Object char_literal241_tree=null;
        Object char_literal243_tree=null;
        Object char_literal245_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:3: ( '{' element_value ( ',' element_value )* '}' -> ^( ARRAY_INIT ( element_value )+ ) | element_value )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==190) ) {
                alt35=1;
            }
            else if ( (LA35_0==BOOL_LITERAL||LA35_0==ID||LA35_0==NUMBER_LITERAL||(LA35_0 >= STRING_LITERAL && LA35_0 <= STRING_OBJC)||LA35_0==110||LA35_0==114||LA35_0==116||LA35_0==121||(LA35_0 >= 124 && LA35_0 <= 125)||LA35_0==155||LA35_0==161||LA35_0==164||LA35_0==195) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:5: '{' element_value ( ',' element_value )* '}'
                    {
                    char_literal241=(Token)match(input,190,FOLLOW_190_in_element_value_or_array_init2390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal241);


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2392);
                    element_value242=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value242.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:23: ( ',' element_value )*
                    loop34:
                    do {
                        int alt34=2;
                        int LA34_0 = input.LA(1);

                        if ( (LA34_0==123) ) {
                            alt34=1;
                        }


                        switch (alt34) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:24: ',' element_value
                    	    {
                    	    char_literal243=(Token)match(input,123,FOLLOW_123_in_element_value_or_array_init2395); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_123.add(char_literal243);


                    	    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2397);
                    	    element_value244=element_value();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_element_value.add(element_value244.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);


                    char_literal245=(Token)match(input,194,FOLLOW_194_in_element_value_or_array_init2401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(char_literal245);


                    // AST REWRITE
                    // elements: element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 437:48: -> ^( ARRAY_INIT ( element_value )+ )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:51: ^( ARRAY_INIT ( element_value )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        if ( !(stream_element_value.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:5: element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2416);
                    element_value246=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value246.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:441:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set247=null;

        Object set247_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set247=(Token)input.LT(1);

            if ( input.LA(1)==121||input.LA(1)==125 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set247)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1248 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt249 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2451);
            cast_unary_expression1248=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1248.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop36:
            do {
                int alt36=2;
                switch ( input.LA(1) ) {
                case 120:
                case 124:
                    {
                    alt36=1;
                    }
                    break;
                case 141:
                    {
                    alt36=1;
                    }
                    break;
                case 111:
                case 113:
                case 114:
                case 118:
                case 131:
                case 132:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 163:
                case 191:
                case 193:
                    {
                    alt36=1;
                    }
                    break;

                }

                switch (alt36) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2453);
            	    op2_unary_expression_or_questionmark_if_stmt249=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt249.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:449:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal250=null;
        ObjcParser.cast_expression_return cast_expression251 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression252 =null;


        Object char_literal250_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==124) ) {
                alt37=1;
            }
            else if ( (LA37_0==BOOL_LITERAL||LA37_0==ID||LA37_0==NUMBER_LITERAL||(LA37_0 >= STRING_LITERAL && LA37_0 <= STRING_OBJC)||LA37_0==110||LA37_0==114||LA37_0==116||LA37_0==121||LA37_0==125||LA37_0==155||LA37_0==161||LA37_0==164||LA37_0==195) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:5: '-' cast_expression
                    {
                    char_literal250=(Token)match(input,124,FOLLOW_124_in_cast_unary_expression12468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal250);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12470);
                    cast_expression251=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression251.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 450:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12484);
                    cast_unary_expression252=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression252.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression2 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper253 =null;

        ObjcParser.cast_unary_expression2_return cast_unary_expression2254 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt255 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:3: ( ( op2_wrapper cast_unary_expression2 ) | questionmark_if_stmt )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==111||(LA38_0 >= 113 && LA38_0 <= 114)||LA38_0==118||LA38_0==120||LA38_0==124||(LA38_0 >= 131 && LA38_0 <= 132)||(LA38_0 >= 134 && LA38_0 <= 139)||LA38_0==163||LA38_0==191||LA38_0==193) ) {
                alt38=1;
            }
            else if ( (LA38_0==141) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;

            }
            switch (alt38) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: ( op2_wrapper cast_unary_expression2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: ( op2_wrapper cast_unary_expression2 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:6: op2_wrapper cast_unary_expression2
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2498);
                    op2_wrapper253=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper253.getTree());

                    pushFollow(FOLLOW_cast_unary_expression2_in_op2_unary_expression_or_questionmark_if_stmt2500);
                    cast_unary_expression2254=cast_unary_expression2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression2254.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2507);
                    questionmark_if_stmt255=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt255.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal258=null;
        Token char_literal260=null;
        ObjcParser.cast_expression_return cast_expression256 =null;

        ObjcParser.increment_decrement_return increment_decrement257 =null;

        ObjcParser.cast_expression_return cast_expression259 =null;

        ObjcParser.cast_expression_return cast_expression261 =null;

        ObjcParser.increment_decrement_return increment_decrement262 =null;

        ObjcParser.cast_expression_return cast_expression263 =null;


        Object char_literal258_tree=null;
        Object char_literal260_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt40=4;
            switch ( input.LA(1) ) {
            case BOOL_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case STRING_OBJC:
            case 114:
            case 116:
            case 155:
            case 161:
            case 164:
                {
                alt40=1;
                }
                break;
            case 110:
                {
                alt40=2;
                }
                break;
            case 195:
                {
                alt40=3;
                }
                break;
            case 121:
            case 125:
                {
                alt40=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;

            }

            switch (alt40) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2520);
                    cast_expression256=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression256.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:21: ( increment_decrement )?
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==121||LA39_0==125) ) {
                        alt39=1;
                    }
                    switch (alt39) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2522);
                            increment_decrement257=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement257.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:5: '!' cast_expression
                    {
                    char_literal258=(Token)match(input,110,FOLLOW_110_in_cast_unary_expression2529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_110.add(char_literal258);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2531);
                    cast_expression259=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression259.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 461:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:5: '~' cast_expression
                    {
                    char_literal260=(Token)match(input,195,FOLLOW_195_in_cast_unary_expression2545); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(char_literal260);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2547);
                    cast_expression261=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression261.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 462:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2561);
                    increment_decrement262=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement262.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2563);
                    cast_expression263=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression263.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_unary_expression2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:466:1: cast_unary_expression2 : cast_unary_expression ;
    public final ObjcParser.cast_unary_expression2_return cast_unary_expression2() throws RecognitionException {
        ObjcParser.cast_unary_expression2_return retval = new ObjcParser.cast_unary_expression2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression_return cast_unary_expression264 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:3: ( cast_unary_expression )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: cast_unary_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression22576);
            cast_unary_expression264=cast_unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression264.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression2"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal267=null;
        Token char_literal270=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper265 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access266 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper268 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access269 =null;

        ObjcParser.access_wrapper_return access_wrapper271 =null;

        ObjcParser.name_return name272 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access273 =null;


        Object char_literal267_tree=null;
        Object char_literal270_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:3: ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access )
            int alt42=3;
            alt42 = dfa42.predict(input);
            switch (alt42) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:5: ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2597);
                    type_cast_wrapper265=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper265.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2599);
                    simple_expression_value_access266=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access266.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal267=(Token)match(input,116,FOLLOW_116_in_cast_expression2612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal267_tree = 
                    (Object)adaptor.create(char_literal267)
                    ;
                    adaptor.addChild(root_0, char_literal267_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2614);
                    type_cast_wrapper268=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper268.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2616);
                    simple_expression_value_access269=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access269.getTree());

                    char_literal270=(Token)match(input,117,FOLLOW_117_in_cast_expression2618); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal270_tree = 
                    (Object)adaptor.create(char_literal270)
                    ;
                    adaptor.addChild(root_0, char_literal270_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:88: ( access_wrapper name )+
                    int cnt41=0;
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( ((LA41_0 >= 127 && LA41_0 <= 128)) ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:89: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression2621);
                    	    access_wrapper271=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper271.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_expression2623);
                    	    name272=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name272.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt41 >= 1 ) break loop41;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(41, input);
                                throw eee;
                        }
                        cnt41++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2631);
                    simple_expression_value_access273=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access273.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:1: simple_expression_value_access : ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal277=null;
        Token char_literal279=null;
        ObjcParser.simple_expression_value_return simple_expression_value274 =null;

        ObjcParser.access_wrapper_return access_wrapper275 =null;

        ObjcParser.name_return name276 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push278 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2280 =null;

        ObjcParser.access_wrapper_return access_wrapper281 =null;

        ObjcParser.name_return name282 =null;


        Object char_literal277_tree=null;
        Object char_literal279_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:3: ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* )
            int alt46=2;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access2658);
                    simple_expression_value274=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value274.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:84: ( access_wrapper name )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( ((LA43_0 >= 127 && LA43_0 <= 128)) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2661);
                    	    access_wrapper275=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper275.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2663);
                    	    name276=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name276.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal277=(Token)match(input,116,FOLLOW_116_in_simple_expression_value_access2668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal277_tree = 
                    (Object)adaptor.create(char_literal277)
                    ;
                    adaptor.addChild(root_0, char_literal277_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:112: ( classical_method_params_push )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==BOOL_LITERAL||LA44_0==ID||LA44_0==NUMBER_LITERAL||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_OBJC)||LA44_0==110||LA44_0==114||LA44_0==116||LA44_0==121||(LA44_0 >= 124 && LA44_0 <= 125)||LA44_0==155||LA44_0==161||LA44_0==164||LA44_0==195) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access2670);
                            classical_method_params_push278=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push278.getTree());

                            }
                            break;

                    }


                    char_literal279=(Token)match(input,117,FOLLOW_117_in_simple_expression_value_access2673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal279_tree = 
                    (Object)adaptor.create(char_literal279)
                    ;
                    adaptor.addChild(root_0, char_literal279_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:5: simple_expression_value2 ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access2680);
                    simple_expression_value2280=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2280.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:30: ( access_wrapper name )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( ((LA45_0 >= 127 && LA45_0 <= 128)) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:31: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2683);
                    	    access_wrapper281=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper281.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2685);
                    	    name282=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name282.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:1: simple_expression_value : ( STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | ( '&' )? name | known_directives -> ^( DIRECTIVE known_directives ) );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL283=null;
        Token STRING_OBJC284=null;
        Token NUMBER_LITERAL285=null;
        Token BOOL_LITERAL286=null;
        Token char_literal287=null;
        ObjcParser.name_return name288 =null;

        ObjcParser.known_directives_return known_directives289 =null;


        Object STRING_LITERAL283_tree=null;
        Object STRING_OBJC284_tree=null;
        Object NUMBER_LITERAL285_tree=null;
        Object BOOL_LITERAL286_tree=null;
        Object char_literal287_tree=null;
        RewriteRuleTokenStream stream_STRING_OBJC=new RewriteRuleTokenStream(adaptor,"token STRING_OBJC");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_BOOL_LITERAL=new RewriteRuleTokenStream(adaptor,"token BOOL_LITERAL");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleSubtreeStream stream_known_directives=new RewriteRuleSubtreeStream(adaptor,"rule known_directives");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:2: ( STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | ( '&' )? name | known_directives -> ^( DIRECTIVE known_directives ) )
            int alt48=6;
            switch ( input.LA(1) ) {
            case STRING_LITERAL:
                {
                alt48=1;
                }
                break;
            case STRING_OBJC:
                {
                alt48=2;
                }
                break;
            case NUMBER_LITERAL:
                {
                alt48=3;
                }
                break;
            case BOOL_LITERAL:
                {
                alt48=4;
                }
                break;
            case ID:
            case 114:
                {
                alt48=5;
                }
                break;
            case 155:
                {
                alt48=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }

            switch (alt48) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:4: STRING_LITERAL
                    {
                    STRING_LITERAL283=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_simple_expression_value2701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL283);


                    // AST REWRITE
                    // elements: STRING_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 483:19: -> ^( STRING STRING_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:22: ^( STRING STRING_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:4: STRING_OBJC
                    {
                    STRING_OBJC284=(Token)match(input,STRING_OBJC,FOLLOW_STRING_OBJC_in_simple_expression_value2714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_OBJC.add(STRING_OBJC284);


                    // AST REWRITE
                    // elements: STRING_OBJC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 484:16: -> ^( STRING STRING_OBJC )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:19: ^( STRING STRING_OBJC )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_OBJC.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL285=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value2727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL285);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 485:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:4: BOOL_LITERAL
                    {
                    BOOL_LITERAL286=(Token)match(input,BOOL_LITERAL,FOLLOW_BOOL_LITERAL_in_simple_expression_value2740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOL_LITERAL.add(BOOL_LITERAL286);


                    // AST REWRITE
                    // elements: BOOL_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 486:17: -> ^( BOOL BOOL_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:20: ^( BOOL BOOL_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_BOOL_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:487:5: ( '&' )? name
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:487:5: ( '&' )?
                    int alt47=2;
                    int LA47_0 = input.LA(1);

                    if ( (LA47_0==114) ) {
                        alt47=1;
                    }
                    switch (alt47) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:487:5: '&'
                            {
                            char_literal287=(Token)match(input,114,FOLLOW_114_in_simple_expression_value2754); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal287_tree = 
                            (Object)adaptor.create(char_literal287)
                            ;
                            adaptor.addChild(root_0, char_literal287_tree);
                            }

                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2757);
                    name288=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name288.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:5: known_directives
                    {
                    pushFollow(FOLLOW_known_directives_in_simple_expression_value2763);
                    known_directives289=known_directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_known_directives.add(known_directives289.getTree());

                    // AST REWRITE
                    // elements: known_directives
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 488:22: -> ^( DIRECTIVE known_directives )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:25: ^( DIRECTIVE known_directives )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                        , root_1);

                        adaptor.addChild(root_1, stream_known_directives.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:1: simple_expression_value2 : ( ( name '[' )=> name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal291=null;
        Token char_literal293=null;
        Token char_literal297=null;
        Token char_literal299=null;
        ObjcParser.name_return name290 =null;

        ObjcParser.element_value_return element_value292 =null;

        ObjcParser.block_call_wrapper_return block_call_wrapper294 =null;

        ObjcParser.simple_expression_value_return simple_expression_value295 =null;

        ObjcParser.method_msg_return method_msg296 =null;

        ObjcParser.element_value_return element_value298 =null;


        Object char_literal291_tree=null;
        Object char_literal293_tree=null;
        Object char_literal297_tree=null;
        Object char_literal299_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:3: ( ( name '[' )=> name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' )
            int alt49=5;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:5: ( name '[' )=> name '[' element_value ']'
                    {
                    pushFollow(FOLLOW_name_in_simple_expression_value22790);
                    name290=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name290.getTree());

                    char_literal291=(Token)match(input,161,FOLLOW_161_in_simple_expression_value22792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(char_literal291);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value22794);
                    element_value292=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value292.getTree());

                    char_literal293=(Token)match(input,162,FOLLOW_162_in_simple_expression_value22796); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(char_literal293);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 492:45: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:48: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:5: block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value22812);
                    block_call_wrapper294=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper294.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value22818);
                    simple_expression_value295=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value295.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value22824);
                    method_msg296=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg296.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal297=(Token)match(input,116,FOLLOW_116_in_simple_expression_value22830); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal297_tree = 
                    (Object)adaptor.create(char_literal297)
                    ;
                    adaptor.addChild(root_0, char_literal297_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value22832);
                    element_value298=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value298.getTree());

                    char_literal299=(Token)match(input,117,FOLLOW_117_in_simple_expression_value22834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal299_tree = 
                    (Object)adaptor.create(char_literal299)
                    ;
                    adaptor.addChild(root_0, char_literal299_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2300 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper2848);
            op2300=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2300.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 500:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set301=null;

        Object set301_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set301=(Token)input.LT(1);

            if ( input.LA(1)==111||(input.LA(1) >= 113 && input.LA(1) <= 114)||input.LA(1)==118||input.LA(1)==120||input.LA(1)==124||(input.LA(1) >= 131 && input.LA(1) <= 132)||(input.LA(1) >= 134 && input.LA(1) <= 139)||input.LA(1)==163||input.LA(1)==191||input.LA(1)==193 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set301)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign302 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper2945);
            op_assign302=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign302.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 506:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set303=null;

        Object set303_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set303=(Token)input.LT(1);

            if ( input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||input.LA(1)==126||input.LA(1)==133||input.LA(1)==135||input.LA(1)==140||input.LA(1)==192 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set303)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class known_directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "known_directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:1: known_directives : '@selector' ;
    public final ObjcParser.known_directives_return known_directives() throws RecognitionException {
        ObjcParser.known_directives_return retval = new ObjcParser.known_directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal304=null;

        Object string_literal304_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:514:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal304=(Token)match(input,155,FOLLOW_155_in_known_directives3011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal304_tree = 
            (Object)adaptor.create(string_literal304)
            ;
            adaptor.addChild(root_0, string_literal304_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "known_directives"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name305 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3026);
            type_cast_name305=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name305.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 518:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal306=null;
        Token char_literal308=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration307 =null;


        Object char_literal306_tree=null;
        Object char_literal308_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal306=(Token)match(input,116,FOLLOW_116_in_type_cast_name3049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal306_tree = 
            (Object)adaptor.create(char_literal306)
            ;
            adaptor.addChild(root_0, char_literal306_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3051);
            type_cast_declaration307=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration307.getTree());

            char_literal308=(Token)match(input,117,FOLLOW_117_in_type_cast_name3053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal308_tree = 
            (Object)adaptor.create(char_literal308)
            ;
            adaptor.addChild(root_0, char_literal308_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:526:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol309 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration310 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==176) ) {
                int LA50_1 = input.LA(2);

                if ( (LA50_1==131) ) {
                    switch ( input.LA(3) ) {
                    case 179:
                        {
                        int LA50_18 = input.LA(4);

                        if ( (LA50_18==137) ) {
                            int LA50_23 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 23, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 18, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 176:
                        {
                        int LA50_19 = input.LA(4);

                        if ( (LA50_19==137) ) {
                            int LA50_24 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 24, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 180:
                        {
                        switch ( input.LA(4) ) {
                        case 179:
                            {
                            int LA50_25 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 25, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 137:
                            {
                            int LA50_26 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 26, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 180:
                            {
                            int LA50_27 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 27, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 20, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 182:
                        {
                        switch ( input.LA(4) ) {
                        case 179:
                            {
                            int LA50_28 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 137:
                            {
                            int LA50_29 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 182:
                            {
                            int LA50_30 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 21, input);

                            throw nvae;

                        }

                        }
                        break;
                    case ID:
                        {
                        int LA50_22 = input.LA(4);

                        if ( (LA50_22==137) ) {
                            int LA50_31 = input.LA(5);

                            if ( (synpred8_Objc()) ) {
                                alt50=1;
                            }
                            else if ( (true) ) {
                                alt50=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 50, 31, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 50, 22, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 50, 12, input);

                        throw nvae;

                    }

                }
                else if ( (LA50_1==114||(LA50_1 >= 117 && LA50_1 <= 118)||LA50_1==161||LA50_1==167) ) {
                    alt50=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 50, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA50_0==ID||LA50_0==116||LA50_0==167||LA50_0==172||(LA50_0 >= 179 && LA50_0 <= 180)||LA50_0==182||LA50_0==184||(LA50_0 >= 187 && LA50_0 <= 188)) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3071);
                    type_declaration_protocol309=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol309.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3077);
                    classical_type_declaration310=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration310.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:531:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set311=null;

        Object set311_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:532:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set311=(Token)input.LT(1);

            if ( (input.LA(1) >= 127 && input.LA(1) <= 128) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set311)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access312 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3105);
            access312=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access312.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 536:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:539:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access313 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:540:2: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:540:4: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3123);
            object_access313=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access313.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 540:18: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:540:21: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:1: object_access : name ( ')' )? ( access_wrapper name ( ')' )? )* ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal315=null;
        Token char_literal318=null;
        ObjcParser.name_return name314 =null;

        ObjcParser.access_wrapper_return access_wrapper316 =null;

        ObjcParser.name_return name317 =null;


        Object char_literal315_tree=null;
        Object char_literal318_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:2: ( name ( ')' )? ( access_wrapper name ( ')' )? )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:4: name ( ')' )? ( access_wrapper name ( ')' )? )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access3142);
            name314=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name314.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:9: ( ')' )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==117) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:9: ')'
                    {
                    char_literal315=(Token)match(input,117,FOLLOW_117_in_object_access3144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal315_tree = 
                    (Object)adaptor.create(char_literal315)
                    ;
                    adaptor.addChild(root_0, char_literal315_tree);
                    }

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:14: ( access_wrapper name ( ')' )? )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( ((LA53_0 >= 127 && LA53_0 <= 128)) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:15: access_wrapper name ( ')' )?
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access3148);
            	    access_wrapper316=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper316.getTree());

            	    pushFollow(FOLLOW_name_in_object_access3150);
            	    name317=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name317.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:35: ( ')' )?
            	    int alt52=2;
            	    int LA52_0 = input.LA(1);

            	    if ( (LA52_0==117) ) {
            	        alt52=1;
            	    }
            	    switch (alt52) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:544:35: ')'
            	            {
            	            char_literal318=(Token)match(input,117,FOLLOW_117_in_object_access3152); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal318_tree = 
            	            (Object)adaptor.create(char_literal318)
            	            ;
            	            adaptor.addChild(root_0, char_literal318_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:1: break_stmt : 'break' ';' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal319=null;
        Token char_literal320=null;

        Object string_literal319_tree=null;
        Object char_literal320_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:3: ( 'break' ';' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:5: 'break' ';'
            {
            string_literal319=(Token)match(input,165,FOLLOW_165_in_break_stmt3169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal319);


            char_literal320=(Token)match(input,130,FOLLOW_130_in_break_stmt3171); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal320);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 548:17: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:20: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:1: continue_stmt : 'continue' ';' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal321=null;
        Token char_literal322=null;

        Object string_literal321_tree=null;
        Object char_literal322_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:3: ( 'continue' ';' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:5: 'continue' ';'
            {
            string_literal321=(Token)match(input,168,FOLLOW_168_in_continue_stmt3192); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal321);


            char_literal322=(Token)match(input,130,FOLLOW_130_in_continue_stmt3194); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal322);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:20: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:22: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration323 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3220);
            extern_declaration323=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration323.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 559:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:561:1: extern_declaration : 'extern' field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal324=null;
        ObjcParser.field_declaration_return field_declaration325 =null;


        Object string_literal324_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:3: ( 'extern' field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:562:5: 'extern' field_declaration
            {
            root_0 = (Object)adaptor.nil();


            string_literal324=(Token)match(input,173,FOLLOW_173_in_extern_declaration3241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal324_tree = 
            (Object)adaptor.create(string_literal324)
            ;
            adaptor.addChild(root_0, string_literal324_tree);
            }

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3243);
            field_declaration325=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration325.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix326 =null;

        ObjcParser.method_declaration_return method_declaration327 =null;

        ObjcParser.property_prefix_return property_prefix328 =null;

        ObjcParser.optional_prefix_return optional_prefix329 =null;

        ObjcParser.field_declaration_return field_declaration330 =null;

        ObjcParser.comments_return comments331 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY field_declaration ) | comments )
            int alt56=3;
            switch ( input.LA(1) ) {
            case 120:
            case 124:
            case 149:
                {
                alt56=1;
                }
                break;
            case 151:
                {
                alt56=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }

            switch (alt56) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:5: ( optional_prefix )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==149) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3255);
                            optional_prefix326=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix326.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations3258);
                    method_declaration327=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration327.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 565:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations3272);
                    property_prefix328=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix328.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:21: ( optional_prefix )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==149) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3274);
                            optional_prefix329=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix329.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations3277);
                    field_declaration330=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration330.getTree());

                    // AST REWRITE
                    // elements: field_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 566:56: -> ^( PROPERTY field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:59: ^( PROPERTY field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations3291);
                    comments331=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments331.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:570:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration332 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper3306);
            field_declaration332=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration332.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 571:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:1: optional_prefix : '@optional' ;
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal333=null;

        Object string_literal333_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:3: ( '@optional' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:5: '@optional'
            {
            root_0 = (Object)adaptor.nil();


            string_literal333=(Token)match(input,149,FOLLOW_149_in_optional_prefix3329); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal333_tree = 
            (Object)adaptor.create(string_literal333)
            ;
            adaptor.addChild(root_0, string_literal333_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal334=null;

        Object string_literal334_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal334=(Token)match(input,160,FOLLOW_160_in_ns_inline3341); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal334_tree = 
            (Object)adaptor.create(string_literal334)
            ;
            adaptor.addChild(root_0, string_literal334_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal335=null;
        Token char_literal336=null;
        Token char_literal338=null;
        Token char_literal340=null;
        Token char_literal342=null;
        Token char_literal344=null;
        ObjcParser.name_return name337 =null;

        ObjcParser.name_return name339 =null;

        ObjcParser.name_return name341 =null;

        ObjcParser.name_return name343 =null;


        Object string_literal335_tree=null;
        Object char_literal336_tree=null;
        Object char_literal338_tree=null;
        Object char_literal340_tree=null;
        Object char_literal342_tree=null;
        Object char_literal344_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal335=(Token)match(input,151,FOLLOW_151_in_property_prefix3353); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal335_tree = 
            (Object)adaptor.create(string_literal335)
            ;
            adaptor.addChild(root_0, string_literal335_tree);
            }

            char_literal336=(Token)match(input,116,FOLLOW_116_in_property_prefix3355); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal336_tree = 
            (Object)adaptor.create(char_literal336)
            ;
            adaptor.addChild(root_0, char_literal336_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix3357);
            name337=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name337.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:26: ( '=' name )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==135) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:27: '=' name
                    {
                    char_literal338=(Token)match(input,135,FOLLOW_135_in_property_prefix3360); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal338_tree = 
                    (Object)adaptor.create(char_literal338)
                    ;
                    adaptor.addChild(root_0, char_literal338_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix3362);
                    name339=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name339.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:38: ( ',' name ( '=' name )? )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==123) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:39: ',' name ( '=' name )?
            	    {
            	    char_literal340=(Token)match(input,123,FOLLOW_123_in_property_prefix3367); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal340_tree = 
            	    (Object)adaptor.create(char_literal340)
            	    ;
            	    adaptor.addChild(root_0, char_literal340_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix3369);
            	    name341=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name341.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:48: ( '=' name )?
            	    int alt58=2;
            	    int LA58_0 = input.LA(1);

            	    if ( (LA58_0==135) ) {
            	        alt58=1;
            	    }
            	    switch (alt58) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:49: '=' name
            	            {
            	            char_literal342=(Token)match(input,135,FOLLOW_135_in_property_prefix3372); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal342_tree = 
            	            (Object)adaptor.create(char_literal342)
            	            ;
            	            adaptor.addChild(root_0, char_literal342_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix3374);
            	            name343=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name343.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            char_literal344=(Token)match(input,117,FOLLOW_117_in_property_prefix3380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal344_tree = 
            (Object)adaptor.create(char_literal344)
            ;
            adaptor.addChild(root_0, char_literal344_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration345 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:592:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:592:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper3393);
            interface_declaration345=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration345.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 592:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:592:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration346 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3413);
            protocol_declaration346=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration346.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 595:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:597:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal347=null;
        ObjcParser.typedef_declaration_return typedef_declaration348 =null;


        Object string_literal347_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:5: 'typedef' typedef_declaration
            {
            string_literal347=(Token)match(input,186,FOLLOW_186_in_typedef_declaration_wrapper3431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal347);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3433);
            typedef_declaration348=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration348.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:600:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal351=null;
        Token char_literal353=null;
        ObjcParser.typedef_internal_return typedef_internal349 =null;

        ObjcParser.typedef_name_return typedef_name350 =null;

        ObjcParser.typedef_name_return typedef_name352 =null;


        Object char_literal351_tree=null;
        Object char_literal353_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration3451);
            typedef_internal349=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal349.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration3453);
            typedef_name350=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name350.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:35: ( ',' typedef_name )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==123) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:36: ',' typedef_name
            	    {
            	    char_literal351=(Token)match(input,123,FOLLOW_123_in_typedef_declaration3456); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal351_tree = 
            	    (Object)adaptor.create(char_literal351)
            	    ;
            	    adaptor.addChild(root_0, char_literal351_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration3458);
            	    typedef_name352=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name352.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            char_literal353=(Token)match(input,130,FOLLOW_130_in_typedef_declaration3462); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal353_tree = 
            (Object)adaptor.create(char_literal353)
            ;
            adaptor.addChild(root_0, char_literal353_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:603:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal354=null;
        Token char_literal355=null;
        Token char_literal357=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane356 =null;


        Object char_literal354_tree=null;
        Object char_literal355_tree=null;
        Object char_literal357_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal354=(Token)match(input,116,FOLLOW_116_in_func_pointer_predicate3474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal354_tree = 
            (Object)adaptor.create(char_literal354)
            ;
            adaptor.addChild(root_0, char_literal354_tree);
            }

            char_literal355=(Token)match(input,118,FOLLOW_118_in_func_pointer_predicate3476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal355_tree = 
            (Object)adaptor.create(char_literal355)
            ;
            adaptor.addChild(root_0, char_literal355_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate3478);
            type_declaration_plane356=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane356.getTree());

            char_literal357=(Token)match(input,117,FOLLOW_117_in_func_pointer_predicate3480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal357_tree = 
            (Object)adaptor.create(char_literal357)
            ;
            adaptor.addChild(root_0, char_literal357_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal358=null;
        Token char_literal359=null;
        Token char_literal361=null;
        Token char_literal362=null;
        Token char_literal364=null;
        Token char_literal366=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane360 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane363 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane365 =null;


        Object char_literal358_tree=null;
        Object char_literal359_tree=null;
        Object char_literal361_tree=null;
        Object char_literal362_tree=null;
        Object char_literal364_tree=null;
        Object char_literal366_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal358=(Token)match(input,116,FOLLOW_116_in_func_pointer3495); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal358);


            char_literal359=(Token)match(input,118,FOLLOW_118_in_func_pointer3497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal359);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3499);
            type_declaration_plane360=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane360.getTree());

            char_literal361=(Token)match(input,117,FOLLOW_117_in_func_pointer3501); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal361);


            char_literal362=(Token)match(input,116,FOLLOW_116_in_func_pointer3503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal362);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==ID||LA62_0==167||LA62_0==176||(LA62_0 >= 179 && LA62_0 <= 180)||LA62_0==182||LA62_0==188) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3506);
                    type_declaration_plane363=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane363.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:68: ( ',' type_declaration_plane )*
                    loop61:
                    do {
                        int alt61=2;
                        int LA61_0 = input.LA(1);

                        if ( (LA61_0==123) ) {
                            alt61=1;
                        }


                        switch (alt61) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:69: ',' type_declaration_plane
                    	    {
                    	    char_literal364=(Token)match(input,123,FOLLOW_123_in_func_pointer3509); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_123.add(char_literal364);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3511);
                    	    type_declaration_plane365=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane365.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal366=(Token)match(input,117,FOLLOW_117_in_func_pointer3517); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal366);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer367 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct368 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum369 =null;

        ObjcParser.type_declaration_union_return type_declaration_union370 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane371 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt63=5;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==116) && (synpred9_Objc())) {
                alt63=1;
            }
            else if ( (LA63_0==184) ) {
                alt63=2;
            }
            else if ( (LA63_0==172) ) {
                alt63=3;
            }
            else if ( (LA63_0==187) ) {
                alt63=4;
            }
            else if ( (LA63_0==ID||LA63_0==167||LA63_0==176||(LA63_0 >= 179 && LA63_0 <= 180)||LA63_0==182||LA63_0==188) ) {
                alt63=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal3546);
                    func_pointer367=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer367.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal3552);
                    type_declaration_struct368=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct368.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal3558);
                    type_declaration_enum369=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum369.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal3564);
                    type_declaration_union370=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union370.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal3570);
                    type_declaration_plane371=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane371.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID372=null;

        Object ID372_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:5: ID
            {
            ID372=(Token)match(input,ID,FOLLOW_ID_in_typedef_name3585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID372);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 620:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:622:1: forward_class_declaration : '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) ;
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal373=null;
        Token char_literal375=null;
        ObjcParser.class_name_return class_name374 =null;


        Object string_literal373_tree=null;
        Object char_literal375_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:5: '@class' class_name ';'
            {
            string_literal373=(Token)match(input,143,FOLLOW_143_in_forward_class_declaration3603); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(string_literal373);


            pushFollow(FOLLOW_class_name_in_forward_class_declaration3605);
            class_name374=class_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_class_name.add(class_name374.getTree());

            char_literal375=(Token)match(input,130,FOLLOW_130_in_forward_class_declaration3607); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal375);


            // AST REWRITE
            // elements: class_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 623:29: -> ^( FORWARD_DECLARATION class_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:31: ^( FORWARD_DECLARATION class_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                , root_1);

                adaptor.addChild(root_1, stream_class_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:626:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID376=null;

        Object ID376_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:5: ID
            {
            ID376=(Token)match(input,ID,FOLLOW_ID_in_class_name3628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID376);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 627:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal377=null;
        ObjcParser.protocol_name_return protocol_name378 =null;

        ObjcParser.implements_interfaces_return implements_interfaces379 =null;

        ObjcParser.class_protocol_end_return class_protocol_end380 =null;


        Object string_literal377_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal377=(Token)match(input,153,FOLLOW_153_in_protocol_declaration3648); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal377_tree = 
            (Object)adaptor.create(string_literal377)
            ;
            adaptor.addChild(root_0, string_literal377_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration3650);
            protocol_name378=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name378.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:31: ( implements_interfaces )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==131) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration3652);
                    implements_interfaces379=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces379.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration3660);
            class_protocol_end380=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end380.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:1: class_protocol_end : ( class_protocol_end1 | class_protocol_end2 );
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.class_protocol_end1_return class_protocol_end1381 =null;

        ObjcParser.class_protocol_end2_return class_protocol_end2382 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:3: ( class_protocol_end1 | class_protocol_end2 )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==MULTI_COMMENT_LIT||LA65_0==SINGLE_COMMENT_LIT||LA65_0==120||LA65_0==124||LA65_0==145||LA65_0==149||LA65_0==151) ) {
                alt65=1;
            }
            else if ( (LA65_0==130) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:5: class_protocol_end1
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_class_protocol_end1_in_class_protocol_end3674);
                    class_protocol_end1381=class_protocol_end1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end1381.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:636:5: class_protocol_end2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_class_protocol_end2_in_class_protocol_end3680);
                    class_protocol_end2382=class_protocol_end2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end2382.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class class_protocol_end1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:1: class_protocol_end1 : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end1_return class_protocol_end1() throws RecognitionException {
        ObjcParser.class_protocol_end1_return retval = new ObjcParser.class_protocol_end1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal384=null;
        ObjcParser.declarations_return declarations383 =null;


        Object string_literal384_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:639:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:639:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:639:5: ( declarations )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==MULTI_COMMENT_LIT||LA66_0==SINGLE_COMMENT_LIT||LA66_0==120||LA66_0==124||LA66_0==149||LA66_0==151) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:639:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end13690);
            	    declarations383=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations383.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            string_literal384=(Token)match(input,145,FOLLOW_145_in_class_protocol_end13697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal384_tree = 
            (Object)adaptor.create(string_literal384)
            ;
            adaptor.addChild(root_0, string_literal384_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end1"


    public static class class_protocol_end2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:643:1: class_protocol_end2 : ';' ;
    public final ObjcParser.class_protocol_end2_return class_protocol_end2() throws RecognitionException {
        ObjcParser.class_protocol_end2_return retval = new ObjcParser.class_protocol_end2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal385=null;

        Object char_literal385_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:3: ( ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:5: ';'
            {
            root_0 = (Object)adaptor.nil();


            char_literal385=(Token)match(input,130,FOLLOW_130_in_class_protocol_end23712); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal385_tree = 
            (Object)adaptor.create(char_literal385)
            ;
            adaptor.addChild(root_0, char_literal385_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end2"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal386=null;
        Token char_literal388=null;
        ObjcParser.template_internal_return template_internal387 =null;


        Object char_literal386_tree=null;
        Object char_literal388_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal386=(Token)match(input,131,FOLLOW_131_in_template3724); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal386_tree = 
            (Object)adaptor.create(char_literal386)
            ;
            adaptor.addChild(root_0, char_literal386_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template3726);
            template_internal387=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal387.getTree());

            char_literal388=(Token)match(input,137,FOLLOW_137_in_template3728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal388_tree = 
            (Object)adaptor.create(char_literal388)
            ;
            adaptor.addChild(root_0, char_literal388_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols389 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces3737);
            implements_protocols389=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols389.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 650:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal390=null;
        Token char_literal392=null;
        Token char_literal394=null;
        ObjcParser.type_dec_internal_return type_dec_internal391 =null;

        ObjcParser.type_dec_internal_return type_dec_internal393 =null;


        Object char_literal390_tree=null;
        Object char_literal392_tree=null;
        Object char_literal394_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal390=(Token)match(input,131,FOLLOW_131_in_implements_protocols3762); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal390);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols3764);
            type_dec_internal391=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal391.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:27: ( ',' type_dec_internal )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==123) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:28: ',' type_dec_internal
            	    {
            	    char_literal392=(Token)match(input,123,FOLLOW_123_in_implements_protocols3767); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal392);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols3769);
            	    type_dec_internal393=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal393.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            char_literal394=(Token)match(input,137,FOLLOW_137_in_implements_protocols3773); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal394);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal396=null;
        ObjcParser.template_type_return template_type395 =null;

        ObjcParser.template_type_return template_type397 =null;


        Object char_literal396_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal3795);
            template_type395=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type395.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:19: ( ',' template_type )*
            loop68:
            do {
                int alt68=2;
                int LA68_0 = input.LA(1);

                if ( (LA68_0==123) ) {
                    alt68=1;
                }


                switch (alt68) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:658:20: ',' template_type
            	    {
            	    char_literal396=(Token)match(input,123,FOLLOW_123_in_template_internal3798); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal396_tree = 
            	    (Object)adaptor.create(char_literal396)
            	    ;
            	    adaptor.addChild(root_0, char_literal396_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal3800);
            	    template_type397=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type397.getTree());

            	    }
            	    break;

            	default :
            	    break loop68;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal399=null;
        ObjcParser.template_name_return template_name398 =null;

        ObjcParser.template_name_return template_name400 =null;


        Object string_literal399_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:3: ( template_name | 'struct' template_name )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==ID) ) {
                alt69=1;
            }
            else if ( (LA69_0==184) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;

            }
            switch (alt69) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type3814);
                    template_name398=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name398.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal399=(Token)match(input,184,FOLLOW_184_in_template_type3820); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal399_tree = 
                    (Object)adaptor.create(string_literal399)
                    ;
                    adaptor.addChild(root_0, string_literal399_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type3822);
                    template_name400=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name400.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID401=null;

        Object ID401_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:5: ID
            {
            ID401=(Token)match(input,ID,FOLLOW_ID_in_template_name3837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID401);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 666:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID402=null;

        Object ID402_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:670:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:670:5: ID
            {
            ID402=(Token)match(input,ID,FOLLOW_ID_in_protocol_name3860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID402);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 670:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:670:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal403=null;
        Token string_literal408=null;
        ObjcParser.interface_name_return interface_name404 =null;

        ObjcParser.superclass_name_return superclass_name405 =null;

        ObjcParser.fields_body_return fields_body406 =null;

        ObjcParser.declarations_return declarations407 =null;


        Object string_literal403_tree=null;
        Object string_literal408_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal403=(Token)match(input,148,FOLLOW_148_in_interface_declaration3884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal403_tree = 
            (Object)adaptor.create(string_literal403)
            ;
            adaptor.addChild(root_0, string_literal403_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration3886);
            interface_name404=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name404.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration3888);
            superclass_name405=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name405.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:3: ( fields_body )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==190) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration3892);
                    fields_body406=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body406.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:3: ( declarations )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==MULTI_COMMENT_LIT||LA71_0==SINGLE_COMMENT_LIT||LA71_0==120||LA71_0==124||LA71_0==149||LA71_0==151) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration3897);
            	    declarations407=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations407.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            string_literal408=(Token)match(input,145,FOLLOW_145_in_interface_declaration3902); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal408_tree = 
            (Object)adaptor.create(string_literal408)
            ;
            adaptor.addChild(root_0, string_literal408_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal409=null;
        Token char_literal411=null;
        ObjcParser.body_item_return body_item410 =null;


        Object char_literal409_tree=null;
        Object char_literal411_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:680:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:681:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal409=(Token)match(input,190,FOLLOW_190_in_fields_body3919); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal409_tree = 
            (Object)adaptor.create(char_literal409)
            ;
            adaptor.addChild(root_0, char_literal409_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:5: ( body_item )*
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( (LA72_0==ID||LA72_0==MULTI_COMMENT_LIT||LA72_0==SINGLE_COMMENT_LIT||LA72_0==116||LA72_0==150||LA72_0==152||LA72_0==154||LA72_0==167||LA72_0==172||LA72_0==176||(LA72_0 >= 179 && LA72_0 <= 180)||LA72_0==182||LA72_0==184||(LA72_0 >= 186 && LA72_0 <= 188)) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body3925);
            	    body_item410=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item410.getTree());

            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);


            char_literal411=(Token)match(input,194,FOLLOW_194_in_fields_body3930); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal411_tree = 
            (Object)adaptor.create(char_literal411)
            ;
            adaptor.addChild(root_0, char_literal411_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:1: body_item : ( ( group_modifier_wrapper )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper412 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper413 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper414 =null;

        ObjcParser.comments_return comments415 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:3: ( ( group_modifier_wrapper )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==ID||LA75_0==116||LA75_0==150||LA75_0==152||LA75_0==154||LA75_0==167||LA75_0==172||LA75_0==176||(LA75_0 >= 179 && LA75_0 <= 180)||LA75_0==182||LA75_0==184||(LA75_0 >= 186 && LA75_0 <= 188)) ) {
                alt75=1;
            }
            else if ( (LA75_0==MULTI_COMMENT_LIT||LA75_0==SINGLE_COMMENT_LIT) ) {
                alt75=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;

            }
            switch (alt75) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: ( group_modifier_wrapper )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: ( group_modifier_wrapper )?
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==150||LA73_0==152||LA73_0==154) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item3945);
                            group_modifier_wrapper412=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper412.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:29: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==186) ) {
                        alt74=1;
                    }
                    else if ( (LA74_0==ID||LA74_0==116||LA74_0==167||LA74_0==172||LA74_0==176||(LA74_0 >= 179 && LA74_0 <= 180)||LA74_0==182||LA74_0==184||(LA74_0 >= 187 && LA74_0 <= 188)) ) {
                        alt74=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 74, 0, input);

                        throw nvae;

                    }
                    switch (alt74) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:30: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item3949);
                            typedef_declaration_wrapper413=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper413.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:60: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item3953);
                            field_declaration_wrapper414=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper414.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:688:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item3960);
                    comments415=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments415.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:691:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier416 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper3973);
            group_modifier416=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier416.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 692:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set417=null;

        Object set417_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set417=(Token)input.LT(1);

            if ( input.LA(1)==150||input.LA(1)==152||input.LA(1)==154 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set417)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID418=null;
        ObjcParser.category_return category419 =null;


        Object ID418_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:5: ID ( category )?
            {
            ID418=(Token)match(input,ID,FOLLOW_ID_in_interface_name4018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID418);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:8: ( category )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==116) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4020);
                    category419=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category419.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: category, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 698:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal420=null;
        Token ID421=null;
        Token char_literal422=null;

        Object char_literal420_tree=null;
        Object ID421_tree=null;
        Object char_literal422_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:11: '(' ( ID )? ')'
            {
            char_literal420=(Token)match(input,116,FOLLOW_116_in_category4039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal420);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:15: ( ID )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==ID) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:15: ID
                    {
                    ID421=(Token)match(input,ID,FOLLOW_ID_in_category4041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID421);


                    }
                    break;

            }


            char_literal422=(Token)match(input,117,FOLLOW_117_in_category4044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal422);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 700:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal423=null;
        Token ID424=null;
        ObjcParser.implements_interfaces_return implements_interfaces425 =null;


        Object char_literal423_tree=null;
        Object ID424_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:5: ( ':' ID )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==129) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:6: ':' ID
                    {
                    char_literal423=(Token)match(input,129,FOLLOW_129_in_superclass_name4064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal423);


                    ID424=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID424);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:15: ( implements_interfaces )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==131) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4070);
                    implements_interfaces425=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces425.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: implements_interfaces, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 703:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration426 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:5: ( field_declaration )+
            int cnt80=0;
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==ID||LA80_0==116||LA80_0==167||LA80_0==172||LA80_0==176||(LA80_0 >= 179 && LA80_0 <= 180)||LA80_0==182||LA80_0==184||(LA80_0 >= 187 && LA80_0 <= 188)) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4099);
            	    field_declaration426=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration426.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt80 >= 1 ) break loop80;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(80, input);
                        throw eee;
                }
                cnt80++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 707:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:1: field_declaration : ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) ;
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal429=null;
        Token char_literal432=null;
        Token char_literal436=null;
        Token char_literal437=null;
        ObjcParser.type_declaration_return type_declaration427 =null;

        ObjcParser.field_name_return field_name428 =null;

        ObjcParser.field_name_return field_name430 =null;

        ObjcParser.classical_method_params_return classical_method_params431 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper433 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper434 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init435 =null;


        Object char_literal429_tree=null;
        Object char_literal432_tree=null;
        Object char_literal436_tree=null;
        Object char_literal437_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:3: ( ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:6: ( type_declaration field_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:7: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration4123);
            type_declaration427=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration427.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration4125);
            field_name428=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name428.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:36: ( ',' field_name )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==123) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:37: ',' field_name
            	    {
            	    char_literal429=(Token)match(input,123,FOLLOW_123_in_field_declaration4129); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal429_tree = 
            	    (Object)adaptor.create(char_literal429)
            	    ;
            	    adaptor.addChild(root_0, char_literal429_tree);
            	    }

            	    pushFollow(FOLLOW_field_name_in_field_declaration4131);
            	    field_name430=field_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name430.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( ((LA84_0 >= 115 && LA84_0 <= 116)||LA84_0==119||LA84_0==122||LA84_0==126||LA84_0==133||LA84_0==135||LA84_0==140||LA84_0==192) ) {
                alt84=1;
            }
            else if ( (LA84_0==130) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==116) ) {
                        alt83=1;
                    }
                    else if ( (LA83_0==115||LA83_0==119||LA83_0==122||LA83_0==126||LA83_0==133||LA83_0==135||LA83_0==140||LA83_0==192) ) {
                        alt83=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 83, 0, input);

                        throw nvae;

                    }
                    switch (alt83) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:57: classical_method_params ( ';' | block_multiline_wrapper )
                            {
                            pushFollow(FOLLOW_classical_method_params_in_field_declaration4138);
                            classical_method_params431=classical_method_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params431.getTree());

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:81: ( ';' | block_multiline_wrapper )
                            int alt82=2;
                            int LA82_0 = input.LA(1);

                            if ( (LA82_0==130) ) {
                                alt82=1;
                            }
                            else if ( (LA82_0==190) ) {
                                alt82=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 82, 0, input);

                                throw nvae;

                            }
                            switch (alt82) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:82: ';'
                                    {
                                    char_literal432=(Token)match(input,130,FOLLOW_130_in_field_declaration4141); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal432_tree = 
                                    (Object)adaptor.create(char_literal432)
                                    ;
                                    adaptor.addChild(root_0, char_literal432_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:88: block_multiline_wrapper
                                    {
                                    pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4145);
                                    block_multiline_wrapper433=block_multiline_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper433.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:117: op_assign_wrapper element_value_or_array_init ';'
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4152);
                            op_assign_wrapper434=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper434.getTree());

                            pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4154);
                            element_value_or_array_init435=element_value_or_array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init435.getTree());

                            char_literal436=(Token)match(input,130,FOLLOW_130_in_field_declaration4156); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal436_tree = 
                            (Object)adaptor.create(char_literal436)
                            ;
                            adaptor.addChild(root_0, char_literal436_tree);
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:171: ';'
                    {
                    char_literal437=(Token)match(input,130,FOLLOW_130_in_field_declaration4162); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal437_tree = 
                    (Object)adaptor.create(char_literal437)
                    ;
                    adaptor.addChild(root_0, char_literal437_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration438 =null;

        ObjcParser.field_name_return field_name439 =null;


        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple4177);
            type_declaration438=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration438.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple4179);
            field_name439=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name439.getTree());

            // AST REWRITE
            // elements: field_name, type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal440=null;
        Token char_literal442=null;
        Token char_literal444=null;
        ObjcParser.classical_param_return classical_param441 =null;

        ObjcParser.classical_param_return classical_param443 =null;


        Object char_literal440_tree=null;
        Object char_literal442_tree=null;
        Object char_literal444_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal440=(Token)match(input,116,FOLLOW_116_in_classical_method_params4204); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal440);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:9: ( classical_param )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==ID||LA85_0==116||LA85_0==167||LA85_0==172||LA85_0==176||(LA85_0 >= 179 && LA85_0 <= 180)||LA85_0==182||LA85_0==184||(LA85_0 >= 187 && LA85_0 <= 188)) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params4206);
                    classical_param441=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param441.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:26: ( ',' classical_param )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==123) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:27: ',' classical_param
            	    {
            	    char_literal442=(Token)match(input,123,FOLLOW_123_in_classical_method_params4210); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal442);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params4212);
            	    classical_param443=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param443.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            char_literal444=(Token)match(input,117,FOLLOW_117_in_classical_method_params4216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal444);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 718:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration445 =null;

        ObjcParser.param_name_return param_name446 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param4241);
            classical_type_declaration445=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration445.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param4243);
            param_name446=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name446.getTree());

            // AST REWRITE
            // elements: classical_type_declaration, param_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 722:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal450=null;
        Token string_literal451=null;
        Token char_literal453=null;
        Token string_literal454=null;
        Token char_literal456=null;
        Token string_literal457=null;
        Token char_literal459=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol447 =null;

        ObjcParser.func_pointer_return func_pointer448 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane449 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper452 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper455 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper458 =null;


        Object char_literal450_tree=null;
        Object string_literal451_tree=null;
        Object char_literal453_tree=null;
        Object string_literal454_tree=null;
        Object char_literal456_tree=null;
        Object string_literal457_tree=null;
        Object char_literal459_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt91=6;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==176) ) {
                int LA91_1 = input.LA(2);

                if ( (LA91_1==131) && (synpred10_Objc())) {
                    alt91=1;
                }
                else if ( (LA91_1==ID||LA91_1==114||(LA91_1 >= 117 && LA91_1 <= 118)||LA91_1==161||LA91_1==167) ) {
                    alt91=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA91_0==116) && (synpred11_Objc())) {
                alt91=2;
            }
            else if ( (LA91_0==ID||LA91_0==167||(LA91_0 >= 179 && LA91_0 <= 180)||LA91_0==182||LA91_0==188) ) {
                alt91=3;
            }
            else if ( (LA91_0==184) ) {
                alt91=4;
            }
            else if ( (LA91_0==187) ) {
                alt91=5;
            }
            else if ( (LA91_0==172) ) {
                alt91=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration4272);
                    type_declaration_protocol447=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol447.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration4283);
                    func_pointer448=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer448.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration4289);
                    type_declaration_plane449=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane449.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:28: ( '&' )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==114) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:28: '&'
                            {
                            char_literal450=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4291); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal450_tree = 
                            (Object)adaptor.create(char_literal450)
                            ;
                            adaptor.addChild(root_0, char_literal450_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal451=(Token)match(input,184,FOLLOW_184_in_classical_type_declaration4299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal451);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4301);
                    type_dec_wrapper452=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper452.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:32: ( '&' )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==114) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:32: '&'
                            {
                            char_literal453=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4303); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_114.add(char_literal453);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 729:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal454=(Token)match(input,187,FOLLOW_187_in_classical_type_declaration4320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(string_literal454);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4322);
                    type_dec_wrapper455=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper455.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:31: ( '&' )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==114) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:31: '&'
                            {
                            char_literal456=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4324); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_114.add(char_literal456);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 730:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal457=(Token)match(input,172,FOLLOW_172_in_classical_type_declaration4341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal457);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4343);
                    type_dec_wrapper458=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper458.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:30: ( '&' )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==114) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:30: '&'
                            {
                            char_literal459=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4345); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_114.add(char_literal459);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 731:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal463=null;
        Token char_literal465=null;
        Token char_literal467=null;
        Token char_literal469=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol460 =null;

        ObjcParser.func_pointer_return func_pointer461 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct462 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum464 =null;

        ObjcParser.type_declaration_union_return type_declaration_union466 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane468 =null;


        Object char_literal463_tree=null;
        Object char_literal465_tree=null;
        Object char_literal467_tree=null;
        Object char_literal469_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt96=6;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==176) ) {
                int LA96_1 = input.LA(2);

                if ( (LA96_1==131) && (synpred12_Objc())) {
                    alt96=1;
                }
                else if ( (LA96_1==ID||LA96_1==114||(LA96_1 >= 117 && LA96_1 <= 118)||LA96_1==161||LA96_1==167) ) {
                    alt96=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA96_0==116) && (synpred13_Objc())) {
                alt96=2;
            }
            else if ( (LA96_0==184) ) {
                alt96=3;
            }
            else if ( (LA96_0==172) ) {
                alt96=4;
            }
            else if ( (LA96_0==187) ) {
                alt96=5;
            }
            else if ( (LA96_0==ID||LA96_0==167||(LA96_0 >= 179 && LA96_0 <= 180)||LA96_0==182||LA96_0==188) ) {
                alt96=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;

            }
            switch (alt96) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration4374);
                    type_declaration_protocol460=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol460.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration4385);
                    func_pointer461=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer461.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:5: type_declaration_struct ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration4391);
                    type_declaration_struct462=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct462.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:29: ( '&' )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==114) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:29: '&'
                            {
                            char_literal463=(Token)match(input,114,FOLLOW_114_in_type_declaration4393); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal463_tree = 
                            (Object)adaptor.create(char_literal463)
                            ;
                            adaptor.addChild(root_0, char_literal463_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration4400);
                    type_declaration_enum464=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum464.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:27: ( '&' )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==114) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:27: '&'
                            {
                            char_literal465=(Token)match(input,114,FOLLOW_114_in_type_declaration4402); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal465_tree = 
                            (Object)adaptor.create(char_literal465)
                            ;
                            adaptor.addChild(root_0, char_literal465_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration4409);
                    type_declaration_union466=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union466.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:28: ( '&' )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==114) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:28: '&'
                            {
                            char_literal467=(Token)match(input,114,FOLLOW_114_in_type_declaration4411); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal467_tree = 
                            (Object)adaptor.create(char_literal467)
                            ;
                            adaptor.addChild(root_0, char_literal467_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration4418);
                    type_declaration_plane468=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane468.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:28: ( '&' )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==114) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:28: '&'
                            {
                            char_literal469=(Token)match(input,114,FOLLOW_114_in_type_declaration4420); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal469_tree = 
                            (Object)adaptor.create(char_literal469)
                            ;
                            adaptor.addChild(root_0, char_literal469_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:1: type_declaration_plane : ( 'const' )? ( 'unsigned' )? type_dec ( 'const' )? -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal470=null;
        Token string_literal471=null;
        Token string_literal473=null;
        ObjcParser.type_dec_return type_dec472 =null;


        Object string_literal470_tree=null;
        Object string_literal471_tree=null;
        Object string_literal473_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:3: ( ( 'const' )? ( 'unsigned' )? type_dec ( 'const' )? -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: ( 'const' )? ( 'unsigned' )? type_dec ( 'const' )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: ( 'const' )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==167) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: 'const'
                    {
                    string_literal470=(Token)match(input,167,FOLLOW_167_in_type_declaration_plane4435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(string_literal470);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:14: ( 'unsigned' )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==188) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:14: 'unsigned'
                    {
                    string_literal471=(Token)match(input,188,FOLLOW_188_in_type_declaration_plane4438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_188.add(string_literal471);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane4441);
            type_dec472=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec472.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:35: ( 'const' )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==167) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:35: 'const'
                    {
                    string_literal473=(Token)match(input,167,FOLLOW_167_in_type_declaration_plane4443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(string_literal473);


                    }
                    break;

            }


            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 744:44: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:47: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal474=null;
        Token char_literal475=null;

        Object string_literal474_tree=null;
        Object char_literal475_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:6: 'id' '<'
            {
            string_literal474=(Token)match(input,176,FOLLOW_176_in_type_decl_protocol_predicate4467); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal474_tree = 
            (Object)adaptor.create(string_literal474)
            ;
            adaptor.addChild(root_0, string_literal474_tree);
            }

            char_literal475=(Token)match(input,131,FOLLOW_131_in_type_decl_protocol_predicate4469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal475_tree = 
            (Object)adaptor.create(char_literal475)
            ;
            adaptor.addChild(root_0, char_literal475_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal476=null;
        Token char_literal477=null;
        Token char_literal479=null;
        ObjcParser.type_dec_internal_return type_dec_internal478 =null;


        Object string_literal476_tree=null;
        Object char_literal477_tree=null;
        Object char_literal479_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:5: 'id' '<' type_dec_internal '>'
            {
            string_literal476=(Token)match(input,176,FOLLOW_176_in_type_declaration_protocol4485); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal476);


            char_literal477=(Token)match(input,131,FOLLOW_131_in_type_declaration_protocol4487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal477);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol4489);
            type_dec_internal478=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal478.getTree());

            char_literal479=(Token)match(input,137,FOLLOW_137_in_type_declaration_protocol4491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal479);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 752:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | 'struct' typedef_name -> ^( STRUCT typedef_name ) );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal480=null;
        Token string_literal483=null;
        ObjcParser.typedef_name_return typedef_name481 =null;

        ObjcParser.struct_wrapper_return struct_wrapper482 =null;

        ObjcParser.typedef_name_return typedef_name484 =null;


        Object string_literal480_tree=null;
        Object string_literal483_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:3: ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==184) ) {
                int LA101_1 = input.LA(2);

                if ( (LA101_1==ID) ) {
                    int LA101_2 = input.LA(3);

                    if ( (LA101_2==190) && (synpred14_Objc())) {
                        alt101=1;
                    }
                    else if ( (LA101_2==ID||LA101_2==114||LA101_2==117) ) {
                        alt101=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 101, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA101_1==190) && (synpred14_Objc())) {
                    alt101=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;

            }
            switch (alt101) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:5: ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper
                    {
                    string_literal480=(Token)match(input,184,FOLLOW_184_in_type_declaration_struct4523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal480);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:45: ( typedef_name )?
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==ID) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:45: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct4525);
                            typedef_name481=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name481.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct4528);
                    struct_wrapper482=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper482.getTree());

                    // AST REWRITE
                    // elements: struct_wrapper, typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 756:74: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:76: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:89: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:5: 'struct' typedef_name
                    {
                    string_literal483=(Token)match(input,184,FOLLOW_184_in_type_declaration_struct4544); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal483);


                    pushFollow(FOLLOW_typedef_name_in_type_declaration_struct4546);
                    typedef_name484=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name484.getTree());

                    // AST REWRITE
                    // elements: typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 757:27: -> ^( STRUCT typedef_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:29: ^( STRUCT typedef_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | 'union' typedef_name -> ^( UNION typedef_name ) );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal485=null;
        Token string_literal488=null;
        ObjcParser.typedef_name_return typedef_name486 =null;

        ObjcParser.struct_wrapper_return struct_wrapper487 =null;

        ObjcParser.typedef_name_return typedef_name489 =null;


        Object string_literal485_tree=null;
        Object string_literal488_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:3: ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | 'union' typedef_name -> ^( UNION typedef_name ) )
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==187) ) {
                int LA103_1 = input.LA(2);

                if ( (LA103_1==ID) ) {
                    int LA103_2 = input.LA(3);

                    if ( (LA103_2==190) && (synpred15_Objc())) {
                        alt103=1;
                    }
                    else if ( (LA103_2==ID||LA103_2==114||LA103_2==117) ) {
                        alt103=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 103, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA103_1==190) && (synpred15_Objc())) {
                    alt103=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 103, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;

            }
            switch (alt103) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:5: ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper
                    {
                    string_literal485=(Token)match(input,187,FOLLOW_187_in_type_declaration_union4577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(string_literal485);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:43: ( typedef_name )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==ID) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:43: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_union4579);
                            typedef_name486=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name486.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union4582);
                    struct_wrapper487=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper487.getTree());

                    // AST REWRITE
                    // elements: struct_wrapper, typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 761:72: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:74: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:86: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:6: 'union' typedef_name
                    {
                    string_literal488=(Token)match(input,187,FOLLOW_187_in_type_declaration_union4599); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(string_literal488);


                    pushFollow(FOLLOW_typedef_name_in_type_declaration_union4601);
                    typedef_name489=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name489.getTree());

                    // AST REWRITE
                    // elements: typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 762:27: -> ^( UNION typedef_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:29: ^( UNION typedef_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:765:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | 'enum' typedef_name -> ^( ENUM typedef_name ) );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal490=null;
        Token string_literal493=null;
        ObjcParser.typedef_name_return typedef_name491 =null;

        ObjcParser.enum_wrapper_return enum_wrapper492 =null;

        ObjcParser.typedef_name_return typedef_name494 =null;


        Object string_literal490_tree=null;
        Object string_literal493_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:3: ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | 'enum' typedef_name -> ^( ENUM typedef_name ) )
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==172) ) {
                int LA105_1 = input.LA(2);

                if ( (LA105_1==ID) ) {
                    int LA105_2 = input.LA(3);

                    if ( (LA105_2==190) && (synpred16_Objc())) {
                        alt105=1;
                    }
                    else if ( (LA105_2==ID||LA105_2==114||LA105_2==117) ) {
                        alt105=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 105, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA105_1==190) && (synpred16_Objc())) {
                    alt105=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }
            switch (alt105) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:5: ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper
                    {
                    string_literal490=(Token)match(input,172,FOLLOW_172_in_type_declaration_enum4632); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal490);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:41: ( typedef_name )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==ID) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:41: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum4634);
                            typedef_name491=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name491.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum4637);
                    enum_wrapper492=enum_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper492.getTree());

                    // AST REWRITE
                    // elements: enum_wrapper, typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 766:68: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:70: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:81: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:5: 'enum' typedef_name
                    {
                    string_literal493=(Token)match(input,172,FOLLOW_172_in_type_declaration_enum4653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal493);


                    pushFollow(FOLLOW_typedef_name_in_type_declaration_enum4655);
                    typedef_name494=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name494.getTree());

                    // AST REWRITE
                    // elements: typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 767:25: -> ^( ENUM typedef_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:27: ^( ENUM typedef_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal495=null;
        Token char_literal497=null;
        ObjcParser.enum_element_return enum_element496 =null;


        Object char_literal495_tree=null;
        Object char_literal497_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal495=(Token)match(input,190,FOLLOW_190_in_enum_wrapper4675); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal495_tree = 
            (Object)adaptor.create(char_literal495)
            ;
            adaptor.addChild(root_0, char_literal495_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:9: ( enum_element )+
            int cnt106=0;
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==ID||LA106_0==MULTI_COMMENT_LIT||LA106_0==SINGLE_COMMENT_LIT) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper4685);
            	    enum_element496=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element496.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);


            char_literal497=(Token)match(input,194,FOLLOW_194_in_enum_wrapper4692); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal497_tree = 
            (Object)adaptor.create(char_literal497)
            ;
            adaptor.addChild(root_0, char_literal497_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:1: enum_element : ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal501=null;
        ObjcParser.name_return name498 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper499 =null;

        ObjcParser.element_value_return element_value500 =null;

        ObjcParser.comments_return comments502 =null;


        Object char_literal501_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:3: ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ID) ) {
                alt109=1;
            }
            else if ( (LA109_0==MULTI_COMMENT_LIT||LA109_0==SINGLE_COMMENT_LIT) ) {
                alt109=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;

            }
            switch (alt109) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:5: name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    pushFollow(FOLLOW_name_in_enum_element4707);
                    name498=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name498.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:10: ( op_assign_wrapper element_value )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==115||LA107_0==119||LA107_0==122||LA107_0==126||LA107_0==133||LA107_0==135||LA107_0==140||LA107_0==192) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:11: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element4710);
                            op_assign_wrapper499=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper499.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element4712);
                            element_value500=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value500.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:45: ( ',' )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==123) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:45: ','
                            {
                            char_literal501=(Token)match(input,123,FOLLOW_123_in_enum_element4716); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_123.add(char_literal501);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: name, op_assign_wrapper, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 777:50: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:52: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:70: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element4737);
                    comments502=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments502.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct503 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper4752);
            struct503=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct503.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 782:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal504=null;
        Token char_literal506=null;
        ObjcParser.struct_internal_return struct_internal505 =null;


        Object char_literal504_tree=null;
        Object char_literal506_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:785:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:785:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal504=(Token)match(input,190,FOLLOW_190_in_struct4770); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal504_tree = 
            (Object)adaptor.create(char_literal504)
            ;
            adaptor.addChild(root_0, char_literal504_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:7: ( struct_internal )+
            int cnt110=0;
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==ID||LA110_0==MULTI_COMMENT_LIT||LA110_0==SINGLE_COMMENT_LIT||LA110_0==116||LA110_0==167||LA110_0==172||LA110_0==176||(LA110_0 >= 179 && LA110_0 <= 180)||LA110_0==182||LA110_0==184||(LA110_0 >= 187 && LA110_0 <= 188)) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct4779);
            	    struct_internal505=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal505.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt110 >= 1 ) break loop110;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(110, input);
                        throw eee;
                }
                cnt110++;
            } while (true);


            char_literal506=(Token)match(input,194,FOLLOW_194_in_struct4786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal506_tree = 
            (Object)adaptor.create(char_literal506)
            ;
            adaptor.addChild(root_0, char_literal506_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper507 =null;

        ObjcParser.comments_return comments508 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:3: ( field_declaration_wrapper | comments )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ID||LA111_0==116||LA111_0==167||LA111_0==172||LA111_0==176||(LA111_0 >= 179 && LA111_0 <= 180)||LA111_0==182||LA111_0==184||(LA111_0 >= 187 && LA111_0 <= 188)) ) {
                alt111=1;
            }
            else if ( (LA111_0==MULTI_COMMENT_LIT||LA111_0==SINGLE_COMMENT_LIT) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal4800);
                    field_declaration_wrapper507=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper507.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal4806);
                    comments508=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments508.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:795:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec509 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper4821);
            type_dec509=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec509.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 796:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:1: type_dec : type_dec_internal ( '*' )* ( '[' ( NUMBER_LITERAL )? ']' )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal511=null;
        Token char_literal512=null;
        Token NUMBER_LITERAL513=null;
        Token char_literal514=null;
        ObjcParser.type_dec_internal_return type_dec_internal510 =null;


        Object char_literal511_tree=null;
        Object char_literal512_tree=null;
        Object NUMBER_LITERAL513_tree=null;
        Object char_literal514_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:9: ( type_dec_internal ( '*' )* ( '[' ( NUMBER_LITERAL )? ']' )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:11: type_dec_internal ( '*' )* ( '[' ( NUMBER_LITERAL )? ']' )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec4841);
            type_dec_internal510=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal510.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:29: ( '*' )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==118) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:29: '*'
            	    {
            	    char_literal511=(Token)match(input,118,FOLLOW_118_in_type_dec4843); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal511_tree = 
            	    (Object)adaptor.create(char_literal511)
            	    ;
            	    adaptor.addChild(root_0, char_literal511_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:34: ( '[' ( NUMBER_LITERAL )? ']' )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==161) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:35: '[' ( NUMBER_LITERAL )? ']'
            	    {
            	    char_literal512=(Token)match(input,161,FOLLOW_161_in_type_dec4847); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal512_tree = 
            	    (Object)adaptor.create(char_literal512)
            	    ;
            	    adaptor.addChild(root_0, char_literal512_tree);
            	    }

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:40: ( NUMBER_LITERAL )?
            	    int alt113=2;
            	    int LA113_0 = input.LA(1);

            	    if ( (LA113_0==NUMBER_LITERAL) ) {
            	        alt113=1;
            	    }
            	    switch (alt113) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:40: NUMBER_LITERAL
            	            {
            	            NUMBER_LITERAL513=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_type_dec4850); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NUMBER_LITERAL513_tree = 
            	            (Object)adaptor.create(NUMBER_LITERAL513)
            	            ;
            	            adaptor.addChild(root_0, NUMBER_LITERAL513_tree);
            	            }

            	            }
            	            break;

            	    }


            	    char_literal514=(Token)match(input,162,FOLLOW_162_in_type_dec4853); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal514_tree = 
            	    (Object)adaptor.create(char_literal514)
            	    ;
            	    adaptor.addChild(root_0, char_literal514_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:802:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID516=null;
        ObjcParser.knownTypes_return knownTypes515 =null;


        Object ID516_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:3: ( knownTypes | ID )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==176||(LA115_0 >= 179 && LA115_0 <= 180)||LA115_0==182) ) {
                alt115=1;
            }
            else if ( (LA115_0==ID) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;

            }
            switch (alt115) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal4870);
                    knownTypes515=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes515.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID516=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal4879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID516_tree = 
                    (Object)adaptor.create(ID516)
                    ;
                    adaptor.addChild(root_0, ID516_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal517=null;
        Token string_literal518=null;
        Token string_literal519=null;
        Token string_literal520=null;
        Token string_literal521=null;
        Token string_literal522=null;

        Object string_literal517_tree=null;
        Object string_literal518_tree=null;
        Object string_literal519_tree=null;
        Object string_literal520_tree=null;
        Object string_literal521_tree=null;
        Object string_literal522_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt120=4;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt120=1;
                }
                break;
            case 176:
                {
                alt120=2;
                }
                break;
            case 180:
                {
                alt120=3;
                }
                break;
            case 182:
                {
                alt120=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }

            switch (alt120) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal517=(Token)match(input,179,FOLLOW_179_in_knownTypes4892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal517_tree = 
                    (Object)adaptor.create(string_literal517)
                    ;
                    adaptor.addChild(root_0, string_literal517_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal518=(Token)match(input,176,FOLLOW_176_in_knownTypes4898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal518_tree = 
                    (Object)adaptor.create(string_literal518)
                    ;
                    adaptor.addChild(root_0, string_literal518_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:5: ( 'long' )+
                    int cnt116=0;
                    loop116:
                    do {
                        int alt116=2;
                        int LA116_0 = input.LA(1);

                        if ( (LA116_0==180) ) {
                            alt116=1;
                        }


                        switch (alt116) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:5: 'long'
                    	    {
                    	    string_literal519=(Token)match(input,180,FOLLOW_180_in_knownTypes4904); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal519_tree = 
                    	    (Object)adaptor.create(string_literal519)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal519_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt116 >= 1 ) break loop116;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(116, input);
                                throw eee;
                        }
                        cnt116++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:13: ( 'int' )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==179) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:13: 'int'
                            {
                            string_literal520=(Token)match(input,179,FOLLOW_179_in_knownTypes4907); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal520_tree = 
                            (Object)adaptor.create(string_literal520)
                            ;
                            adaptor.addChild(root_0, string_literal520_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: ( 'short' )+
                    int cnt118=0;
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==182) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: 'short'
                    	    {
                    	    string_literal521=(Token)match(input,182,FOLLOW_182_in_knownTypes4914); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal521_tree = 
                    	    (Object)adaptor.create(string_literal521)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal521_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt118 >= 1 ) break loop118;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(118, input);
                                throw eee;
                        }
                        cnt118++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:14: ( 'int' )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==179) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:14: 'int'
                            {
                            string_literal522=(Token)match(input,179,FOLLOW_179_in_knownTypes4917); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal522_tree = 
                            (Object)adaptor.create(string_literal522)
                            ;
                            adaptor.addChild(root_0, string_literal522_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID523=null;
        ObjcParser.array_size_return array_size524 =null;

        ObjcParser.field_crap_return field_crap525 =null;


        Object ID523_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:5: ID ( array_size )* ( field_crap )?
            {
            ID523=(Token)match(input,ID,FOLLOW_ID_in_field_name4933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID523);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:8: ( array_size )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==161) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name4935);
            	    array_size524=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size524.getTree());

            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:20: ( field_crap )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==129) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name4939);
                    field_crap525=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap525.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, array_size
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 815:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:1: array_size : '[' ( NUMBER_LITERAL )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal526=null;
        Token NUMBER_LITERAL527=null;
        Token char_literal528=null;

        Object char_literal526_tree=null;
        Object NUMBER_LITERAL527_tree=null;
        Object char_literal528_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:3: ( '[' ( NUMBER_LITERAL )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:5: '[' ( NUMBER_LITERAL )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal526=(Token)match(input,161,FOLLOW_161_in_array_size4967); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal526_tree = 
            (Object)adaptor.create(char_literal526)
            ;
            adaptor.addChild(root_0, char_literal526_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:9: ( NUMBER_LITERAL )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==NUMBER_LITERAL) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:9: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL527=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_array_size4969); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_LITERAL527_tree = 
                    (Object)adaptor.create(NUMBER_LITERAL527)
                    ;
                    adaptor.addChild(root_0, NUMBER_LITERAL527_tree);
                    }

                    }
                    break;

            }


            char_literal528=(Token)match(input,162,FOLLOW_162_in_array_size4972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal528_tree = 
            (Object)adaptor.create(char_literal528)
            ;
            adaptor.addChild(root_0, char_literal528_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal529=null;
        Token NUMBER_LITERAL530=null;

        Object char_literal529_tree=null;
        Object NUMBER_LITERAL530_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal529=(Token)match(input,129,FOLLOW_129_in_field_crap4982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal529_tree = 
            (Object)adaptor.create(char_literal529)
            ;
            adaptor.addChild(root_0, char_literal529_tree);
            }

            NUMBER_LITERAL530=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap4984); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL530_tree = 
            (Object)adaptor.create(NUMBER_LITERAL530)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL530_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper531 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants532 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration4996);
            method_modifier_wrapper531=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper531.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration4998);
            method_declaration_variants532=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants532.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier533 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5010);
            method_modifier533=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier533.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 827:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set534=null;

        Object set534_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set534=(Token)input.LT(1);

            if ( input.LA(1)==120||input.LA(1)==124 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set534)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common535 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants5047);
            method_declaration_common535=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common535.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal536=null;
        Token char_literal538=null;
        Token char_literal541=null;
        ObjcParser.type_declaration_return type_declaration537 =null;

        ObjcParser.method_name_return method_name539 =null;

        ObjcParser.method_params_return method_params540 =null;


        Object char_literal536_tree=null;
        Object char_literal538_tree=null;
        Object char_literal541_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:6: '(' type_declaration ')' method_name
            {
            char_literal536=(Token)match(input,116,FOLLOW_116_in_method_declaration_common5060); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal536_tree = 
            (Object)adaptor.create(char_literal536)
            ;
            adaptor.addChild(root_0, char_literal536_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common5062);
            type_declaration537=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration537.getTree());

            char_literal538=(Token)match(input,117,FOLLOW_117_in_method_declaration_common5064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal538_tree = 
            (Object)adaptor.create(char_literal538)
            ;
            adaptor.addChild(root_0, char_literal538_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common5066);
            method_name539=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name539.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:44: ( method_params )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==ID||LA124_0==129) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common5069);
                    method_params540=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params540.getTree());

                    }
                    break;

            }


            char_literal541=(Token)match(input,130,FOLLOW_130_in_method_declaration_common5072); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal541_tree = 
            (Object)adaptor.create(char_literal541)
            ;
            adaptor.addChild(root_0, char_literal541_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal543=null;
        Token char_literal545=null;
        ObjcParser.method_modifier_return method_modifier542 =null;

        ObjcParser.type_declaration_return type_declaration544 =null;

        ObjcParser.method_name_return method_name546 =null;


        Object char_literal543_tree=null;
        Object char_literal545_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate5084);
            method_modifier542=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier542.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:22: '(' type_declaration ')' method_name
            {
            char_literal543=(Token)match(input,116,FOLLOW_116_in_method_declaration_predicate5087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal543_tree = 
            (Object)adaptor.create(char_literal543)
            ;
            adaptor.addChild(root_0, char_literal543_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate5089);
            type_declaration544=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration544.getTree());

            char_literal545=(Token)match(input,117,FOLLOW_117_in_method_declaration_predicate5091); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal545_tree = 
            (Object)adaptor.create(char_literal545)
            ;
            adaptor.addChild(root_0, char_literal545_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate5093);
            method_name546=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name546.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID547=null;

        Object ID547_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: ID
            {
            ID547=(Token)match(input,ID,FOLLOW_ID_in_method_name5111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID547);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 843:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param548 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: ( method_param )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==ID||LA125_0==129) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5134);
            	    method_param548=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param548.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 847:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:849:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal550=null;
        Token char_literal551=null;
        Token char_literal553=null;
        ObjcParser.prefix_return prefix549 =null;

        ObjcParser.type_declaration_return type_declaration552 =null;

        ObjcParser.param_name_return param_name554 =null;


        Object char_literal550_tree=null;
        Object char_literal551_tree=null;
        Object char_literal553_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:5: ( prefix )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==ID) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param5154);
                    prefix549=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix549.getTree());

                    }
                    break;

            }


            char_literal550=(Token)match(input,129,FOLLOW_129_in_method_param5157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal550);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:17: ( '(' type_declaration ')' )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==116) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:18: '(' type_declaration ')'
                    {
                    char_literal551=(Token)match(input,116,FOLLOW_116_in_method_param5160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_116.add(char_literal551);


                    pushFollow(FOLLOW_type_declaration_in_method_param5162);
                    type_declaration552=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration552.getTree());

                    char_literal553=(Token)match(input,117,FOLLOW_117_in_method_param5164); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal553);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param5168);
            param_name554=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name554.getTree());

            // AST REWRITE
            // elements: param_name, 129, 116, prefix, 117, type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 850:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_129.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_116.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_117.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID555=null;

        Object ID555_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:5: ID
            {
            ID555=(Token)match(input,ID,FOLLOW_ID_in_param_name5201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID555);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 853:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID556=null;

        Object ID556_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:11: ID
            {
            ID556=(Token)match(input,ID,FOLLOW_ID_in_prefix5220); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID556);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 855:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:1: define_declaration : DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) ;
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL557=null;
        ObjcParser.name_return name558 =null;

        ObjcParser.element_value_return element_value559 =null;


        Object DEFINE_LITERAL557_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:3: ( DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:6: DEFINE_LITERAL name element_value
            {
            DEFINE_LITERAL557=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL557);


            pushFollow(FOLLOW_name_in_define_declaration5242);
            name558=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name558.getTree());

            pushFollow(FOLLOW_element_value_in_define_declaration5244);
            element_value559=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value559.getTree());

            // AST REWRITE
            // elements: element_value, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 859:40: -> ^( DEFINE name element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:43: ^( DEFINE name element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred1_Objc1195);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred2_Objc1441);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,130,FOLLOW_130_in_synpred2_Objc1443); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred3_Objc1460);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,178,FOLLOW_178_in_synpred3_Objc1462); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred4_Objc2593);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:6: '(' type_cast_wrapper
        {
        match(input,116,FOLLOW_116_in_synpred5_Objc2606); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred5_Objc2608);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred6_Objc2645);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:30: ( access_wrapper name )*
        loop128:
        do {
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0 >= 127 && LA128_0 <= 128)) ) {
                alt128=1;
            }


            switch (alt128) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred6_Objc2648);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred6_Objc2650);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop128;
            }
        } while (true);


        match(input,116,FOLLOW_116_in_synpred6_Objc2654); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:5: ( name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:6: name '['
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc2784);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,161,FOLLOW_161_in_synpred7_Objc2786); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred8_Objc3067);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred9_Objc3542);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred10_Objc4268);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:727:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred11_Objc4279);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred12_Objc4370);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred13_Objc4381);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:6: 'struct' ( typedef_name )? '{'
        {
        match(input,184,FOLLOW_184_in_synpred14_Objc4514); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:15: ( typedef_name )?
        int alt129=2;
        int LA129_0 = input.LA(1);

        if ( (LA129_0==ID) ) {
            alt129=1;
        }
        switch (alt129) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred14_Objc4516);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,190,FOLLOW_190_in_synpred14_Objc4519); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:6: 'union' ( typedef_name )? '{'
        {
        match(input,187,FOLLOW_187_in_synpred15_Objc4568); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:14: ( typedef_name )?
        int alt130=2;
        int LA130_0 = input.LA(1);

        if ( (LA130_0==ID) ) {
            alt130=1;
        }
        switch (alt130) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred15_Objc4570);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,190,FOLLOW_190_in_synpred15_Objc4573); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:6: 'enum' ( typedef_name )? '{'
        {
        match(input,172,FOLLOW_172_in_synpred16_Objc4623); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:13: ( typedef_name )?
        int alt131=2;
        int LA131_0 = input.LA(1);

        if ( (LA131_0==ID) ) {
            alt131=1;
        }
        switch (alt131) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred16_Objc4625);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,190,FOLLOW_190_in_synpred16_Objc4628); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // Delegated rules

    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA42 dfa42 = new DFA42(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA49 dfa49 = new DFA49(this);
    static final String DFA42_eotS =
        "\u0105\uffff";
    static final String DFA42_eofS =
        "\76\uffff\1\2\u00c6\uffff";
    static final String DFA42_minS =
        "\2\13\12\uffff\1\13\5\uffff\1\157\20\uffff\1\162\1\13\2\55\3\162"+
        "\1\157\3\55\14\uffff\2\13\1\uffff\2\13\5\uffff\7\0\27\uffff\43\0"+
        "\5\uffff\20\0\1\uffff\1\0\15\uffff\1\0\40\uffff\2\0\2\uffff\2\0"+
        "\65\uffff";
    static final String DFA42_maxS =
        "\1\u00a4\1\u00c3\12\uffff\1\u00c3\5\uffff\1\u00c1\20\uffff\1\u00a7"+
        "\1\u00c3\1\u00bc\1\u00b6\1\u00a7\1\u00b4\1\u00b6\1\u00c1\3\u00b6"+
        "\14\uffff\2\u00c3\1\uffff\1\u00c3\1\u00c2\5\uffff\7\0\27\uffff\43"+
        "\0\5\uffff\20\0\1\uffff\1\0\15\uffff\1\0\40\uffff\2\0\2\uffff\2"+
        "\0\65\uffff";
    static final String DFA42_acceptS =
        "\2\uffff\1\3\10\uffff\1\1\1\uffff\5\1\1\uffff\3\1\14\uffff\1\1\31"+
        "\uffff\1\1\135\uffff\1\1\1\uffff\2\1\14\uffff\1\1\15\uffff\1\1\15"+
        "\uffff\4\1\2\uffff\2\1\66\uffff\1\2";
    static final String DFA42_specialS =
        "\1\uffff\1\0\12\uffff\1\1\5\uffff\1\2\47\uffff\1\3\1\4\1\uffff\1"+
        "\5\1\6\5\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\27\uffff\1\16\1"+
        "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\5\uffff\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\uffff\1\101\15\uffff\1\102\40\uffff\1\103\1\104\2\uffff\1\105"+
        "\1\106\65\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\32\uffff\1\2\1\uffff"+
            "\1\1\46\uffff\1\2\5\uffff\1\2\2\uffff\1\2",
            "\1\2\41\uffff\1\22\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\14\4\uffff\1\2\2\uffff\2\2\35\uffff\1\2"+
            "\5\uffff\1\2\2\uffff\1\2\2\uffff\1\15\4\uffff\1\25\3\uffff\1"+
            "\13\2\uffff\1\17\1\20\1\uffff\1\21\1\uffff\1\23\2\uffff\1\24"+
            "\1\16\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\41\uffff\1\52\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\44\1\uffff\1\42\2\uffff\1\2\2\uffff\2\2"+
            "\35\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1\45\4\uffff\1"+
            "\55\3\uffff\1\43\2\uffff\1\47\1\50\1\uffff\1\51\1\uffff\1\53"+
            "\2\uffff\1\54\1\46\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\1\2\1\75\1\uffff\1\2\1\76\1\72\1\uffff\2\2\2\uffff"+
            "\2\2\1\uffff\2\2\2\uffff\2\2\1\uffff\6\2\1\uffff\1\2\23\uffff"+
            "\1\73\1\uffff\1\2\3\uffff\1\74\27\uffff\1\2\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\110\2\uffff\1\111\1\105\14\uffff\1\104\35\uffff\1\106\5"+
            "\uffff\1\107",
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\1\112\2\uffff\1\2\2\uffff\2\2"+
            "\35\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1\2\4\uffff\1"+
            "\2\3\uffff\1\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff\2"+
            "\2\6\uffff\1\2",
            "\1\147\u0082\uffff\1\144\2\uffff\1\143\1\145\1\uffff\1\146"+
            "\5\uffff\1\142",
            "\1\154\u0082\uffff\1\151\2\uffff\1\150\1\152\1\uffff\1\153",
            "\1\160\2\uffff\1\161\1\155\52\uffff\1\156\5\uffff\1\157",
            "\1\166\2\uffff\1\167\1\163\52\uffff\1\164\5\uffff\1\165\13"+
            "\uffff\1\162\1\170",
            "\1\175\2\uffff\1\176\1\172\52\uffff\1\173\5\uffff\1\174\13"+
            "\uffff\1\171\2\uffff\1\177",
            "\1\2\1\uffff\1\2\1\u0083\1\uffff\1\2\1\u0084\1\u0080\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\2\2\2\uffff\2\2\1\uffff\6\2\1\uffff"+
            "\1\2\23\uffff\1\u0081\1\uffff\1\2\3\uffff\1\u0082\27\uffff\1"+
            "\2\1\uffff\1\2",
            "\1\u008e\u0082\uffff\1\u008b\2\uffff\1\u008a\1\u008c\1\uffff"+
            "\1\u008d",
            "\1\u0093\u0082\uffff\1\u0090\2\uffff\1\u008f\1\u0091\1\uffff"+
            "\1\u0092",
            "\1\u0098\u0082\uffff\1\u0095\2\uffff\1\u0094\1\u0096\1\uffff"+
            "\1\u0097",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\u009b\1\uffff\1\2\1\u009c\1\u009d\2\uffff\1\2\3\uffff"+
            "\1\2\35\uffff\1\2\5\uffff\1\u0099\2\uffff\1\2\2\uffff\1\u009a"+
            "\33\uffff\1\2",
            "\1\2\41\uffff\1\2\24\uffff\1\u00a9\23\uffff\2\2\26\uffff\1"+
            "\2\3\uffff\1\2\1\uffff\1\2\4\uffff\1\2\2\uffff\2\2\35\uffff"+
            "\1\2\5\uffff\1\2\1\u00aa\1\uffff\1\2\36\uffff\1\2",
            "",
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\2\1\u00b8\3\uffff\1\2\3\uffff\1\2\35\uffff"+
            "\1\2\5\uffff\1\2\2\uffff\1\2\36\uffff\1\2",
            "\1\u00c9\11\uffff\1\2\27\uffff\1\u00cb\21\uffff\1\2\2\uffff"+
            "\1\u00c8\16\uffff\1\2\4\uffff\1\u00c6\1\u00c7\27\uffff\1\2\1"+
            "\uffff\1\2\1\u00ca\1\uffff\1\u00cf\2\2\1\uffff\2\2\1\uffff\3"+
            "\2\1\uffff\6\2\1\uffff\6\2\1\uffff\10\2\4\uffff\1\2\1\uffff"+
            "\1\u00cc\4\2\1\uffff\1\u00ce\2\2\1\u00cd\15\2\1\uffff\15\2\1"+
            "\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "471:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_1 = input.LA(1);

                         
                        int index42_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA42_1==176) && (synpred4_Objc())) {s = 11;}

                        else if ( (LA42_1==116) ) {s = 12;}

                        else if ( (LA42_1==167) && (synpred4_Objc())) {s = 13;}

                        else if ( (LA42_1==188) && (synpred4_Objc())) {s = 14;}

                        else if ( (LA42_1==179) && (synpred4_Objc())) {s = 15;}

                        else if ( (LA42_1==180) && (synpred4_Objc())) {s = 16;}

                        else if ( (LA42_1==182) && (synpred4_Objc())) {s = 17;}

                        else if ( (LA42_1==ID) ) {s = 18;}

                        else if ( (LA42_1==184) && (synpred4_Objc())) {s = 19;}

                        else if ( (LA42_1==187) && (synpred4_Objc())) {s = 20;}

                        else if ( (LA42_1==172) && (synpred4_Objc())) {s = 21;}

                        else if ( (LA42_1==BOOL_LITERAL||LA42_1==NUMBER_LITERAL||(LA42_1 >= STRING_LITERAL && LA42_1 <= STRING_OBJC)||LA42_1==110||LA42_1==114||LA42_1==121||(LA42_1 >= 124 && LA42_1 <= 125)||LA42_1==155||LA42_1==161||LA42_1==164||LA42_1==195) ) {s = 2;}

                         
                        input.seek(index42_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA42_12==118) && (synpred4_Objc())) {s = 34;}

                        else if ( (LA42_12==176) ) {s = 35;}

                        else if ( (LA42_12==116) ) {s = 36;}

                        else if ( (LA42_12==167) ) {s = 37;}

                        else if ( (LA42_12==188) ) {s = 38;}

                        else if ( (LA42_12==179) ) {s = 39;}

                        else if ( (LA42_12==180) ) {s = 40;}

                        else if ( (LA42_12==182) ) {s = 41;}

                        else if ( (LA42_12==ID) ) {s = 42;}

                        else if ( (LA42_12==184) ) {s = 43;}

                        else if ( (LA42_12==187) ) {s = 44;}

                        else if ( (LA42_12==172) ) {s = 45;}

                        else if ( (LA42_12==BOOL_LITERAL||LA42_12==NUMBER_LITERAL||(LA42_12 >= STRING_LITERAL && LA42_12 <= STRING_OBJC)||LA42_12==110||LA42_12==114||LA42_12==121||(LA42_12 >= 124 && LA42_12 <= 125)||LA42_12==155||LA42_12==161||LA42_12==164||LA42_12==195) ) {s = 2;}

                         
                        input.seek(index42_12);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_18 = input.LA(1);

                         
                        int index42_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA42_18==118) ) {s = 58;}

                        else if ( (LA42_18==161) ) {s = 59;}

                        else if ( (LA42_18==167) && (synpred4_Objc())) {s = 60;}

                        else if ( (LA42_18==114) ) {s = 61;}

                        else if ( (LA42_18==117) ) {s = 62;}

                        else if ( (LA42_18==111||LA42_18==113||LA42_18==116||(LA42_18 >= 120 && LA42_18 <= 121)||(LA42_18 >= 124 && LA42_18 <= 125)||(LA42_18 >= 127 && LA42_18 <= 128)||(LA42_18 >= 131 && LA42_18 <= 132)||(LA42_18 >= 134 && LA42_18 <= 139)||LA42_18==141||LA42_18==163||LA42_18==191||LA42_18==193) ) {s = 2;}

                         
                        input.seek(index42_18);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_58 = input.LA(1);

                         
                        int index42_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA42_58==161) ) {s = 153;}

                        else if ( (LA42_58==167) && (synpred4_Objc())) {s = 154;}

                        else if ( (LA42_58==114) ) {s = 155;}

                        else if ( (LA42_58==117) && (synpred4_Objc())) {s = 156;}

                        else if ( (LA42_58==118) && (synpred4_Objc())) {s = 157;}

                        else if ( (LA42_58==BOOL_LITERAL||LA42_58==ID||LA42_58==NUMBER_LITERAL||(LA42_58 >= STRING_LITERAL && LA42_58 <= STRING_OBJC)||LA42_58==110||LA42_58==116||LA42_58==121||LA42_58==125||LA42_58==155||LA42_58==164||LA42_58==195) ) {s = 2;}

                         
                        input.seek(index42_58);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_59 = input.LA(1);

                         
                        int index42_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA42_59==NUMBER_LITERAL) ) {s = 169;}

                        else if ( (LA42_59==162) && (synpred4_Objc())) {s = 170;}

                        else if ( (LA42_59==BOOL_LITERAL||LA42_59==ID||(LA42_59 >= STRING_LITERAL && LA42_59 <= STRING_OBJC)||LA42_59==110||LA42_59==114||LA42_59==116||LA42_59==121||(LA42_59 >= 124 && LA42_59 <= 125)||LA42_59==155||LA42_59==161||LA42_59==164||LA42_59==195) ) {s = 2;}

                         
                        input.seek(index42_59);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_61 = input.LA(1);

                         
                        int index42_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA42_61==117) && (synpred4_Objc())) {s = 184;}

                        else if ( (LA42_61==BOOL_LITERAL||LA42_61==ID||LA42_61==NUMBER_LITERAL||(LA42_61 >= STRING_LITERAL && LA42_61 <= STRING_OBJC)||LA42_61==110||LA42_61==114||LA42_61==116||LA42_61==121||LA42_61==125||LA42_61==155||LA42_61==161||LA42_61==164||LA42_61==195) ) {s = 2;}

                         
                        input.seek(index42_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_62 = input.LA(1);

                         
                        int index42_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA42_62==STRING_LITERAL) && (synpred4_Objc())) {s = 198;}

                        else if ( (LA42_62==STRING_OBJC) && (synpred4_Objc())) {s = 199;}

                        else if ( (LA42_62==NUMBER_LITERAL) && (synpred4_Objc())) {s = 200;}

                        else if ( (LA42_62==BOOL_LITERAL) && (synpred4_Objc())) {s = 201;}

                        else if ( (LA42_62==114) ) {s = 202;}

                        else if ( (LA42_62==ID) ) {s = 203;}

                        else if ( (LA42_62==155) && (synpred4_Objc())) {s = 204;}

                        else if ( (LA42_62==164) && (synpred4_Objc())) {s = 205;}

                        else if ( (LA42_62==161) ) {s = 206;}

                        else if ( (LA42_62==116) ) {s = 207;}

                        else if ( (LA42_62==EOF||LA42_62==DEFINE_LITERAL||LA42_62==MULTI_COMMENT_LIT||LA42_62==SINGLE_COMMENT_LIT||LA42_62==111||LA42_62==113||(LA42_62 >= 117 && LA42_62 <= 118)||(LA42_62 >= 120 && LA42_62 <= 121)||(LA42_62 >= 123 && LA42_62 <= 125)||(LA42_62 >= 127 && LA42_62 <= 132)||(LA42_62 >= 134 && LA42_62 <= 139)||(LA42_62 >= 141 && LA42_62 <= 148)||LA42_62==153||(LA42_62 >= 156 && LA42_62 <= 159)||(LA42_62 >= 162 && LA42_62 <= 163)||(LA42_62 >= 165 && LA42_62 <= 177)||(LA42_62 >= 179 && LA42_62 <= 191)||(LA42_62 >= 193 && LA42_62 <= 194)) ) {s = 2;}

                         
                        input.seek(index42_62);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA42_68 = input.LA(1);

                         
                        int index42_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_68);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA42_69 = input.LA(1);

                         
                        int index42_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_69);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA42_70 = input.LA(1);

                         
                        int index42_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_70);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA42_71 = input.LA(1);

                         
                        int index42_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_71);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA42_72 = input.LA(1);

                         
                        int index42_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_72);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA42_73 = input.LA(1);

                         
                        int index42_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_73);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA42_74 = input.LA(1);

                         
                        int index42_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_74);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA42_98 = input.LA(1);

                         
                        int index42_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_98);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA42_99 = input.LA(1);

                         
                        int index42_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_99);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA42_100 = input.LA(1);

                         
                        int index42_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_100);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA42_101 = input.LA(1);

                         
                        int index42_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_101);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA42_102 = input.LA(1);

                         
                        int index42_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_102);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA42_103 = input.LA(1);

                         
                        int index42_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_103);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA42_104 = input.LA(1);

                         
                        int index42_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_104);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA42_105 = input.LA(1);

                         
                        int index42_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_105);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA42_106 = input.LA(1);

                         
                        int index42_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_106);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA42_107 = input.LA(1);

                         
                        int index42_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_107);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA42_108 = input.LA(1);

                         
                        int index42_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_108);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA42_109 = input.LA(1);

                         
                        int index42_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_109);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA42_110 = input.LA(1);

                         
                        int index42_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_110);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA42_111 = input.LA(1);

                         
                        int index42_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_111);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA42_112 = input.LA(1);

                         
                        int index42_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_112);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA42_113 = input.LA(1);

                         
                        int index42_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_113);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA42_114 = input.LA(1);

                         
                        int index42_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_114);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA42_115 = input.LA(1);

                         
                        int index42_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_115);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA42_116 = input.LA(1);

                         
                        int index42_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_116);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA42_117 = input.LA(1);

                         
                        int index42_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_117);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA42_118 = input.LA(1);

                         
                        int index42_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_118);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA42_119 = input.LA(1);

                         
                        int index42_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_119);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA42_120 = input.LA(1);

                         
                        int index42_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_120);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA42_121 = input.LA(1);

                         
                        int index42_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_121);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA42_122 = input.LA(1);

                         
                        int index42_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_122);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA42_123 = input.LA(1);

                         
                        int index42_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_123);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA42_124 = input.LA(1);

                         
                        int index42_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_124);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA42_125 = input.LA(1);

                         
                        int index42_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_125);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA42_126 = input.LA(1);

                         
                        int index42_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_126);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA42_127 = input.LA(1);

                         
                        int index42_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_127);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA42_128 = input.LA(1);

                         
                        int index42_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_128);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA42_129 = input.LA(1);

                         
                        int index42_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_129);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA42_130 = input.LA(1);

                         
                        int index42_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_130);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA42_131 = input.LA(1);

                         
                        int index42_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_131);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA42_132 = input.LA(1);

                         
                        int index42_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_132);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA42_138 = input.LA(1);

                         
                        int index42_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_138);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA42_139 = input.LA(1);

                         
                        int index42_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_139);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA42_140 = input.LA(1);

                         
                        int index42_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_140);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA42_141 = input.LA(1);

                         
                        int index42_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_141);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA42_142 = input.LA(1);

                         
                        int index42_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_142);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA42_143 = input.LA(1);

                         
                        int index42_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_143);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA42_144 = input.LA(1);

                         
                        int index42_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_144);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA42_145 = input.LA(1);

                         
                        int index42_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_145);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA42_146 = input.LA(1);

                         
                        int index42_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_146);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA42_147 = input.LA(1);

                         
                        int index42_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_147);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA42_148 = input.LA(1);

                         
                        int index42_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_148);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA42_149 = input.LA(1);

                         
                        int index42_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_149);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA42_150 = input.LA(1);

                         
                        int index42_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_150);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA42_151 = input.LA(1);

                         
                        int index42_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_151);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA42_152 = input.LA(1);

                         
                        int index42_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_152);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA42_153 = input.LA(1);

                         
                        int index42_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_153);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA42_155 = input.LA(1);

                         
                        int index42_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_155);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA42_169 = input.LA(1);

                         
                        int index42_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_169);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA42_202 = input.LA(1);

                         
                        int index42_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_202);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA42_203 = input.LA(1);

                         
                        int index42_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_203);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA42_206 = input.LA(1);

                         
                        int index42_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_206);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA42_207 = input.LA(1);

                         
                        int index42_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index42_207);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA46_eotS =
        "\u034e\uffff";
    static final String DFA46_eofS =
        "\1\uffff\4\10\1\uffff\2\10\u00df\uffff\1\10\156\uffff\1\10\20\uffff"+
        "\1\10\20\uffff\1\10\20\uffff\1\10\107\uffff\1\10\20\uffff\1\10\u016b"+
        "\uffff";
    static final String DFA46_minS =
        "\1\13\4\25\1\55\2\25\3\uffff\1\55\1\13\65\uffff\1\55\1\13\65\uffff"+
        "\1\55\1\13\65\uffff\1\55\1\13\65\uffff\1\25\1\55\1\13\65\uffff\1"+
        "\55\1\13\65\uffff\1\25\20\uffff\1\25\20\uffff\1\25\20\uffff\1\25"+
        "\20\uffff\1\55\1\13\65\uffff\1\25\20\uffff\1\25\20\uffff\2\0\65"+
        "\uffff\2\0\65\uffff\2\0\65\uffff\2\0\65\uffff\1\0\20\uffff\2\0\65"+
        "\uffff\2\0\65\uffff";
    static final String DFA46_maxS =
        "\1\u00a4\4\u00c2\1\55\2\u00c2\3\uffff\1\55\1\u00c3\65\uffff\1\55"+
        "\1\u00c3\65\uffff\1\55\1\u00c3\65\uffff\1\55\1\u00c3\65\uffff\1"+
        "\u00c2\1\55\1\u00c3\65\uffff\1\55\1\u00c3\65\uffff\1\u00c2\20\uffff"+
        "\1\u00c2\20\uffff\1\u00c2\20\uffff\1\u00c2\20\uffff\1\55\1\u00c3"+
        "\65\uffff\1\u00c2\20\uffff\1\u00c2\20\uffff\2\0\65\uffff\2\0\65"+
        "\uffff\2\0\65\uffff\2\0\65\uffff\1\0\20\uffff\2\0\65\uffff\2\0\65"+
        "\uffff";
    static final String DFA46_acceptS =
        "\10\uffff\1\2\u014f\uffff\17\1\2\uffff\17\1\2\uffff\17\1\2\uffff"+
        "\17\1\71\uffff\17\1\2\uffff\17\1\u00de\uffff\17\1\156\uffff";
    static final String DFA46_specialS =
        "\14\uffff\1\0\66\uffff\1\1\66\uffff\1\2\66\uffff\1\3\67\uffff\1"+
        "\4\66\uffff\1\5\172\uffff\1\6\127\uffff\1\7\1\10\65\uffff\1\11\1"+
        "\12\65\uffff\1\13\1\14\65\uffff\1\15\1\16\65\uffff\1\17\20\uffff"+
        "\1\20\1\21\65\uffff\1\22\1\23\65\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\4\41\uffff\1\6\24\uffff\1\3\23\uffff\1\1\1\2\32\uffff\1\5"+
            "\1\uffff\1\10\46\uffff\1\7\5\uffff\1\10\2\uffff\1\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\14\2\10\1\uffff\2\10\1\uffff\3\10"+
            "\1\uffff\2\13\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff\1\10\2"+
            "\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10\1\uffff"+
            "\2\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\103\2\10\1\uffff\2\10\1\uffff\3\10"+
            "\1\uffff\2\102\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff\1\10"+
            "\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10\1\uffff"+
            "\2\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\172\2\10\1\uffff\2\10\1\uffff\3\10"+
            "\1\uffff\2\171\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff\1\10"+
            "\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10\1\uffff"+
            "\2\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u00b1\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u00b0\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "\1\u00e7",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u00e9\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u00e8\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0120\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u011f\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "\1\u0156",
            "\1\u015d\41\uffff\1\u015f\24\uffff\1\u015c\23\uffff\1\u015a"+
            "\1\u015b\26\uffff\1\u0163\3\uffff\1\u015e\1\uffff\1\u0159\1"+
            "\u0166\1\10\2\uffff\1\u0165\2\uffff\1\u0158\1\u0165\35\uffff"+
            "\1\u0160\5\uffff\1\u0162\2\uffff\1\u0161\36\uffff\1\u0164",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0167",
            "\1\u016e\41\uffff\1\u0170\24\uffff\1\u016d\23\uffff\1\u016b"+
            "\1\u016c\26\uffff\1\u0174\3\uffff\1\u016f\1\uffff\1\u016a\1"+
            "\u0177\1\10\2\uffff\1\u0176\2\uffff\1\u0169\1\u0176\35\uffff"+
            "\1\u0171\5\uffff\1\u0173\2\uffff\1\u0172\36\uffff\1\u0175",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0178",
            "\1\u017f\41\uffff\1\u0181\24\uffff\1\u017e\23\uffff\1\u017c"+
            "\1\u017d\26\uffff\1\u0185\3\uffff\1\u0180\1\uffff\1\u017b\1"+
            "\u0188\1\10\2\uffff\1\u0187\2\uffff\1\u017a\1\u0187\35\uffff"+
            "\1\u0182\5\uffff\1\u0184\2\uffff\1\u0183\36\uffff\1\u0186",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0189",
            "\1\u0190\41\uffff\1\u0192\24\uffff\1\u018f\23\uffff\1\u018d"+
            "\1\u018e\26\uffff\1\u0196\3\uffff\1\u0191\1\uffff\1\u018c\1"+
            "\u0199\1\10\2\uffff\1\u0198\2\uffff\1\u018b\1\u0198\35\uffff"+
            "\1\u0193\5\uffff\1\u0195\2\uffff\1\u0194\36\uffff\1\u0197",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u019b\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u019a\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "\1\u01d1",
            "\1\u01d8\41\uffff\1\u01da\24\uffff\1\u01d7\23\uffff\1\u01d5"+
            "\1\u01d6\26\uffff\1\u01de\3\uffff\1\u01d9\1\uffff\1\u01d4\1"+
            "\u01e1\1\10\2\uffff\1\u01e0\2\uffff\1\u01d3\1\u01e0\35\uffff"+
            "\1\u01db\5\uffff\1\u01dd\2\uffff\1\u01dc\36\uffff\1\u01df",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01e2",
            "\1\u01e9\41\uffff\1\u01eb\24\uffff\1\u01e8\23\uffff\1\u01e6"+
            "\1\u01e7\26\uffff\1\u01ef\3\uffff\1\u01ea\1\uffff\1\u01e5\1"+
            "\u01f2\1\10\2\uffff\1\u01f1\2\uffff\1\u01e4\1\u01f1\35\uffff"+
            "\1\u01ec\5\uffff\1\u01ee\2\uffff\1\u01ed\36\uffff\1\u01f0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u01f3\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u01f4\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u022a\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u022b\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0261\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u0262\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0298\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u0299\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02cf",
            "\1\u02d6\41\uffff\1\u02d8\24\uffff\1\u02d5\23\uffff\1\u02d3"+
            "\1\u02d4\26\uffff\1\u02dc\3\uffff\1\u02d7\1\uffff\1\u02d2\1"+
            "\u02df\1\10\2\uffff\1\u02de\2\uffff\1\u02d1\1\u02de\35\uffff"+
            "\1\u02d9\5\uffff\1\u02db\2\uffff\1\u02da\36\uffff\1\u02dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u02e0\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u02e1\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0317\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u0318\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "477:1: simple_expression_value_access : ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_12==118) ) {s = 8;}

                        else if ( (LA46_12==124) && (synpred6_Objc())) {s = 344;}

                        else if ( (LA46_12==116) && (synpred6_Objc())) {s = 345;}

                        else if ( (LA46_12==STRING_LITERAL) && (synpred6_Objc())) {s = 346;}

                        else if ( (LA46_12==STRING_OBJC) && (synpred6_Objc())) {s = 347;}

                        else if ( (LA46_12==NUMBER_LITERAL) && (synpred6_Objc())) {s = 348;}

                        else if ( (LA46_12==BOOL_LITERAL) && (synpred6_Objc())) {s = 349;}

                        else if ( (LA46_12==114) && (synpred6_Objc())) {s = 350;}

                        else if ( (LA46_12==ID) && (synpred6_Objc())) {s = 351;}

                        else if ( (LA46_12==155) && (synpred6_Objc())) {s = 352;}

                        else if ( (LA46_12==164) && (synpred6_Objc())) {s = 353;}

                        else if ( (LA46_12==161) && (synpred6_Objc())) {s = 354;}

                        else if ( (LA46_12==110) && (synpred6_Objc())) {s = 355;}

                        else if ( (LA46_12==195) && (synpred6_Objc())) {s = 356;}

                        else if ( (LA46_12==121||LA46_12==125) && (synpred6_Objc())) {s = 357;}

                        else if ( (LA46_12==117) && (synpred6_Objc())) {s = 358;}

                         
                        input.seek(index46_12);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_67 = input.LA(1);

                         
                        int index46_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_67==118) ) {s = 8;}

                        else if ( (LA46_67==124) && (synpred6_Objc())) {s = 361;}

                        else if ( (LA46_67==116) && (synpred6_Objc())) {s = 362;}

                        else if ( (LA46_67==STRING_LITERAL) && (synpred6_Objc())) {s = 363;}

                        else if ( (LA46_67==STRING_OBJC) && (synpred6_Objc())) {s = 364;}

                        else if ( (LA46_67==NUMBER_LITERAL) && (synpred6_Objc())) {s = 365;}

                        else if ( (LA46_67==BOOL_LITERAL) && (synpred6_Objc())) {s = 366;}

                        else if ( (LA46_67==114) && (synpred6_Objc())) {s = 367;}

                        else if ( (LA46_67==ID) && (synpred6_Objc())) {s = 368;}

                        else if ( (LA46_67==155) && (synpred6_Objc())) {s = 369;}

                        else if ( (LA46_67==164) && (synpred6_Objc())) {s = 370;}

                        else if ( (LA46_67==161) && (synpred6_Objc())) {s = 371;}

                        else if ( (LA46_67==110) && (synpred6_Objc())) {s = 372;}

                        else if ( (LA46_67==195) && (synpred6_Objc())) {s = 373;}

                        else if ( (LA46_67==121||LA46_67==125) && (synpred6_Objc())) {s = 374;}

                        else if ( (LA46_67==117) && (synpred6_Objc())) {s = 375;}

                         
                        input.seek(index46_67);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_122 = input.LA(1);

                         
                        int index46_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_122==118) ) {s = 8;}

                        else if ( (LA46_122==124) && (synpred6_Objc())) {s = 378;}

                        else if ( (LA46_122==116) && (synpred6_Objc())) {s = 379;}

                        else if ( (LA46_122==STRING_LITERAL) && (synpred6_Objc())) {s = 380;}

                        else if ( (LA46_122==STRING_OBJC) && (synpred6_Objc())) {s = 381;}

                        else if ( (LA46_122==NUMBER_LITERAL) && (synpred6_Objc())) {s = 382;}

                        else if ( (LA46_122==BOOL_LITERAL) && (synpred6_Objc())) {s = 383;}

                        else if ( (LA46_122==114) && (synpred6_Objc())) {s = 384;}

                        else if ( (LA46_122==ID) && (synpred6_Objc())) {s = 385;}

                        else if ( (LA46_122==155) && (synpred6_Objc())) {s = 386;}

                        else if ( (LA46_122==164) && (synpred6_Objc())) {s = 387;}

                        else if ( (LA46_122==161) && (synpred6_Objc())) {s = 388;}

                        else if ( (LA46_122==110) && (synpred6_Objc())) {s = 389;}

                        else if ( (LA46_122==195) && (synpred6_Objc())) {s = 390;}

                        else if ( (LA46_122==121||LA46_122==125) && (synpred6_Objc())) {s = 391;}

                        else if ( (LA46_122==117) && (synpred6_Objc())) {s = 392;}

                         
                        input.seek(index46_122);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_177 = input.LA(1);

                         
                        int index46_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_177==118) ) {s = 8;}

                        else if ( (LA46_177==124) && (synpred6_Objc())) {s = 395;}

                        else if ( (LA46_177==116) && (synpred6_Objc())) {s = 396;}

                        else if ( (LA46_177==STRING_LITERAL) && (synpred6_Objc())) {s = 397;}

                        else if ( (LA46_177==STRING_OBJC) && (synpred6_Objc())) {s = 398;}

                        else if ( (LA46_177==NUMBER_LITERAL) && (synpred6_Objc())) {s = 399;}

                        else if ( (LA46_177==BOOL_LITERAL) && (synpred6_Objc())) {s = 400;}

                        else if ( (LA46_177==114) && (synpred6_Objc())) {s = 401;}

                        else if ( (LA46_177==ID) && (synpred6_Objc())) {s = 402;}

                        else if ( (LA46_177==155) && (synpred6_Objc())) {s = 403;}

                        else if ( (LA46_177==164) && (synpred6_Objc())) {s = 404;}

                        else if ( (LA46_177==161) && (synpred6_Objc())) {s = 405;}

                        else if ( (LA46_177==110) && (synpred6_Objc())) {s = 406;}

                        else if ( (LA46_177==195) && (synpred6_Objc())) {s = 407;}

                        else if ( (LA46_177==121||LA46_177==125) && (synpred6_Objc())) {s = 408;}

                        else if ( (LA46_177==117) && (synpred6_Objc())) {s = 409;}

                         
                        input.seek(index46_177);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_233 = input.LA(1);

                         
                        int index46_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_233==118) ) {s = 8;}

                        else if ( (LA46_233==124) && (synpred6_Objc())) {s = 467;}

                        else if ( (LA46_233==116) && (synpred6_Objc())) {s = 468;}

                        else if ( (LA46_233==STRING_LITERAL) && (synpred6_Objc())) {s = 469;}

                        else if ( (LA46_233==STRING_OBJC) && (synpred6_Objc())) {s = 470;}

                        else if ( (LA46_233==NUMBER_LITERAL) && (synpred6_Objc())) {s = 471;}

                        else if ( (LA46_233==BOOL_LITERAL) && (synpred6_Objc())) {s = 472;}

                        else if ( (LA46_233==114) && (synpred6_Objc())) {s = 473;}

                        else if ( (LA46_233==ID) && (synpred6_Objc())) {s = 474;}

                        else if ( (LA46_233==155) && (synpred6_Objc())) {s = 475;}

                        else if ( (LA46_233==164) && (synpred6_Objc())) {s = 476;}

                        else if ( (LA46_233==161) && (synpred6_Objc())) {s = 477;}

                        else if ( (LA46_233==110) && (synpred6_Objc())) {s = 478;}

                        else if ( (LA46_233==195) && (synpred6_Objc())) {s = 479;}

                        else if ( (LA46_233==121||LA46_233==125) && (synpred6_Objc())) {s = 480;}

                        else if ( (LA46_233==117) && (synpred6_Objc())) {s = 481;}

                         
                        input.seek(index46_233);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_288 = input.LA(1);

                         
                        int index46_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_288==118) ) {s = 8;}

                        else if ( (LA46_288==124) && (synpred6_Objc())) {s = 484;}

                        else if ( (LA46_288==116) && (synpred6_Objc())) {s = 485;}

                        else if ( (LA46_288==STRING_LITERAL) && (synpred6_Objc())) {s = 486;}

                        else if ( (LA46_288==STRING_OBJC) && (synpred6_Objc())) {s = 487;}

                        else if ( (LA46_288==NUMBER_LITERAL) && (synpred6_Objc())) {s = 488;}

                        else if ( (LA46_288==BOOL_LITERAL) && (synpred6_Objc())) {s = 489;}

                        else if ( (LA46_288==114) && (synpred6_Objc())) {s = 490;}

                        else if ( (LA46_288==ID) && (synpred6_Objc())) {s = 491;}

                        else if ( (LA46_288==155) && (synpred6_Objc())) {s = 492;}

                        else if ( (LA46_288==164) && (synpred6_Objc())) {s = 493;}

                        else if ( (LA46_288==161) && (synpred6_Objc())) {s = 494;}

                        else if ( (LA46_288==110) && (synpred6_Objc())) {s = 495;}

                        else if ( (LA46_288==195) && (synpred6_Objc())) {s = 496;}

                        else if ( (LA46_288==121||LA46_288==125) && (synpred6_Objc())) {s = 497;}

                        else if ( (LA46_288==117) && (synpred6_Objc())) {s = 498;}

                         
                        input.seek(index46_288);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_411 = input.LA(1);

                         
                        int index46_411 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_411==118) ) {s = 8;}

                        else if ( (LA46_411==124) && (synpred6_Objc())) {s = 721;}

                        else if ( (LA46_411==116) && (synpred6_Objc())) {s = 722;}

                        else if ( (LA46_411==STRING_LITERAL) && (synpred6_Objc())) {s = 723;}

                        else if ( (LA46_411==STRING_OBJC) && (synpred6_Objc())) {s = 724;}

                        else if ( (LA46_411==NUMBER_LITERAL) && (synpred6_Objc())) {s = 725;}

                        else if ( (LA46_411==BOOL_LITERAL) && (synpred6_Objc())) {s = 726;}

                        else if ( (LA46_411==114) && (synpred6_Objc())) {s = 727;}

                        else if ( (LA46_411==ID) && (synpred6_Objc())) {s = 728;}

                        else if ( (LA46_411==155) && (synpred6_Objc())) {s = 729;}

                        else if ( (LA46_411==164) && (synpred6_Objc())) {s = 730;}

                        else if ( (LA46_411==161) && (synpred6_Objc())) {s = 731;}

                        else if ( (LA46_411==110) && (synpred6_Objc())) {s = 732;}

                        else if ( (LA46_411==195) && (synpred6_Objc())) {s = 733;}

                        else if ( (LA46_411==121||LA46_411==125) && (synpred6_Objc())) {s = 734;}

                        else if ( (LA46_411==117) && (synpred6_Objc())) {s = 735;}

                         
                        input.seek(index46_411);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_499 = input.LA(1);

                         
                        int index46_499 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_499);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_500 = input.LA(1);

                         
                        int index46_500 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_500);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA46_554 = input.LA(1);

                         
                        int index46_554 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_554);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA46_555 = input.LA(1);

                         
                        int index46_555 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_555);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA46_609 = input.LA(1);

                         
                        int index46_609 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_609);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA46_610 = input.LA(1);

                         
                        int index46_610 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_610);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA46_664 = input.LA(1);

                         
                        int index46_664 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_664);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA46_665 = input.LA(1);

                         
                        int index46_665 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_665);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA46_719 = input.LA(1);

                         
                        int index46_719 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_719);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA46_736 = input.LA(1);

                         
                        int index46_736 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_736);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA46_737 = input.LA(1);

                         
                        int index46_737 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_737);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA46_791 = input.LA(1);

                         
                        int index46_791 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_791);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA46_792 = input.LA(1);

                         
                        int index46_792 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 735;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_792);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA49_eotS =
        "\u00d5\uffff";
    static final String DFA49_eofS =
        "\1\uffff\1\3\u00d3\uffff";
    static final String DFA49_minS =
        "\1\13\1\25\11\uffff\1\13\66\uffff\2\13\10\55\4\13\46\0\2\uffff\5"+
        "\0\2\uffff\5\0\2\uffff\5\0\2\uffff\7\0\2\uffff\5\0\2\uffff\70\0";
    static final String DFA49_maxS =
        "\1\u00a4\1\u00c2\11\uffff\1\u00c3\66\uffff\1\u00a4\1\u00c3\4\u00c1"+
        "\1\55\2\u00c1\1\u00bc\1\u00c3\3\u00a4\46\0\2\uffff\5\0\2\uffff\5"+
        "\0\2\uffff\5\0\2\uffff\7\0\2\uffff\5\0\2\uffff\70\0";
    static final String DFA49_acceptS =
        "\2\uffff\1\2\1\3\5\uffff\1\4\1\5\153\uffff\1\1\6\uffff\1\1\6\uffff"+
        "\1\1\6\uffff\1\1\10\uffff\1\1\6\uffff\1\1\71\uffff";
    static final String DFA49_specialS =
        "\104\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\5\uffff\1\6\1\7\1\10"+
        "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\2\uffff\1\54\1\55"+
        "\1\56\1\57\1\60\2\uffff\1\61\1\62\1\63\1\64\1\65\2\uffff\1\66\1"+
        "\67\1\70\1\71\1\72\2\uffff\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
        "\2\uffff\1\102\1\103\1\104\1\105\1\106\2\uffff\1\107\1\110\1\111"+
        "\1\112\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124"+
        "\1\125\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137"+
        "\1\140\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152"+
        "\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165"+
        "\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176}>";
    static final String[] DFA49_transitionS = {
            "\1\3\41\uffff\1\1\24\uffff\1\3\23\uffff\2\3\32\uffff\1\3\1\uffff"+
            "\1\12\46\uffff\1\3\5\uffff\1\11\2\uffff\1\2",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\35\uffff\1\3\1"+
            "\uffff\2\3\1\uffff\3\3\1\uffff\2\3\1\uffff\3\3\1\uffff\6\3\1"+
            "\uffff\6\3\1\uffff\10\3\4\uffff\1\3\2\uffff\4\3\1\uffff\1\13"+
            "\2\3\1\uffff\15\3\1\uffff\15\3\1\uffff\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\41\uffff\1\111\24\uffff\1\106\23\uffff\1\104\1\105\26"+
            "\uffff\1\115\3\uffff\1\110\1\uffff\1\103\4\uffff\1\117\2\uffff"+
            "\1\102\1\117\35\uffff\1\112\5\uffff\1\114\2\uffff\1\113\36\uffff"+
            "\1\116",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\124\41\uffff\1\126\24\uffff\1\123\23\uffff\1\121\1\122\32"+
            "\uffff\1\125\1\uffff\1\120\46\uffff\1\127\5\uffff\1\131\2\uffff"+
            "\1\130",
            "\1\151\41\uffff\1\141\24\uffff\1\150\23\uffff\1\146\1\147\26"+
            "\uffff\1\156\3\uffff\1\152\1\uffff\1\133\4\uffff\1\160\2\uffff"+
            "\1\145\1\160\35\uffff\1\153\5\uffff\1\155\2\uffff\1\154\2\uffff"+
            "\1\134\4\uffff\1\144\3\uffff\1\132\2\uffff\1\136\1\137\1\uffff"+
            "\1\140\1\uffff\1\142\2\uffff\1\143\1\135\6\uffff\1\157",
            "\1\3\101\uffff\1\164\1\uffff\2\164\1\uffff\1\162\1\uffff\1"+
            "\164\1\uffff\1\164\1\163\2\uffff\1\164\1\163\1\uffff\2\161\2"+
            "\uffff\2\164\1\uffff\6\164\1\uffff\1\165\24\uffff\1\166\1\164"+
            "\33\uffff\1\164\1\uffff\1\164",
            "\1\3\101\uffff\1\173\1\uffff\2\173\1\uffff\1\171\1\uffff\1"+
            "\173\1\uffff\1\173\1\172\2\uffff\1\173\1\172\1\uffff\2\170\2"+
            "\uffff\2\173\1\uffff\6\173\1\uffff\1\174\24\uffff\1\175\1\173"+
            "\33\uffff\1\173\1\uffff\1\173",
            "\1\3\101\uffff\1\u0082\1\uffff\2\u0082\1\uffff\1\u0080\1\uffff"+
            "\1\u0082\1\uffff\1\u0082\1\u0081\2\uffff\1\u0082\1\u0081\1\uffff"+
            "\2\177\2\uffff\2\u0082\1\uffff\6\u0082\1\uffff\1\u0083\24\uffff"+
            "\1\u0084\1\u0082\33\uffff\1\u0082\1\uffff\1\u0082",
            "\1\3\101\uffff\1\u0089\1\uffff\2\u0089\1\uffff\1\u0087\1\uffff"+
            "\1\u0089\1\uffff\1\u0089\1\u0088\2\uffff\1\u0089\1\u0088\1\uffff"+
            "\2\u0086\2\uffff\2\u0089\1\uffff\6\u0089\1\uffff\1\u008a\24"+
            "\uffff\1\u008b\1\u0089\33\uffff\1\u0089\1\uffff\1\u0089",
            "\1\u008d",
            "\1\3\101\uffff\1\u0092\1\uffff\2\u0092\1\uffff\1\u008f\1\uffff"+
            "\1\u0092\1\uffff\1\u0092\1\u0091\2\uffff\1\u0092\1\u0091\1\uffff"+
            "\2\u008e\2\uffff\2\u0092\1\uffff\6\u0092\1\uffff\1\u0093\23"+
            "\uffff\1\u0090\1\u0094\1\u0092\33\uffff\1\u0092\1\uffff\1\u0092",
            "\1\3\101\uffff\1\u0099\1\uffff\2\u0099\1\uffff\1\u0097\1\uffff"+
            "\1\u0099\1\uffff\1\u0099\1\u0098\2\uffff\1\u0099\1\u0098\1\uffff"+
            "\2\u0096\2\uffff\2\u0099\1\uffff\6\u0099\1\uffff\1\u009a\24"+
            "\uffff\1\u009b\1\u0099\33\uffff\1\u0099\1\uffff\1\u0099",
            "\1\u00a4\106\uffff\1\u009e\1\u00a8\61\uffff\1\u009f\4\uffff"+
            "\1\u00a7\3\uffff\1\u009d\2\uffff\1\u00a1\1\u00a2\1\uffff\1\u00a3"+
            "\1\uffff\1\u00a5\2\uffff\1\u00a6\1\u00a0",
            "\1\u00ae\41\uffff\1\u00b0\24\uffff\1\u00ad\23\uffff\1\u00ab"+
            "\1\u00ac\26\uffff\1\u00b4\3\uffff\1\u00af\1\uffff\1\u00aa\4"+
            "\uffff\1\u00b6\2\uffff\1\u00a9\1\u00b6\35\uffff\1\u00b1\5\uffff"+
            "\1\u00b3\2\uffff\1\u00b2\36\uffff\1\u00b5",
            "\1\u00bb\41\uffff\1\u00bd\24\uffff\1\u00ba\23\uffff\1\u00b8"+
            "\1\u00b9\32\uffff\1\u00bc\1\uffff\1\u00b7\46\uffff\1\u00be\5"+
            "\uffff\1\u00c0\2\uffff\1\u00bf",
            "\1\u00c5\41\uffff\1\u00c7\24\uffff\1\u00c4\23\uffff\1\u00c2"+
            "\1\u00c3\32\uffff\1\u00c6\1\uffff\1\u00c1\46\uffff\1\u00c8\5"+
            "\uffff\1\u00ca\2\uffff\1\u00c9",
            "\1\u00cf\41\uffff\1\u00d1\24\uffff\1\u00ce\23\uffff\1\u00cc"+
            "\1\u00cd\32\uffff\1\u00d0\1\uffff\1\u00cb\46\uffff\1\u00d2\5"+
            "\uffff\1\u00d4\2\uffff\1\u00d3",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "491:1: simple_expression_value2 : ( ( name '[' )=> name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_68 = input.LA(1);

                         
                        int index49_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA49_68 >= 127 && LA49_68 <= 128)) ) {s = 113;}

                        else if ( (LA49_68==116) ) {s = 114;}

                        else if ( (LA49_68==121||LA49_68==125) ) {s = 115;}

                        else if ( (LA49_68==111||(LA49_68 >= 113 && LA49_68 <= 114)||LA49_68==118||LA49_68==120||LA49_68==124||(LA49_68 >= 131 && LA49_68 <= 132)||(LA49_68 >= 134 && LA49_68 <= 139)||LA49_68==163||LA49_68==191||LA49_68==193) ) {s = 116;}

                        else if ( (LA49_68==141) ) {s = 117;}

                        else if ( (LA49_68==162) && (synpred7_Objc())) {s = 118;}

                        else if ( (LA49_68==ID) ) {s = 3;}

                         
                        input.seek(index49_68);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_69 = input.LA(1);

                         
                        int index49_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA49_69 >= 127 && LA49_69 <= 128)) ) {s = 120;}

                        else if ( (LA49_69==116) ) {s = 121;}

                        else if ( (LA49_69==121||LA49_69==125) ) {s = 122;}

                        else if ( (LA49_69==111||(LA49_69 >= 113 && LA49_69 <= 114)||LA49_69==118||LA49_69==120||LA49_69==124||(LA49_69 >= 131 && LA49_69 <= 132)||(LA49_69 >= 134 && LA49_69 <= 139)||LA49_69==163||LA49_69==191||LA49_69==193) ) {s = 123;}

                        else if ( (LA49_69==141) ) {s = 124;}

                        else if ( (LA49_69==162) && (synpred7_Objc())) {s = 125;}

                        else if ( (LA49_69==ID) ) {s = 3;}

                         
                        input.seek(index49_69);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_70 = input.LA(1);

                         
                        int index49_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA49_70 >= 127 && LA49_70 <= 128)) ) {s = 127;}

                        else if ( (LA49_70==116) ) {s = 128;}

                        else if ( (LA49_70==121||LA49_70==125) ) {s = 129;}

                        else if ( (LA49_70==111||(LA49_70 >= 113 && LA49_70 <= 114)||LA49_70==118||LA49_70==120||LA49_70==124||(LA49_70 >= 131 && LA49_70 <= 132)||(LA49_70 >= 134 && LA49_70 <= 139)||LA49_70==163||LA49_70==191||LA49_70==193) ) {s = 130;}

                        else if ( (LA49_70==141) ) {s = 131;}

                        else if ( (LA49_70==162) && (synpred7_Objc())) {s = 132;}

                        else if ( (LA49_70==ID) ) {s = 3;}

                         
                        input.seek(index49_70);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_71 = input.LA(1);

                         
                        int index49_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA49_71 >= 127 && LA49_71 <= 128)) ) {s = 134;}

                        else if ( (LA49_71==116) ) {s = 135;}

                        else if ( (LA49_71==121||LA49_71==125) ) {s = 136;}

                        else if ( (LA49_71==111||(LA49_71 >= 113 && LA49_71 <= 114)||LA49_71==118||LA49_71==120||LA49_71==124||(LA49_71 >= 131 && LA49_71 <= 132)||(LA49_71 >= 134 && LA49_71 <= 139)||LA49_71==163||LA49_71==191||LA49_71==193) ) {s = 137;}

                        else if ( (LA49_71==141) ) {s = 138;}

                        else if ( (LA49_71==162) && (synpred7_Objc())) {s = 139;}

                        else if ( (LA49_71==ID) ) {s = 3;}

                         
                        input.seek(index49_71);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_73 = input.LA(1);

                         
                        int index49_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA49_73 >= 127 && LA49_73 <= 128)) ) {s = 142;}

                        else if ( (LA49_73==116) ) {s = 143;}

                        else if ( (LA49_73==161) ) {s = 144;}

                        else if ( (LA49_73==121||LA49_73==125) ) {s = 145;}

                        else if ( (LA49_73==111||(LA49_73 >= 113 && LA49_73 <= 114)||LA49_73==118||LA49_73==120||LA49_73==124||(LA49_73 >= 131 && LA49_73 <= 132)||(LA49_73 >= 134 && LA49_73 <= 139)||LA49_73==163||LA49_73==191||LA49_73==193) ) {s = 146;}

                        else if ( (LA49_73==141) ) {s = 147;}

                        else if ( (LA49_73==162) && (synpred7_Objc())) {s = 148;}

                        else if ( (LA49_73==ID) ) {s = 3;}

                         
                        input.seek(index49_73);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA49_74 = input.LA(1);

                         
                        int index49_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA49_74 >= 127 && LA49_74 <= 128)) ) {s = 150;}

                        else if ( (LA49_74==116) ) {s = 151;}

                        else if ( (LA49_74==121||LA49_74==125) ) {s = 152;}

                        else if ( (LA49_74==111||(LA49_74 >= 113 && LA49_74 <= 114)||LA49_74==118||LA49_74==120||LA49_74==124||(LA49_74 >= 131 && LA49_74 <= 132)||(LA49_74 >= 134 && LA49_74 <= 139)||LA49_74==163||LA49_74==191||LA49_74==193) ) {s = 153;}

                        else if ( (LA49_74==141) ) {s = 154;}

                        else if ( (LA49_74==162) && (synpred7_Objc())) {s = 155;}

                        else if ( (LA49_74==ID) ) {s = 3;}

                         
                        input.seek(index49_74);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA49_80 = input.LA(1);

                         
                        int index49_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_80);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA49_81 = input.LA(1);

                         
                        int index49_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_81);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA49_82 = input.LA(1);

                         
                        int index49_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_82);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA49_83 = input.LA(1);

                         
                        int index49_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_83);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA49_84 = input.LA(1);

                         
                        int index49_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_84);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_85);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA49_86 = input.LA(1);

                         
                        int index49_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_86);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA49_87 = input.LA(1);

                         
                        int index49_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_87);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA49_88 = input.LA(1);

                         
                        int index49_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_88);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA49_89 = input.LA(1);

                         
                        int index49_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_89);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA49_90 = input.LA(1);

                         
                        int index49_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_90);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA49_91 = input.LA(1);

                         
                        int index49_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_91);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA49_92 = input.LA(1);

                         
                        int index49_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_92);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA49_93 = input.LA(1);

                         
                        int index49_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_93);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA49_94 = input.LA(1);

                         
                        int index49_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_94);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA49_95 = input.LA(1);

                         
                        int index49_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_95);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA49_96 = input.LA(1);

                         
                        int index49_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_96);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA49_97 = input.LA(1);

                         
                        int index49_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_97);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA49_98 = input.LA(1);

                         
                        int index49_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_98);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA49_99 = input.LA(1);

                         
                        int index49_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_99);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA49_100 = input.LA(1);

                         
                        int index49_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_100);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA49_101 = input.LA(1);

                         
                        int index49_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_101);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA49_102 = input.LA(1);

                         
                        int index49_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_102);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA49_103 = input.LA(1);

                         
                        int index49_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_103);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA49_104 = input.LA(1);

                         
                        int index49_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_104);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA49_105 = input.LA(1);

                         
                        int index49_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_105);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA49_106 = input.LA(1);

                         
                        int index49_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_106);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA49_107 = input.LA(1);

                         
                        int index49_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_107);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA49_108 = input.LA(1);

                         
                        int index49_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_108);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA49_109 = input.LA(1);

                         
                        int index49_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_109);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA49_110 = input.LA(1);

                         
                        int index49_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_110);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA49_111 = input.LA(1);

                         
                        int index49_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_111);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA49_112 = input.LA(1);

                         
                        int index49_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_112);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA49_113 = input.LA(1);

                         
                        int index49_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_113);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA49_114 = input.LA(1);

                         
                        int index49_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_114);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA49_115 = input.LA(1);

                         
                        int index49_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_115);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA49_116 = input.LA(1);

                         
                        int index49_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_116);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA49_117 = input.LA(1);

                         
                        int index49_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_117);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA49_120 = input.LA(1);

                         
                        int index49_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_120);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA49_121 = input.LA(1);

                         
                        int index49_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_121);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA49_122 = input.LA(1);

                         
                        int index49_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_122);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA49_123 = input.LA(1);

                         
                        int index49_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_123);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA49_124 = input.LA(1);

                         
                        int index49_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_124);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA49_127 = input.LA(1);

                         
                        int index49_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_127);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA49_128 = input.LA(1);

                         
                        int index49_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_128);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA49_129 = input.LA(1);

                         
                        int index49_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_129);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA49_130 = input.LA(1);

                         
                        int index49_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_130);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA49_131 = input.LA(1);

                         
                        int index49_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_131);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA49_134 = input.LA(1);

                         
                        int index49_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_134);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA49_135 = input.LA(1);

                         
                        int index49_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_135);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA49_136 = input.LA(1);

                         
                        int index49_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_136);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA49_137 = input.LA(1);

                         
                        int index49_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_137);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA49_138 = input.LA(1);

                         
                        int index49_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_138);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA49_141 = input.LA(1);

                         
                        int index49_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_141);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA49_142 = input.LA(1);

                         
                        int index49_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_142);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA49_143 = input.LA(1);

                         
                        int index49_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_143);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA49_144 = input.LA(1);

                         
                        int index49_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_144);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA49_145 = input.LA(1);

                         
                        int index49_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_145);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA49_146 = input.LA(1);

                         
                        int index49_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_146);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA49_147 = input.LA(1);

                         
                        int index49_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_147);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA49_150 = input.LA(1);

                         
                        int index49_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_150);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA49_151 = input.LA(1);

                         
                        int index49_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_151);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA49_152 = input.LA(1);

                         
                        int index49_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_152);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA49_153 = input.LA(1);

                         
                        int index49_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_153);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA49_154 = input.LA(1);

                         
                        int index49_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_154);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA49_157 = input.LA(1);

                         
                        int index49_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_157);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA49_158 = input.LA(1);

                         
                        int index49_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_158);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA49_159 = input.LA(1);

                         
                        int index49_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_159);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA49_160 = input.LA(1);

                         
                        int index49_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_160);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA49_161 = input.LA(1);

                         
                        int index49_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_161);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA49_162 = input.LA(1);

                         
                        int index49_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_162);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA49_163 = input.LA(1);

                         
                        int index49_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_163);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA49_164 = input.LA(1);

                         
                        int index49_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_164);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA49_165 = input.LA(1);

                         
                        int index49_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_165);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA49_166 = input.LA(1);

                         
                        int index49_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_166);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA49_167 = input.LA(1);

                         
                        int index49_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_167);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA49_168 = input.LA(1);

                         
                        int index49_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_168);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA49_169 = input.LA(1);

                         
                        int index49_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_169);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA49_170 = input.LA(1);

                         
                        int index49_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_170);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA49_171 = input.LA(1);

                         
                        int index49_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_171);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA49_172 = input.LA(1);

                         
                        int index49_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_172);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA49_173 = input.LA(1);

                         
                        int index49_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_173);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA49_174 = input.LA(1);

                         
                        int index49_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_174);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA49_175 = input.LA(1);

                         
                        int index49_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_175);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA49_176 = input.LA(1);

                         
                        int index49_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_176);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA49_177 = input.LA(1);

                         
                        int index49_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_177);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA49_178 = input.LA(1);

                         
                        int index49_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_178);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA49_179 = input.LA(1);

                         
                        int index49_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_179);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA49_180 = input.LA(1);

                         
                        int index49_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_180);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA49_181 = input.LA(1);

                         
                        int index49_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_181);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA49_182 = input.LA(1);

                         
                        int index49_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_182);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA49_183 = input.LA(1);

                         
                        int index49_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_183);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA49_184 = input.LA(1);

                         
                        int index49_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_184);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA49_185 = input.LA(1);

                         
                        int index49_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_185);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA49_186 = input.LA(1);

                         
                        int index49_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_186);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA49_187 = input.LA(1);

                         
                        int index49_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_187);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA49_188 = input.LA(1);

                         
                        int index49_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_188);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA49_189 = input.LA(1);

                         
                        int index49_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_189);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA49_190 = input.LA(1);

                         
                        int index49_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_190);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA49_191 = input.LA(1);

                         
                        int index49_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_191);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA49_192 = input.LA(1);

                         
                        int index49_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_192);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA49_193 = input.LA(1);

                         
                        int index49_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_193);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA49_194 = input.LA(1);

                         
                        int index49_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_194);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA49_195 = input.LA(1);

                         
                        int index49_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_195);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA49_196 = input.LA(1);

                         
                        int index49_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_196);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA49_197 = input.LA(1);

                         
                        int index49_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_197);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA49_198 = input.LA(1);

                         
                        int index49_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_198);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA49_199 = input.LA(1);

                         
                        int index49_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_199);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA49_200 = input.LA(1);

                         
                        int index49_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_200);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA49_201 = input.LA(1);

                         
                        int index49_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_201);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA49_202 = input.LA(1);

                         
                        int index49_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_202);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA49_203 = input.LA(1);

                         
                        int index49_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_203);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA49_204 = input.LA(1);

                         
                        int index49_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_204);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA49_205 = input.LA(1);

                         
                        int index49_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_205);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA49_206 = input.LA(1);

                         
                        int index49_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_206);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA49_207 = input.LA(1);

                         
                        int index49_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_207);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA49_208 = input.LA(1);

                         
                        int index49_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_208);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA49_209 = input.LA(1);

                         
                        int index49_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_209);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA49_210 = input.LA(1);

                         
                        int index49_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_210);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA49_211 = input.LA(1);

                         
                        int index49_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_211);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA49_212 = input.LA(1);

                         
                        int index49_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index49_212);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code473 = new BitSet(new long[]{0x8000200000200002L,0x0010000000020000L,0x1DD9308002188000L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_extern652 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_extern655 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_extern658 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000000000FL});
    public static final BitSet FOLLOW_set_in_extern660 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_extern665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_implementation699 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_implementation702 = new BitSet(new long[]{0x8000200000200000L,0x1110000000020000L,0x1DD9108020010004L});
    public static final BitSet FOLLOW_category_in_implementation705 = new BitSet(new long[]{0x8000200000200000L,0x1110000000020000L,0x1DD9108020010004L});
    public static final BitSet FOLLOW_implementation_body_in_implementation710 = new BitSet(new long[]{0x8000200000200000L,0x1110000000020000L,0x1DD9108020030004L});
    public static final BitSet FOLLOW_145_in_implementation715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_implementation718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_implementation_body772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_synthesize805 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_144_in_synthesize809 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_135_in_synthesize816 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_synthesize818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synthesize822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_static_declaration_wrapper846 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_block_call_predicate868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_block_call905 = new BitSet(new long[]{0x0000200000000000L,0x0030000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_block_params_in_block_call907 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_block_call910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_synchronized_call949 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_synchronized_call951 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call953 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_synchronized_call955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params973 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_block_params976 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_classical_param_in_block_params978 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_block_multiline1041 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x7BFBDDA2D0000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_internal_in_block_multiline1046 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x7BFBDDA2D0000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_block_multiline1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_block_singleline1148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1176 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_block_internal1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_goto_stmt1317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_goto_stmt1319 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1321 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_goto_stmt1323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_while_stmt1369 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_while_stmt1371 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1373 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_while_stmt1375 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_while_stmt1377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_for_in_stmt1392 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_for_classic_stmt1417 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000004L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_for_classic_stmt1422 = new BitSet(new long[]{0x0000200000000802L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1449 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1451 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1468 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1470 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1478 = new BitSet(new long[]{0x0000000000000000L,0x4488000000000000L,0x00040000000010A0L,0x0000000000000001L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1482 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1486 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1491 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1494 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1504 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1506 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_for_stmt1521 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_for_stmt1523 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_return_stmt1561 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000004L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_switch_stmt1586 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_switch_stmt1588 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1590 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_switch_stmt1592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_switch_stmt1594 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CF6210000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1597 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CF6210000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_switch_stmt1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_case_stmt1660 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_case_stmt1664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_default_stmt1687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_default_stmt1689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_do_stmt1710 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_do_stmt1712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_do_stmt1714 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_do_stmt1716 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_do_stmt1718 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_do_stmt1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_if_stmt1745 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_if_stmt1747 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_if_stmt1749 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_if_stmt1751 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_if_stmt1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_else_stmt1776 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_else_stmt1778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_try_stmt_wrapper1800 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper1803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000044000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper1806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000044000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper1809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_catch_stmt1835 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_catch_stmt1838 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1841 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_catch_stmt1844 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1846 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_catch_stmt1849 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_catch_stmt1852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_finally_stmt1876 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_finally_stmt1879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_throw_stmt1917 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt1919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_throw_stmt1921 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number1952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2035 = new BitSet(new long[]{0x0000000000000000L,0x4488000000000000L,0x00000000000010A0L,0x0000000000000001L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2037 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2052 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_method_implementation_common2067 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2069 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_implementation_common2071 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2073 = new BitSet(new long[]{0x0000200000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2136 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2139 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2141 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_clasical_method_call_predicate2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2160 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2163 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2165 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_classical_method_call2170 = new BitSet(new long[]{0x0000200000000800L,0x3234400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2172 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_method_call2175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2190 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_classical_method_params_push2193 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2195 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2219 = new BitSet(new long[]{0x0000200000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_method_params_push2226 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_123_in_method_params_push2231 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2234 = new BitSet(new long[]{0x0000200000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_method_msg2277 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_method_msg2279 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000002L});
    public static final BitSet FOLLOW_129_in_method_msg2284 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_method_msg2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_questionmark_if_stmt2316 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2318 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_questionmark_if_stmt2320 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_element_value_or_semicolon2370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_element_value_or_array_init2390 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2392 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_123_in_element_value_or_array_init2395 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2397 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_element_value_or_array_init2401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2451 = new BitSet(new long[]{0x0000000000000002L,0x1146800000000000L,0x8000000800002FD8L,0x0000000000000002L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2453 = new BitSet(new long[]{0x0000000000000002L,0x1146800000000000L,0x8000000800002FD8L,0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cast_unary_expression12468 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2498 = new BitSet(new long[]{0x0000200000000800L,0x2214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_cast_unary_expression2_in_op2_unary_expression_or_questionmark_if_stmt2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2520 = new BitSet(new long[]{0x0000000000000002L,0x2200000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_cast_unary_expression2529 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_cast_unary_expression2545 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2561 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression22576 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2597 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_cast_expression2612 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2614 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2616 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_cast_expression2618 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression2621 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_cast_expression2623 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access2658 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2661 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2663 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_simple_expression_value_access2668 = new BitSet(new long[]{0x0000200000000800L,0x3234400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access2670 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_simple_expression_value_access2673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access2680 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2683 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2685 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_simple_expression_value2701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_OBJC_in_simple_expression_value2714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value2727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_LITERAL_in_simple_expression_value2740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_simple_expression_value2754 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_known_directives_in_simple_expression_value2763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value22790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_simple_expression_value22792 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value22794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_simple_expression_value22796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value22812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value22818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value22824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_simple_expression_value22830 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value22832 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_simple_expression_value22834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper2848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper2945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_known_directives3011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_type_cast_name3049 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3051 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_cast_name3053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access3142 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_117_in_object_access3144 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access3148 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_object_access3150 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_117_in_object_access3152 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_165_in_break_stmt3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_break_stmt3171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_continue_stmt3192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_continue_stmt3194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_extern_declaration3241 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3255 = new BitSet(new long[]{0x0000000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_method_declaration_in_declarations3258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations3272 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000200000L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3274 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_field_declaration_in_declarations3277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations3291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_optional_prefix3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ns_inline3341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_property_prefix3353 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_property_prefix3355 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3357 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_property_prefix3360 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3362 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_123_in_property_prefix3367 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3369 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_property_prefix3372 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3374 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_117_in_property_prefix3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper3393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_typedef_declaration_wrapper3431 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration3451 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3453 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_123_in_typedef_declaration3456 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3458 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_typedef_declaration3462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_func_pointer_predicate3474 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer_predicate3476 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate3478 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_func_pointer_predicate3480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_func_pointer3495 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer3497 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3499 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_func_pointer3501 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_func_pointer3503 = new BitSet(new long[]{0x0000200000000000L,0x0020000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3506 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_123_in_func_pointer3509 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3511 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_117_in_func_pointer3517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal3546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal3552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal3558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal3570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name3585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_forward_class_declaration3603 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration3605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_forward_class_declaration3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name3628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_protocol_declaration3648 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration3650 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A2000CL});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration3652 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20004L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration3660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_protocol_end1_in_class_protocol_end3674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_class_protocol_end2_in_class_protocol_end3680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end13690 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20000L});
    public static final BitSet FOLLOW_145_in_class_protocol_end13697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_class_protocol_end23712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_template3724 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_template_internal_in_template3726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_template3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces3737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_implements_protocols3762 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols3764 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_123_in_implements_protocols3767 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols3769 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_implements_protocols3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal3795 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_template_internal3798 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_template_type_in_template_internal3800 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type3814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_template_type3820 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type3822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name3837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name3860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_interface_declaration3884 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration3886 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x4000000000A2000AL});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration3888 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x4000000000A20000L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration3892 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration3897 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20000L});
    public static final BitSet FOLLOW_145_in_interface_declaration3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_fields_body3919 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1D59108005400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_body_item_in_fields_body3925 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1D59108005400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_fields_body3930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item3945 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1D59108000000000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item3949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item3953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item3960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper3973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4018 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_category4039 = new BitSet(new long[]{0x0000200000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_ID_in_category4041 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_category4044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_superclass_name4064 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4099 = new BitSet(new long[]{0x0000200000000002L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4123 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4125 = new BitSet(new long[]{0x0000000000000000L,0x4C98000000000000L,0x00000000000010A4L,0x0000000000000001L});
    public static final BitSet FOLLOW_123_in_field_declaration4129 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4131 = new BitSet(new long[]{0x0000000000000000L,0x4C98000000000000L,0x00000000000010A4L,0x0000000000000001L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4138 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000004L});
    public static final BitSet FOLLOW_130_in_field_declaration4141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4152 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x4000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_field_declaration4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_field_declaration4162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple4177 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple4179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_classical_method_params4204 = new BitSet(new long[]{0x0000200000000000L,0x0830000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4206 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_123_in_classical_method_params4210 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4212 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_117_in_classical_method_params4216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param4241 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param4243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration4272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration4283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration4289 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_classical_type_declaration4299 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4301 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_classical_type_declaration4320 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4322 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_classical_type_declaration4341 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4343 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration4374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration4385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration4391 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration4400 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration4409 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration4418 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_type_declaration_plane4435 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059000000000000L});
    public static final BitSet FOLLOW_188_in_type_declaration_plane4438 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane4441 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_type_declaration_plane4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_type_decl_protocol_predicate4467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_type_decl_protocol_predicate4469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_type_declaration_protocol4485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_type_declaration_protocol4487 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol4489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_type_declaration_protocol4491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_type_declaration_struct4523 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct4525 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct4528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_type_declaration_struct4544 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct4546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_type_declaration_union4577 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union4579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union4582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_type_declaration_union4599 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union4601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_type_declaration_enum4632 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum4634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum4637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_type_declaration_enum4653 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum4655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_enum_wrapper4675 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper4685 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_enum_wrapper4692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_enum_element4707 = new BitSet(new long[]{0x0000000000000002L,0x4C88000000000000L,0x00000000000010A0L,0x0000000000000001L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element4710 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_enum_element4712 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_enum_element4716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element4737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_struct4770 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1959108000000000L});
    public static final BitSet FOLLOW_struct_internal_in_struct4779 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1959108000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_struct4786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal4800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal4806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper4821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec4841 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_118_in_type_dec4843 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_type_dec4847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_type_dec4850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_type_dec4853 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_knownTypes4892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_knownTypes4898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_knownTypes4904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0018000000000000L});
    public static final BitSet FOLLOW_179_in_knownTypes4907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_knownTypes4914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0048000000000000L});
    public static final BitSet FOLLOW_179_in_knownTypes4917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name4933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000002L});
    public static final BitSet FOLLOW_array_size_in_field_name4935 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000002L});
    public static final BitSet FOLLOW_field_crap_in_field_name4939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_array_size4967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_array_size4969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_array_size4972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_field_crap4982 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap4984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration4996 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration4998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants5047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_method_declaration_common5060 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common5062 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_declaration_common5064 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common5066 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common5069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_method_declaration_common5072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate5084 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_method_declaration_predicate5087 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate5089 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_declaration_predicate5091 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate5093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name5111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5134 = new BitSet(new long[]{0x0000200000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_param5154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_method_param5157 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_method_param5160 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_param5162 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_param5164 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param5168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name5201 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5240 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5242 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_define_declaration5244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred1_Objc1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred2_Objc1441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred2_Objc1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred3_Objc1460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_synpred3_Objc1462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred4_Objc2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred5_Objc2606 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred5_Objc2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred6_Objc2645 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred6_Objc2648 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_synpred6_Objc2650 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_synpred6_Objc2654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc2784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_synpred7_Objc2786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred8_Objc3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred9_Objc3542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred10_Objc4268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred11_Objc4279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred12_Objc4370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred13_Objc4381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred14_Objc4514 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred14_Objc4516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_synpred14_Objc4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred15_Objc4568 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred15_Objc4570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_synpred15_Objc4573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_synpred16_Objc4623 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred16_Objc4625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_synpred16_Objc4628 = new BitSet(new long[]{0x0000000000000002L});

}