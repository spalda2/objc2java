// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2012-12-17 03:13:56

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BOOL_LITERAL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'NS_INLINE'", "'['", "']'", "'^'", "'^('", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BOOL_LITERAL=11;
    public static final int BREAK_STMT=12;
    public static final int CASE_STMT=13;
    public static final int CATCH_STMT=14;
    public static final int CATEGORY=15;
    public static final int CLASS_NAME=16;
    public static final int CODE=17;
    public static final int CONTINUE_STMT=18;
    public static final int DEFAULT_STMT=19;
    public static final int DEFINE=20;
    public static final int DEFINE_LITERAL=21;
    public static final int DIGIT=22;
    public static final int DIRECTIVE=23;
    public static final int DO_STMT=24;
    public static final int ELSE_STMT=25;
    public static final int ENUM=26;
    public static final int ENUM_DEC=27;
    public static final int ENUM_FIELD=28;
    public static final int EXPR_COMPLEMENT=29;
    public static final int EXPR_NEGATE=30;
    public static final int EXPR_NOT=31;
    public static final int EXTERN=32;
    public static final int EscapeSequence=33;
    public static final int FIELD=34;
    public static final int FIELDS=35;
    public static final int FIELD_NAME=36;
    public static final int FINALLY_STMT=37;
    public static final int FORWARD_DECLARATION=38;
    public static final int FOR_IN_STMT=39;
    public static final int FOR_STMT=40;
    public static final int FUNC_POINTER=41;
    public static final int GOTO=42;
    public static final int GROUP_MODIFIER=43;
    public static final int HexDigit=44;
    public static final int ID=45;
    public static final int IF0_COMMENT=46;
    public static final int IF_STMT=47;
    public static final int IMPLEMENTATION=48;
    public static final int IMPLEMENTS_INTERFACES=49;
    public static final int IMPLEMENTS_INTERFACE_NAME=50;
    public static final int INTERFACE=51;
    public static final int INTERFACE_NAME=52;
    public static final int LETTER=53;
    public static final int METHOD=54;
    public static final int METHOD_CALL=55;
    public static final int METHOD_IMPL=56;
    public static final int METHOD_MSG=57;
    public static final int METHOD_NAME=58;
    public static final int METHOD_PARAM=59;
    public static final int METHOD_PARAMS=60;
    public static final int MODIFIER=61;
    public static final int MULTI_COMMENT=62;
    public static final int MULTI_COMMENT_LIT=63;
    public static final int NAME=64;
    public static final int NUMBER=65;
    public static final int NUMBER_LITERAL=66;
    public static final int OBJECT_ACCESS=67;
    public static final int OP=68;
    public static final int PARAMS=69;
    public static final int PARAM_NAME=70;
    public static final int PARAM_PREFIX=71;
    public static final int PREFIX=72;
    public static final int PREPROCESSOR_DECLARATION=73;
    public static final int PROPERTY=74;
    public static final int PROTOCOL=75;
    public static final int PROTOCOL_NAME=76;
    public static final int QUESTION_MARK_IF=77;
    public static final int RETURN_STMT=78;
    public static final int SIMPLE_EXPR=79;
    public static final int SINGLE_COMMENT=80;
    public static final int SINGLE_COMMENT_LIT=81;
    public static final int STATIC=82;
    public static final int STATIC_METHOD=83;
    public static final int STATIC_VARIABLE=84;
    public static final int STRING=85;
    public static final int STRING_LITERAL=86;
    public static final int STRING_OBJC=87;
    public static final int STRUCT=88;
    public static final int STRUCT_DEC=89;
    public static final int SUPERCLASS_NAME=90;
    public static final int SWITCH_STMT=91;
    public static final int SYNCHRONIZED=92;
    public static final int SYNTHETIZE=93;
    public static final int TEMPLATE_TYPE=94;
    public static final int THROW_STMT=95;
    public static final int TRY_STMT=96;
    public static final int TYPEDEF=97;
    public static final int TYPEDEF_NAME=98;
    public static final int TYPE_CAST=99;
    public static final int TYPE_PLAIN=100;
    public static final int UNION=101;
    public static final int UNION_DEC=102;
    public static final int UnicodeEscape=103;
    public static final int VALUE=104;
    public static final int VARIABLE=105;
    public static final int VARIABLE_ASSIGNMENT=106;
    public static final int VA_ARGS=107;
    public static final int WHILE_STMT=108;
    public static final int WHITESPACE=109;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:115:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:115:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==116||LA1_0==130||LA1_0==143||(LA1_0 >= 147 && LA1_0 <= 148)||LA1_0==153||LA1_0==167||(LA1_0 >= 172 && LA1_0 <= 173)||LA1_0==176||(LA1_0 >= 179 && LA1_0 <= 180)||(LA1_0 >= 182 && LA1_0 <= 184)||(LA1_0 >= 186 && LA1_0 <= 188)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code473);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 116:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:119:1: code_internal : ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal12=null;
        ObjcParser.implementation_wrapper_return implementation_wrapper2 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration3 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper4 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper5 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper6 =null;

        ObjcParser.define_declaration_return define_declaration7 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper8 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper9 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper10 =null;

        ObjcParser.comments_return comments11 =null;


        Object char_literal12_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:2: ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt2=11;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt2=1;
                }
                break;
            case 143:
                {
                alt2=2;
                }
                break;
            case 153:
                {
                int LA2_3 = input.LA(2);

                if ( (LA2_3==ID) ) {
                    int LA2_23 = input.LA(3);

                    if ( (LA2_23==130) ) {
                        alt2=2;
                    }
                    else if ( (LA2_23==MULTI_COMMENT_LIT||LA2_23==SINGLE_COMMENT_LIT||LA2_23==120||LA2_23==124||LA2_23==131||LA2_23==145||LA2_23==149||LA2_23==151) ) {
                        alt2=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 23, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 3, input);

                    throw nvae;

                }
                }
                break;
            case 184:
                {
                int LA2_4 = input.LA(2);

                if ( (LA2_4==ID) ) {
                    int LA2_24 = input.LA(3);

                    if ( (LA2_24==130) ) {
                        alt2=2;
                    }
                    else if ( (LA2_24==ID||LA2_24==114||LA2_24==190) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 24, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_4==190) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }
                }
                break;
            case 187:
                {
                int LA2_5 = input.LA(2);

                if ( (LA2_5==ID) ) {
                    int LA2_26 = input.LA(3);

                    if ( (LA2_26==130) ) {
                        alt2=2;
                    }
                    else if ( (LA2_26==ID||LA2_26==114||LA2_26==190) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 26, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_5==190) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 5, input);

                    throw nvae;

                }
                }
                break;
            case 172:
                {
                int LA2_6 = input.LA(2);

                if ( (LA2_6==ID) ) {
                    int LA2_28 = input.LA(3);

                    if ( (LA2_28==130) ) {
                        alt2=2;
                    }
                    else if ( (LA2_28==ID||LA2_28==114||LA2_28==190) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 28, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_6==190) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 6, input);

                    throw nvae;

                }
                }
                break;
            case 148:
                {
                alt2=4;
                }
                break;
            case 173:
                {
                alt2=5;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt2=6;
                }
                break;
            case 186:
                {
                alt2=7;
                }
                break;
            case 183:
                {
                alt2=8;
                }
                break;
            case ID:
            case 116:
            case 167:
            case 176:
            case 179:
            case 180:
            case 182:
            case 188:
                {
                alt2=9;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt2=10;
                }
                break;
            case 130:
                {
                alt2=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal495);
                    implementation_wrapper2=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal500);
                    forward_class_declaration3=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal506);
                    protocol_declaration_wrapper4=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal513);
                    interface_declaration_wrapper5=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal520);
                    extern_declaration_wrapper6=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal526);
                    define_declaration7=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal532);
                    typedef_declaration_wrapper8=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal538);
                    static_declaration_wrapper9=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal544);
                    variable_declaration_wrapper10=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal550);
                    comments11=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal12=(Token)match(input,130,FOLLOW_130_in_code_internal556); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal12_tree = 
                    (Object)adaptor.create(char_literal12)
                    ;
                    adaptor.addChild(root_0, char_literal12_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:133:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment13 =null;

        ObjcParser.multi_comment_return multi_comment14 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:134:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:134:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments568);
                    single_comment13=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment13.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments574);
                    multi_comment14=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment14.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT15=null;

        Object SINGLE_COMMENT_LIT15_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:139:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:139:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT15=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment589); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT15);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 139:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:139:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT16=null;

        Object MULTI_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:143:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:143:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT16=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment611); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT16);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 143:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:143:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:150:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern17 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:151:3: ( extern -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:151:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper639);
            extern17=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern.add(extern17.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 151:12: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:151:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:2: extern : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal18=null;
        Token string_literal19=null;
        Token char_literal20=null;
        Token set21=null;
        Token char_literal22=null;

        Object string_literal18_tree=null;
        Object string_literal19_tree=null;
        Object char_literal20_tree=null;
        Object set21_tree=null;
        Object char_literal22_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:9: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:11: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal18=(Token)match(input,173,FOLLOW_173_in_extern658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal18_tree = 
            (Object)adaptor.create(string_literal18)
            ;
            adaptor.addChild(root_0, string_literal18_tree);
            }

            string_literal19=(Token)match(input,112,FOLLOW_112_in_extern661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            char_literal20=(Token)match(input,116,FOLLOW_116_in_extern664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = 
            (Object)adaptor.create(char_literal20)
            ;
            adaptor.addChild(root_0, char_literal20_tree);
            }

            set21=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 116)||(input.LA(1) >= 118 && input.LA(1) <= 195) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set21)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal22=(Token)match(input,117,FOLLOW_117_in_extern671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = 
            (Object)adaptor.create(char_literal22)
            ;
            adaptor.addChild(root_0, char_literal22_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation23 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper686);
            implementation23=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation23.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 158:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:160:1: implementation : '@implementation' name ( category )? ( implementation_body )+ '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal24=null;
        Token string_literal28=null;
        ObjcParser.name_return name25 =null;

        ObjcParser.category_return category26 =null;

        ObjcParser.implementation_body_return implementation_body27 =null;


        Object string_literal24_tree=null;
        Object string_literal28_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:2: ( '@implementation' name ( category )? ( implementation_body )+ '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:4: '@implementation' name ( category )? ( implementation_body )+ '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal24=(Token)match(input,147,FOLLOW_147_in_implementation705); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);
            }

            pushFollow(FOLLOW_name_in_implementation708);
            name25=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name25.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==116) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==117) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation711);
                    category26=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category26.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:3: ( implementation_body )+
            int cnt5=0;
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==116||LA5_0==120||LA5_0==124||LA5_0==130||LA5_0==144||LA5_0==157||LA5_0==167||LA5_0==172||LA5_0==176||(LA5_0 >= 179 && LA5_0 <= 180)||(LA5_0 >= 182 && LA5_0 <= 184)||(LA5_0 >= 186 && LA5_0 <= 188)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation716);
            	    implementation_body27=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body27.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt5 >= 1 ) break loop5;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(5, input);
                        throw eee;
                }
                cnt5++;
            } while (true);


            string_literal28=(Token)match(input,145,FOLLOW_145_in_implementation721); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal28_tree = 
            (Object)adaptor.create(string_literal28)
            ;
            adaptor.addChild(root_0, string_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:1: implementation_body : ( implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal36=null;
        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper29 =null;

        ObjcParser.directives_return directives30 =null;

        ObjcParser.define_declaration_return define_declaration31 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper32 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper33 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper34 =null;

        ObjcParser.comments_return comments35 =null;


        Object char_literal36_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:167:3: ( implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=8;
            switch ( input.LA(1) ) {
            case 120:
            case 124:
                {
                alt6=1;
                }
                break;
            case 144:
            case 157:
                {
                alt6=2;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=3;
                }
                break;
            case 186:
                {
                alt6=4;
                }
                break;
            case 183:
                {
                alt6=5;
                }
                break;
            case ID:
            case 116:
            case 167:
            case 172:
            case 176:
            case 179:
            case 180:
            case 182:
            case 184:
            case 187:
            case 188:
                {
                alt6=6;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=7;
                }
                break;
            case 130:
                {
                alt6=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:167:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body735);
                    implementation_method_wrapper29=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper29.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body741);
                    directives30=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives30.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body747);
                    define_declaration31=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration31.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body752);
                    typedef_declaration_wrapper32=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper32.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body757);
                    static_declaration_wrapper33=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body763);
                    variable_declaration_wrapper34=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body769);
                    comments35=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments35.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal36=(Token)match(input,130,FOLLOW_130_in_implementation_body774); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal36_tree = 
                    (Object)adaptor.create(char_literal36)
                    ;
                    adaptor.addChild(root_0, char_literal36_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize37 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:178:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:178:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives785);
            synthesize37=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize37.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 178:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:178:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:181:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal38=null;
        Token string_literal39=null;
        Token ID40=null;
        Token char_literal41=null;
        Token char_literal43=null;
        ObjcParser.name_return name42 =null;


        Object string_literal38_tree=null;
        Object string_literal39_tree=null;
        Object ID40_tree=null;
        Object char_literal41_tree=null;
        Object char_literal43_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_144=new RewriteRuleTokenStream(adaptor,"token 144");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==157) ) {
                alt7=1;
            }
            else if ( (LA7_0==144) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:5: '@synthesize'
                    {
                    string_literal38=(Token)match(input,157,FOLLOW_157_in_synthesize807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal38);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:21: '@dynamic'
                    {
                    string_literal39=(Token)match(input,144,FOLLOW_144_in_synthesize811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_144.add(string_literal39);


                    }
                    break;

            }


            ID40=(Token)match(input,ID,FOLLOW_ID_in_synthesize815); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID40);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==135) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:38: '=' name
                    {
                    char_literal41=(Token)match(input,135,FOLLOW_135_in_synthesize818); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal41);


                    pushFollow(FOLLOW_name_in_synthesize820);
                    name42=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name42.getTree());

                    }
                    break;

            }


            char_literal43=(Token)match(input,130,FOLLOW_130_in_synthesize824); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal43);


            // AST REWRITE
            // elements: name, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 182:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:185:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal44=null;
        ObjcParser.field_declaration_return field_declaration45 =null;


        Object string_literal44_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:4: 'static' field_declaration
            {
            string_literal44=(Token)match(input,183,FOLLOW_183_in_static_declaration_wrapper848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal44);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper850);
            field_declaration45=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration45.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 186:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:189:1: block_call_predicate : '^(' ;
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;

        Object string_literal46_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:3: ( '^(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:5: '^('
            {
            root_0 = (Object)adaptor.nil();


            string_literal46=(Token)match(input,164,FOLLOW_164_in_block_call_predicate870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal46_tree = 
            (Object)adaptor.create(string_literal46)
            ;
            adaptor.addChild(root_0, string_literal46_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call47 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper885);
            block_call47=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call47.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 194:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:1: block_call : ( '^(' ( block_params )? ')' ) block_multiline_wrapper ;
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal48=null;
        Token char_literal50=null;
        ObjcParser.block_params_return block_params49 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper51 =null;


        Object string_literal48_tree=null;
        Object char_literal50_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:3: ( ( '^(' ( block_params )? ')' ) block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:5: ( '^(' ( block_params )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:6: '^(' ( block_params )? ')'
            {
            string_literal48=(Token)match(input,164,FOLLOW_164_in_block_call907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal48_tree = 
            (Object)adaptor.create(string_literal48)
            ;
            adaptor.addChild(root_0, string_literal48_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:11: ( block_params )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==ID||LA9_0==116||LA9_0==167||LA9_0==172||LA9_0==176||(LA9_0 >= 179 && LA9_0 <= 180)||LA9_0==182||LA9_0==184||(LA9_0 >= 187 && LA9_0 <= 188)) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:198:11: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_call909);
                    block_params49=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params49.getTree());

                    }
                    break;

            }


            char_literal50=(Token)match(input,117,FOLLOW_117_in_block_call912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal50_tree = 
            (Object)adaptor.create(char_literal50)
            ;
            adaptor.addChild(root_0, char_literal50_tree);
            }

            }


            pushFollow(FOLLOW_block_multiline_wrapper_in_block_call915);
            block_multiline_wrapper51=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper51.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call52 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper928);
            synchronized_call52=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call52.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 202:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal53=null;
        Token char_literal54=null;
        Token char_literal56=null;
        ObjcParser.element_value_return element_value55 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper57 =null;


        Object string_literal53_tree=null;
        Object char_literal54_tree=null;
        Object char_literal56_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal53=(Token)match(input,156,FOLLOW_156_in_synchronized_call951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal53_tree = 
            (Object)adaptor.create(string_literal53)
            ;
            adaptor.addChild(root_0, string_literal53_tree);
            }

            char_literal54=(Token)match(input,116,FOLLOW_116_in_synchronized_call953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal54_tree = 
            (Object)adaptor.create(char_literal54)
            ;
            adaptor.addChild(root_0, char_literal54_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call955);
            element_value55=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value55.getTree());

            char_literal56=(Token)match(input,117,FOLLOW_117_in_synchronized_call957); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal56_tree = 
            (Object)adaptor.create(char_literal56)
            ;
            adaptor.addChild(root_0, char_literal56_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call959);
            block_multiline_wrapper57=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper57.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal59=null;
        ObjcParser.classical_param_return classical_param58 =null;

        ObjcParser.classical_param_return classical_param60 =null;


        Object char_literal59_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params975);
            classical_param58=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param58.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:22: ( ',' classical_param )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==123) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:23: ',' classical_param
            	    {
            	    char_literal59=(Token)match(input,123,FOLLOW_123_in_block_params978); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal59);


            	    pushFollow(FOLLOW_classical_param_in_block_params980);
            	    classical_param60=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param60.getTree());

            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 210:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline61 =null;

        ObjcParser.block_singleline_return block_singleline62 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==190) ) {
                alt11=1;
            }
            else if ( (LA11_0==ID||LA11_0==MULTI_COMMENT_LIT||LA11_0==SINGLE_COMMENT_LIT||LA11_0==130||LA11_0==156||LA11_0==161||LA11_0==165||LA11_0==168||(LA11_0 >= 170 && LA11_0 <= 171)||(LA11_0 >= 174 && LA11_0 <= 175)||LA11_0==177||LA11_0==181||LA11_0==185||LA11_0==189) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;

            }
            switch (alt11) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1009);
                    block_multiline61=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline61.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 215:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:215:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1021);
                    block_singleline62=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline62.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 216:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:1: block_multiline : '{' ( block_internal )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal63=null;
        Token char_literal65=null;
        ObjcParser.block_internal_return block_internal64 =null;


        Object char_literal63_tree=null;
        Object char_literal65_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:2: ( '{' ( block_internal )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:3: '{' ( block_internal )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal63=(Token)match(input,190,FOLLOW_190_in_block_multiline1043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal63_tree = 
            (Object)adaptor.create(char_literal63)
            ;
            adaptor.addChild(root_0, char_literal63_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:4: ( block_internal )*
            loop12:
            do {
                int alt12=2;
                int LA12_0 = input.LA(1);

                if ( (LA12_0==ID||LA12_0==MULTI_COMMENT_LIT||LA12_0==SINGLE_COMMENT_LIT||LA12_0==116||LA12_0==130||LA12_0==156||(LA12_0 >= 158 && LA12_0 <= 159)||LA12_0==161||LA12_0==165||(LA12_0 >= 167 && LA12_0 <= 168)||(LA12_0 >= 170 && LA12_0 <= 172)||(LA12_0 >= 174 && LA12_0 <= 177)||(LA12_0 >= 179 && LA12_0 <= 185)||(LA12_0 >= 187 && LA12_0 <= 190)) ) {
                    alt12=1;
                }


                switch (alt12) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:4: block_internal
            	    {
            	    pushFollow(FOLLOW_block_internal_in_block_multiline1048);
            	    block_internal64=block_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal64.getTree());

            	    }
            	    break;

            	default :
            	    break loop12;
                }
            } while (true);


            char_literal65=(Token)match(input,194,FOLLOW_194_in_block_multiline1055); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal65_tree = 
            (Object)adaptor.create(char_literal65)
            ;
            adaptor.addChild(root_0, char_literal65_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline66 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1067);
            block_multiline66=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline66.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline67 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1088);
            block_singleline67=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline67.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 231:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal77=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper68 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper69 =null;

        ObjcParser.do_stmt_return do_stmt70 =null;

        ObjcParser.if_stmt_return if_stmt71 =null;

        ObjcParser.else_stmt_return else_stmt72 =null;

        ObjcParser.switch_stmt_return switch_stmt73 =null;

        ObjcParser.return_stmt_return return_stmt74 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper75 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper76 =null;

        ObjcParser.break_stmt_return break_stmt78 =null;

        ObjcParser.continue_stmt_return continue_stmt79 =null;

        ObjcParser.goto_stmt_return goto_stmt80 =null;

        ObjcParser.method_msg_return method_msg81 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper82 =null;

        ObjcParser.comments_return comments83 =null;


        Object char_literal77_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments )
            int alt13=16;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA13_1 = input.LA(2);

                if ( ((LA13_1 >= 127 && LA13_1 <= 128)) ) {
                    int LA13_17 = input.LA(3);

                    if ( (LA13_17==ID) ) {
                        int LA13_21 = input.LA(4);

                        if ( (LA13_21==116) && (synpred1_Objc())) {
                            alt13=1;
                        }
                        else if ( ((LA13_21 >= 127 && LA13_21 <= 128)) ) {
                            int LA13_23 = input.LA(5);

                            if ( (synpred1_Objc()) ) {
                                alt13=1;
                            }
                            else if ( (true) ) {
                                alt13=15;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 13, 23, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA13_21==115||LA13_21==117||LA13_21==119||LA13_21==122||LA13_21==126||LA13_21==133||LA13_21==135||LA13_21==140||LA13_21==192) ) {
                            alt13=15;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 13, 21, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 13, 17, input);

                        throw nvae;

                    }
                }
                else if ( (LA13_1==116) && (synpred1_Objc())) {
                    alt13=1;
                }
                else if ( (LA13_1==115||LA13_1==117||LA13_1==119||LA13_1==122||LA13_1==126||LA13_1==133||LA13_1==135||LA13_1==140||LA13_1==192) ) {
                    alt13=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 13, 1, input);

                    throw nvae;

                }
                }
                break;
            case 156:
                {
                alt13=2;
                }
                break;
            case 170:
                {
                alt13=3;
                }
                break;
            case 177:
                {
                alt13=4;
                }
                break;
            case 171:
                {
                alt13=5;
                }
                break;
            case 185:
                {
                alt13=6;
                }
                break;
            case 181:
                {
                alt13=7;
                }
                break;
            case 174:
                {
                alt13=8;
                }
                break;
            case 189:
                {
                alt13=9;
                }
                break;
            case 130:
                {
                alt13=10;
                }
                break;
            case 165:
                {
                alt13=11;
                }
                break;
            case 168:
                {
                alt13=12;
                }
                break;
            case 175:
                {
                alt13=13;
                }
                break;
            case 161:
                {
                alt13=14;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt13=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;

            }

            switch (alt13) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1115);
                    classical_method_call_wrapper68=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper68.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:236:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1120);
                    synchronized_call_wrapper69=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper69.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:237:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1125);
                    do_stmt70=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt70.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:238:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1130);
                    if_stmt71=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt71.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1135);
                    else_stmt72=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt72.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1140);
                    switch_stmt73=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt73.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1145);
                    return_stmt74=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt74.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:242:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1150);
                    for_stmt_wrapper75=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper75.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:243:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1155);
                    while_stmt_wrapper76=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper76.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal77=(Token)match(input,130,FOLLOW_130_in_block_singleline1160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal77_tree = 
                    (Object)adaptor.create(char_literal77)
                    ;
                    adaptor.addChild(root_0, char_literal77_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1166);
                    break_stmt78=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt78.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1172);
                    continue_stmt79=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt79.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1177);
                    goto_stmt80=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt80.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:248:4: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1182);
                    method_msg81=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg81.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:249:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1188);
                    variable_assignment_wrapper82=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper82.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:250:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1194);
                    comments83=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments83.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:253:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | variable_declaration_wrapper | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal96=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper84 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper85 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper86 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper87 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper88 =null;

        ObjcParser.do_stmt_return do_stmt89 =null;

        ObjcParser.if_stmt_return if_stmt90 =null;

        ObjcParser.else_stmt_return else_stmt91 =null;

        ObjcParser.switch_stmt_return switch_stmt92 =null;

        ObjcParser.return_stmt_return return_stmt93 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper94 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper95 =null;

        ObjcParser.break_stmt_return break_stmt97 =null;

        ObjcParser.continue_stmt_return continue_stmt98 =null;

        ObjcParser.goto_stmt_return goto_stmt99 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper100 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper101 =null;

        ObjcParser.method_msg_return method_msg102 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper103 =null;

        ObjcParser.comments_return comments104 =null;


        Object char_literal96_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | variable_declaration_wrapper | method_msg | variable_assignment_wrapper | comments )
            int alt14=21;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA14_1 = input.LA(2);

                if ( ((LA14_1 >= 127 && LA14_1 <= 128)) ) {
                    int LA14_31 = input.LA(3);

                    if ( (LA14_31==ID) ) {
                        int LA14_40 = input.LA(4);

                        if ( (LA14_40==116) && (synpred2_Objc())) {
                            alt14=1;
                        }
                        else if ( ((LA14_40 >= 127 && LA14_40 <= 128)) ) {
                            int LA14_42 = input.LA(5);

                            if ( (synpred2_Objc()) ) {
                                alt14=1;
                            }
                            else if ( (true) ) {
                                alt14=20;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 14, 42, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA14_40==115||LA14_40==117||LA14_40==119||LA14_40==122||LA14_40==126||LA14_40==133||LA14_40==135||LA14_40==140||LA14_40==192) ) {
                            alt14=20;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 14, 40, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 14, 31, input);

                        throw nvae;

                    }
                }
                else if ( (LA14_1==116) && (synpred2_Objc())) {
                    alt14=1;
                }
                else if ( (LA14_1==ID||LA14_1==114||LA14_1==118||LA14_1==161||LA14_1==167) ) {
                    alt14=18;
                }
                else if ( (LA14_1==115||LA14_1==117||LA14_1==119||LA14_1==122||LA14_1==126||LA14_1==133||LA14_1==135||LA14_1==140||LA14_1==192) ) {
                    alt14=20;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;

                }
                }
                break;
            case 156:
                {
                alt14=2;
                }
                break;
            case 159:
                {
                alt14=3;
                }
                break;
            case 158:
                {
                alt14=4;
                }
                break;
            case 183:
                {
                alt14=5;
                }
                break;
            case 170:
                {
                alt14=6;
                }
                break;
            case 177:
                {
                alt14=7;
                }
                break;
            case 171:
                {
                alt14=8;
                }
                break;
            case 185:
                {
                alt14=9;
                }
                break;
            case 181:
                {
                alt14=10;
                }
                break;
            case 174:
                {
                alt14=11;
                }
                break;
            case 189:
                {
                alt14=12;
                }
                break;
            case 130:
                {
                alt14=13;
                }
                break;
            case 165:
                {
                alt14=14;
                }
                break;
            case 168:
                {
                alt14=15;
                }
                break;
            case 175:
                {
                alt14=16;
                }
                break;
            case 190:
                {
                alt14=17;
                }
                break;
            case 116:
            case 167:
            case 172:
            case 176:
            case 179:
            case 180:
            case 182:
            case 184:
            case 187:
            case 188:
                {
                alt14=18;
                }
                break;
            case 161:
                {
                alt14=19;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt14=21;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }

            switch (alt14) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1211);
                    classical_method_call_wrapper84=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper84.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1217);
                    synchronized_call_wrapper85=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper85.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1223);
                    try_stmt_wrapper86=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper86.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:257:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1228);
                    throw_stmt_wrapper87=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper87.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1233);
                    static_declaration_wrapper88=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper88.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1238);
                    do_stmt89=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt89.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1243);
                    if_stmt90=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt90.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:261:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1248);
                    else_stmt91=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt91.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1253);
                    switch_stmt92=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt92.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1258);
                    return_stmt93=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt93.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1263);
                    for_stmt_wrapper94=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper94.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1268);
                    while_stmt_wrapper95=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper95.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal96=(Token)match(input,130,FOLLOW_130_in_block_internal1273); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal96_tree = 
                    (Object)adaptor.create(char_literal96)
                    ;
                    adaptor.addChild(root_0, char_literal96_tree);
                    }

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1278);
                    break_stmt97=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt97.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1283);
                    continue_stmt98=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt98.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1288);
                    goto_stmt99=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt99.getTree());

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1293);
                    block_multiline_wrapper100=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper100.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1299);
                    variable_declaration_wrapper101=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper101.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1305);
                    method_msg102=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg102.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1311);
                    variable_assignment_wrapper103=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper103.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1317);
                    comments104=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments104.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:277:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal105=null;
        Token char_literal106=null;
        Token ID107=null;
        Token char_literal108=null;

        Object string_literal105_tree=null;
        Object char_literal106_tree=null;
        Object ID107_tree=null;
        Object char_literal108_tree=null;
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:5: 'goto' ':' ID ';'
            {
            string_literal105=(Token)match(input,175,FOLLOW_175_in_goto_stmt1329); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal105);


            char_literal106=(Token)match(input,129,FOLLOW_129_in_goto_stmt1331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal106);


            ID107=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1333); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID107);


            char_literal108=(Token)match(input,130,FOLLOW_130_in_goto_stmt1335); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal108);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 278:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:281:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt109 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1358);
            while_stmt109=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt109.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 282:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal110=null;
        Token char_literal111=null;
        Token char_literal113=null;
        ObjcParser.element_value_return element_value112 =null;

        ObjcParser.block_return block114 =null;


        Object string_literal110_tree=null;
        Object char_literal111_tree=null;
        Object char_literal113_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal110=(Token)match(input,189,FOLLOW_189_in_while_stmt1381); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal110_tree = 
            (Object)adaptor.create(string_literal110)
            ;
            adaptor.addChild(root_0, string_literal110_tree);
            }

            char_literal111=(Token)match(input,116,FOLLOW_116_in_while_stmt1383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal111_tree = 
            (Object)adaptor.create(char_literal111)
            ;
            adaptor.addChild(root_0, char_literal111_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1385);
            element_value112=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value112.getTree());

            char_literal113=(Token)match(input,117,FOLLOW_117_in_while_stmt1387); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal113_tree = 
            (Object)adaptor.create(char_literal113)
            ;
            adaptor.addChild(root_0, char_literal113_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1389);
            block114=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block114.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal115=null;
        ObjcParser.element_value_return element_value116 =null;


        Object string_literal115_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:5: 'in' element_value
            {
            string_literal115=(Token)match(input,178,FOLLOW_178_in_for_in_stmt1404); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal115);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1406);
            element_value116=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value116.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 290:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal117=null;
        Token char_literal119=null;
        ObjcParser.element_value_return element_value118 =null;

        ObjcParser.element_value_return element_value120 =null;


        Object char_literal117_tree=null;
        Object char_literal119_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal117=(Token)match(input,130,FOLLOW_130_in_for_classic_stmt1429); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal117_tree = 
            (Object)adaptor.create(char_literal117)
            ;
            adaptor.addChild(root_0, char_literal117_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:9: ( element_value )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==BOOL_LITERAL||LA15_0==ID||LA15_0==NUMBER_LITERAL||(LA15_0 >= STRING_LITERAL && LA15_0 <= STRING_OBJC)||LA15_0==110||LA15_0==114||LA15_0==116||LA15_0==121||(LA15_0 >= 124 && LA15_0 <= 125)||LA15_0==155||LA15_0==161||LA15_0==164||LA15_0==195) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1431);
                    element_value118=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value118.getTree());

                    }
                    break;

            }


            char_literal119=(Token)match(input,130,FOLLOW_130_in_for_classic_stmt1434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal119_tree = 
            (Object)adaptor.create(char_literal119)
            ;
            adaptor.addChild(root_0, char_literal119_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:28: ( element_value )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==BOOL_LITERAL||LA16_0==ID||LA16_0==NUMBER_LITERAL||(LA16_0 >= STRING_LITERAL && LA16_0 <= STRING_OBJC)||LA16_0==110||LA16_0==114||LA16_0==116||LA16_0==121||(LA16_0 >= 124 && LA16_0 <= 125)||LA16_0==155||LA16_0==161||LA16_0==164||LA16_0==195) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1436);
                    element_value120=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value120.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block | variable_assignment_wrapper for_classic_stmt ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal123=null;
        Token char_literal127=null;
        Token char_literal134=null;
        Token char_literal138=null;
        ObjcParser.name_return name121 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt122 =null;

        ObjcParser.block_return block124 =null;

        ObjcParser.name_return name125 =null;

        ObjcParser.for_in_stmt_return for_in_stmt126 =null;

        ObjcParser.block_return block128 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple129 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper130 =null;

        ObjcParser.element_value_return element_value131 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt132 =null;

        ObjcParser.for_in_stmt_return for_in_stmt133 =null;

        ObjcParser.block_return block135 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper136 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt137 =null;

        ObjcParser.block_return block139 =null;


        Object char_literal123_tree=null;
        Object char_literal127_tree=null;
        Object char_literal134_tree=null;
        Object char_literal138_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block | variable_assignment_wrapper for_classic_stmt ')' block )
            int alt18=4;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==ID) ) {
                int LA18_1 = input.LA(2);

                if ( (LA18_1==130) && (synpred3_Objc())) {
                    alt18=1;
                }
                else if ( (LA18_1==178) && (synpred4_Objc())) {
                    alt18=2;
                }
                else if ( (LA18_1==ID||LA18_1==114||LA18_1==118||LA18_1==161||LA18_1==167) ) {
                    alt18=3;
                }
                else if ( (LA18_1==115||LA18_1==117||LA18_1==119||LA18_1==122||(LA18_1 >= 126 && LA18_1 <= 128)||LA18_1==133||LA18_1==135||LA18_1==140||LA18_1==192) ) {
                    alt18=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 18, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA18_0==116||LA18_0==167||LA18_0==172||LA18_0==176||(LA18_0 >= 179 && LA18_0 <= 180)||LA18_0==182||LA18_0==184||(LA18_0 >= 187 && LA18_0 <= 188)) ) {
                alt18=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1459);
                    name121=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name121.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1461);
                    for_classic_stmt122=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt122.getTree());

                    char_literal123=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal123_tree = 
                    (Object)adaptor.create(char_literal123)
                    ;
                    adaptor.addChild(root_0, char_literal123_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1465);
                    block124=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block124.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1478);
                    name125=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name125.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1480);
                    for_in_stmt126=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt126.getTree());

                    char_literal127=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal127_tree = 
                    (Object)adaptor.create(char_literal127)
                    ;
                    adaptor.addChild(root_0, char_literal127_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1484);
                    block128=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block128.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1490);
                    field_declaration_simple129=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple129.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt17=2;
                    int LA17_0 = input.LA(1);

                    if ( (LA17_0==115||LA17_0==119||LA17_0==122||LA17_0==126||LA17_0==133||LA17_0==135||LA17_0==140||LA17_0==192) ) {
                        alt17=1;
                    }
                    else if ( (LA17_0==178) ) {
                        alt17=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 17, 0, input);

                        throw nvae;

                    }
                    switch (alt17) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1494);
                            op_assign_wrapper130=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper130.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1496);
                            element_value131=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value131.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1498);
                            for_classic_stmt132=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt132.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1503);
                            for_in_stmt133=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt133.getTree());

                            }
                            break;

                    }


                    char_literal134=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal134_tree = 
                    (Object)adaptor.create(char_literal134)
                    ;
                    adaptor.addChild(root_0, char_literal134_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1508);
                    block135=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block135.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:5: variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1514);
                    variable_assignment_wrapper136=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper136.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1516);
                    for_classic_stmt137=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt137.getTree());

                    char_literal138=(Token)match(input,117,FOLLOW_117_in_for_stmt_body1518); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal138_tree = 
                    (Object)adaptor.create(char_literal138)
                    ;
                    adaptor.addChild(root_0, char_literal138_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1520);
                    block139=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block139.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal140=null;
        Token char_literal141=null;
        ObjcParser.for_stmt_body_return for_stmt_body142 =null;


        Object string_literal140_tree=null;
        Object char_literal141_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal140=(Token)match(input,174,FOLLOW_174_in_for_stmt1533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal140_tree = 
            (Object)adaptor.create(string_literal140)
            ;
            adaptor.addChild(root_0, string_literal140_tree);
            }

            char_literal141=(Token)match(input,116,FOLLOW_116_in_for_stmt1535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal141_tree = 
            (Object)adaptor.create(char_literal141)
            ;
            adaptor.addChild(root_0, char_literal141_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1537);
            for_stmt_body142=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body142.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt143 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1550);
            for_stmt143=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt143.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal144=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon145 =null;


        Object string_literal144_tree=null;
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:5: 'return' element_value_or_semicolon
            {
            string_literal144=(Token)match(input,181,FOLLOW_181_in_return_stmt1573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal144);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1575);
            element_value_or_semicolon145=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon145.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal146=null;
        Token char_literal147=null;
        Token char_literal149=null;
        Token char_literal150=null;
        Token char_literal152=null;
        ObjcParser.element_value_return element_value148 =null;

        ObjcParser.switch_body_return switch_body151 =null;


        Object string_literal146_tree=null;
        Object char_literal147_tree=null;
        Object char_literal149_tree=null;
        Object char_literal150_tree=null;
        Object char_literal152_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal146=(Token)match(input,185,FOLLOW_185_in_switch_stmt1598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal146);


            char_literal147=(Token)match(input,116,FOLLOW_116_in_switch_stmt1600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal147);


            pushFollow(FOLLOW_element_value_in_switch_stmt1602);
            element_value148=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value148.getTree());

            char_literal149=(Token)match(input,117,FOLLOW_117_in_switch_stmt1604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal149);


            char_literal150=(Token)match(input,190,FOLLOW_190_in_switch_stmt1606); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(char_literal150);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:41: ( switch_body )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==ID||LA19_0==MULTI_COMMENT_LIT||LA19_0==SINGLE_COMMENT_LIT||LA19_0==130||LA19_0==156||LA19_0==161||(LA19_0 >= 165 && LA19_0 <= 166)||(LA19_0 >= 168 && LA19_0 <= 171)||(LA19_0 >= 174 && LA19_0 <= 175)||LA19_0==177||LA19_0==181||LA19_0==185||(LA19_0 >= 189 && LA19_0 <= 190)) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1609);
            	    switch_body151=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body151.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            }


            char_literal152=(Token)match(input,194,FOLLOW_194_in_switch_stmt1613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_194.add(char_literal152);


            // AST REWRITE
            // elements: switch_body, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 317:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt153 =null;

        ObjcParser.default_stmt_return default_stmt154 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper155 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper156 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt20=4;
            switch ( input.LA(1) ) {
            case 166:
                {
                alt20=1;
                }
                break;
            case 169:
                {
                alt20=2;
                }
                break;
            case 190:
                {
                alt20=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 130:
            case 156:
            case 161:
            case 165:
            case 168:
            case 170:
            case 171:
            case 174:
            case 175:
            case 177:
            case 181:
            case 185:
            case 189:
                {
                alt20=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;

            }

            switch (alt20) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1639);
                    case_stmt153=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt153.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1645);
                    default_stmt154=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt154.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1651);
                    block_multiline_wrapper155=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper155.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1657);
                    block_singleline_wrapper156=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper156.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal157=null;
        Token char_literal159=null;
        ObjcParser.name_number_return name_number158 =null;


        Object string_literal157_tree=null;
        Object char_literal159_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:5: 'case' name_number ':'
            {
            string_literal157=(Token)match(input,166,FOLLOW_166_in_case_stmt1672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(string_literal157);


            pushFollow(FOLLOW_name_number_in_case_stmt1674);
            name_number158=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number158.getTree());

            char_literal159=(Token)match(input,129,FOLLOW_129_in_case_stmt1676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal159);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 328:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token char_literal161=null;

        Object string_literal160_tree=null;
        Object char_literal161_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: 'default' ':'
            {
            string_literal160=(Token)match(input,169,FOLLOW_169_in_default_stmt1699); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal160);


            char_literal161=(Token)match(input,129,FOLLOW_129_in_default_stmt1701); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal161);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 332:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal162=null;
        Token string_literal164=null;
        Token char_literal165=null;
        Token char_literal167=null;
        ObjcParser.block_return block163 =null;

        ObjcParser.element_value_return element_value166 =null;


        Object string_literal162_tree=null;
        Object string_literal164_tree=null;
        Object char_literal165_tree=null;
        Object char_literal167_tree=null;
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal162=(Token)match(input,170,FOLLOW_170_in_do_stmt1722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(string_literal162);


            pushFollow(FOLLOW_block_in_do_stmt1724);
            block163=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block163.getTree());

            string_literal164=(Token)match(input,189,FOLLOW_189_in_do_stmt1726); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal164);


            char_literal165=(Token)match(input,116,FOLLOW_116_in_do_stmt1728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal165);


            pushFollow(FOLLOW_element_value_in_do_stmt1730);
            element_value166=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value166.getTree());

            char_literal167=(Token)match(input,117,FOLLOW_117_in_do_stmt1732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal167);


            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 336:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal168=null;
        Token char_literal169=null;
        Token char_literal171=null;
        ObjcParser.element_value_return element_value170 =null;

        ObjcParser.block_return block172 =null;


        Object string_literal168_tree=null;
        Object char_literal169_tree=null;
        Object char_literal171_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:5: 'if' '(' element_value ')' block
            {
            string_literal168=(Token)match(input,177,FOLLOW_177_in_if_stmt1757); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal168);


            char_literal169=(Token)match(input,116,FOLLOW_116_in_if_stmt1759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal169);


            pushFollow(FOLLOW_element_value_in_if_stmt1761);
            element_value170=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value170.getTree());

            char_literal171=(Token)match(input,117,FOLLOW_117_in_if_stmt1763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal171);


            pushFollow(FOLLOW_block_in_if_stmt1765);
            block172=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block172.getTree());

            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal173=null;
        ObjcParser.block_return block174 =null;


        Object string_literal173_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:5: 'else' block
            {
            string_literal173=(Token)match(input,171,FOLLOW_171_in_else_stmt1788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal173);


            pushFollow(FOLLOW_block_in_else_stmt1790);
            block174=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block174.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal175=null;
        ObjcParser.block_return block176 =null;

        ObjcParser.catch_stmt_return catch_stmt177 =null;

        ObjcParser.finally_stmt_return finally_stmt178 =null;


        Object string_literal175_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal175=(Token)match(input,159,FOLLOW_159_in_try_stmt_wrapper1812); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_159.add(string_literal175);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper1815);
            block176=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block176.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:19: ( catch_stmt )*
            loop21:
            do {
                int alt21=2;
                int LA21_0 = input.LA(1);

                if ( (LA21_0==142) ) {
                    alt21=1;
                }


                switch (alt21) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper1818);
            	    catch_stmt177=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt177.getTree());

            	    }
            	    break;

            	default :
            	    break loop21;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:31: ( finally_stmt )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==146) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper1821);
                    finally_stmt178=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt178.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: finally_stmt, catch_stmt, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal179=null;
        Token char_literal180=null;
        Token char_literal182=null;
        Token char_literal184=null;
        ObjcParser.name_return name181 =null;

        ObjcParser.name_return name183 =null;

        ObjcParser.block_return block185 =null;


        Object string_literal179_tree=null;
        Object char_literal180_tree=null;
        Object char_literal182_tree=null;
        Object char_literal184_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:4: '@catch' '(' name '*' name ')' block
            {
            string_literal179=(Token)match(input,142,FOLLOW_142_in_catch_stmt1847); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(string_literal179);


            char_literal180=(Token)match(input,116,FOLLOW_116_in_catch_stmt1850); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal180);


            pushFollow(FOLLOW_name_in_catch_stmt1853);
            name181=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name181.getTree());

            char_literal182=(Token)match(input,118,FOLLOW_118_in_catch_stmt1856); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal182);


            pushFollow(FOLLOW_name_in_catch_stmt1858);
            name183=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name183.getTree());

            char_literal184=(Token)match(input,117,FOLLOW_117_in_catch_stmt1861); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal184);


            pushFollow(FOLLOW_block_in_catch_stmt1864);
            block185=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block185.getTree());

            // AST REWRITE
            // elements: block, name, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal186=null;
        ObjcParser.block_return block187 =null;


        Object string_literal186_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:4: '@finally' block
            {
            string_literal186=(Token)match(input,146,FOLLOW_146_in_finally_stmt1888); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal186);


            pushFollow(FOLLOW_block_in_finally_stmt1891);
            block187=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block187.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 356:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt188 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper1910);
            throw_stmt188=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt188.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 360:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:360:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal189=null;
        Token char_literal191=null;
        ObjcParser.element_value_return element_value190 =null;


        Object string_literal189_tree=null;
        Object char_literal191_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:364:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:364:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal189=(Token)match(input,158,FOLLOW_158_in_throw_stmt1929); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal189_tree = 
            (Object)adaptor.create(string_literal189)
            ;
            adaptor.addChild(root_0, string_literal189_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt1931);
            element_value190=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value190.getTree());

            char_literal191=(Token)match(input,130,FOLLOW_130_in_throw_stmt1933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal191_tree = 
            (Object)adaptor.create(char_literal191)
            ;
            adaptor.addChild(root_0, char_literal191_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID192=null;

        Object ID192_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:368:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:368:4: ID
            {
            ID192=(Token)match(input,ID,FOLLOW_ID_in_name1944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID192);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 368:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:368:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:1: name_number : ( ID -> ^( NAME ID ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID193=null;
        Token NUMBER_LITERAL194=null;

        Object ID193_tree=null;
        Object NUMBER_LITERAL194_tree=null;
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:372:3: ( ID -> ^( NAME ID ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==ID) ) {
                alt23=1;
            }
            else if ( (LA23_0==NUMBER_LITERAL) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:372:5: ID
                    {
                    ID193=(Token)match(input,ID,FOLLOW_ID_in_name_number1964); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID193);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 372:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:372:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:373:5: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL194=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number1978); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL194);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 373:20: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:373:23: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:376:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper195 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2001);
            field_declaration_wrapper195=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper195.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 377:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:380:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment196 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:381:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:381:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2024);
            variable_assignment196=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment196.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 381:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:381:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:384:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper197 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper198 =null;

        ObjcParser.element_value_return element_value199 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:385:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2047);
            object_access_wrapper197=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper197.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2049);
            op_assign_wrapper198=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper198.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2051);
            element_value199=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value199.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:388:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper200 =null;

        ObjcParser.method_implementation_common_return method_implementation_common201 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:389:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:389:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2064);
            method_modifier_wrapper200=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper200.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2066);
            method_implementation_common201=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common201.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal202=null;
        Token char_literal204=null;
        ObjcParser.type_declaration_return type_declaration203 =null;

        ObjcParser.method_name_return method_name205 =null;

        ObjcParser.method_params_return method_params206 =null;


        Object char_literal202_tree=null;
        Object char_literal204_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:6: '(' type_declaration ')' method_name
            {
            char_literal202=(Token)match(input,116,FOLLOW_116_in_method_implementation_common2079); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal202_tree = 
            (Object)adaptor.create(char_literal202)
            ;
            adaptor.addChild(root_0, char_literal202_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2081);
            type_declaration203=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration203.getTree());

            char_literal204=(Token)match(input,117,FOLLOW_117_in_method_implementation_common2083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal204_tree = 
            (Object)adaptor.create(char_literal204)
            ;
            adaptor.addChild(root_0, char_literal204_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2085);
            method_name205=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name205.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:44: ( method_params )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ID||LA24_0==129) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:392:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2088);
                    method_params206=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params206.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation207 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper208 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2100);
            method_implementation207=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation207.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2104);
            block_multiline_wrapper208=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper208.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:396:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call209 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2127);
            classical_method_call209=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call209.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 400:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal213=null;
        ObjcParser.name_return name210 =null;

        ObjcParser.access_wrapper_return access_wrapper211 =null;

        ObjcParser.name_return name212 =null;


        Object char_literal213_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2148);
            name210=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name210.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:10: ( access_wrapper name )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( ((LA25_0 >= 127 && LA25_0 <= 128)) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2151);
            	    access_wrapper211=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper211.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2153);
            	    name212=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name212.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            char_literal213=(Token)match(input,116,FOLLOW_116_in_clasical_method_call_predicate2157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal213_tree = 
            (Object)adaptor.create(char_literal213)
            ;
            adaptor.addChild(root_0, char_literal213_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal217=null;
        Token char_literal219=null;
        ObjcParser.name_return name214 =null;

        ObjcParser.access_wrapper_return access_wrapper215 =null;

        ObjcParser.name_return name216 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push218 =null;


        Object char_literal217_tree=null;
        Object char_literal219_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2172);
            name214=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name214.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:10: ( access_wrapper name )*
            loop26:
            do {
                int alt26=2;
                int LA26_0 = input.LA(1);

                if ( ((LA26_0 >= 127 && LA26_0 <= 128)) ) {
                    alt26=1;
                }


                switch (alt26) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2175);
            	    access_wrapper215=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper215.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2177);
            	    name216=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name216.getTree());

            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal217=(Token)match(input,116,FOLLOW_116_in_classical_method_call2182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal217_tree = 
            (Object)adaptor.create(char_literal217)
            ;
            adaptor.addChild(root_0, char_literal217_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:38: ( classical_method_params_push )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BOOL_LITERAL||LA27_0==ID||LA27_0==NUMBER_LITERAL||(LA27_0 >= STRING_LITERAL && LA27_0 <= STRING_OBJC)||LA27_0==110||LA27_0==114||LA27_0==116||LA27_0==121||(LA27_0 >= 124 && LA27_0 <= 125)||LA27_0==155||LA27_0==161||LA27_0==164||LA27_0==195) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2184);
                    classical_method_params_push218=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push218.getTree());

                    }
                    break;

            }


            char_literal219=(Token)match(input,117,FOLLOW_117_in_classical_method_call2187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal219_tree = 
            (Object)adaptor.create(char_literal219)
            ;
            adaptor.addChild(root_0, char_literal219_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal221=null;
        ObjcParser.method_param_push_return method_param_push220 =null;

        ObjcParser.method_param_push_return method_param_push222 =null;


        Object char_literal221_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2202);
            method_param_push220=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push220.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:24: ( ',' method_param_push )*
            loop28:
            do {
                int alt28=2;
                int LA28_0 = input.LA(1);

                if ( (LA28_0==123) ) {
                    alt28=1;
                }


                switch (alt28) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:25: ',' method_param_push
            	    {
            	    char_literal221=(Token)match(input,123,FOLLOW_123_in_classical_method_params_push2205); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal221);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2207);
            	    method_param_push222=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push222.getTree());

            	    }
            	    break;

            	default :
            	    break loop28;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal225=null;
        Token char_literal226=null;
        ObjcParser.method_param_push_return method_param_push223 =null;

        ObjcParser.prefix_return prefix224 =null;

        ObjcParser.method_param_push_return method_param_push227 =null;


        Object char_literal225_tree=null;
        Object char_literal226_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2231);
            method_param_push223=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push223.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==ID||LA30_0==123) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:23: ( ( prefix ':' ) | ',' )
            	    int alt29=2;
            	    int LA29_0 = input.LA(1);

            	    if ( (LA29_0==ID) ) {
            	        alt29=1;
            	    }
            	    else if ( (LA29_0==123) ) {
            	        alt29=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 29, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt29) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2236);
            	            prefix224=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix224.getTree());

            	            char_literal225=(Token)match(input,129,FOLLOW_129_in_method_params_push2238); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_129.add(char_literal225);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:39: ','
            	            {
            	            char_literal226=(Token)match(input,123,FOLLOW_123_in_method_params_push2243); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_123.add(char_literal226);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2246);
            	    method_param_push227=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push227.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 416:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:1: method_param_push : element_value -> ^( METHOD_PARAM element_value ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.element_value_return element_value228 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:3: ( element_value -> ^( METHOD_PARAM element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:5: element_value
            {
            pushFollow(FOLLOW_element_value_in_method_param_push2267);
            element_value228=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value228.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 419:19: -> ^( METHOD_PARAM element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:22: ^( METHOD_PARAM element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal229=null;
        Token char_literal232=null;
        Token char_literal234=null;
        ObjcParser.element_value_return element_value230 =null;

        ObjcParser.method_name_return method_name231 =null;

        ObjcParser.method_params_push_return method_params_push233 =null;


        Object char_literal229_tree=null;
        Object char_literal232_tree=null;
        Object char_literal234_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal229=(Token)match(input,161,FOLLOW_161_in_method_msg2289); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(char_literal229);


            pushFollow(FOLLOW_element_value_in_method_msg2291);
            element_value230=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value230.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2293);
            method_name231=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name231.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:35: ( ':' method_params_push )?
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==129) ) {
                alt31=1;
            }
            switch (alt31) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:36: ':' method_params_push
                    {
                    char_literal232=(Token)match(input,129,FOLLOW_129_in_method_msg2296); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal232);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2298);
                    method_params_push233=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push233.getTree());

                    }
                    break;

            }


            char_literal234=(Token)match(input,162,FOLLOW_162_in_method_msg2302); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(char_literal234);


            // AST REWRITE
            // elements: method_params_push, method_name, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 423:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:1: questionmark_if_stmt : ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal235=null;
        Token char_literal237=null;
        ObjcParser.element_value_return element_value236 =null;

        ObjcParser.element_value_return element_value238 =null;


        Object char_literal235_tree=null;
        Object char_literal237_tree=null;
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:3: ( ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:5: ( '?' element_value ':' element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:5: ( '?' element_value ':' element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:6: '?' element_value ':' element_value
            {
            char_literal235=(Token)match(input,141,FOLLOW_141_in_questionmark_if_stmt2328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal235);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2330);
            element_value236=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value236.getTree());

            char_literal237=(Token)match(input,129,FOLLOW_129_in_questionmark_if_stmt2332); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal237);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2334);
            element_value238=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value238.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:43: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:46: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:430:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression239 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:2: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:4: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2359);
            simple_expression239=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression239.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:22: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:25: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal240=null;
        ObjcParser.element_value_return element_value241 =null;


        Object char_literal240_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:5: ( ';' | element_value )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==130) ) {
                alt32=1;
            }
            else if ( (LA32_0==BOOL_LITERAL||LA32_0==ID||LA32_0==NUMBER_LITERAL||(LA32_0 >= STRING_LITERAL && LA32_0 <= STRING_OBJC)||LA32_0==110||LA32_0==114||LA32_0==116||LA32_0==121||(LA32_0 >= 124 && LA32_0 <= 125)||LA32_0==155||LA32_0==161||LA32_0==164||LA32_0==195) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }
            switch (alt32) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:6: ';'
                    {
                    char_literal240=(Token)match(input,130,FOLLOW_130_in_element_value_or_semicolon2382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal240_tree = 
                    (Object)adaptor.create(char_literal240)
                    ;
                    adaptor.addChild(root_0, char_literal240_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2386);
                    element_value241=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value241.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:1: element_value_or_array_init : ( '{' element_value ( ',' element_value )* '}' -> ^( ARRAY_INIT ( element_value )+ ) | element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal242=null;
        Token char_literal244=null;
        Token char_literal246=null;
        ObjcParser.element_value_return element_value243 =null;

        ObjcParser.element_value_return element_value245 =null;

        ObjcParser.element_value_return element_value247 =null;


        Object char_literal242_tree=null;
        Object char_literal244_tree=null;
        Object char_literal246_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:3: ( '{' element_value ( ',' element_value )* '}' -> ^( ARRAY_INIT ( element_value )+ ) | element_value )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==190) ) {
                alt34=1;
            }
            else if ( (LA34_0==BOOL_LITERAL||LA34_0==ID||LA34_0==NUMBER_LITERAL||(LA34_0 >= STRING_LITERAL && LA34_0 <= STRING_OBJC)||LA34_0==110||LA34_0==114||LA34_0==116||LA34_0==121||(LA34_0 >= 124 && LA34_0 <= 125)||LA34_0==155||LA34_0==161||LA34_0==164||LA34_0==195) ) {
                alt34=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;

            }
            switch (alt34) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:5: '{' element_value ( ',' element_value )* '}'
                    {
                    char_literal242=(Token)match(input,190,FOLLOW_190_in_element_value_or_array_init2402); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(char_literal242);


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2404);
                    element_value243=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value243.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:23: ( ',' element_value )*
                    loop33:
                    do {
                        int alt33=2;
                        int LA33_0 = input.LA(1);

                        if ( (LA33_0==123) ) {
                            alt33=1;
                        }


                        switch (alt33) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:24: ',' element_value
                    	    {
                    	    char_literal244=(Token)match(input,123,FOLLOW_123_in_element_value_or_array_init2407); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_123.add(char_literal244);


                    	    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2409);
                    	    element_value245=element_value();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_element_value.add(element_value245.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop33;
                        }
                    } while (true);


                    char_literal246=(Token)match(input,194,FOLLOW_194_in_element_value_or_array_init2413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(char_literal246);


                    // AST REWRITE
                    // elements: element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 439:48: -> ^( ARRAY_INIT ( element_value )+ )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:51: ^( ARRAY_INIT ( element_value )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        if ( !(stream_element_value.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:5: element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2428);
                    element_value247=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value247.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set248=null;

        Object set248_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set248=(Token)input.LT(1);

            if ( input.LA(1)==121||input.LA(1)==125 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set248)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1249 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt250 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2463);
            cast_unary_expression1249=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1249.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop35:
            do {
                int alt35=2;
                switch ( input.LA(1) ) {
                case 120:
                case 124:
                    {
                    alt35=1;
                    }
                    break;
                case 141:
                    {
                    alt35=1;
                    }
                    break;
                case 111:
                case 113:
                case 114:
                case 118:
                case 131:
                case 132:
                case 134:
                case 135:
                case 136:
                case 137:
                case 138:
                case 139:
                case 163:
                case 191:
                case 193:
                    {
                    alt35=1;
                    }
                    break;

                }

                switch (alt35) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2465);
            	    op2_unary_expression_or_questionmark_if_stmt250=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt250.getTree());

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal251=null;
        ObjcParser.cast_expression_return cast_expression252 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression253 =null;


        Object char_literal251_tree=null;
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==124) ) {
                alt36=1;
            }
            else if ( (LA36_0==BOOL_LITERAL||LA36_0==ID||LA36_0==NUMBER_LITERAL||(LA36_0 >= STRING_LITERAL && LA36_0 <= STRING_OBJC)||LA36_0==110||LA36_0==114||LA36_0==116||LA36_0==121||LA36_0==125||LA36_0==155||LA36_0==161||LA36_0==164||LA36_0==195) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:5: '-' cast_expression
                    {
                    char_literal251=(Token)match(input,124,FOLLOW_124_in_cast_unary_expression12480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal251);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12482);
                    cast_expression252=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression252.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 452:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:453:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12496);
                    cast_unary_expression253=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression253.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression2 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper254 =null;

        ObjcParser.cast_unary_expression2_return cast_unary_expression2255 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt256 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:3: ( ( op2_wrapper cast_unary_expression2 ) | questionmark_if_stmt )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==111||(LA37_0 >= 113 && LA37_0 <= 114)||LA37_0==118||LA37_0==120||LA37_0==124||(LA37_0 >= 131 && LA37_0 <= 132)||(LA37_0 >= 134 && LA37_0 <= 139)||LA37_0==163||LA37_0==191||LA37_0==193) ) {
                alt37=1;
            }
            else if ( (LA37_0==141) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:5: ( op2_wrapper cast_unary_expression2 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:5: ( op2_wrapper cast_unary_expression2 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:457:6: op2_wrapper cast_unary_expression2
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2510);
                    op2_wrapper254=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper254.getTree());

                    pushFollow(FOLLOW_cast_unary_expression2_in_op2_unary_expression_or_questionmark_if_stmt2512);
                    cast_unary_expression2255=cast_unary_expression2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression2255.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:458:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2519);
                    questionmark_if_stmt256=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt256.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:461:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal259=null;
        Token char_literal261=null;
        ObjcParser.cast_expression_return cast_expression257 =null;

        ObjcParser.increment_decrement_return increment_decrement258 =null;

        ObjcParser.cast_expression_return cast_expression260 =null;

        ObjcParser.cast_expression_return cast_expression262 =null;

        ObjcParser.increment_decrement_return increment_decrement263 =null;

        ObjcParser.cast_expression_return cast_expression264 =null;


        Object char_literal259_tree=null;
        Object char_literal261_tree=null;
        RewriteRuleTokenStream stream_110=new RewriteRuleTokenStream(adaptor,"token 110");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt39=4;
            switch ( input.LA(1) ) {
            case BOOL_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case STRING_OBJC:
            case 114:
            case 116:
            case 155:
            case 161:
            case 164:
                {
                alt39=1;
                }
                break;
            case 110:
                {
                alt39=2;
                }
                break;
            case 195:
                {
                alt39=3;
                }
                break;
            case 121:
            case 125:
                {
                alt39=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }

            switch (alt39) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2532);
                    cast_expression257=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression257.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:21: ( increment_decrement )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==121||LA38_0==125) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2534);
                            increment_decrement258=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement258.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:5: '!' cast_expression
                    {
                    char_literal259=(Token)match(input,110,FOLLOW_110_in_cast_unary_expression2541); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_110.add(char_literal259);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2543);
                    cast_expression260=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression260.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 463:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:5: '~' cast_expression
                    {
                    char_literal261=(Token)match(input,195,FOLLOW_195_in_cast_unary_expression2557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(char_literal261);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2559);
                    cast_expression262=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression262.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 464:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:465:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2573);
                    increment_decrement263=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement263.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2575);
                    cast_expression264=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression264.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_unary_expression2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:1: cast_unary_expression2 : cast_unary_expression ;
    public final ObjcParser.cast_unary_expression2_return cast_unary_expression2() throws RecognitionException {
        ObjcParser.cast_unary_expression2_return retval = new ObjcParser.cast_unary_expression2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression_return cast_unary_expression265 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:469:3: ( cast_unary_expression )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:469:5: cast_unary_expression
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression22588);
            cast_unary_expression265=cast_unary_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression265.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression2"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal268=null;
        Token char_literal271=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper266 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access267 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper269 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access270 =null;

        ObjcParser.access_wrapper_return access_wrapper272 =null;

        ObjcParser.name_return name273 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access274 =null;


        Object char_literal268_tree=null;
        Object char_literal271_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:3: ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access )
            int alt41=3;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:5: ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2609);
                    type_cast_wrapper266=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper266.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2611);
                    simple_expression_value_access267=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access267.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal268=(Token)match(input,116,FOLLOW_116_in_cast_expression2624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal268_tree = 
                    (Object)adaptor.create(char_literal268)
                    ;
                    adaptor.addChild(root_0, char_literal268_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2626);
                    type_cast_wrapper269=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper269.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2628);
                    simple_expression_value_access270=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access270.getTree());

                    char_literal271=(Token)match(input,117,FOLLOW_117_in_cast_expression2630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal271_tree = 
                    (Object)adaptor.create(char_literal271)
                    ;
                    adaptor.addChild(root_0, char_literal271_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:88: ( access_wrapper name )+
                    int cnt40=0;
                    loop40:
                    do {
                        int alt40=2;
                        int LA40_0 = input.LA(1);

                        if ( ((LA40_0 >= 127 && LA40_0 <= 128)) ) {
                            alt40=1;
                        }


                        switch (alt40) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:89: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression2633);
                    	    access_wrapper272=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper272.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_expression2635);
                    	    name273=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name273.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt40 >= 1 ) break loop40;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(40, input);
                                throw eee;
                        }
                        cnt40++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2643);
                    simple_expression_value_access274=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal276=null;
        Token char_literal278=null;
        Token char_literal279=null;
        Token char_literal283=null;
        Token char_literal285=null;
        ObjcParser.selector_wrapper_return selector_wrapper275 =null;

        ObjcParser.name_return name277 =null;

        ObjcParser.simple_expression_value_return simple_expression_value280 =null;

        ObjcParser.access_wrapper_return access_wrapper281 =null;

        ObjcParser.name_return name282 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push284 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2286 =null;

        ObjcParser.access_wrapper_return access_wrapper287 =null;

        ObjcParser.name_return name288 =null;


        Object char_literal276_tree=null;
        Object char_literal278_tree=null;
        Object char_literal279_tree=null;
        Object char_literal283_tree=null;
        Object char_literal285_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:3: ( selector_wrapper '(' name ( ':' )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* )
            int alt46=3;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:5: selector_wrapper '(' name ( ':' )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access2656);
                    selector_wrapper275=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper275.getTree());

                    char_literal276=(Token)match(input,116,FOLLOW_116_in_simple_expression_value_access2658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal276_tree = 
                    (Object)adaptor.create(char_literal276)
                    ;
                    adaptor.addChild(root_0, char_literal276_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access2660);
                    name277=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name277.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:31: ( ':' )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==129) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:31: ':'
                            {
                            char_literal278=(Token)match(input,129,FOLLOW_129_in_simple_expression_value_access2662); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal278_tree = 
                            (Object)adaptor.create(char_literal278)
                            ;
                            adaptor.addChild(root_0, char_literal278_tree);
                            }

                            }
                            break;

                    }


                    char_literal279=(Token)match(input,117,FOLLOW_117_in_simple_expression_value_access2665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal279_tree = 
                    (Object)adaptor.create(char_literal279)
                    ;
                    adaptor.addChild(root_0, char_literal279_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access2685);
                    simple_expression_value280=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value280.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:84: ( access_wrapper name )*
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);

                        if ( ((LA43_0 >= 127 && LA43_0 <= 128)) ) {
                            alt43=1;
                        }


                        switch (alt43) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2688);
                    	    access_wrapper281=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper281.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2690);
                    	    name282=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name282.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop43;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal283=(Token)match(input,116,FOLLOW_116_in_simple_expression_value_access2695); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal283_tree = 
                    (Object)adaptor.create(char_literal283)
                    ;
                    adaptor.addChild(root_0, char_literal283_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:112: ( classical_method_params_push )?
                    int alt44=2;
                    int LA44_0 = input.LA(1);

                    if ( (LA44_0==BOOL_LITERAL||LA44_0==ID||LA44_0==NUMBER_LITERAL||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_OBJC)||LA44_0==110||LA44_0==114||LA44_0==116||LA44_0==121||(LA44_0 >= 124 && LA44_0 <= 125)||LA44_0==155||LA44_0==161||LA44_0==164||LA44_0==195) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access2697);
                            classical_method_params_push284=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push284.getTree());

                            }
                            break;

                    }


                    char_literal285=(Token)match(input,117,FOLLOW_117_in_simple_expression_value_access2700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal285_tree = 
                    (Object)adaptor.create(char_literal285)
                    ;
                    adaptor.addChild(root_0, char_literal285_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:5: simple_expression_value2 ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access2707);
                    simple_expression_value2286=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2286.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:30: ( access_wrapper name )*
                    loop45:
                    do {
                        int alt45=2;
                        int LA45_0 = input.LA(1);

                        if ( ((LA45_0 >= 127 && LA45_0 <= 128)) ) {
                            alt45=1;
                        }


                        switch (alt45) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:31: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2710);
                    	    access_wrapper287=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper287.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2712);
                    	    name288=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name288.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop45;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:1: simple_expression_value : ( STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | '&' name | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL289=null;
        Token STRING_OBJC290=null;
        Token NUMBER_LITERAL291=null;
        Token BOOL_LITERAL292=null;
        Token char_literal293=null;
        ObjcParser.name_return name294 =null;

        ObjcParser.name_return name295 =null;


        Object STRING_LITERAL289_tree=null;
        Object STRING_OBJC290_tree=null;
        Object NUMBER_LITERAL291_tree=null;
        Object BOOL_LITERAL292_tree=null;
        Object char_literal293_tree=null;
        RewriteRuleTokenStream stream_STRING_OBJC=new RewriteRuleTokenStream(adaptor,"token STRING_OBJC");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_BOOL_LITERAL=new RewriteRuleTokenStream(adaptor,"token BOOL_LITERAL");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:2: ( STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | '&' name | name )
            int alt47=6;
            switch ( input.LA(1) ) {
            case STRING_LITERAL:
                {
                alt47=1;
                }
                break;
            case STRING_OBJC:
                {
                alt47=2;
                }
                break;
            case NUMBER_LITERAL:
                {
                alt47=3;
                }
                break;
            case BOOL_LITERAL:
                {
                alt47=4;
                }
                break;
            case 114:
                {
                alt47=5;
                }
                break;
            case ID:
                {
                alt47=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:4: STRING_LITERAL
                    {
                    STRING_LITERAL289=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_simple_expression_value2728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL289);


                    // AST REWRITE
                    // elements: STRING_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 486:19: -> ^( STRING STRING_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:486:22: ^( STRING STRING_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:487:4: STRING_OBJC
                    {
                    STRING_OBJC290=(Token)match(input,STRING_OBJC,FOLLOW_STRING_OBJC_in_simple_expression_value2741); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_OBJC.add(STRING_OBJC290);


                    // AST REWRITE
                    // elements: STRING_OBJC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 487:16: -> ^( STRING STRING_OBJC )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:487:19: ^( STRING STRING_OBJC )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_OBJC.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL291=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value2754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL291);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 488:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:4: BOOL_LITERAL
                    {
                    BOOL_LITERAL292=(Token)match(input,BOOL_LITERAL,FOLLOW_BOOL_LITERAL_in_simple_expression_value2767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOL_LITERAL.add(BOOL_LITERAL292);


                    // AST REWRITE
                    // elements: BOOL_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 489:17: -> ^( BOOL BOOL_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:20: ^( BOOL BOOL_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_BOOL_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: '&' name
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal293=(Token)match(input,114,FOLLOW_114_in_simple_expression_value2781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal293_tree = 
                    (Object)adaptor.create(char_literal293)
                    ;
                    adaptor.addChild(root_0, char_literal293_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value2783);
                    name294=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name294.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value2789);
                    name295=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name295.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:1: simple_expression_value2 : ( ( name '[' )=> name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal297=null;
        Token char_literal299=null;
        Token char_literal303=null;
        Token char_literal305=null;
        ObjcParser.name_return name296 =null;

        ObjcParser.element_value_return element_value298 =null;

        ObjcParser.block_call_wrapper_return block_call_wrapper300 =null;

        ObjcParser.simple_expression_value_return simple_expression_value301 =null;

        ObjcParser.method_msg_return method_msg302 =null;

        ObjcParser.element_value_return element_value304 =null;


        Object char_literal297_tree=null;
        Object char_literal299_tree=null;
        Object char_literal303_tree=null;
        Object char_literal305_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:3: ( ( name '[' )=> name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' )
            int alt48=5;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( name '[' )=> name '[' element_value ']'
                    {
                    pushFollow(FOLLOW_name_in_simple_expression_value22808);
                    name296=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name296.getTree());

                    char_literal297=(Token)match(input,161,FOLLOW_161_in_simple_expression_value22810); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(char_literal297);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value22812);
                    element_value298=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value298.getTree());

                    char_literal299=(Token)match(input,162,FOLLOW_162_in_simple_expression_value22814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(char_literal299);


                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 495:45: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:48: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value22830);
                    block_call_wrapper300=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper300.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value22836);
                    simple_expression_value301=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value301.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value22842);
                    method_msg302=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg302.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal303=(Token)match(input,116,FOLLOW_116_in_simple_expression_value22848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal303_tree = 
                    (Object)adaptor.create(char_literal303)
                    ;
                    adaptor.addChild(root_0, char_literal303_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value22850);
                    element_value304=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value304.getTree());

                    char_literal305=(Token)match(input,117,FOLLOW_117_in_simple_expression_value22852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal305_tree = 
                    (Object)adaptor.create(char_literal305)
                    ;
                    adaptor.addChild(root_0, char_literal305_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2306 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper2866);
            op2306=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2306.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 503:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set307=null;

        Object set307_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set307=(Token)input.LT(1);

            if ( input.LA(1)==111||(input.LA(1) >= 113 && input.LA(1) <= 114)||input.LA(1)==118||input.LA(1)==120||input.LA(1)==124||(input.LA(1) >= 131 && input.LA(1) <= 132)||(input.LA(1) >= 134 && input.LA(1) <= 139)||input.LA(1)==163||input.LA(1)==191||input.LA(1)==193 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set307)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign308 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper2963);
            op_assign308=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign308.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 509:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set309=null;

        Object set309_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set309=(Token)input.LT(1);

            if ( input.LA(1)==115||input.LA(1)==119||input.LA(1)==122||input.LA(1)==126||input.LA(1)==133||input.LA(1)==135||input.LA(1)==140||input.LA(1)==192 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set309)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector310 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3027);
            selector310=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector310.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 517:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal311=null;

        Object string_literal311_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal311=(Token)match(input,155,FOLLOW_155_in_selector3050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal311_tree = 
            (Object)adaptor.create(string_literal311)
            ;
            adaptor.addChild(root_0, string_literal311_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name312 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3065);
            type_cast_name312=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name312.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 525:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal313=null;
        Token char_literal315=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration314 =null;


        Object char_literal313_tree=null;
        Object char_literal315_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal313=(Token)match(input,116,FOLLOW_116_in_type_cast_name3088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal313_tree = 
            (Object)adaptor.create(char_literal313)
            ;
            adaptor.addChild(root_0, char_literal313_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3090);
            type_cast_declaration314=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration314.getTree());

            char_literal315=(Token)match(input,117,FOLLOW_117_in_type_cast_name3092); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal315_tree = 
            (Object)adaptor.create(char_literal315)
            ;
            adaptor.addChild(root_0, char_literal315_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol316 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration317 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==176) ) {
                int LA49_1 = input.LA(2);

                if ( (LA49_1==131) ) {
                    switch ( input.LA(3) ) {
                    case 179:
                        {
                        int LA49_18 = input.LA(4);

                        if ( (LA49_18==137) ) {
                            int LA49_23 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 23, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 49, 18, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 176:
                        {
                        int LA49_19 = input.LA(4);

                        if ( (LA49_19==137) ) {
                            int LA49_24 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 24, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 49, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 180:
                        {
                        switch ( input.LA(4) ) {
                        case 179:
                            {
                            int LA49_25 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 25, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 137:
                            {
                            int LA49_26 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 26, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 180:
                            {
                            int LA49_27 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 27, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 49, 20, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 182:
                        {
                        switch ( input.LA(4) ) {
                        case 179:
                            {
                            int LA49_28 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 137:
                            {
                            int LA49_29 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 182:
                            {
                            int LA49_30 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 49, 21, input);

                            throw nvae;

                        }

                        }
                        break;
                    case ID:
                        {
                        int LA49_22 = input.LA(4);

                        if ( (LA49_22==137) ) {
                            int LA49_31 = input.LA(5);

                            if ( (synpred9_Objc()) ) {
                                alt49=1;
                            }
                            else if ( (true) ) {
                                alt49=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 49, 31, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 49, 22, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 49, 12, input);

                        throw nvae;

                    }

                }
                else if ( (LA49_1==114||(LA49_1 >= 117 && LA49_1 <= 118)||LA49_1==161||LA49_1==167) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA49_0==ID||LA49_0==116||LA49_0==167||LA49_0==172||(LA49_0 >= 179 && LA49_0 <= 180)||LA49_0==182||LA49_0==184||(LA49_0 >= 187 && LA49_0 <= 188)) ) {
                alt49=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;

            }
            switch (alt49) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3110);
                    type_declaration_protocol316=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol316.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3116);
                    classical_type_declaration317=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration317.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set318=null;

        Object set318_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:539:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set318=(Token)input.LT(1);

            if ( (input.LA(1) >= 127 && input.LA(1) <= 128) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set318)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access319 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3144);
            access319=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access319.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 543:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access320 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:2: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:4: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3162);
            object_access320=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access320.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 547:18: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:21: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:550:1: object_access : name ( ')' )? ( access_wrapper name ( ')' )? )* ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal322=null;
        Token char_literal325=null;
        ObjcParser.name_return name321 =null;

        ObjcParser.access_wrapper_return access_wrapper323 =null;

        ObjcParser.name_return name324 =null;


        Object char_literal322_tree=null;
        Object char_literal325_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:2: ( name ( ')' )? ( access_wrapper name ( ')' )? )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:4: name ( ')' )? ( access_wrapper name ( ')' )? )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access3181);
            name321=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name321.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:9: ( ')' )?
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==117) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:9: ')'
                    {
                    char_literal322=(Token)match(input,117,FOLLOW_117_in_object_access3183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal322_tree = 
                    (Object)adaptor.create(char_literal322)
                    ;
                    adaptor.addChild(root_0, char_literal322_tree);
                    }

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:14: ( access_wrapper name ( ')' )? )*
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( ((LA52_0 >= 127 && LA52_0 <= 128)) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:15: access_wrapper name ( ')' )?
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access3187);
            	    access_wrapper323=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper323.getTree());

            	    pushFollow(FOLLOW_name_in_object_access3189);
            	    name324=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name324.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:35: ( ')' )?
            	    int alt51=2;
            	    int LA51_0 = input.LA(1);

            	    if ( (LA51_0==117) ) {
            	        alt51=1;
            	    }
            	    switch (alt51) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:35: ')'
            	            {
            	            char_literal325=(Token)match(input,117,FOLLOW_117_in_object_access3191); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal325_tree = 
            	            (Object)adaptor.create(char_literal325)
            	            ;
            	            adaptor.addChild(root_0, char_literal325_tree);
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:1: break_stmt : 'break' ';' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal326=null;
        Token char_literal327=null;

        Object string_literal326_tree=null;
        Object char_literal327_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:3: ( 'break' ';' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:5: 'break' ';'
            {
            string_literal326=(Token)match(input,165,FOLLOW_165_in_break_stmt3208); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_165.add(string_literal326);


            char_literal327=(Token)match(input,130,FOLLOW_130_in_break_stmt3210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal327);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 555:17: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:20: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:1: continue_stmt : 'continue' ';' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal328=null;
        Token char_literal329=null;

        Object string_literal328_tree=null;
        Object char_literal329_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:3: ( 'continue' ';' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:5: 'continue' ';'
            {
            string_literal328=(Token)match(input,168,FOLLOW_168_in_continue_stmt3231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(string_literal328);


            char_literal329=(Token)match(input,130,FOLLOW_130_in_continue_stmt3233); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_130.add(char_literal329);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 559:20: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:22: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:565:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration330 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3259);
            extern_declaration330=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration330.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 566:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:566:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:1: extern_declaration : 'extern' field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal331=null;
        ObjcParser.field_declaration_return field_declaration332 =null;


        Object string_literal331_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:3: ( 'extern' field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:5: 'extern' field_declaration
            {
            root_0 = (Object)adaptor.nil();


            string_literal331=(Token)match(input,173,FOLLOW_173_in_extern_declaration3280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal331_tree = 
            (Object)adaptor.create(string_literal331)
            ;
            adaptor.addChild(root_0, string_literal331_tree);
            }

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3282);
            field_declaration332=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration332.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix333 =null;

        ObjcParser.method_declaration_return method_declaration334 =null;

        ObjcParser.property_prefix_return property_prefix335 =null;

        ObjcParser.optional_prefix_return optional_prefix336 =null;

        ObjcParser.field_declaration_return field_declaration337 =null;

        ObjcParser.comments_return comments338 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY field_declaration ) | comments )
            int alt55=3;
            switch ( input.LA(1) ) {
            case 120:
            case 124:
            case 149:
                {
                alt55=1;
                }
                break;
            case 151:
                {
                alt55=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }

            switch (alt55) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:5: ( optional_prefix )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==149) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3294);
                            optional_prefix333=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix333.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations3297);
                    method_declaration334=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration334.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 572:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations3311);
                    property_prefix335=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix335.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:21: ( optional_prefix )?
                    int alt54=2;
                    int LA54_0 = input.LA(1);

                    if ( (LA54_0==149) ) {
                        alt54=1;
                    }
                    switch (alt54) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3313);
                            optional_prefix336=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix336.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations3316);
                    field_declaration337=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration337.getTree());

                    // AST REWRITE
                    // elements: field_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 573:56: -> ^( PROPERTY field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:59: ^( PROPERTY field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations3330);
                    comments338=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments338.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration339 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper3345);
            field_declaration339=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration339.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:1: optional_prefix : '@optional' ;
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal340=null;

        Object string_literal340_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:582:3: ( '@optional' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:582:5: '@optional'
            {
            root_0 = (Object)adaptor.nil();


            string_literal340=(Token)match(input,149,FOLLOW_149_in_optional_prefix3368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal340_tree = 
            (Object)adaptor.create(string_literal340)
            ;
            adaptor.addChild(root_0, string_literal340_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal341=null;

        Object string_literal341_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal341=(Token)match(input,160,FOLLOW_160_in_ns_inline3380); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal341_tree = 
            (Object)adaptor.create(string_literal341)
            ;
            adaptor.addChild(root_0, string_literal341_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:587:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal342=null;
        Token char_literal343=null;
        Token char_literal345=null;
        Token char_literal347=null;
        Token char_literal349=null;
        Token char_literal351=null;
        ObjcParser.name_return name344 =null;

        ObjcParser.name_return name346 =null;

        ObjcParser.name_return name348 =null;

        ObjcParser.name_return name350 =null;


        Object string_literal342_tree=null;
        Object char_literal343_tree=null;
        Object char_literal345_tree=null;
        Object char_literal347_tree=null;
        Object char_literal349_tree=null;
        Object char_literal351_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal342=(Token)match(input,151,FOLLOW_151_in_property_prefix3392); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal342_tree = 
            (Object)adaptor.create(string_literal342)
            ;
            adaptor.addChild(root_0, string_literal342_tree);
            }

            char_literal343=(Token)match(input,116,FOLLOW_116_in_property_prefix3394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal343_tree = 
            (Object)adaptor.create(char_literal343)
            ;
            adaptor.addChild(root_0, char_literal343_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix3396);
            name344=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name344.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:26: ( '=' name )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==135) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:27: '=' name
                    {
                    char_literal345=(Token)match(input,135,FOLLOW_135_in_property_prefix3399); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal345_tree = 
                    (Object)adaptor.create(char_literal345)
                    ;
                    adaptor.addChild(root_0, char_literal345_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix3401);
                    name346=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name346.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:38: ( ',' name ( '=' name )? )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==123) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:39: ',' name ( '=' name )?
            	    {
            	    char_literal347=(Token)match(input,123,FOLLOW_123_in_property_prefix3406); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal347_tree = 
            	    (Object)adaptor.create(char_literal347)
            	    ;
            	    adaptor.addChild(root_0, char_literal347_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix3408);
            	    name348=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name348.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:48: ( '=' name )?
            	    int alt57=2;
            	    int LA57_0 = input.LA(1);

            	    if ( (LA57_0==135) ) {
            	        alt57=1;
            	    }
            	    switch (alt57) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:588:49: '=' name
            	            {
            	            char_literal349=(Token)match(input,135,FOLLOW_135_in_property_prefix3411); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal349_tree = 
            	            (Object)adaptor.create(char_literal349)
            	            ;
            	            adaptor.addChild(root_0, char_literal349_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix3413);
            	            name350=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name350.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            char_literal351=(Token)match(input,117,FOLLOW_117_in_property_prefix3419); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal351_tree = 
            (Object)adaptor.create(char_literal351)
            ;
            adaptor.addChild(root_0, char_literal351_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration352 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:599:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:599:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper3432);
            interface_declaration352=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration352.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 599:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:599:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration353 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3452);
            protocol_declaration353=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration353.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 602:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal354=null;
        ObjcParser.typedef_declaration_return typedef_declaration355 =null;


        Object string_literal354_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:5: 'typedef' typedef_declaration
            {
            string_literal354=(Token)match(input,186,FOLLOW_186_in_typedef_declaration_wrapper3470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal354);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3472);
            typedef_declaration355=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration355.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal358=null;
        Token char_literal360=null;
        ObjcParser.typedef_internal_return typedef_internal356 =null;

        ObjcParser.typedef_name_return typedef_name357 =null;

        ObjcParser.typedef_name_return typedef_name359 =null;


        Object char_literal358_tree=null;
        Object char_literal360_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration3490);
            typedef_internal356=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal356.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration3492);
            typedef_name357=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name357.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:35: ( ',' typedef_name )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==123) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:36: ',' typedef_name
            	    {
            	    char_literal358=(Token)match(input,123,FOLLOW_123_in_typedef_declaration3495); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal358_tree = 
            	    (Object)adaptor.create(char_literal358)
            	    ;
            	    adaptor.addChild(root_0, char_literal358_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration3497);
            	    typedef_name359=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name359.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            char_literal360=(Token)match(input,130,FOLLOW_130_in_typedef_declaration3501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal360_tree = 
            (Object)adaptor.create(char_literal360)
            ;
            adaptor.addChild(root_0, char_literal360_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:610:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal361=null;
        Token char_literal362=null;
        Token char_literal364=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane363 =null;


        Object char_literal361_tree=null;
        Object char_literal362_tree=null;
        Object char_literal364_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal361=(Token)match(input,116,FOLLOW_116_in_func_pointer_predicate3513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal361_tree = 
            (Object)adaptor.create(char_literal361)
            ;
            adaptor.addChild(root_0, char_literal361_tree);
            }

            char_literal362=(Token)match(input,118,FOLLOW_118_in_func_pointer_predicate3515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal362_tree = 
            (Object)adaptor.create(char_literal362)
            ;
            adaptor.addChild(root_0, char_literal362_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate3517);
            type_declaration_plane363=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane363.getTree());

            char_literal364=(Token)match(input,117,FOLLOW_117_in_func_pointer_predicate3519); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal364_tree = 
            (Object)adaptor.create(char_literal364)
            ;
            adaptor.addChild(root_0, char_literal364_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal365=null;
        Token char_literal366=null;
        Token char_literal368=null;
        Token char_literal369=null;
        Token char_literal371=null;
        Token char_literal373=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane367 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane370 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane372 =null;


        Object char_literal365_tree=null;
        Object char_literal366_tree=null;
        Object char_literal368_tree=null;
        Object char_literal369_tree=null;
        Object char_literal371_tree=null;
        Object char_literal373_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal365=(Token)match(input,116,FOLLOW_116_in_func_pointer3534); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal365);


            char_literal366=(Token)match(input,118,FOLLOW_118_in_func_pointer3536); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal366);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3538);
            type_declaration_plane367=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane367.getTree());

            char_literal368=(Token)match(input,117,FOLLOW_117_in_func_pointer3540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal368);


            char_literal369=(Token)match(input,116,FOLLOW_116_in_func_pointer3542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal369);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==ID||LA61_0==167||LA61_0==176||(LA61_0 >= 179 && LA61_0 <= 180)||LA61_0==182||LA61_0==188) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3545);
                    type_declaration_plane370=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane370.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:68: ( ',' type_declaration_plane )*
                    loop60:
                    do {
                        int alt60=2;
                        int LA60_0 = input.LA(1);

                        if ( (LA60_0==123) ) {
                            alt60=1;
                        }


                        switch (alt60) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:69: ',' type_declaration_plane
                    	    {
                    	    char_literal371=(Token)match(input,123,FOLLOW_123_in_func_pointer3548); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_123.add(char_literal371);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3550);
                    	    type_declaration_plane372=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane372.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop60;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal373=(Token)match(input,117,FOLLOW_117_in_func_pointer3556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal373);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 615:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer374 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct375 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum376 =null;

        ObjcParser.type_declaration_union_return type_declaration_union377 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane378 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt62=5;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==116) && (synpred10_Objc())) {
                alt62=1;
            }
            else if ( (LA62_0==184) ) {
                alt62=2;
            }
            else if ( (LA62_0==172) ) {
                alt62=3;
            }
            else if ( (LA62_0==187) ) {
                alt62=4;
            }
            else if ( (LA62_0==ID||LA62_0==167||LA62_0==176||(LA62_0 >= 179 && LA62_0 <= 180)||LA62_0==182||LA62_0==188) ) {
                alt62=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;

            }
            switch (alt62) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal3585);
                    func_pointer374=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer374.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal3591);
                    type_declaration_struct375=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct375.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:621:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal3597);
                    type_declaration_enum376=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum376.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:622:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal3603);
                    type_declaration_union377=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union377.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal3609);
                    type_declaration_plane378=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane378.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:626:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID379=null;

        Object ID379_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:5: ID
            {
            ID379=(Token)match(input,ID,FOLLOW_ID_in_typedef_name3624); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID379);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 627:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal380=null;
        Token char_literal382=null;
        Token string_literal383=null;
        Token char_literal385=null;
        Token char_literal387=null;
        Token char_literal389=null;
        Token char_literal391=null;
        ObjcParser.class_name_return class_name381 =null;

        ObjcParser.protocol_name_return protocol_name384 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple386 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple388 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple390 =null;


        Object string_literal380_tree=null;
        Object char_literal382_tree=null;
        Object string_literal383_tree=null;
        Object char_literal385_tree=null;
        Object char_literal387_tree=null;
        Object char_literal389_tree=null;
        Object char_literal391_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt63=5;
            switch ( input.LA(1) ) {
            case 143:
                {
                alt63=1;
                }
                break;
            case 153:
                {
                alt63=2;
                }
                break;
            case 184:
                {
                alt63=3;
                }
                break;
            case 187:
                {
                alt63=4;
                }
                break;
            case 172:
                {
                alt63=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }

            switch (alt63) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:5: '@class' class_name ';'
                    {
                    string_literal380=(Token)match(input,143,FOLLOW_143_in_forward_class_declaration3642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_143.add(string_literal380);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration3644);
                    class_name381=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name381.getTree());

                    char_literal382=(Token)match(input,130,FOLLOW_130_in_forward_class_declaration3646); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal382);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 630:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:5: '@protocol' protocol_name ';'
                    {
                    string_literal383=(Token)match(input,153,FOLLOW_153_in_forward_class_declaration3659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal383);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration3661);
                    protocol_name384=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name384.getTree());

                    char_literal385=(Token)match(input,130,FOLLOW_130_in_forward_class_declaration3663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal385);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 631:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:632:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration3676);
                    type_declaration_struct_simple386=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple386.getTree());

                    char_literal387=(Token)match(input,130,FOLLOW_130_in_forward_class_declaration3678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal387);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 632:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:632:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:633:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration3691);
                    type_declaration_union_simple388=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple388.getTree());

                    char_literal389=(Token)match(input,130,FOLLOW_130_in_forward_class_declaration3693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal389);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 633:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:633:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration3706);
                    type_declaration_enum_simple390=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple390.getTree());

                    char_literal391=(Token)match(input,130,FOLLOW_130_in_forward_class_declaration3708); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal391);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 634:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID392=null;

        Object ID392_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:5: ID
            {
            ID392=(Token)match(input,ID,FOLLOW_ID_in_class_name3728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID392);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 638:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:640:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal393=null;
        ObjcParser.protocol_name_return protocol_name394 =null;

        ObjcParser.implements_interfaces_return implements_interfaces395 =null;

        ObjcParser.class_protocol_end_return class_protocol_end396 =null;


        Object string_literal393_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal393=(Token)match(input,153,FOLLOW_153_in_protocol_declaration3748); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal393_tree = 
            (Object)adaptor.create(string_literal393)
            ;
            adaptor.addChild(root_0, string_literal393_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration3750);
            protocol_name394=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name394.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:31: ( implements_interfaces )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==131) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration3752);
                    implements_interfaces395=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces395.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration3760);
            class_protocol_end396=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end396.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal398=null;
        ObjcParser.declarations_return declarations397 =null;


        Object string_literal398_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:5: ( declarations )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==MULTI_COMMENT_LIT||LA65_0==SINGLE_COMMENT_LIT||LA65_0==120||LA65_0==124||LA65_0==149||LA65_0==151) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end3774);
            	    declarations397=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations397.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            string_literal398=(Token)match(input,145,FOLLOW_145_in_class_protocol_end3781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal398_tree = 
            (Object)adaptor.create(string_literal398)
            ;
            adaptor.addChild(root_0, string_literal398_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal399=null;
        Token char_literal401=null;
        ObjcParser.template_internal_return template_internal400 =null;


        Object char_literal399_tree=null;
        Object char_literal401_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal399=(Token)match(input,131,FOLLOW_131_in_template3793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal399_tree = 
            (Object)adaptor.create(char_literal399)
            ;
            adaptor.addChild(root_0, char_literal399_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template3795);
            template_internal400=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal400.getTree());

            char_literal401=(Token)match(input,137,FOLLOW_137_in_template3797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal401_tree = 
            (Object)adaptor.create(char_literal401)
            ;
            adaptor.addChild(root_0, char_literal401_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:652:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols402 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces3806);
            implements_protocols402=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols402.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 653:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal403=null;
        Token char_literal405=null;
        Token char_literal407=null;
        ObjcParser.type_dec_internal_return type_dec_internal404 =null;

        ObjcParser.type_dec_internal_return type_dec_internal406 =null;


        Object char_literal403_tree=null;
        Object char_literal405_tree=null;
        Object char_literal407_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal403=(Token)match(input,131,FOLLOW_131_in_implements_protocols3831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal403);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols3833);
            type_dec_internal404=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal404.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:27: ( ',' type_dec_internal )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( (LA66_0==123) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:28: ',' type_dec_internal
            	    {
            	    char_literal405=(Token)match(input,123,FOLLOW_123_in_implements_protocols3836); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal405);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols3838);
            	    type_dec_internal406=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal406.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            char_literal407=(Token)match(input,137,FOLLOW_137_in_implements_protocols3842); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal407);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal409=null;
        ObjcParser.template_type_return template_type408 =null;

        ObjcParser.template_type_return template_type410 =null;


        Object char_literal409_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal3864);
            template_type408=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type408.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:19: ( ',' template_type )*
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==123) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:20: ',' template_type
            	    {
            	    char_literal409=(Token)match(input,123,FOLLOW_123_in_template_internal3867); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal409_tree = 
            	    (Object)adaptor.create(char_literal409)
            	    ;
            	    adaptor.addChild(root_0, char_literal409_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal3869);
            	    template_type410=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type410.getTree());

            	    }
            	    break;

            	default :
            	    break loop67;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:663:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal412=null;
        ObjcParser.template_name_return template_name411 =null;

        ObjcParser.template_name_return template_name413 =null;


        Object string_literal412_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:3: ( template_name | 'struct' template_name )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==ID) ) {
                alt68=1;
            }
            else if ( (LA68_0==184) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }
            switch (alt68) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type3883);
                    template_name411=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name411.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal412=(Token)match(input,184,FOLLOW_184_in_template_type3889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal412_tree = 
                    (Object)adaptor.create(string_literal412)
                    ;
                    adaptor.addChild(root_0, string_literal412_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type3891);
                    template_name413=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name413.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID414=null;

        Object ID414_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:5: ID
            {
            ID414=(Token)match(input,ID,FOLLOW_ID_in_template_name3906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID414);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 669:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID415=null;

        Object ID415_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:5: ID
            {
            ID415=(Token)match(input,ID,FOLLOW_ID_in_protocol_name3929); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID415);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal416=null;
        Token string_literal421=null;
        ObjcParser.interface_name_return interface_name417 =null;

        ObjcParser.superclass_name_return superclass_name418 =null;

        ObjcParser.fields_body_return fields_body419 =null;

        ObjcParser.declarations_return declarations420 =null;


        Object string_literal416_tree=null;
        Object string_literal421_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal416=(Token)match(input,148,FOLLOW_148_in_interface_declaration3953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal416_tree = 
            (Object)adaptor.create(string_literal416)
            ;
            adaptor.addChild(root_0, string_literal416_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration3955);
            interface_name417=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name417.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration3957);
            superclass_name418=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name418.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:3: ( fields_body )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==190) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration3961);
                    fields_body419=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body419.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:3: ( declarations )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==MULTI_COMMENT_LIT||LA70_0==SINGLE_COMMENT_LIT||LA70_0==120||LA70_0==124||LA70_0==149||LA70_0==151) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration3966);
            	    declarations420=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations420.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            string_literal421=(Token)match(input,145,FOLLOW_145_in_interface_declaration3971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal421_tree = 
            (Object)adaptor.create(string_literal421)
            ;
            adaptor.addChild(root_0, string_literal421_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal422=null;
        Token char_literal424=null;
        ObjcParser.body_item_return body_item423 =null;


        Object char_literal422_tree=null;
        Object char_literal424_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal422=(Token)match(input,190,FOLLOW_190_in_fields_body3988); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal422_tree = 
            (Object)adaptor.create(char_literal422)
            ;
            adaptor.addChild(root_0, char_literal422_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:685:5: ( body_item )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==ID||LA71_0==MULTI_COMMENT_LIT||LA71_0==SINGLE_COMMENT_LIT||LA71_0==116||LA71_0==150||LA71_0==152||LA71_0==154||LA71_0==167||LA71_0==172||LA71_0==176||(LA71_0 >= 179 && LA71_0 <= 180)||LA71_0==182||LA71_0==184||(LA71_0 >= 186 && LA71_0 <= 188)) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:685:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body3994);
            	    body_item423=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item423.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);


            char_literal424=(Token)match(input,194,FOLLOW_194_in_fields_body3999); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal424_tree = 
            (Object)adaptor.create(char_literal424)
            ;
            adaptor.addChild(root_0, char_literal424_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:1: body_item : ( ( group_modifier_wrapper )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper425 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper426 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper427 =null;

        ObjcParser.comments_return comments428 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:3: ( ( group_modifier_wrapper )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==ID||LA74_0==116||LA74_0==150||LA74_0==152||LA74_0==154||LA74_0==167||LA74_0==172||LA74_0==176||(LA74_0 >= 179 && LA74_0 <= 180)||LA74_0==182||LA74_0==184||(LA74_0 >= 186 && LA74_0 <= 188)) ) {
                alt74=1;
            }
            else if ( (LA74_0==MULTI_COMMENT_LIT||LA74_0==SINGLE_COMMENT_LIT) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:5: ( group_modifier_wrapper )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:5: ( group_modifier_wrapper )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==150||LA72_0==152||LA72_0==154) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4014);
                            group_modifier_wrapper425=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper425.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:29: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt73=2;
                    int LA73_0 = input.LA(1);

                    if ( (LA73_0==186) ) {
                        alt73=1;
                    }
                    else if ( (LA73_0==ID||LA73_0==116||LA73_0==167||LA73_0==172||LA73_0==176||(LA73_0 >= 179 && LA73_0 <= 180)||LA73_0==182||LA73_0==184||(LA73_0 >= 187 && LA73_0 <= 188)) ) {
                        alt73=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 73, 0, input);

                        throw nvae;

                    }
                    switch (alt73) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:30: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4018);
                            typedef_declaration_wrapper426=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper426.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:60: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4022);
                            field_declaration_wrapper427=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper427.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:691:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4029);
                    comments428=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments428.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier429 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4042);
            group_modifier429=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier429.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 695:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set430=null;

        Object set430_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set430=(Token)input.LT(1);

            if ( input.LA(1)==150||input.LA(1)==152||input.LA(1)==154 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set430)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID431=null;
        ObjcParser.category_return category432 =null;


        Object ID431_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:5: ID ( category )?
            {
            ID431=(Token)match(input,ID,FOLLOW_ID_in_interface_name4087); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID431);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:8: ( category )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==116) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4089);
                    category432=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category432.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, category
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 701:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal433=null;
        Token ID434=null;
        Token char_literal435=null;

        Object char_literal433_tree=null;
        Object ID434_tree=null;
        Object char_literal435_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:11: '(' ( ID )? ')'
            {
            char_literal433=(Token)match(input,116,FOLLOW_116_in_category4108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal433);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:15: ( ID )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ID) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:15: ID
                    {
                    ID434=(Token)match(input,ID,FOLLOW_ID_in_category4110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID434);


                    }
                    break;

            }


            char_literal435=(Token)match(input,117,FOLLOW_117_in_category4113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal435);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 703:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal436=null;
        Token ID437=null;
        ObjcParser.implements_interfaces_return implements_interfaces438 =null;


        Object char_literal436_tree=null;
        Object ID437_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:5: ( ':' ID )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==129) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:6: ':' ID
                    {
                    char_literal436=(Token)match(input,129,FOLLOW_129_in_superclass_name4133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal436);


                    ID437=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID437);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:15: ( implements_interfaces )?
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==131) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4139);
                    implements_interfaces438=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces438.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, implements_interfaces
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 706:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration439 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: ( field_declaration )+
            int cnt79=0;
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==ID||LA79_0==116||LA79_0==167||LA79_0==172||LA79_0==176||(LA79_0 >= 179 && LA79_0 <= 180)||LA79_0==182||LA79_0==184||(LA79_0 >= 187 && LA79_0 <= 188)) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4168);
            	    field_declaration439=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration439.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt79 >= 1 ) break loop79;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(79, input);
                        throw eee;
                }
                cnt79++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 710:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:712:1: field_declaration : ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) ;
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal442=null;
        Token char_literal445=null;
        Token char_literal449=null;
        Token char_literal450=null;
        ObjcParser.type_declaration_return type_declaration440 =null;

        ObjcParser.field_name_return field_name441 =null;

        ObjcParser.field_name_return field_name443 =null;

        ObjcParser.classical_method_params_return classical_method_params444 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper446 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper447 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init448 =null;


        Object char_literal442_tree=null;
        Object char_literal445_tree=null;
        Object char_literal449_tree=null;
        Object char_literal450_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:3: ( ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:6: ( type_declaration field_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:7: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration4192);
            type_declaration440=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration440.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration4194);
            field_name441=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name441.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:36: ( ',' field_name )*
            loop80:
            do {
                int alt80=2;
                int LA80_0 = input.LA(1);

                if ( (LA80_0==123) ) {
                    alt80=1;
                }


                switch (alt80) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:37: ',' field_name
            	    {
            	    char_literal442=(Token)match(input,123,FOLLOW_123_in_field_declaration4198); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal442_tree = 
            	    (Object)adaptor.create(char_literal442)
            	    ;
            	    adaptor.addChild(root_0, char_literal442_tree);
            	    }

            	    pushFollow(FOLLOW_field_name_in_field_declaration4200);
            	    field_name443=field_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name443.getTree());

            	    }
            	    break;

            	default :
            	    break loop80;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( ((LA83_0 >= 115 && LA83_0 <= 116)||LA83_0==119||LA83_0==122||LA83_0==126||LA83_0==133||LA83_0==135||LA83_0==140||LA83_0==192) ) {
                alt83=1;
            }
            else if ( (LA83_0==130) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;

            }
            switch (alt83) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==116) ) {
                        alt82=1;
                    }
                    else if ( (LA82_0==115||LA82_0==119||LA82_0==122||LA82_0==126||LA82_0==133||LA82_0==135||LA82_0==140||LA82_0==192) ) {
                        alt82=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 0, input);

                        throw nvae;

                    }
                    switch (alt82) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:57: classical_method_params ( ';' | block_multiline_wrapper )
                            {
                            pushFollow(FOLLOW_classical_method_params_in_field_declaration4207);
                            classical_method_params444=classical_method_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params444.getTree());

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:81: ( ';' | block_multiline_wrapper )
                            int alt81=2;
                            int LA81_0 = input.LA(1);

                            if ( (LA81_0==130) ) {
                                alt81=1;
                            }
                            else if ( (LA81_0==190) ) {
                                alt81=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 81, 0, input);

                                throw nvae;

                            }
                            switch (alt81) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:82: ';'
                                    {
                                    char_literal445=(Token)match(input,130,FOLLOW_130_in_field_declaration4210); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal445_tree = 
                                    (Object)adaptor.create(char_literal445)
                                    ;
                                    adaptor.addChild(root_0, char_literal445_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:88: block_multiline_wrapper
                                    {
                                    pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4214);
                                    block_multiline_wrapper446=block_multiline_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper446.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:117: op_assign_wrapper element_value_or_array_init ';'
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4221);
                            op_assign_wrapper447=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper447.getTree());

                            pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4223);
                            element_value_or_array_init448=element_value_or_array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init448.getTree());

                            char_literal449=(Token)match(input,130,FOLLOW_130_in_field_declaration4225); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal449_tree = 
                            (Object)adaptor.create(char_literal449)
                            ;
                            adaptor.addChild(root_0, char_literal449_tree);
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:171: ';'
                    {
                    char_literal450=(Token)match(input,130,FOLLOW_130_in_field_declaration4231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal450_tree = 
                    (Object)adaptor.create(char_literal450)
                    ;
                    adaptor.addChild(root_0, char_literal450_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:716:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration451 =null;

        ObjcParser.field_name_return field_name452 =null;


        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple4246);
            type_declaration451=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration451.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple4248);
            field_name452=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name452.getTree());

            // AST REWRITE
            // elements: type_declaration, field_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 717:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal453=null;
        Token char_literal455=null;
        Token char_literal457=null;
        ObjcParser.classical_param_return classical_param454 =null;

        ObjcParser.classical_param_return classical_param456 =null;


        Object char_literal453_tree=null;
        Object char_literal455_tree=null;
        Object char_literal457_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal453=(Token)match(input,116,FOLLOW_116_in_classical_method_params4273); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_116.add(char_literal453);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:9: ( classical_param )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ID||LA84_0==116||LA84_0==167||LA84_0==172||LA84_0==176||(LA84_0 >= 179 && LA84_0 <= 180)||LA84_0==182||LA84_0==184||(LA84_0 >= 187 && LA84_0 <= 188)) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params4275);
                    classical_param454=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param454.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:26: ( ',' classical_param )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==123) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:27: ',' classical_param
            	    {
            	    char_literal455=(Token)match(input,123,FOLLOW_123_in_classical_method_params4279); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_123.add(char_literal455);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params4281);
            	    classical_param456=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param456.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            char_literal457=(Token)match(input,117,FOLLOW_117_in_classical_method_params4285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_117.add(char_literal457);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 721:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration458 =null;

        ObjcParser.param_name_return param_name459 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param4310);
            classical_type_declaration458=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration458.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param4312);
            param_name459=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name459.getTree());

            // AST REWRITE
            // elements: param_name, classical_type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 725:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal463=null;
        Token string_literal464=null;
        Token char_literal466=null;
        Token string_literal467=null;
        Token char_literal469=null;
        Token string_literal470=null;
        Token char_literal472=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol460 =null;

        ObjcParser.func_pointer_return func_pointer461 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane462 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper465 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper468 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper471 =null;


        Object char_literal463_tree=null;
        Object string_literal464_tree=null;
        Object char_literal466_tree=null;
        Object string_literal467_tree=null;
        Object char_literal469_tree=null;
        Object string_literal470_tree=null;
        Object char_literal472_tree=null;
        RewriteRuleTokenStream stream_114=new RewriteRuleTokenStream(adaptor,"token 114");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt90=6;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==176) ) {
                int LA90_1 = input.LA(2);

                if ( (LA90_1==131) && (synpred11_Objc())) {
                    alt90=1;
                }
                else if ( (LA90_1==ID||LA90_1==114||(LA90_1 >= 117 && LA90_1 <= 118)||LA90_1==161||LA90_1==167) ) {
                    alt90=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 90, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA90_0==116) && (synpred12_Objc())) {
                alt90=2;
            }
            else if ( (LA90_0==ID||LA90_0==167||(LA90_0 >= 179 && LA90_0 <= 180)||LA90_0==182||LA90_0==188) ) {
                alt90=3;
            }
            else if ( (LA90_0==184) ) {
                alt90=4;
            }
            else if ( (LA90_0==187) ) {
                alt90=5;
            }
            else if ( (LA90_0==172) ) {
                alt90=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }
            switch (alt90) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration4341);
                    type_declaration_protocol460=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol460.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration4352);
                    func_pointer461=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer461.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration4358);
                    type_declaration_plane462=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane462.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:28: ( '&' )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==114) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:28: '&'
                            {
                            char_literal463=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4360); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal463_tree = 
                            (Object)adaptor.create(char_literal463)
                            ;
                            adaptor.addChild(root_0, char_literal463_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal464=(Token)match(input,184,FOLLOW_184_in_classical_type_declaration4368); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal464);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4370);
                    type_dec_wrapper465=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper465.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:32: ( '&' )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==114) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:32: '&'
                            {
                            char_literal466=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4372); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_114.add(char_literal466);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 732:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal467=(Token)match(input,187,FOLLOW_187_in_classical_type_declaration4389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(string_literal467);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4391);
                    type_dec_wrapper468=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper468.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:31: ( '&' )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==114) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:31: '&'
                            {
                            char_literal469=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4393); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_114.add(char_literal469);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 733:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal470=(Token)match(input,172,FOLLOW_172_in_classical_type_declaration4410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal470);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4412);
                    type_dec_wrapper471=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper471.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:30: ( '&' )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==114) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:30: '&'
                            {
                            char_literal472=(Token)match(input,114,FOLLOW_114_in_classical_type_declaration4414); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_114.add(char_literal472);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 734:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:734:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal476=null;
        Token char_literal478=null;
        Token char_literal480=null;
        Token char_literal482=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol473 =null;

        ObjcParser.func_pointer_return func_pointer474 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct475 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum477 =null;

        ObjcParser.type_declaration_union_return type_declaration_union479 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane481 =null;


        Object char_literal476_tree=null;
        Object char_literal478_tree=null;
        Object char_literal480_tree=null;
        Object char_literal482_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt95=6;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==176) ) {
                int LA95_1 = input.LA(2);

                if ( (LA95_1==131) && (synpred13_Objc())) {
                    alt95=1;
                }
                else if ( (LA95_1==ID||LA95_1==114||(LA95_1 >= 117 && LA95_1 <= 118)||LA95_1==161||LA95_1==167) ) {
                    alt95=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 95, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA95_0==116) && (synpred14_Objc())) {
                alt95=2;
            }
            else if ( (LA95_0==184) ) {
                alt95=3;
            }
            else if ( (LA95_0==172) ) {
                alt95=4;
            }
            else if ( (LA95_0==187) ) {
                alt95=5;
            }
            else if ( (LA95_0==ID||LA95_0==167||(LA95_0 >= 179 && LA95_0 <= 180)||LA95_0==182||LA95_0==188) ) {
                alt95=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }
            switch (alt95) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration4443);
                    type_declaration_protocol473=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol473.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration4454);
                    func_pointer474=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer474.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:5: type_declaration_struct ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration4460);
                    type_declaration_struct475=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct475.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:29: ( '&' )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==114) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:29: '&'
                            {
                            char_literal476=(Token)match(input,114,FOLLOW_114_in_type_declaration4462); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal476_tree = 
                            (Object)adaptor.create(char_literal476)
                            ;
                            adaptor.addChild(root_0, char_literal476_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration4469);
                    type_declaration_enum477=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum477.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:27: ( '&' )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==114) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:27: '&'
                            {
                            char_literal478=(Token)match(input,114,FOLLOW_114_in_type_declaration4471); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal478_tree = 
                            (Object)adaptor.create(char_literal478)
                            ;
                            adaptor.addChild(root_0, char_literal478_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:742:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration4478);
                    type_declaration_union479=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union479.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:742:28: ( '&' )?
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==114) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:742:28: '&'
                            {
                            char_literal480=(Token)match(input,114,FOLLOW_114_in_type_declaration4480); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal480_tree = 
                            (Object)adaptor.create(char_literal480)
                            ;
                            adaptor.addChild(root_0, char_literal480_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration4487);
                    type_declaration_plane481=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane481.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:28: ( '&' )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==114) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:28: '&'
                            {
                            char_literal482=(Token)match(input,114,FOLLOW_114_in_type_declaration4489); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal482_tree = 
                            (Object)adaptor.create(char_literal482)
                            ;
                            adaptor.addChild(root_0, char_literal482_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:1: type_declaration_plane : ( 'const' )? ( 'unsigned' )? type_dec ( 'const' )? -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal483=null;
        Token string_literal484=null;
        Token string_literal486=null;
        ObjcParser.type_dec_return type_dec485 =null;


        Object string_literal483_tree=null;
        Object string_literal484_tree=null;
        Object string_literal486_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:3: ( ( 'const' )? ( 'unsigned' )? type_dec ( 'const' )? -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:5: ( 'const' )? ( 'unsigned' )? type_dec ( 'const' )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:5: ( 'const' )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==167) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:5: 'const'
                    {
                    string_literal483=(Token)match(input,167,FOLLOW_167_in_type_declaration_plane4504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(string_literal483);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:14: ( 'unsigned' )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==188) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:14: 'unsigned'
                    {
                    string_literal484=(Token)match(input,188,FOLLOW_188_in_type_declaration_plane4507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_188.add(string_literal484);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane4510);
            type_dec485=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec485.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:35: ( 'const' )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==167) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:35: 'const'
                    {
                    string_literal486=(Token)match(input,167,FOLLOW_167_in_type_declaration_plane4512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(string_literal486);


                    }
                    break;

            }


            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 747:44: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:47: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal487=null;
        Token char_literal488=null;

        Object string_literal487_tree=null;
        Object char_literal488_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:6: 'id' '<'
            {
            string_literal487=(Token)match(input,176,FOLLOW_176_in_type_decl_protocol_predicate4536); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal487_tree = 
            (Object)adaptor.create(string_literal487)
            ;
            adaptor.addChild(root_0, string_literal487_tree);
            }

            char_literal488=(Token)match(input,131,FOLLOW_131_in_type_decl_protocol_predicate4538); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal488_tree = 
            (Object)adaptor.create(char_literal488)
            ;
            adaptor.addChild(root_0, char_literal488_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:754:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal489=null;
        Token char_literal490=null;
        Token char_literal492=null;
        ObjcParser.type_dec_internal_return type_dec_internal491 =null;


        Object string_literal489_tree=null;
        Object char_literal490_tree=null;
        Object char_literal492_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:5: 'id' '<' type_dec_internal '>'
            {
            string_literal489=(Token)match(input,176,FOLLOW_176_in_type_declaration_protocol4554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal489);


            char_literal490=(Token)match(input,131,FOLLOW_131_in_type_declaration_protocol4556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal490);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol4558);
            type_dec_internal491=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal491.getTree());

            char_literal492=(Token)match(input,137,FOLLOW_137_in_type_declaration_protocol4560); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal492);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 755:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:758:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal493=null;
        ObjcParser.typedef_name_return typedef_name494 =null;


        Object string_literal493_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:5: 'struct' typedef_name
            {
            string_literal493=(Token)match(input,184,FOLLOW_184_in_type_declaration_struct_simple4582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal493);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple4584);
            typedef_name494=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name494.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 759:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal495=null;
        ObjcParser.typedef_name_return typedef_name496 =null;


        Object string_literal495_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:5: 'union' typedef_name
            {
            string_literal495=(Token)match(input,187,FOLLOW_187_in_type_declaration_union_simple4604); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal495);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple4606);
            typedef_name496=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name496.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 763:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal497=null;
        ObjcParser.typedef_name_return typedef_name498 =null;


        Object string_literal497_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:5: 'enum' typedef_name
            {
            string_literal497=(Token)match(input,172,FOLLOW_172_in_type_declaration_enum_simple4630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal497);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple4632);
            typedef_name498=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name498.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 767:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal499=null;
        ObjcParser.typedef_name_return typedef_name500 =null;

        ObjcParser.struct_wrapper_return struct_wrapper501 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple502 =null;


        Object string_literal499_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:3: ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==184) ) {
                int LA100_1 = input.LA(2);

                if ( (LA100_1==ID) ) {
                    int LA100_2 = input.LA(3);

                    if ( (LA100_2==190) && (synpred15_Objc())) {
                        alt100=1;
                    }
                    else if ( (LA100_2==ID||LA100_2==114||LA100_2==117) ) {
                        alt100=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA100_1==190) && (synpred15_Objc())) {
                    alt100=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 100, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper
                    {
                    string_literal499=(Token)match(input,184,FOLLOW_184_in_type_declaration_struct4662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(string_literal499);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:45: ( typedef_name )?
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==ID) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:45: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct4664);
                            typedef_name500=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name500.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct4667);
                    struct_wrapper501=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper501.getTree());

                    // AST REWRITE
                    // elements: typedef_name, struct_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 771:74: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:76: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:89: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct4683);
                    type_declaration_struct_simple502=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple502.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal503=null;
        ObjcParser.typedef_name_return typedef_name504 =null;

        ObjcParser.struct_wrapper_return struct_wrapper505 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple506 =null;


        Object string_literal503_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:3: ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple )
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==187) ) {
                int LA102_1 = input.LA(2);

                if ( (LA102_1==ID) ) {
                    int LA102_2 = input.LA(3);

                    if ( (LA102_2==190) && (synpred16_Objc())) {
                        alt102=1;
                    }
                    else if ( (LA102_2==ID||LA102_2==114||LA102_2==117) ) {
                        alt102=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 102, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA102_1==190) && (synpred16_Objc())) {
                    alt102=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;

            }
            switch (alt102) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:5: ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper
                    {
                    string_literal503=(Token)match(input,187,FOLLOW_187_in_type_declaration_union4707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(string_literal503);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:43: ( typedef_name )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==ID) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:43: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_union4709);
                            typedef_name504=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name504.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union4712);
                    struct_wrapper505=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper505.getTree());

                    // AST REWRITE
                    // elements: struct_wrapper, typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 776:72: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:74: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:86: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union4728);
                    type_declaration_union_simple506=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple506.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal507=null;
        ObjcParser.typedef_name_return typedef_name508 =null;

        ObjcParser.enum_wrapper_return enum_wrapper509 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple510 =null;


        Object string_literal507_tree=null;
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:3: ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==172) ) {
                int LA104_1 = input.LA(2);

                if ( (LA104_1==ID) ) {
                    int LA104_2 = input.LA(3);

                    if ( (LA104_2==190) && (synpred17_Objc())) {
                        alt104=1;
                    }
                    else if ( (LA104_2==ID||LA104_2==114||LA104_2==117) ) {
                        alt104=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 104, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA104_1==190) && (synpred17_Objc())) {
                    alt104=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;

            }
            switch (alt104) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:5: ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper
                    {
                    string_literal507=(Token)match(input,172,FOLLOW_172_in_type_declaration_enum4752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_172.add(string_literal507);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:41: ( typedef_name )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==ID) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:41: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum4754);
                            typedef_name508=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name508.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum4757);
                    enum_wrapper509=enum_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper509.getTree());

                    // AST REWRITE
                    // elements: enum_wrapper, typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 781:68: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:70: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:81: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum4773);
                    type_declaration_enum_simple510=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple510.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:785:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal511=null;
        Token char_literal513=null;
        ObjcParser.enum_element_return enum_element512 =null;


        Object char_literal511_tree=null;
        Object char_literal513_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal511=(Token)match(input,190,FOLLOW_190_in_enum_wrapper4786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal511_tree = 
            (Object)adaptor.create(char_literal511)
            ;
            adaptor.addChild(root_0, char_literal511_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:9: ( enum_element )+
            int cnt105=0;
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==ID||LA105_0==MULTI_COMMENT_LIT||LA105_0==SINGLE_COMMENT_LIT) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper4796);
            	    enum_element512=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element512.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt105 >= 1 ) break loop105;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(105, input);
                        throw eee;
                }
                cnt105++;
            } while (true);


            char_literal513=(Token)match(input,194,FOLLOW_194_in_enum_wrapper4803); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal513_tree = 
            (Object)adaptor.create(char_literal513)
            ;
            adaptor.addChild(root_0, char_literal513_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:1: enum_element : ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal517=null;
        ObjcParser.name_return name514 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper515 =null;

        ObjcParser.element_value_return element_value516 =null;

        ObjcParser.comments_return comments518 =null;


        Object char_literal517_tree=null;
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:3: ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==ID) ) {
                alt108=1;
            }
            else if ( (LA108_0==MULTI_COMMENT_LIT||LA108_0==SINGLE_COMMENT_LIT) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;

            }
            switch (alt108) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    pushFollow(FOLLOW_name_in_enum_element4818);
                    name514=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name514.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:10: ( op_assign_wrapper element_value )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==115||LA106_0==119||LA106_0==122||LA106_0==126||LA106_0==133||LA106_0==135||LA106_0==140||LA106_0==192) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:11: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element4821);
                            op_assign_wrapper515=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper515.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element4823);
                            element_value516=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value516.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:45: ( ',' )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==123) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:45: ','
                            {
                            char_literal517=(Token)match(input,123,FOLLOW_123_in_enum_element4827); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_123.add(char_literal517);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: op_assign_wrapper, name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 792:50: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:52: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:70: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element4848);
                    comments518=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments518.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct519 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper4863);
            struct519=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct519.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 797:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal520=null;
        Token char_literal522=null;
        ObjcParser.struct_internal_return struct_internal521 =null;


        Object char_literal520_tree=null;
        Object char_literal522_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal520=(Token)match(input,190,FOLLOW_190_in_struct4881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal520_tree = 
            (Object)adaptor.create(char_literal520)
            ;
            adaptor.addChild(root_0, char_literal520_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:7: ( struct_internal )+
            int cnt109=0;
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==ID||LA109_0==MULTI_COMMENT_LIT||LA109_0==SINGLE_COMMENT_LIT||LA109_0==116||LA109_0==167||LA109_0==172||LA109_0==176||(LA109_0 >= 179 && LA109_0 <= 180)||LA109_0==182||LA109_0==184||(LA109_0 >= 187 && LA109_0 <= 188)) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct4890);
            	    struct_internal521=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal521.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt109 >= 1 ) break loop109;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(109, input);
                        throw eee;
                }
                cnt109++;
            } while (true);


            char_literal522=(Token)match(input,194,FOLLOW_194_in_struct4897); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal522_tree = 
            (Object)adaptor.create(char_literal522)
            ;
            adaptor.addChild(root_0, char_literal522_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper523 =null;

        ObjcParser.comments_return comments524 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:3: ( field_declaration_wrapper | comments )
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==ID||LA110_0==116||LA110_0==167||LA110_0==172||LA110_0==176||(LA110_0 >= 179 && LA110_0 <= 180)||LA110_0==182||LA110_0==184||(LA110_0 >= 187 && LA110_0 <= 188)) ) {
                alt110=1;
            }
            else if ( (LA110_0==MULTI_COMMENT_LIT||LA110_0==SINGLE_COMMENT_LIT) ) {
                alt110=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;

            }
            switch (alt110) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal4911);
                    field_declaration_wrapper523=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper523.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:807:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal4917);
                    comments524=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments524.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:810:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec525 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper4932);
            type_dec525=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec525.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 811:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:811:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:1: type_dec : type_dec_internal ( '*' )* ( '[' ( NUMBER_LITERAL )? ']' )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal527=null;
        Token char_literal528=null;
        Token NUMBER_LITERAL529=null;
        Token char_literal530=null;
        ObjcParser.type_dec_internal_return type_dec_internal526 =null;


        Object char_literal527_tree=null;
        Object char_literal528_tree=null;
        Object NUMBER_LITERAL529_tree=null;
        Object char_literal530_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:9: ( type_dec_internal ( '*' )* ( '[' ( NUMBER_LITERAL )? ']' )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:11: type_dec_internal ( '*' )* ( '[' ( NUMBER_LITERAL )? ']' )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec4952);
            type_dec_internal526=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal526.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:29: ( '*' )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==118) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:29: '*'
            	    {
            	    char_literal527=(Token)match(input,118,FOLLOW_118_in_type_dec4954); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal527_tree = 
            	    (Object)adaptor.create(char_literal527)
            	    ;
            	    adaptor.addChild(root_0, char_literal527_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:34: ( '[' ( NUMBER_LITERAL )? ']' )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==161) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:35: '[' ( NUMBER_LITERAL )? ']'
            	    {
            	    char_literal528=(Token)match(input,161,FOLLOW_161_in_type_dec4958); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal528_tree = 
            	    (Object)adaptor.create(char_literal528)
            	    ;
            	    adaptor.addChild(root_0, char_literal528_tree);
            	    }

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:40: ( NUMBER_LITERAL )?
            	    int alt112=2;
            	    int LA112_0 = input.LA(1);

            	    if ( (LA112_0==NUMBER_LITERAL) ) {
            	        alt112=1;
            	    }
            	    switch (alt112) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:40: NUMBER_LITERAL
            	            {
            	            NUMBER_LITERAL529=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_type_dec4961); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NUMBER_LITERAL529_tree = 
            	            (Object)adaptor.create(NUMBER_LITERAL529)
            	            ;
            	            adaptor.addChild(root_0, NUMBER_LITERAL529_tree);
            	            }

            	            }
            	            break;

            	    }


            	    char_literal530=(Token)match(input,162,FOLLOW_162_in_type_dec4964); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal530_tree = 
            	    (Object)adaptor.create(char_literal530)
            	    ;
            	    adaptor.addChild(root_0, char_literal530_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID532=null;
        ObjcParser.knownTypes_return knownTypes531 =null;


        Object ID532_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:3: ( knownTypes | ID )
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==176||(LA114_0 >= 179 && LA114_0 <= 180)||LA114_0==182) ) {
                alt114=1;
            }
            else if ( (LA114_0==ID) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;

            }
            switch (alt114) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal4981);
                    knownTypes531=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes531.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:819:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID532=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal4990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID532_tree = 
                    (Object)adaptor.create(ID532)
                    ;
                    adaptor.addChild(root_0, ID532_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal533=null;
        Token string_literal534=null;
        Token string_literal535=null;
        Token string_literal536=null;
        Token string_literal537=null;
        Token string_literal538=null;

        Object string_literal533_tree=null;
        Object string_literal534_tree=null;
        Object string_literal535_tree=null;
        Object string_literal536_tree=null;
        Object string_literal537_tree=null;
        Object string_literal538_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt119=4;
            switch ( input.LA(1) ) {
            case 179:
                {
                alt119=1;
                }
                break;
            case 176:
                {
                alt119=2;
                }
                break;
            case 180:
                {
                alt119=3;
                }
                break;
            case 182:
                {
                alt119=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);

                throw nvae;

            }

            switch (alt119) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal533=(Token)match(input,179,FOLLOW_179_in_knownTypes5003); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal533_tree = 
                    (Object)adaptor.create(string_literal533)
                    ;
                    adaptor.addChild(root_0, string_literal533_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal534=(Token)match(input,176,FOLLOW_176_in_knownTypes5009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal534_tree = 
                    (Object)adaptor.create(string_literal534)
                    ;
                    adaptor.addChild(root_0, string_literal534_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:5: ( 'long' )+
                    int cnt115=0;
                    loop115:
                    do {
                        int alt115=2;
                        int LA115_0 = input.LA(1);

                        if ( (LA115_0==180) ) {
                            alt115=1;
                        }


                        switch (alt115) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:5: 'long'
                    	    {
                    	    string_literal535=(Token)match(input,180,FOLLOW_180_in_knownTypes5015); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal535_tree = 
                    	    (Object)adaptor.create(string_literal535)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal535_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt115 >= 1 ) break loop115;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(115, input);
                                throw eee;
                        }
                        cnt115++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:13: ( 'int' )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==179) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:13: 'int'
                            {
                            string_literal536=(Token)match(input,179,FOLLOW_179_in_knownTypes5018); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal536_tree = 
                            (Object)adaptor.create(string_literal536)
                            ;
                            adaptor.addChild(root_0, string_literal536_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: ( 'short' )+
                    int cnt117=0;
                    loop117:
                    do {
                        int alt117=2;
                        int LA117_0 = input.LA(1);

                        if ( (LA117_0==182) ) {
                            alt117=1;
                        }


                        switch (alt117) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: 'short'
                    	    {
                    	    string_literal537=(Token)match(input,182,FOLLOW_182_in_knownTypes5025); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal537_tree = 
                    	    (Object)adaptor.create(string_literal537)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal537_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt117 >= 1 ) break loop117;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(117, input);
                                throw eee;
                        }
                        cnt117++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:14: ( 'int' )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==179) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:14: 'int'
                            {
                            string_literal538=(Token)match(input,179,FOLLOW_179_in_knownTypes5028); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal538_tree = 
                            (Object)adaptor.create(string_literal538)
                            ;
                            adaptor.addChild(root_0, string_literal538_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID539=null;
        ObjcParser.array_size_return array_size540 =null;

        ObjcParser.field_crap_return field_crap541 =null;


        Object ID539_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:5: ID ( array_size )* ( field_crap )?
            {
            ID539=(Token)match(input,ID,FOLLOW_ID_in_field_name5044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID539);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:8: ( array_size )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==161) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name5046);
            	    array_size540=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size540.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:20: ( field_crap )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==129) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name5050);
                    field_crap541=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap541.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, array_size
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 830:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:1: array_size : '[' ( NUMBER_LITERAL )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal542=null;
        Token NUMBER_LITERAL543=null;
        Token char_literal544=null;

        Object char_literal542_tree=null;
        Object NUMBER_LITERAL543_tree=null;
        Object char_literal544_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:3: ( '[' ( NUMBER_LITERAL )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:5: '[' ( NUMBER_LITERAL )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal542=(Token)match(input,161,FOLLOW_161_in_array_size5078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal542_tree = 
            (Object)adaptor.create(char_literal542)
            ;
            adaptor.addChild(root_0, char_literal542_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:9: ( NUMBER_LITERAL )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==NUMBER_LITERAL) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:9: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL543=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_array_size5080); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUMBER_LITERAL543_tree = 
                    (Object)adaptor.create(NUMBER_LITERAL543)
                    ;
                    adaptor.addChild(root_0, NUMBER_LITERAL543_tree);
                    }

                    }
                    break;

            }


            char_literal544=(Token)match(input,162,FOLLOW_162_in_array_size5083); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal544_tree = 
            (Object)adaptor.create(char_literal544)
            ;
            adaptor.addChild(root_0, char_literal544_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal545=null;
        Token NUMBER_LITERAL546=null;

        Object char_literal545_tree=null;
        Object NUMBER_LITERAL546_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal545=(Token)match(input,129,FOLLOW_129_in_field_crap5093); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal545_tree = 
            (Object)adaptor.create(char_literal545)
            ;
            adaptor.addChild(root_0, char_literal545_tree);
            }

            NUMBER_LITERAL546=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap5095); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL546_tree = 
            (Object)adaptor.create(NUMBER_LITERAL546)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL546_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper547 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants548 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration5107);
            method_modifier_wrapper547=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper547.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration5109);
            method_declaration_variants548=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants548.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier549 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5121);
            method_modifier549=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier549.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 842:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set550=null;

        Object set550_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set550=(Token)input.LT(1);

            if ( input.LA(1)==120||input.LA(1)==124 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set550)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common551 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants5158);
            method_declaration_common551=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common551.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal552=null;
        Token char_literal554=null;
        Token char_literal557=null;
        ObjcParser.type_declaration_return type_declaration553 =null;

        ObjcParser.method_name_return method_name555 =null;

        ObjcParser.method_params_return method_params556 =null;


        Object char_literal552_tree=null;
        Object char_literal554_tree=null;
        Object char_literal557_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:6: '(' type_declaration ')' method_name
            {
            char_literal552=(Token)match(input,116,FOLLOW_116_in_method_declaration_common5171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal552_tree = 
            (Object)adaptor.create(char_literal552)
            ;
            adaptor.addChild(root_0, char_literal552_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common5173);
            type_declaration553=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration553.getTree());

            char_literal554=(Token)match(input,117,FOLLOW_117_in_method_declaration_common5175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal554_tree = 
            (Object)adaptor.create(char_literal554)
            ;
            adaptor.addChild(root_0, char_literal554_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common5177);
            method_name555=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name555.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:44: ( method_params )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==ID||LA123_0==129) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common5180);
                    method_params556=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params556.getTree());

                    }
                    break;

            }


            char_literal557=(Token)match(input,130,FOLLOW_130_in_method_declaration_common5183); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal557_tree = 
            (Object)adaptor.create(char_literal557)
            ;
            adaptor.addChild(root_0, char_literal557_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:853:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal559=null;
        Token char_literal561=null;
        ObjcParser.method_modifier_return method_modifier558 =null;

        ObjcParser.type_declaration_return type_declaration560 =null;

        ObjcParser.method_name_return method_name562 =null;


        Object char_literal559_tree=null;
        Object char_literal561_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate5195);
            method_modifier558=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier558.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:854:22: '(' type_declaration ')' method_name
            {
            char_literal559=(Token)match(input,116,FOLLOW_116_in_method_declaration_predicate5198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal559_tree = 
            (Object)adaptor.create(char_literal559)
            ;
            adaptor.addChild(root_0, char_literal559_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate5200);
            type_declaration560=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration560.getTree());

            char_literal561=(Token)match(input,117,FOLLOW_117_in_method_declaration_predicate5202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal561_tree = 
            (Object)adaptor.create(char_literal561)
            ;
            adaptor.addChild(root_0, char_literal561_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate5204);
            method_name562=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name562.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:857:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID563=null;

        Object ID563_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:5: ID
            {
            ID563=(Token)match(input,ID,FOLLOW_ID_in_method_name5222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID563);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 858:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:858:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param564 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:5: ( method_param )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==ID||LA124_0==129) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5245);
            	    method_param564=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param564.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 862:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:862:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal566=null;
        Token char_literal567=null;
        Token char_literal569=null;
        ObjcParser.prefix_return prefix565 =null;

        ObjcParser.type_declaration_return type_declaration568 =null;

        ObjcParser.param_name_return param_name570 =null;


        Object char_literal566_tree=null;
        Object char_literal567_tree=null;
        Object char_literal569_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:5: ( prefix )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==ID) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param5265);
                    prefix565=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix565.getTree());

                    }
                    break;

            }


            char_literal566=(Token)match(input,129,FOLLOW_129_in_method_param5268); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal566);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:17: ( '(' type_declaration ')' )?
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==116) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:18: '(' type_declaration ')'
                    {
                    char_literal567=(Token)match(input,116,FOLLOW_116_in_method_param5271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_116.add(char_literal567);


                    pushFollow(FOLLOW_type_declaration_in_method_param5273);
                    type_declaration568=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration568.getTree());

                    char_literal569=(Token)match(input,117,FOLLOW_117_in_method_param5275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_117.add(char_literal569);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param5279);
            param_name570=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name570.getTree());

            // AST REWRITE
            // elements: prefix, 129, 117, param_name, type_declaration, 116
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 865:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:865:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_129.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_116.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_117.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID571=null;

        Object ID571_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:5: ID
            {
            ID571=(Token)match(input,ID,FOLLOW_ID_in_param_name5312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID571);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 868:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID572=null;

        Object ID572_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:11: ID
            {
            ID572=(Token)match(input,ID,FOLLOW_ID_in_prefix5331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID572);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 870:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:870:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:1: define_declaration : DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) ;
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL573=null;
        ObjcParser.name_return name574 =null;

        ObjcParser.element_value_return element_value575 =null;


        Object DEFINE_LITERAL573_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:874:3: ( DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:874:6: DEFINE_LITERAL name element_value
            {
            DEFINE_LITERAL573=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL573);


            pushFollow(FOLLOW_name_in_define_declaration5353);
            name574=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name574.getTree());

            pushFollow(FOLLOW_element_value_in_define_declaration5355);
            element_value575=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value575.getTree());

            // AST REWRITE
            // elements: element_value, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 874:40: -> ^( DEFINE name element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:874:43: ^( DEFINE name element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred1_Objc1111);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1207);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred3_Objc1453);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,130,FOLLOW_130_in_synpred3_Objc1455); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred4_Objc1472);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,178,FOLLOW_178_in_synpred4_Objc1474); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred5_Objc2605);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:6: '(' type_cast_wrapper
        {
        match(input,116,FOLLOW_116_in_synpred6_Objc2618); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred6_Objc2620);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred7_Objc2672);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:30: ( access_wrapper name )*
        loop127:
        do {
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( ((LA127_0 >= 127 && LA127_0 <= 128)) ) {
                alt127=1;
            }


            switch (alt127) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred7_Objc2675);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred7_Objc2677);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop127;
            }
        } while (true);


        match(input,116,FOLLOW_116_in_synpred7_Objc2681); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:6: name '['
        {
        pushFollow(FOLLOW_name_in_synpred8_Objc2802);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,161,FOLLOW_161_in_synpred8_Objc2804); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred9_Objc3106);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred10_Objc3581);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred11_Objc4337);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred12_Objc4348);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:738:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred13_Objc4439);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred14_Objc4450);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:6: 'struct' ( typedef_name )? '{'
        {
        match(input,184,FOLLOW_184_in_synpred15_Objc4653); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:15: ( typedef_name )?
        int alt128=2;
        int LA128_0 = input.LA(1);

        if ( (LA128_0==ID) ) {
            alt128=1;
        }
        switch (alt128) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred15_Objc4655);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,190,FOLLOW_190_in_synpred15_Objc4658); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:6: 'union' ( typedef_name )? '{'
        {
        match(input,187,FOLLOW_187_in_synpred16_Objc4698); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:14: ( typedef_name )?
        int alt129=2;
        int LA129_0 = input.LA(1);

        if ( (LA129_0==ID) ) {
            alt129=1;
        }
        switch (alt129) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred16_Objc4700);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,190,FOLLOW_190_in_synpred16_Objc4703); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:6: 'enum' ( typedef_name )? '{'
        {
        match(input,172,FOLLOW_172_in_synpred17_Objc4743); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:13: ( typedef_name )?
        int alt130=2;
        int LA130_0 = input.LA(1);

        if ( (LA130_0==ID) ) {
            alt130=1;
        }
        switch (alt130) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred17_Objc4745);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,190,FOLLOW_190_in_synpred17_Objc4748); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // Delegated rules

    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA41 dfa41 = new DFA41(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA48 dfa48 = new DFA48(this);
    static final String DFA41_eotS =
        "\u0105\uffff";
    static final String DFA41_eofS =
        "\76\uffff\1\2\u00c6\uffff";
    static final String DFA41_minS =
        "\2\13\12\uffff\1\13\5\uffff\1\157\20\uffff\1\162\1\13\2\55\3\162"+
        "\1\157\3\55\14\uffff\2\13\1\uffff\2\13\5\uffff\7\0\27\uffff\43\0"+
        "\5\uffff\20\0\1\uffff\1\0\15\uffff\1\0\41\uffff\2\0\1\uffff\2\0"+
        "\65\uffff";
    static final String DFA41_maxS =
        "\1\u00a4\1\u00c3\12\uffff\1\u00c3\5\uffff\1\u00c1\20\uffff\1\u00a7"+
        "\1\u00c3\1\u00bc\1\u00b6\1\u00a7\1\u00b4\1\u00b6\1\u00c1\3\u00b6"+
        "\14\uffff\2\u00c3\1\uffff\1\u00c3\1\u00c2\5\uffff\7\0\27\uffff\43"+
        "\0\5\uffff\20\0\1\uffff\1\0\15\uffff\1\0\41\uffff\2\0\1\uffff\2"+
        "\0\65\uffff";
    static final String DFA41_acceptS =
        "\2\uffff\1\3\10\uffff\1\1\1\uffff\5\1\1\uffff\3\1\14\uffff\1\1\31"+
        "\uffff\1\1\135\uffff\1\1\1\uffff\2\1\14\uffff\1\1\15\uffff\1\1\15"+
        "\uffff\5\1\2\uffff\1\1\66\uffff\1\2";
    static final String DFA41_specialS =
        "\1\uffff\1\0\12\uffff\1\1\5\uffff\1\2\47\uffff\1\3\1\4\1\uffff\1"+
        "\5\1\6\5\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\27\uffff\1\16\1"+
        "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\5\uffff\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\uffff\1\101\15\uffff\1\102\41\uffff\1\103\1\104\1\uffff\1\105"+
        "\1\106\65\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\32\uffff\1\2\1\uffff"+
            "\1\1\46\uffff\1\2\5\uffff\1\2\2\uffff\1\2",
            "\1\2\41\uffff\1\22\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\14\4\uffff\1\2\2\uffff\2\2\35\uffff\1\2"+
            "\5\uffff\1\2\2\uffff\1\2\2\uffff\1\15\4\uffff\1\25\3\uffff\1"+
            "\13\2\uffff\1\17\1\20\1\uffff\1\21\1\uffff\1\23\2\uffff\1\24"+
            "\1\16\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\41\uffff\1\52\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\44\1\uffff\1\42\2\uffff\1\2\2\uffff\2\2"+
            "\35\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1\45\4\uffff\1"+
            "\55\3\uffff\1\43\2\uffff\1\47\1\50\1\uffff\1\51\1\uffff\1\53"+
            "\2\uffff\1\54\1\46\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\1\2\1\75\1\uffff\1\2\1\76\1\72\1\uffff\2\2\2\uffff"+
            "\2\2\1\uffff\2\2\2\uffff\2\2\1\uffff\6\2\1\uffff\1\2\23\uffff"+
            "\1\73\1\uffff\1\2\3\uffff\1\74\27\uffff\1\2\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\110\2\uffff\1\111\1\105\14\uffff\1\104\35\uffff\1\106\5"+
            "\uffff\1\107",
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\1\112\2\uffff\1\2\2\uffff\2\2"+
            "\35\uffff\1\2\5\uffff\1\2\2\uffff\1\2\2\uffff\1\2\4\uffff\1"+
            "\2\3\uffff\1\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\2\uffff\2"+
            "\2\6\uffff\1\2",
            "\1\147\u0082\uffff\1\144\2\uffff\1\143\1\145\1\uffff\1\146"+
            "\5\uffff\1\142",
            "\1\154\u0082\uffff\1\151\2\uffff\1\150\1\152\1\uffff\1\153",
            "\1\160\2\uffff\1\161\1\155\52\uffff\1\156\5\uffff\1\157",
            "\1\166\2\uffff\1\167\1\163\52\uffff\1\164\5\uffff\1\165\13"+
            "\uffff\1\162\1\170",
            "\1\175\2\uffff\1\176\1\172\52\uffff\1\173\5\uffff\1\174\13"+
            "\uffff\1\171\2\uffff\1\177",
            "\1\2\1\uffff\1\2\1\u0083\1\uffff\1\2\1\u0084\1\u0080\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\2\2\2\uffff\2\2\1\uffff\6\2\1\uffff"+
            "\1\2\23\uffff\1\u0081\1\uffff\1\2\3\uffff\1\u0082\27\uffff\1"+
            "\2\1\uffff\1\2",
            "\1\u008e\u0082\uffff\1\u008b\2\uffff\1\u008a\1\u008c\1\uffff"+
            "\1\u008d",
            "\1\u0093\u0082\uffff\1\u0090\2\uffff\1\u008f\1\u0091\1\uffff"+
            "\1\u0092",
            "\1\u0098\u0082\uffff\1\u0095\2\uffff\1\u0094\1\u0096\1\uffff"+
            "\1\u0097",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\u009b\1\uffff\1\2\1\u009c\1\u009d\2\uffff\1\2\3\uffff"+
            "\1\2\35\uffff\1\2\5\uffff\1\u0099\2\uffff\1\2\2\uffff\1\u009a"+
            "\33\uffff\1\2",
            "\1\2\41\uffff\1\2\24\uffff\1\u00a9\23\uffff\2\2\26\uffff\1"+
            "\2\3\uffff\1\2\1\uffff\1\2\4\uffff\1\2\2\uffff\2\2\35\uffff"+
            "\1\2\5\uffff\1\2\1\u00aa\1\uffff\1\2\36\uffff\1\2",
            "",
            "\1\2\41\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26\uffff\1\2\3"+
            "\uffff\1\2\1\uffff\1\2\1\u00b8\3\uffff\1\2\3\uffff\1\2\35\uffff"+
            "\1\2\5\uffff\1\2\2\uffff\1\2\36\uffff\1\2",
            "\1\u00ca\11\uffff\1\2\27\uffff\1\u00cc\21\uffff\1\2\2\uffff"+
            "\1\u00c9\16\uffff\1\2\4\uffff\1\u00c7\1\u00c8\27\uffff\1\2\1"+
            "\uffff\1\2\1\u00cb\1\uffff\1\u00cf\2\2\1\uffff\2\2\1\uffff\3"+
            "\2\1\uffff\6\2\1\uffff\6\2\1\uffff\10\2\4\uffff\1\2\1\uffff"+
            "\1\u00c6\4\2\1\uffff\1\u00ce\2\2\1\u00cd\15\2\1\uffff\15\2\1"+
            "\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "473:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper name )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA41_1==176) && (synpred5_Objc())) {s = 11;}

                        else if ( (LA41_1==116) ) {s = 12;}

                        else if ( (LA41_1==167) && (synpred5_Objc())) {s = 13;}

                        else if ( (LA41_1==188) && (synpred5_Objc())) {s = 14;}

                        else if ( (LA41_1==179) && (synpred5_Objc())) {s = 15;}

                        else if ( (LA41_1==180) && (synpred5_Objc())) {s = 16;}

                        else if ( (LA41_1==182) && (synpred5_Objc())) {s = 17;}

                        else if ( (LA41_1==ID) ) {s = 18;}

                        else if ( (LA41_1==184) && (synpred5_Objc())) {s = 19;}

                        else if ( (LA41_1==187) && (synpred5_Objc())) {s = 20;}

                        else if ( (LA41_1==172) && (synpred5_Objc())) {s = 21;}

                        else if ( (LA41_1==BOOL_LITERAL||LA41_1==NUMBER_LITERAL||(LA41_1 >= STRING_LITERAL && LA41_1 <= STRING_OBJC)||LA41_1==110||LA41_1==114||LA41_1==121||(LA41_1 >= 124 && LA41_1 <= 125)||LA41_1==155||LA41_1==161||LA41_1==164||LA41_1==195) ) {s = 2;}

                         
                        input.seek(index41_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_12 = input.LA(1);

                         
                        int index41_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA41_12==118) && (synpred5_Objc())) {s = 34;}

                        else if ( (LA41_12==176) ) {s = 35;}

                        else if ( (LA41_12==116) ) {s = 36;}

                        else if ( (LA41_12==167) ) {s = 37;}

                        else if ( (LA41_12==188) ) {s = 38;}

                        else if ( (LA41_12==179) ) {s = 39;}

                        else if ( (LA41_12==180) ) {s = 40;}

                        else if ( (LA41_12==182) ) {s = 41;}

                        else if ( (LA41_12==ID) ) {s = 42;}

                        else if ( (LA41_12==184) ) {s = 43;}

                        else if ( (LA41_12==187) ) {s = 44;}

                        else if ( (LA41_12==172) ) {s = 45;}

                        else if ( (LA41_12==BOOL_LITERAL||LA41_12==NUMBER_LITERAL||(LA41_12 >= STRING_LITERAL && LA41_12 <= STRING_OBJC)||LA41_12==110||LA41_12==114||LA41_12==121||(LA41_12 >= 124 && LA41_12 <= 125)||LA41_12==155||LA41_12==161||LA41_12==164||LA41_12==195) ) {s = 2;}

                         
                        input.seek(index41_12);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_18 = input.LA(1);

                         
                        int index41_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA41_18==118) ) {s = 58;}

                        else if ( (LA41_18==161) ) {s = 59;}

                        else if ( (LA41_18==167) && (synpred5_Objc())) {s = 60;}

                        else if ( (LA41_18==114) ) {s = 61;}

                        else if ( (LA41_18==117) ) {s = 62;}

                        else if ( (LA41_18==111||LA41_18==113||LA41_18==116||(LA41_18 >= 120 && LA41_18 <= 121)||(LA41_18 >= 124 && LA41_18 <= 125)||(LA41_18 >= 127 && LA41_18 <= 128)||(LA41_18 >= 131 && LA41_18 <= 132)||(LA41_18 >= 134 && LA41_18 <= 139)||LA41_18==141||LA41_18==163||LA41_18==191||LA41_18==193) ) {s = 2;}

                         
                        input.seek(index41_18);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_58 = input.LA(1);

                         
                        int index41_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA41_58==161) ) {s = 153;}

                        else if ( (LA41_58==167) && (synpred5_Objc())) {s = 154;}

                        else if ( (LA41_58==114) ) {s = 155;}

                        else if ( (LA41_58==117) && (synpred5_Objc())) {s = 156;}

                        else if ( (LA41_58==118) && (synpred5_Objc())) {s = 157;}

                        else if ( (LA41_58==BOOL_LITERAL||LA41_58==ID||LA41_58==NUMBER_LITERAL||(LA41_58 >= STRING_LITERAL && LA41_58 <= STRING_OBJC)||LA41_58==110||LA41_58==116||LA41_58==121||LA41_58==125||LA41_58==155||LA41_58==164||LA41_58==195) ) {s = 2;}

                         
                        input.seek(index41_58);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_59 = input.LA(1);

                         
                        int index41_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA41_59==NUMBER_LITERAL) ) {s = 169;}

                        else if ( (LA41_59==162) && (synpred5_Objc())) {s = 170;}

                        else if ( (LA41_59==BOOL_LITERAL||LA41_59==ID||(LA41_59 >= STRING_LITERAL && LA41_59 <= STRING_OBJC)||LA41_59==110||LA41_59==114||LA41_59==116||LA41_59==121||(LA41_59 >= 124 && LA41_59 <= 125)||LA41_59==155||LA41_59==161||LA41_59==164||LA41_59==195) ) {s = 2;}

                         
                        input.seek(index41_59);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_61 = input.LA(1);

                         
                        int index41_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA41_61==117) && (synpred5_Objc())) {s = 184;}

                        else if ( (LA41_61==BOOL_LITERAL||LA41_61==ID||LA41_61==NUMBER_LITERAL||(LA41_61 >= STRING_LITERAL && LA41_61 <= STRING_OBJC)||LA41_61==110||LA41_61==114||LA41_61==116||LA41_61==121||LA41_61==125||LA41_61==155||LA41_61==161||LA41_61==164||LA41_61==195) ) {s = 2;}

                         
                        input.seek(index41_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_62 = input.LA(1);

                         
                        int index41_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA41_62==155) && (synpred5_Objc())) {s = 198;}

                        else if ( (LA41_62==STRING_LITERAL) && (synpred5_Objc())) {s = 199;}

                        else if ( (LA41_62==STRING_OBJC) && (synpred5_Objc())) {s = 200;}

                        else if ( (LA41_62==NUMBER_LITERAL) && (synpred5_Objc())) {s = 201;}

                        else if ( (LA41_62==BOOL_LITERAL) && (synpred5_Objc())) {s = 202;}

                        else if ( (LA41_62==114) ) {s = 203;}

                        else if ( (LA41_62==ID) ) {s = 204;}

                        else if ( (LA41_62==164) && (synpred5_Objc())) {s = 205;}

                        else if ( (LA41_62==161) ) {s = 206;}

                        else if ( (LA41_62==116) ) {s = 207;}

                        else if ( (LA41_62==EOF||LA41_62==DEFINE_LITERAL||LA41_62==MULTI_COMMENT_LIT||LA41_62==SINGLE_COMMENT_LIT||LA41_62==111||LA41_62==113||(LA41_62 >= 117 && LA41_62 <= 118)||(LA41_62 >= 120 && LA41_62 <= 121)||(LA41_62 >= 123 && LA41_62 <= 125)||(LA41_62 >= 127 && LA41_62 <= 132)||(LA41_62 >= 134 && LA41_62 <= 139)||(LA41_62 >= 141 && LA41_62 <= 148)||LA41_62==153||(LA41_62 >= 156 && LA41_62 <= 159)||(LA41_62 >= 162 && LA41_62 <= 163)||(LA41_62 >= 165 && LA41_62 <= 177)||(LA41_62 >= 179 && LA41_62 <= 191)||(LA41_62 >= 193 && LA41_62 <= 194)) ) {s = 2;}

                         
                        input.seek(index41_62);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_68 = input.LA(1);

                         
                        int index41_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_68);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_69 = input.LA(1);

                         
                        int index41_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_69);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA41_70 = input.LA(1);

                         
                        int index41_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_70);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA41_71 = input.LA(1);

                         
                        int index41_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_71);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA41_72 = input.LA(1);

                         
                        int index41_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_72);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA41_73 = input.LA(1);

                         
                        int index41_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_73);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA41_74 = input.LA(1);

                         
                        int index41_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_74);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA41_98 = input.LA(1);

                         
                        int index41_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_98);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA41_99 = input.LA(1);

                         
                        int index41_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_99);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA41_100 = input.LA(1);

                         
                        int index41_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_100);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA41_101 = input.LA(1);

                         
                        int index41_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_101);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA41_102 = input.LA(1);

                         
                        int index41_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_102);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA41_103 = input.LA(1);

                         
                        int index41_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_103);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA41_104 = input.LA(1);

                         
                        int index41_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_104);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA41_105 = input.LA(1);

                         
                        int index41_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_105);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA41_106 = input.LA(1);

                         
                        int index41_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_106);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA41_107 = input.LA(1);

                         
                        int index41_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_107);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA41_108 = input.LA(1);

                         
                        int index41_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_108);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA41_109 = input.LA(1);

                         
                        int index41_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_109);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA41_110 = input.LA(1);

                         
                        int index41_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_110);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA41_111 = input.LA(1);

                         
                        int index41_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_111);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA41_112 = input.LA(1);

                         
                        int index41_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_112);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA41_113 = input.LA(1);

                         
                        int index41_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_113);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA41_114 = input.LA(1);

                         
                        int index41_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_114);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA41_115 = input.LA(1);

                         
                        int index41_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_115);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA41_116 = input.LA(1);

                         
                        int index41_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_116);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA41_117 = input.LA(1);

                         
                        int index41_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_117);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA41_118 = input.LA(1);

                         
                        int index41_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_118);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA41_119 = input.LA(1);

                         
                        int index41_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_119);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA41_120 = input.LA(1);

                         
                        int index41_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_120);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA41_121 = input.LA(1);

                         
                        int index41_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_121);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA41_122 = input.LA(1);

                         
                        int index41_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_122);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA41_123 = input.LA(1);

                         
                        int index41_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_123);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA41_124 = input.LA(1);

                         
                        int index41_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_124);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA41_125 = input.LA(1);

                         
                        int index41_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_125);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA41_126 = input.LA(1);

                         
                        int index41_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_126);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA41_127 = input.LA(1);

                         
                        int index41_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_127);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA41_128 = input.LA(1);

                         
                        int index41_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_128);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA41_129 = input.LA(1);

                         
                        int index41_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_129);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA41_130 = input.LA(1);

                         
                        int index41_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_130);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA41_131 = input.LA(1);

                         
                        int index41_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_131);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA41_132 = input.LA(1);

                         
                        int index41_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_132);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA41_138 = input.LA(1);

                         
                        int index41_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_138);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA41_139 = input.LA(1);

                         
                        int index41_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_139);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA41_140 = input.LA(1);

                         
                        int index41_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_140);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA41_141 = input.LA(1);

                         
                        int index41_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_141);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA41_142 = input.LA(1);

                         
                        int index41_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_142);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA41_143 = input.LA(1);

                         
                        int index41_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_143);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA41_144 = input.LA(1);

                         
                        int index41_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_144);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA41_145 = input.LA(1);

                         
                        int index41_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_145);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA41_146 = input.LA(1);

                         
                        int index41_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_146);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA41_147 = input.LA(1);

                         
                        int index41_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_147);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA41_148 = input.LA(1);

                         
                        int index41_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_148);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA41_149 = input.LA(1);

                         
                        int index41_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_149);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA41_150 = input.LA(1);

                         
                        int index41_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_150);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA41_151 = input.LA(1);

                         
                        int index41_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_151);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA41_152 = input.LA(1);

                         
                        int index41_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 260;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_152);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA41_153 = input.LA(1);

                         
                        int index41_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_153);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA41_155 = input.LA(1);

                         
                        int index41_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_155);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA41_169 = input.LA(1);

                         
                        int index41_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_169);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA41_203 = input.LA(1);

                         
                        int index41_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_203);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA41_204 = input.LA(1);

                         
                        int index41_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_204);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA41_206 = input.LA(1);

                         
                        int index41_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_206);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA41_207 = input.LA(1);

                         
                        int index41_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 205;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index41_207);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA46_eotS =
        "\u02cf\uffff";
    static final String DFA46_eofS =
        "\2\uffff\4\10\1\uffff\1\10\u00df\uffff\1\10\67\uffff\1\10\20\uffff"+
        "\1\10\20\uffff\1\10\20\uffff\1\10\107\uffff\1\10\u0134\uffff";
    static final String DFA46_minS =
        "\1\13\1\uffff\4\25\1\55\1\25\3\uffff\1\55\1\13\65\uffff\1\55\1\13"+
        "\65\uffff\1\55\1\13\65\uffff\1\55\1\13\65\uffff\1\25\1\55\1\13\65"+
        "\uffff\1\25\20\uffff\1\25\20\uffff\1\25\20\uffff\1\25\20\uffff\1"+
        "\55\1\13\65\uffff\1\25\20\uffff\2\0\65\uffff\2\0\65\uffff\2\0\65"+
        "\uffff\2\0\65\uffff\1\0\20\uffff\2\0\65\uffff";
    static final String DFA46_maxS =
        "\1\u00a4\1\uffff\4\u00c2\1\55\1\u00c2\3\uffff\1\55\1\u00c3\65\uffff"+
        "\1\55\1\u00c3\65\uffff\1\55\1\u00c3\65\uffff\1\55\1\u00c3\65\uffff"+
        "\1\u00c2\1\55\1\u00c3\65\uffff\1\u00c2\20\uffff\1\u00c2\20\uffff"+
        "\1\u00c2\20\uffff\1\u00c2\20\uffff\1\55\1\u00c3\65\uffff\1\u00c2"+
        "\20\uffff\2\0\65\uffff\2\0\65\uffff\2\0\65\uffff\2\0\65\uffff\1"+
        "\0\20\uffff\2\0\65\uffff";
    static final String DFA46_acceptS =
        "\1\uffff\1\1\6\uffff\1\3\u0118\uffff\17\2\2\uffff\17\2\2\uffff\17"+
        "\2\2\uffff\17\2\71\uffff\17\2\u00de\uffff\17\2\67\uffff";
    static final String DFA46_specialS =
        "\14\uffff\1\0\66\uffff\1\1\66\uffff\1\2\66\uffff\1\3\67\uffff\1"+
        "\4\172\uffff\1\5\106\uffff\1\6\1\7\65\uffff\1\10\1\11\65\uffff\1"+
        "\12\1\13\65\uffff\1\14\1\15\65\uffff\1\16\20\uffff\1\17\1\20\65"+
        "\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\5\41\uffff\1\7\24\uffff\1\4\23\uffff\1\2\1\3\32\uffff\1\6"+
            "\1\uffff\1\10\46\uffff\1\1\5\uffff\1\10\2\uffff\1\10",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\14\2\10\1\uffff\2\10\1\uffff\3\10"+
            "\1\uffff\2\13\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff\1\10\2"+
            "\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10\1\uffff"+
            "\2\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\103\2\10\1\uffff\2\10\1\uffff\3\10"+
            "\1\uffff\2\102\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff\1\10"+
            "\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10\1\uffff"+
            "\2\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\172\2\10\1\uffff\2\10\1\uffff\3\10"+
            "\1\uffff\2\171\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff\1\10"+
            "\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10\1\uffff"+
            "\2\10",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u00b1\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u00b0\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "\1\u00e7",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u00e9\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u00e8\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "\1\u011f",
            "\1\u0127\41\uffff\1\u0129\24\uffff\1\u0126\23\uffff\1\u0124"+
            "\1\u0125\26\uffff\1\u012c\3\uffff\1\u0128\1\uffff\1\u0122\1"+
            "\u012f\1\10\2\uffff\1\u012e\2\uffff\1\u0121\1\u012e\35\uffff"+
            "\1\u0123\5\uffff\1\u012b\2\uffff\1\u012a\36\uffff\1\u012d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0130",
            "\1\u0138\41\uffff\1\u013a\24\uffff\1\u0137\23\uffff\1\u0135"+
            "\1\u0136\26\uffff\1\u013d\3\uffff\1\u0139\1\uffff\1\u0133\1"+
            "\u0140\1\10\2\uffff\1\u013f\2\uffff\1\u0132\1\u013f\35\uffff"+
            "\1\u0134\5\uffff\1\u013c\2\uffff\1\u013b\36\uffff\1\u013e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0141",
            "\1\u0149\41\uffff\1\u014b\24\uffff\1\u0148\23\uffff\1\u0146"+
            "\1\u0147\26\uffff\1\u014e\3\uffff\1\u014a\1\uffff\1\u0144\1"+
            "\u0151\1\10\2\uffff\1\u0150\2\uffff\1\u0143\1\u0150\35\uffff"+
            "\1\u0145\5\uffff\1\u014d\2\uffff\1\u014c\36\uffff\1\u014f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0152",
            "\1\u015a\41\uffff\1\u015c\24\uffff\1\u0159\23\uffff\1\u0157"+
            "\1\u0158\26\uffff\1\u015f\3\uffff\1\u015b\1\uffff\1\u0155\1"+
            "\u0162\1\10\2\uffff\1\u0161\2\uffff\1\u0154\1\u0161\35\uffff"+
            "\1\u0156\5\uffff\1\u015e\2\uffff\1\u015d\36\uffff\1\u0160",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0164\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u0163\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "\1\u019a",
            "\1\u01a2\41\uffff\1\u01a4\24\uffff\1\u01a1\23\uffff\1\u019f"+
            "\1\u01a0\26\uffff\1\u01a7\3\uffff\1\u01a3\1\uffff\1\u019d\1"+
            "\u01aa\1\10\2\uffff\1\u01a9\2\uffff\1\u019c\1\u01a9\35\uffff"+
            "\1\u019e\5\uffff\1\u01a6\2\uffff\1\u01a5\36\uffff\1\u01a8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u01ab\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u01ac\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u01e2\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u01e3\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0219\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u021a\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0250\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u0251\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0287",
            "\1\u028f\41\uffff\1\u0291\24\uffff\1\u028e\23\uffff\1\u028c"+
            "\1\u028d\26\uffff\1\u0294\3\uffff\1\u0290\1\uffff\1\u028a\1"+
            "\u0297\1\10\2\uffff\1\u0296\2\uffff\1\u0289\1\u0296\35\uffff"+
            "\1\u028b\5\uffff\1\u0293\2\uffff\1\u0292\36\uffff\1\u0295",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\10\27\uffff\1\10\21\uffff\1\10\21\uffff\1\10\35\uffff\1"+
            "\10\1\uffff\2\10\1\uffff\1\u0298\2\10\1\uffff\2\10\1\uffff\3"+
            "\10\1\uffff\2\u0299\4\10\1\uffff\6\10\1\uffff\10\10\4\uffff"+
            "\1\10\2\uffff\4\10\1\uffff\3\10\1\uffff\15\10\1\uffff\15\10"+
            "\1\uffff\2\10",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "479:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_12 = input.LA(1);

                         
                        int index46_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_12==118) ) {s = 8;}

                        else if ( (LA46_12==124) && (synpred7_Objc())) {s = 289;}

                        else if ( (LA46_12==116) && (synpred7_Objc())) {s = 290;}

                        else if ( (LA46_12==155) && (synpred7_Objc())) {s = 291;}

                        else if ( (LA46_12==STRING_LITERAL) && (synpred7_Objc())) {s = 292;}

                        else if ( (LA46_12==STRING_OBJC) && (synpred7_Objc())) {s = 293;}

                        else if ( (LA46_12==NUMBER_LITERAL) && (synpred7_Objc())) {s = 294;}

                        else if ( (LA46_12==BOOL_LITERAL) && (synpred7_Objc())) {s = 295;}

                        else if ( (LA46_12==114) && (synpred7_Objc())) {s = 296;}

                        else if ( (LA46_12==ID) && (synpred7_Objc())) {s = 297;}

                        else if ( (LA46_12==164) && (synpred7_Objc())) {s = 298;}

                        else if ( (LA46_12==161) && (synpred7_Objc())) {s = 299;}

                        else if ( (LA46_12==110) && (synpred7_Objc())) {s = 300;}

                        else if ( (LA46_12==195) && (synpred7_Objc())) {s = 301;}

                        else if ( (LA46_12==121||LA46_12==125) && (synpred7_Objc())) {s = 302;}

                        else if ( (LA46_12==117) && (synpred7_Objc())) {s = 303;}

                         
                        input.seek(index46_12);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_67 = input.LA(1);

                         
                        int index46_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_67==118) ) {s = 8;}

                        else if ( (LA46_67==124) && (synpred7_Objc())) {s = 306;}

                        else if ( (LA46_67==116) && (synpred7_Objc())) {s = 307;}

                        else if ( (LA46_67==155) && (synpred7_Objc())) {s = 308;}

                        else if ( (LA46_67==STRING_LITERAL) && (synpred7_Objc())) {s = 309;}

                        else if ( (LA46_67==STRING_OBJC) && (synpred7_Objc())) {s = 310;}

                        else if ( (LA46_67==NUMBER_LITERAL) && (synpred7_Objc())) {s = 311;}

                        else if ( (LA46_67==BOOL_LITERAL) && (synpred7_Objc())) {s = 312;}

                        else if ( (LA46_67==114) && (synpred7_Objc())) {s = 313;}

                        else if ( (LA46_67==ID) && (synpred7_Objc())) {s = 314;}

                        else if ( (LA46_67==164) && (synpred7_Objc())) {s = 315;}

                        else if ( (LA46_67==161) && (synpred7_Objc())) {s = 316;}

                        else if ( (LA46_67==110) && (synpred7_Objc())) {s = 317;}

                        else if ( (LA46_67==195) && (synpred7_Objc())) {s = 318;}

                        else if ( (LA46_67==121||LA46_67==125) && (synpred7_Objc())) {s = 319;}

                        else if ( (LA46_67==117) && (synpred7_Objc())) {s = 320;}

                         
                        input.seek(index46_67);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_122 = input.LA(1);

                         
                        int index46_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_122==118) ) {s = 8;}

                        else if ( (LA46_122==124) && (synpred7_Objc())) {s = 323;}

                        else if ( (LA46_122==116) && (synpred7_Objc())) {s = 324;}

                        else if ( (LA46_122==155) && (synpred7_Objc())) {s = 325;}

                        else if ( (LA46_122==STRING_LITERAL) && (synpred7_Objc())) {s = 326;}

                        else if ( (LA46_122==STRING_OBJC) && (synpred7_Objc())) {s = 327;}

                        else if ( (LA46_122==NUMBER_LITERAL) && (synpred7_Objc())) {s = 328;}

                        else if ( (LA46_122==BOOL_LITERAL) && (synpred7_Objc())) {s = 329;}

                        else if ( (LA46_122==114) && (synpred7_Objc())) {s = 330;}

                        else if ( (LA46_122==ID) && (synpred7_Objc())) {s = 331;}

                        else if ( (LA46_122==164) && (synpred7_Objc())) {s = 332;}

                        else if ( (LA46_122==161) && (synpred7_Objc())) {s = 333;}

                        else if ( (LA46_122==110) && (synpred7_Objc())) {s = 334;}

                        else if ( (LA46_122==195) && (synpred7_Objc())) {s = 335;}

                        else if ( (LA46_122==121||LA46_122==125) && (synpred7_Objc())) {s = 336;}

                        else if ( (LA46_122==117) && (synpred7_Objc())) {s = 337;}

                         
                        input.seek(index46_122);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_177 = input.LA(1);

                         
                        int index46_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_177==118) ) {s = 8;}

                        else if ( (LA46_177==124) && (synpred7_Objc())) {s = 340;}

                        else if ( (LA46_177==116) && (synpred7_Objc())) {s = 341;}

                        else if ( (LA46_177==155) && (synpred7_Objc())) {s = 342;}

                        else if ( (LA46_177==STRING_LITERAL) && (synpred7_Objc())) {s = 343;}

                        else if ( (LA46_177==STRING_OBJC) && (synpred7_Objc())) {s = 344;}

                        else if ( (LA46_177==NUMBER_LITERAL) && (synpred7_Objc())) {s = 345;}

                        else if ( (LA46_177==BOOL_LITERAL) && (synpred7_Objc())) {s = 346;}

                        else if ( (LA46_177==114) && (synpred7_Objc())) {s = 347;}

                        else if ( (LA46_177==ID) && (synpred7_Objc())) {s = 348;}

                        else if ( (LA46_177==164) && (synpred7_Objc())) {s = 349;}

                        else if ( (LA46_177==161) && (synpred7_Objc())) {s = 350;}

                        else if ( (LA46_177==110) && (synpred7_Objc())) {s = 351;}

                        else if ( (LA46_177==195) && (synpred7_Objc())) {s = 352;}

                        else if ( (LA46_177==121||LA46_177==125) && (synpred7_Objc())) {s = 353;}

                        else if ( (LA46_177==117) && (synpred7_Objc())) {s = 354;}

                         
                        input.seek(index46_177);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_233 = input.LA(1);

                         
                        int index46_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_233==118) ) {s = 8;}

                        else if ( (LA46_233==124) && (synpred7_Objc())) {s = 412;}

                        else if ( (LA46_233==116) && (synpred7_Objc())) {s = 413;}

                        else if ( (LA46_233==155) && (synpred7_Objc())) {s = 414;}

                        else if ( (LA46_233==STRING_LITERAL) && (synpred7_Objc())) {s = 415;}

                        else if ( (LA46_233==STRING_OBJC) && (synpred7_Objc())) {s = 416;}

                        else if ( (LA46_233==NUMBER_LITERAL) && (synpred7_Objc())) {s = 417;}

                        else if ( (LA46_233==BOOL_LITERAL) && (synpred7_Objc())) {s = 418;}

                        else if ( (LA46_233==114) && (synpred7_Objc())) {s = 419;}

                        else if ( (LA46_233==ID) && (synpred7_Objc())) {s = 420;}

                        else if ( (LA46_233==164) && (synpred7_Objc())) {s = 421;}

                        else if ( (LA46_233==161) && (synpred7_Objc())) {s = 422;}

                        else if ( (LA46_233==110) && (synpred7_Objc())) {s = 423;}

                        else if ( (LA46_233==195) && (synpred7_Objc())) {s = 424;}

                        else if ( (LA46_233==121||LA46_233==125) && (synpred7_Objc())) {s = 425;}

                        else if ( (LA46_233==117) && (synpred7_Objc())) {s = 426;}

                         
                        input.seek(index46_233);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_356 = input.LA(1);

                         
                        int index46_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA46_356==118) ) {s = 8;}

                        else if ( (LA46_356==124) && (synpred7_Objc())) {s = 649;}

                        else if ( (LA46_356==116) && (synpred7_Objc())) {s = 650;}

                        else if ( (LA46_356==155) && (synpred7_Objc())) {s = 651;}

                        else if ( (LA46_356==STRING_LITERAL) && (synpred7_Objc())) {s = 652;}

                        else if ( (LA46_356==STRING_OBJC) && (synpred7_Objc())) {s = 653;}

                        else if ( (LA46_356==NUMBER_LITERAL) && (synpred7_Objc())) {s = 654;}

                        else if ( (LA46_356==BOOL_LITERAL) && (synpred7_Objc())) {s = 655;}

                        else if ( (LA46_356==114) && (synpred7_Objc())) {s = 656;}

                        else if ( (LA46_356==ID) && (synpred7_Objc())) {s = 657;}

                        else if ( (LA46_356==164) && (synpred7_Objc())) {s = 658;}

                        else if ( (LA46_356==161) && (synpred7_Objc())) {s = 659;}

                        else if ( (LA46_356==110) && (synpred7_Objc())) {s = 660;}

                        else if ( (LA46_356==195) && (synpred7_Objc())) {s = 661;}

                        else if ( (LA46_356==121||LA46_356==125) && (synpred7_Objc())) {s = 662;}

                        else if ( (LA46_356==117) && (synpred7_Objc())) {s = 663;}

                         
                        input.seek(index46_356);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_427 = input.LA(1);

                         
                        int index46_427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_427);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_428 = input.LA(1);

                         
                        int index46_428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_428);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_482 = input.LA(1);

                         
                        int index46_482 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_482);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA46_483 = input.LA(1);

                         
                        int index46_483 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_483);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA46_537 = input.LA(1);

                         
                        int index46_537 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_537);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA46_538 = input.LA(1);

                         
                        int index46_538 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_538);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA46_592 = input.LA(1);

                         
                        int index46_592 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_592);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA46_593 = input.LA(1);

                         
                        int index46_593 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_593);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA46_647 = input.LA(1);

                         
                        int index46_647 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_647);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA46_664 = input.LA(1);

                         
                        int index46_664 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_664);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA46_665 = input.LA(1);

                         
                        int index46_665 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred7_Objc()) ) {s = 663;}

                        else if ( (true) ) {s = 8;}

                         
                        input.seek(index46_665);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA48_eotS =
        "\u00ce\uffff";
    static final String DFA48_eofS =
        "\1\uffff\1\3\u00cc\uffff";
    static final String DFA48_minS =
        "\1\13\1\25\10\uffff\1\13\66\uffff\2\13\1\164\7\55\4\13\47\0\2\uffff"+
        "\5\0\2\uffff\5\0\2\uffff\5\0\2\uffff\7\0\2\uffff\70\0";
    static final String DFA48_maxS =
        "\1\u00a4\1\u00c2\10\uffff\1\u00c3\66\uffff\1\u00a4\1\u00c3\1\164"+
        "\4\u00c1\1\55\1\u00c1\1\u00bc\1\u00c3\3\u00a4\47\0\2\uffff\5\0\2"+
        "\uffff\5\0\2\uffff\5\0\2\uffff\7\0\2\uffff\70\0";
    static final String DFA48_acceptS =
        "\2\uffff\1\2\1\3\4\uffff\1\4\1\5\154\uffff\1\1\6\uffff\1\1\6\uffff"+
        "\1\1\6\uffff\1\1\10\uffff\1\1\71\uffff";
    static final String DFA48_specialS =
        "\104\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\5\uffff\1\5\1\6\1\7\1\10"+
        "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
        "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
        "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\2\uffff\1\54\1\55"+
        "\1\56\1\57\1\60\2\uffff\1\61\1\62\1\63\1\64\1\65\2\uffff\1\66\1"+
        "\67\1\70\1\71\1\72\2\uffff\1\73\1\74\1\75\1\76\1\77\1\100\1\101"+
        "\2\uffff\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1"+
        "\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
        "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
        "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
        "\1\167\1\170\1\171}>";
    static final String[] DFA48_transitionS = {
            "\1\3\41\uffff\1\1\24\uffff\1\3\23\uffff\2\3\32\uffff\1\3\1\uffff"+
            "\1\11\54\uffff\1\10\2\uffff\1\2",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\35\uffff\1\3\1"+
            "\uffff\2\3\1\uffff\3\3\1\uffff\2\3\1\uffff\3\3\1\uffff\6\3\1"+
            "\uffff\6\3\1\uffff\10\3\4\uffff\1\3\2\uffff\4\3\1\uffff\1\12"+
            "\2\3\1\uffff\15\3\1\uffff\15\3\1\uffff\2\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\41\uffff\1\111\24\uffff\1\106\23\uffff\1\104\1\105\26"+
            "\uffff\1\114\3\uffff\1\110\1\uffff\1\102\4\uffff\1\116\2\uffff"+
            "\1\101\1\116\35\uffff\1\103\5\uffff\1\113\2\uffff\1\112\36\uffff"+
            "\1\115",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\124\41\uffff\1\126\24\uffff\1\123\23\uffff\1\121\1\122\32"+
            "\uffff\1\125\1\uffff\1\117\46\uffff\1\120\5\uffff\1\130\2\uffff"+
            "\1\127",
            "\1\151\41\uffff\1\140\24\uffff\1\150\23\uffff\1\146\1\147\26"+
            "\uffff\1\155\3\uffff\1\152\1\uffff\1\132\4\uffff\1\157\2\uffff"+
            "\1\144\1\157\35\uffff\1\145\5\uffff\1\154\2\uffff\1\153\2\uffff"+
            "\1\133\4\uffff\1\143\3\uffff\1\131\2\uffff\1\135\1\136\1\uffff"+
            "\1\137\1\uffff\1\141\2\uffff\1\142\1\134\6\uffff\1\156",
            "\1\160",
            "\1\3\101\uffff\1\164\1\uffff\2\164\1\uffff\1\162\1\uffff\1"+
            "\164\1\uffff\1\164\1\163\2\uffff\1\164\1\163\1\uffff\2\161\2"+
            "\uffff\2\164\1\uffff\6\164\1\uffff\1\165\24\uffff\1\166\1\164"+
            "\33\uffff\1\164\1\uffff\1\164",
            "\1\3\101\uffff\1\173\1\uffff\2\173\1\uffff\1\171\1\uffff\1"+
            "\173\1\uffff\1\173\1\172\2\uffff\1\173\1\172\1\uffff\2\170\2"+
            "\uffff\2\173\1\uffff\6\173\1\uffff\1\174\24\uffff\1\175\1\173"+
            "\33\uffff\1\173\1\uffff\1\173",
            "\1\3\101\uffff\1\u0082\1\uffff\2\u0082\1\uffff\1\u0080\1\uffff"+
            "\1\u0082\1\uffff\1\u0082\1\u0081\2\uffff\1\u0082\1\u0081\1\uffff"+
            "\2\177\2\uffff\2\u0082\1\uffff\6\u0082\1\uffff\1\u0083\24\uffff"+
            "\1\u0084\1\u0082\33\uffff\1\u0082\1\uffff\1\u0082",
            "\1\3\101\uffff\1\u0089\1\uffff\2\u0089\1\uffff\1\u0087\1\uffff"+
            "\1\u0089\1\uffff\1\u0089\1\u0088\2\uffff\1\u0089\1\u0088\1\uffff"+
            "\2\u0086\2\uffff\2\u0089\1\uffff\6\u0089\1\uffff\1\u008a\24"+
            "\uffff\1\u008b\1\u0089\33\uffff\1\u0089\1\uffff\1\u0089",
            "\1\u008d",
            "\1\3\101\uffff\1\u0092\1\uffff\2\u0092\1\uffff\1\u008f\1\uffff"+
            "\1\u0092\1\uffff\1\u0092\1\u0091\2\uffff\1\u0092\1\u0091\1\uffff"+
            "\2\u008e\2\uffff\2\u0092\1\uffff\6\u0092\1\uffff\1\u0093\23"+
            "\uffff\1\u0090\1\u0094\1\u0092\33\uffff\1\u0092\1\uffff\1\u0092",
            "\1\u009d\106\uffff\1\u0097\1\u00a1\61\uffff\1\u0098\4\uffff"+
            "\1\u00a0\3\uffff\1\u0096\2\uffff\1\u009a\1\u009b\1\uffff\1\u009c"+
            "\1\uffff\1\u009e\2\uffff\1\u009f\1\u0099",
            "\1\u00a8\41\uffff\1\u00aa\24\uffff\1\u00a7\23\uffff\1\u00a5"+
            "\1\u00a6\26\uffff\1\u00ad\3\uffff\1\u00a9\1\uffff\1\u00a3\4"+
            "\uffff\1\u00af\2\uffff\1\u00a2\1\u00af\35\uffff\1\u00a4\5\uffff"+
            "\1\u00ac\2\uffff\1\u00ab\36\uffff\1\u00ae",
            "\1\u00b5\41\uffff\1\u00b7\24\uffff\1\u00b4\23\uffff\1\u00b2"+
            "\1\u00b3\32\uffff\1\u00b6\1\uffff\1\u00b0\46\uffff\1\u00b1\5"+
            "\uffff\1\u00b9\2\uffff\1\u00b8",
            "\1\u00bf\41\uffff\1\u00c1\24\uffff\1\u00be\23\uffff\1\u00bc"+
            "\1\u00bd\32\uffff\1\u00c0\1\uffff\1\u00ba\46\uffff\1\u00bb\5"+
            "\uffff\1\u00c3\2\uffff\1\u00c2",
            "\1\u00c9\41\uffff\1\u00cb\24\uffff\1\u00c8\23\uffff\1\u00c6"+
            "\1\u00c7\32\uffff\1\u00ca\1\uffff\1\u00c4\46\uffff\1\u00c5\5"+
            "\uffff\1\u00cd\2\uffff\1\u00cc",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "494:1: simple_expression_value2 : ( ( name '[' )=> name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA48_68 = input.LA(1);

                         
                        int index48_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA48_68 >= 127 && LA48_68 <= 128)) ) {s = 113;}

                        else if ( (LA48_68==116) ) {s = 114;}

                        else if ( (LA48_68==121||LA48_68==125) ) {s = 115;}

                        else if ( (LA48_68==111||(LA48_68 >= 113 && LA48_68 <= 114)||LA48_68==118||LA48_68==120||LA48_68==124||(LA48_68 >= 131 && LA48_68 <= 132)||(LA48_68 >= 134 && LA48_68 <= 139)||LA48_68==163||LA48_68==191||LA48_68==193) ) {s = 116;}

                        else if ( (LA48_68==141) ) {s = 117;}

                        else if ( (LA48_68==162) && (synpred8_Objc())) {s = 118;}

                        else if ( (LA48_68==ID) ) {s = 3;}

                         
                        input.seek(index48_68);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA48_69 = input.LA(1);

                         
                        int index48_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA48_69 >= 127 && LA48_69 <= 128)) ) {s = 120;}

                        else if ( (LA48_69==116) ) {s = 121;}

                        else if ( (LA48_69==121||LA48_69==125) ) {s = 122;}

                        else if ( (LA48_69==111||(LA48_69 >= 113 && LA48_69 <= 114)||LA48_69==118||LA48_69==120||LA48_69==124||(LA48_69 >= 131 && LA48_69 <= 132)||(LA48_69 >= 134 && LA48_69 <= 139)||LA48_69==163||LA48_69==191||LA48_69==193) ) {s = 123;}

                        else if ( (LA48_69==141) ) {s = 124;}

                        else if ( (LA48_69==162) && (synpred8_Objc())) {s = 125;}

                        else if ( (LA48_69==ID) ) {s = 3;}

                         
                        input.seek(index48_69);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA48_70 = input.LA(1);

                         
                        int index48_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA48_70 >= 127 && LA48_70 <= 128)) ) {s = 127;}

                        else if ( (LA48_70==116) ) {s = 128;}

                        else if ( (LA48_70==121||LA48_70==125) ) {s = 129;}

                        else if ( (LA48_70==111||(LA48_70 >= 113 && LA48_70 <= 114)||LA48_70==118||LA48_70==120||LA48_70==124||(LA48_70 >= 131 && LA48_70 <= 132)||(LA48_70 >= 134 && LA48_70 <= 139)||LA48_70==163||LA48_70==191||LA48_70==193) ) {s = 130;}

                        else if ( (LA48_70==141) ) {s = 131;}

                        else if ( (LA48_70==162) && (synpred8_Objc())) {s = 132;}

                        else if ( (LA48_70==ID) ) {s = 3;}

                         
                        input.seek(index48_70);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA48_71 = input.LA(1);

                         
                        int index48_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA48_71 >= 127 && LA48_71 <= 128)) ) {s = 134;}

                        else if ( (LA48_71==116) ) {s = 135;}

                        else if ( (LA48_71==121||LA48_71==125) ) {s = 136;}

                        else if ( (LA48_71==111||(LA48_71 >= 113 && LA48_71 <= 114)||LA48_71==118||LA48_71==120||LA48_71==124||(LA48_71 >= 131 && LA48_71 <= 132)||(LA48_71 >= 134 && LA48_71 <= 139)||LA48_71==163||LA48_71==191||LA48_71==193) ) {s = 137;}

                        else if ( (LA48_71==141) ) {s = 138;}

                        else if ( (LA48_71==162) && (synpred8_Objc())) {s = 139;}

                        else if ( (LA48_71==ID) ) {s = 3;}

                         
                        input.seek(index48_71);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA48_73 = input.LA(1);

                         
                        int index48_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA48_73 >= 127 && LA48_73 <= 128)) ) {s = 142;}

                        else if ( (LA48_73==116) ) {s = 143;}

                        else if ( (LA48_73==161) ) {s = 144;}

                        else if ( (LA48_73==121||LA48_73==125) ) {s = 145;}

                        else if ( (LA48_73==111||(LA48_73 >= 113 && LA48_73 <= 114)||LA48_73==118||LA48_73==120||LA48_73==124||(LA48_73 >= 131 && LA48_73 <= 132)||(LA48_73 >= 134 && LA48_73 <= 139)||LA48_73==163||LA48_73==191||LA48_73==193) ) {s = 146;}

                        else if ( (LA48_73==141) ) {s = 147;}

                        else if ( (LA48_73==162) && (synpred8_Objc())) {s = 148;}

                        else if ( (LA48_73==ID) ) {s = 3;}

                         
                        input.seek(index48_73);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA48_79 = input.LA(1);

                         
                        int index48_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_79);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA48_80 = input.LA(1);

                         
                        int index48_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_80);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA48_81 = input.LA(1);

                         
                        int index48_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_81);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA48_82 = input.LA(1);

                         
                        int index48_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_82);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA48_83 = input.LA(1);

                         
                        int index48_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_83);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA48_84 = input.LA(1);

                         
                        int index48_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_84);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA48_85 = input.LA(1);

                         
                        int index48_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_85);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA48_86 = input.LA(1);

                         
                        int index48_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_86);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA48_87 = input.LA(1);

                         
                        int index48_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_87);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA48_88 = input.LA(1);

                         
                        int index48_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_88);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA48_89 = input.LA(1);

                         
                        int index48_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_89);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA48_90 = input.LA(1);

                         
                        int index48_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_90);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA48_91 = input.LA(1);

                         
                        int index48_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_91);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA48_92 = input.LA(1);

                         
                        int index48_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_92);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA48_93 = input.LA(1);

                         
                        int index48_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_93);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA48_94 = input.LA(1);

                         
                        int index48_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_94);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA48_95 = input.LA(1);

                         
                        int index48_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_95);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA48_96 = input.LA(1);

                         
                        int index48_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_96);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA48_97 = input.LA(1);

                         
                        int index48_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_97);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA48_98 = input.LA(1);

                         
                        int index48_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_98);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA48_99 = input.LA(1);

                         
                        int index48_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_99);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA48_100 = input.LA(1);

                         
                        int index48_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_100);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA48_101 = input.LA(1);

                         
                        int index48_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_101);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA48_102 = input.LA(1);

                         
                        int index48_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_102);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA48_103 = input.LA(1);

                         
                        int index48_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_103);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA48_104 = input.LA(1);

                         
                        int index48_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_104);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA48_105 = input.LA(1);

                         
                        int index48_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_105);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA48_106 = input.LA(1);

                         
                        int index48_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_106);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA48_107 = input.LA(1);

                         
                        int index48_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_107);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA48_108 = input.LA(1);

                         
                        int index48_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_108);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA48_109 = input.LA(1);

                         
                        int index48_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_109);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA48_110 = input.LA(1);

                         
                        int index48_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_110);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA48_111 = input.LA(1);

                         
                        int index48_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_111);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA48_112 = input.LA(1);

                         
                        int index48_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_112);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA48_113 = input.LA(1);

                         
                        int index48_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_113);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA48_114 = input.LA(1);

                         
                        int index48_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_114);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA48_115 = input.LA(1);

                         
                        int index48_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_115);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA48_116 = input.LA(1);

                         
                        int index48_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_116);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA48_117 = input.LA(1);

                         
                        int index48_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_117);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA48_120 = input.LA(1);

                         
                        int index48_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_120);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA48_121 = input.LA(1);

                         
                        int index48_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_121);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA48_122 = input.LA(1);

                         
                        int index48_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_122);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA48_123 = input.LA(1);

                         
                        int index48_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_123);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA48_124 = input.LA(1);

                         
                        int index48_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_124);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA48_127 = input.LA(1);

                         
                        int index48_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_127);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA48_128 = input.LA(1);

                         
                        int index48_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_128);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA48_129 = input.LA(1);

                         
                        int index48_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_129);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA48_130 = input.LA(1);

                         
                        int index48_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_130);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA48_131 = input.LA(1);

                         
                        int index48_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_131);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA48_134 = input.LA(1);

                         
                        int index48_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_134);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA48_135 = input.LA(1);

                         
                        int index48_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_135);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA48_136 = input.LA(1);

                         
                        int index48_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_136);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA48_137 = input.LA(1);

                         
                        int index48_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_137);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA48_138 = input.LA(1);

                         
                        int index48_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_138);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA48_141 = input.LA(1);

                         
                        int index48_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_141);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA48_142 = input.LA(1);

                         
                        int index48_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_142);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA48_143 = input.LA(1);

                         
                        int index48_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_143);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA48_144 = input.LA(1);

                         
                        int index48_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_144);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA48_145 = input.LA(1);

                         
                        int index48_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_145);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA48_146 = input.LA(1);

                         
                        int index48_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_146);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA48_147 = input.LA(1);

                         
                        int index48_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_147);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA48_150 = input.LA(1);

                         
                        int index48_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_150);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA48_151 = input.LA(1);

                         
                        int index48_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_151);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA48_152 = input.LA(1);

                         
                        int index48_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_152);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA48_153 = input.LA(1);

                         
                        int index48_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_153);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA48_154 = input.LA(1);

                         
                        int index48_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_154);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA48_155 = input.LA(1);

                         
                        int index48_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_155);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA48_156 = input.LA(1);

                         
                        int index48_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_156);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA48_157 = input.LA(1);

                         
                        int index48_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_157);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA48_158 = input.LA(1);

                         
                        int index48_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_158);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA48_159 = input.LA(1);

                         
                        int index48_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_159);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA48_160 = input.LA(1);

                         
                        int index48_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_160);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA48_161 = input.LA(1);

                         
                        int index48_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_161);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA48_162 = input.LA(1);

                         
                        int index48_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_162);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA48_163 = input.LA(1);

                         
                        int index48_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_163);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA48_164 = input.LA(1);

                         
                        int index48_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_164);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA48_165 = input.LA(1);

                         
                        int index48_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_165);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA48_166 = input.LA(1);

                         
                        int index48_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_166);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA48_167 = input.LA(1);

                         
                        int index48_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_167);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA48_168 = input.LA(1);

                         
                        int index48_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_168);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA48_169 = input.LA(1);

                         
                        int index48_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_169);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA48_170 = input.LA(1);

                         
                        int index48_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_170);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA48_171 = input.LA(1);

                         
                        int index48_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_171);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA48_172 = input.LA(1);

                         
                        int index48_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_172);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA48_173 = input.LA(1);

                         
                        int index48_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_173);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA48_174 = input.LA(1);

                         
                        int index48_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_174);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA48_175 = input.LA(1);

                         
                        int index48_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_175);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA48_176 = input.LA(1);

                         
                        int index48_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_176);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA48_177 = input.LA(1);

                         
                        int index48_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_177);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA48_178 = input.LA(1);

                         
                        int index48_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_178);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA48_179 = input.LA(1);

                         
                        int index48_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_179);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA48_180 = input.LA(1);

                         
                        int index48_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_180);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA48_181 = input.LA(1);

                         
                        int index48_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_181);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA48_182 = input.LA(1);

                         
                        int index48_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_182);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA48_183 = input.LA(1);

                         
                        int index48_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_183);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA48_184 = input.LA(1);

                         
                        int index48_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_184);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA48_185 = input.LA(1);

                         
                        int index48_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_185);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA48_186 = input.LA(1);

                         
                        int index48_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_186);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA48_187 = input.LA(1);

                         
                        int index48_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_187);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA48_188 = input.LA(1);

                         
                        int index48_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_188);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA48_189 = input.LA(1);

                         
                        int index48_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_189);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA48_190 = input.LA(1);

                         
                        int index48_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_190);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA48_191 = input.LA(1);

                         
                        int index48_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_191);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA48_192 = input.LA(1);

                         
                        int index48_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_192);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA48_193 = input.LA(1);

                         
                        int index48_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_193);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA48_194 = input.LA(1);

                         
                        int index48_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_194);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA48_195 = input.LA(1);

                         
                        int index48_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_195);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA48_196 = input.LA(1);

                         
                        int index48_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_196);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA48_197 = input.LA(1);

                         
                        int index48_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_197);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA48_198 = input.LA(1);

                         
                        int index48_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_198);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA48_199 = input.LA(1);

                         
                        int index48_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_199);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA48_200 = input.LA(1);

                         
                        int index48_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_200);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA48_201 = input.LA(1);

                         
                        int index48_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_201);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA48_202 = input.LA(1);

                         
                        int index48_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_202);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA48_203 = input.LA(1);

                         
                        int index48_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_203);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA48_204 = input.LA(1);

                         
                        int index48_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_204);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA48_205 = input.LA(1);

                         
                        int index48_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 148;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index48_205);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 48, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code473 = new BitSet(new long[]{0x8000200000200002L,0x0010000000020000L,0x1DD9308002188004L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_code_internal556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_extern658 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_extern661 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_extern664 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFDFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000000000FL});
    public static final BitSet FOLLOW_set_in_extern666 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_extern671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_implementation705 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_implementation708 = new BitSet(new long[]{0x8000200000200000L,0x1110000000020000L,0x1DD9108020010004L});
    public static final BitSet FOLLOW_category_in_implementation711 = new BitSet(new long[]{0x8000200000200000L,0x1110000000020000L,0x1DD9108020010004L});
    public static final BitSet FOLLOW_implementation_body_in_implementation716 = new BitSet(new long[]{0x8000200000200000L,0x1110000000020000L,0x1DD9108020030004L});
    public static final BitSet FOLLOW_145_in_implementation721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body769 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_implementation_body774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_synthesize807 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_144_in_synthesize811 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000084L});
    public static final BitSet FOLLOW_135_in_synthesize818 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_synthesize820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synthesize824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_static_declaration_wrapper848 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_block_call_predicate870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_block_call907 = new BitSet(new long[]{0x0000200000000000L,0x0030000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_block_params_in_block_call909 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_block_call912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_synchronized_call951 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_synchronized_call953 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call955 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_synchronized_call957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params975 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_block_params978 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_classical_param_in_block_params980 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_block_multiline1043 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x7BFBDDA2D0000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_internal_in_block_multiline1048 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x7BFBDDA2D0000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_block_multiline1055 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_block_singleline1160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1268 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_block_internal1273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_goto_stmt1329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_goto_stmt1331 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1333 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_goto_stmt1335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_while_stmt1381 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_while_stmt1383 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1385 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_while_stmt1387 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_while_stmt1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_for_in_stmt1404 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_for_classic_stmt1429 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000004L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_for_classic_stmt1434 = new BitSet(new long[]{0x0000200000000802L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1461 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1463 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1480 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1482 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1490 = new BitSet(new long[]{0x0000000000000000L,0x4488000000000000L,0x00040000000010A0L,0x0000000000000001L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1494 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1498 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1503 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1506 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1516 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_for_stmt_body1518 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_for_stmt1533 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_for_stmt1535 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_return_stmt1573 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000004L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_switch_stmt1598 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_switch_stmt1600 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1602 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_switch_stmt1604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_switch_stmt1606 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CF6210000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1609 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CF6210000004L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_switch_stmt1613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_case_stmt1672 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_case_stmt1676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_default_stmt1699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_default_stmt1701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_do_stmt1722 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_do_stmt1724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_189_in_do_stmt1726 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_do_stmt1728 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_do_stmt1730 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_do_stmt1732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_if_stmt1757 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_if_stmt1759 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_if_stmt1761 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_if_stmt1763 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_if_stmt1765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_else_stmt1788 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_else_stmt1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_try_stmt_wrapper1812 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper1815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000044000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper1818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000044000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper1821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_catch_stmt1847 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_catch_stmt1850 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1853 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_catch_stmt1856 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1858 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_catch_stmt1861 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_catch_stmt1864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_finally_stmt1888 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x6222CD2210000004L});
    public static final BitSet FOLLOW_block_in_finally_stmt1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper1910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_throw_stmt1929 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt1931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_throw_stmt1933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name1944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number1964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number1978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2047 = new BitSet(new long[]{0x0000000000000000L,0x4488000000000000L,0x00000000000010A0L,0x0000000000000001L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2049 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2064 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_method_implementation_common2079 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2081 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_implementation_common2083 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2085 = new BitSet(new long[]{0x0000200000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2148 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2151 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2153 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_clasical_method_call_predicate2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2172 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2175 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2177 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_classical_method_call2182 = new BitSet(new long[]{0x0000200000000800L,0x3234400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2184 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_method_call2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2202 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_classical_method_params_push2205 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2207 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2231 = new BitSet(new long[]{0x0000200000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_method_params_push2238 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_123_in_method_params_push2243 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2246 = new BitSet(new long[]{0x0000200000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_method_msg2289 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_method_msg2291 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000002L});
    public static final BitSet FOLLOW_129_in_method_msg2296 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_method_msg2302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_questionmark_if_stmt2328 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_questionmark_if_stmt2332 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_element_value_or_semicolon2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_element_value_or_array_init2402 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2404 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_123_in_element_value_or_array_init2407 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2409 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_element_value_or_array_init2413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2463 = new BitSet(new long[]{0x0000000000000002L,0x1146800000000000L,0x8000000800002FD8L,0x0000000000000002L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2465 = new BitSet(new long[]{0x0000000000000002L,0x1146800000000000L,0x8000000800002FD8L,0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_cast_unary_expression12480 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2510 = new BitSet(new long[]{0x0000200000000800L,0x2214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_cast_unary_expression2_in_op2_unary_expression_or_questionmark_if_stmt2512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2532 = new BitSet(new long[]{0x0000000000000002L,0x2200000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_cast_unary_expression2541 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_cast_unary_expression2557 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2573 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression22588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2609 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_cast_expression2624 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2626 = new BitSet(new long[]{0x0000200000000800L,0x0014000000C00004L,0x0000001208000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2628 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_cast_expression2630 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression2633 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_cast_expression2635 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access2656 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_simple_expression_value_access2658 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2660 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_simple_expression_value_access2662 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_simple_expression_value_access2665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access2685 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2688 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2690 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_simple_expression_value_access2695 = new BitSet(new long[]{0x0000200000000800L,0x3234400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access2697 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_simple_expression_value_access2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access2707 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2710 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2712 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_simple_expression_value2728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_OBJC_in_simple_expression_value2741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_LITERAL_in_simple_expression_value2767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_simple_expression_value2781 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value22808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_simple_expression_value22810 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value22812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_simple_expression_value22814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value22830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value22836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value22842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_simple_expression_value22848 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value22850 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_simple_expression_value22852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper2866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper2963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3027 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_selector3050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_type_cast_name3088 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3090 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_cast_name3092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access3181 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_117_in_object_access3183 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access3187 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_object_access3189 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_117_in_object_access3191 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_165_in_break_stmt3208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_break_stmt3210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_continue_stmt3231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_continue_stmt3233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_extern_declaration3280 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3294 = new BitSet(new long[]{0x0000000000000000L,0x1100000000000000L});
    public static final BitSet FOLLOW_method_declaration_in_declarations3297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations3311 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000200000L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3313 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_field_declaration_in_declarations3316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations3330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_optional_prefix3368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_ns_inline3380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_property_prefix3392 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_property_prefix3394 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3396 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_property_prefix3399 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3401 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_123_in_property_prefix3406 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3408 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_property_prefix3411 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3413 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_117_in_property_prefix3419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper3432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_typedef_declaration_wrapper3470 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration3490 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3492 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_123_in_typedef_declaration3495 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3497 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_typedef_declaration3501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_func_pointer_predicate3513 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer_predicate3515 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate3517 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_func_pointer_predicate3519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_func_pointer3534 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer3536 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3538 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_func_pointer3540 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_func_pointer3542 = new BitSet(new long[]{0x0000200000000000L,0x0020000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3545 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_123_in_func_pointer3548 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059008000000000L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3550 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_117_in_func_pointer3556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal3585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal3591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal3597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name3624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_forward_class_declaration3642 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration3644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_forward_class_declaration3646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_forward_class_declaration3659 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration3661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_forward_class_declaration3663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration3676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_forward_class_declaration3678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration3691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_forward_class_declaration3693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration3706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_forward_class_declaration3708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name3728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_protocol_declaration3748 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration3750 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20008L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration3752 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20000L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration3760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end3774 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20000L});
    public static final BitSet FOLLOW_145_in_class_protocol_end3781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_template3793 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_template_internal_in_template3795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_template3797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces3806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_implements_protocols3831 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols3833 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_123_in_implements_protocols3836 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols3838 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_implements_protocols3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal3864 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_template_internal3867 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_template_type_in_template_internal3869 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type3883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_template_type3889 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name3906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name3929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_interface_declaration3953 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration3955 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x4000000000A2000AL});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration3957 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x4000000000A20000L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration3961 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration3966 = new BitSet(new long[]{0x8000000000000000L,0x1100000000020000L,0x0000000000A20000L});
    public static final BitSet FOLLOW_145_in_interface_declaration3971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_fields_body3988 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1D59108005400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_body_item_in_fields_body3994 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1D59108005400000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_fields_body3999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4014 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1D59108000000000L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4087 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_category4108 = new BitSet(new long[]{0x0000200000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_ID_in_category4110 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_category4113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_superclass_name4133 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4135 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4168 = new BitSet(new long[]{0x0000200000000002L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4192 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4194 = new BitSet(new long[]{0x0000000000000000L,0x4C98000000000000L,0x00000000000010A4L,0x0000000000000001L});
    public static final BitSet FOLLOW_123_in_field_declaration4198 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4200 = new BitSet(new long[]{0x0000000000000000L,0x4C98000000000000L,0x00000000000010A4L,0x0000000000000001L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000004L});
    public static final BitSet FOLLOW_130_in_field_declaration4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4221 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x4000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4223 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_field_declaration4225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_field_declaration4231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple4246 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple4248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_classical_method_params4273 = new BitSet(new long[]{0x0000200000000000L,0x0830000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4275 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_123_in_classical_method_params4279 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4281 = new BitSet(new long[]{0x0000000000000000L,0x0820000000000000L});
    public static final BitSet FOLLOW_117_in_classical_method_params4285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param4310 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param4312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration4341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration4352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration4358 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_classical_type_declaration4368 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4370 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_classical_type_declaration4389 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4391 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_classical_type_declaration4410 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4412 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_classical_type_declaration4414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration4454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration4460 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration4469 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration4478 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration4487 = new BitSet(new long[]{0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_type_declaration4489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_type_declaration_plane4504 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x1059000000000000L});
    public static final BitSet FOLLOW_188_in_type_declaration_plane4507 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane4510 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_type_declaration_plane4512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_type_decl_protocol_predicate4536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_type_decl_protocol_predicate4538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_type_declaration_protocol4554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_type_declaration_protocol4556 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0059000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol4558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_type_declaration_protocol4560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_type_declaration_struct_simple4582 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple4584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_type_declaration_union_simple4604 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple4606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_type_declaration_enum_simple4630 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple4632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_type_declaration_struct4662 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct4664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct4667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct4683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_type_declaration_union4707 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union4709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union4712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union4728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_type_declaration_enum4752 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum4754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum4757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum4773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_enum_wrapper4786 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper4796 = new BitSet(new long[]{0x8000200000000000L,0x0000000000020000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_enum_wrapper4803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_enum_element4818 = new BitSet(new long[]{0x0000000000000002L,0x4C88000000000000L,0x00000000000010A0L,0x0000000000000001L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element4821 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_enum_element4823 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_enum_element4827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_struct4881 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1959108000000000L});
    public static final BitSet FOLLOW_struct_internal_in_struct4890 = new BitSet(new long[]{0x8000200000000000L,0x0010000000020000L,0x1959108000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_struct4897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal4911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal4917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec4952 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_118_in_type_dec4954 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_type_dec4958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_type_dec4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_type_dec4964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal4981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal4990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_knownTypes5003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_knownTypes5009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_knownTypes5015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0018000000000000L});
    public static final BitSet FOLLOW_179_in_knownTypes5018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_knownTypes5025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0048000000000000L});
    public static final BitSet FOLLOW_179_in_knownTypes5028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name5044 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000002L});
    public static final BitSet FOLLOW_array_size_in_field_name5046 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000002L});
    public static final BitSet FOLLOW_field_crap_in_field_name5050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_array_size5078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000400000000L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_array_size5080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_array_size5083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_field_crap5093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap5095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration5107 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration5109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants5158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_method_declaration_common5171 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common5173 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_declaration_common5175 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common5177 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common5180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_method_declaration_common5183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate5195 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_method_declaration_predicate5198 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate5200 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_declaration_predicate5202 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate5204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name5222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5245 = new BitSet(new long[]{0x0000200000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_prefix_in_method_param5265 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_method_param5268 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_method_param5271 = new BitSet(new long[]{0x0000200000000000L,0x0010000000000000L,0x1959108000000000L});
    public static final BitSet FOLLOW_type_declaration_in_method_param5273 = new BitSet(new long[]{0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_method_param5275 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param5279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name5312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5351 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5353 = new BitSet(new long[]{0x0000200000000800L,0x3214400000C00004L,0x0000001208000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_element_value_in_define_declaration5355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred1_Objc1111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred3_Objc1453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred3_Objc1455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred4_Objc1472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_synpred4_Objc1474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred5_Objc2605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred6_Objc2618 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred6_Objc2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred7_Objc2672 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred7_Objc2675 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc2677 = new BitSet(new long[]{0x0000000000000000L,0x8010000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_116_in_synpred7_Objc2681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred8_Objc2802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_synpred8_Objc2804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred9_Objc3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred10_Objc3581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred11_Objc4337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred12_Objc4348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred13_Objc4439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred14_Objc4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred15_Objc4653 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred15_Objc4655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_synpred15_Objc4658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred16_Objc4698 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred16_Objc4700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_synpred16_Objc4703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_synpred17_Objc4743 = new BitSet(new long[]{0x0000200000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred17_Objc4745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_190_in_synpred17_Objc4748 = new BitSet(new long[]{0x0000000000000002L});

}