// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2013-02-02 23:10:11

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BOOL_LITERAL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CHAR_LITERAL", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'IBOutlet'", "'NS_INLINE'", "'['", "'\\\\'", "']'", "'^'", "'^('", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BOOL_LITERAL=11;
    public static final int BREAK_STMT=12;
    public static final int CASE_STMT=13;
    public static final int CATCH_STMT=14;
    public static final int CATEGORY=15;
    public static final int CHAR=16;
    public static final int CHAR_LITERAL=17;
    public static final int CLASS_NAME=18;
    public static final int CODE=19;
    public static final int CONTINUE_STMT=20;
    public static final int DEFAULT_STMT=21;
    public static final int DEFINE=22;
    public static final int DEFINE_LITERAL=23;
    public static final int DIGIT=24;
    public static final int DIRECTIVE=25;
    public static final int DO_STMT=26;
    public static final int ELSE_STMT=27;
    public static final int ENUM=28;
    public static final int ENUM_DEC=29;
    public static final int ENUM_FIELD=30;
    public static final int EXPR_COMPLEMENT=31;
    public static final int EXPR_NEGATE=32;
    public static final int EXPR_NOT=33;
    public static final int EXTERN=34;
    public static final int EscapeSequence=35;
    public static final int FIELD=36;
    public static final int FIELDS=37;
    public static final int FIELD_NAME=38;
    public static final int FINALLY_STMT=39;
    public static final int FORWARD_DECLARATION=40;
    public static final int FOR_IN_STMT=41;
    public static final int FOR_STMT=42;
    public static final int FUNC_POINTER=43;
    public static final int GOTO=44;
    public static final int GROUP_MODIFIER=45;
    public static final int HexDigit=46;
    public static final int ID=47;
    public static final int IF0_COMMENT=48;
    public static final int IF_STMT=49;
    public static final int IMPLEMENTATION=50;
    public static final int IMPLEMENTS_INTERFACES=51;
    public static final int IMPLEMENTS_INTERFACE_NAME=52;
    public static final int INTERFACE=53;
    public static final int INTERFACE_NAME=54;
    public static final int LETTER=55;
    public static final int METHOD=56;
    public static final int METHOD_CALL=57;
    public static final int METHOD_IMPL=58;
    public static final int METHOD_MSG=59;
    public static final int METHOD_NAME=60;
    public static final int METHOD_PARAM=61;
    public static final int METHOD_PARAMS=62;
    public static final int MODIFIER=63;
    public static final int MULTI_COMMENT=64;
    public static final int MULTI_COMMENT_LIT=65;
    public static final int NAME=66;
    public static final int NUMBER=67;
    public static final int NUMBER_LITERAL=68;
    public static final int OBJECT_ACCESS=69;
    public static final int OP=70;
    public static final int PARAMS=71;
    public static final int PARAM_NAME=72;
    public static final int PARAM_PREFIX=73;
    public static final int PREFIX=74;
    public static final int PREPROCESSOR_DECLARATION=75;
    public static final int PROPERTY=76;
    public static final int PROTOCOL=77;
    public static final int PROTOCOL_NAME=78;
    public static final int QUESTION_MARK_IF=79;
    public static final int RETURN_STMT=80;
    public static final int SIMPLE_EXPR=81;
    public static final int SINGLE_COMMENT=82;
    public static final int SINGLE_COMMENT_LIT=83;
    public static final int STATIC=84;
    public static final int STATIC_METHOD=85;
    public static final int STATIC_VARIABLE=86;
    public static final int STRING=87;
    public static final int STRING_LITERAL=88;
    public static final int STRING_OBJC=89;
    public static final int STRUCT=90;
    public static final int STRUCT_DEC=91;
    public static final int SUPERCLASS_NAME=92;
    public static final int SWITCH_STMT=93;
    public static final int SYNCHRONIZED=94;
    public static final int SYNTHETIZE=95;
    public static final int TEMPLATE_TYPE=96;
    public static final int THROW_STMT=97;
    public static final int TRY_STMT=98;
    public static final int TYPEDEF=99;
    public static final int TYPEDEF_NAME=100;
    public static final int TYPE_CAST=101;
    public static final int TYPE_PLAIN=102;
    public static final int UNION=103;
    public static final int UNION_DEC=104;
    public static final int UnicodeEscape=105;
    public static final int VALUE=106;
    public static final int VARIABLE=107;
    public static final int VARIABLE_ASSIGNMENT=108;
    public static final int VA_ARGS=109;
    public static final int WHILE_STMT=110;
    public static final int WHITESPACE=111;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:116:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==118||LA1_0==134||LA1_0==147||(LA1_0 >= 151 && LA1_0 <= 152)||LA1_0==157||LA1_0==173||(LA1_0 >= 178 && LA1_0 <= 179)||LA1_0==182||(LA1_0 >= 185 && LA1_0 <= 186)||(LA1_0 >= 188 && LA1_0 <= 190)||(LA1_0 >= 192 && LA1_0 <= 195)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code478);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 117:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:120:1: code_internal : ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal12=null;
        ObjcParser.implementation_wrapper_return implementation_wrapper2 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration3 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper4 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper5 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper6 =null;

        ObjcParser.define_declaration_return define_declaration7 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper8 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper9 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper10 =null;

        ObjcParser.comments_return comments11 =null;


        Object char_literal12_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:2: ( implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt2=11;
            switch ( input.LA(1) ) {
            case 151:
                {
                alt2=1;
                }
                break;
            case 147:
                {
                alt2=2;
                }
                break;
            case 157:
                {
                int LA2_3 = input.LA(2);

                if ( (LA2_3==ID) ) {
                    int LA2_24 = input.LA(3);

                    if ( (LA2_24==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_24==MULTI_COMMENT_LIT||LA2_24==SINGLE_COMMENT_LIT||LA2_24==122||LA2_24==126||LA2_24==135||LA2_24==149||LA2_24==153||LA2_24==155) ) {
                        alt2=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 24, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 3, input);

                    throw nvae;

                }
                }
                break;
            case 190:
                {
                int LA2_4 = input.LA(2);

                if ( (LA2_4==ID) ) {
                    int LA2_25 = input.LA(3);

                    if ( (LA2_25==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_25==ID||LA2_25==116||LA2_25==120||LA2_25==197) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 25, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_4==197) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 4, input);

                    throw nvae;

                }
                }
                break;
            case 193:
                {
                int LA2_5 = input.LA(2);

                if ( (LA2_5==ID) ) {
                    int LA2_27 = input.LA(3);

                    if ( (LA2_27==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_27==ID||LA2_27==116||LA2_27==197) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 27, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_5==197) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 5, input);

                    throw nvae;

                }
                }
                break;
            case 178:
                {
                int LA2_6 = input.LA(2);

                if ( (LA2_6==ID) ) {
                    int LA2_29 = input.LA(3);

                    if ( (LA2_29==134) ) {
                        alt2=2;
                    }
                    else if ( (LA2_29==ID||LA2_29==116||LA2_29==197) ) {
                        alt2=9;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 2, 29, input);

                        throw nvae;

                    }
                }
                else if ( (LA2_6==197) ) {
                    alt2=9;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 6, input);

                    throw nvae;

                }
                }
                break;
            case 152:
                {
                alt2=4;
                }
                break;
            case 179:
                {
                alt2=5;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt2=6;
                }
                break;
            case 192:
                {
                alt2=7;
                }
                break;
            case 189:
                {
                alt2=8;
                }
                break;
            case ID:
            case 118:
            case 173:
            case 182:
            case 185:
            case 186:
            case 188:
            case 194:
            case 195:
                {
                alt2=9;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt2=10;
                }
                break;
            case 134:
                {
                alt2=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;

            }

            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal500);
                    implementation_wrapper2=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal505);
                    forward_class_declaration3=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal511);
                    protocol_declaration_wrapper4=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal518);
                    interface_declaration_wrapper5=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal525);
                    extern_declaration_wrapper6=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal531);
                    define_declaration7=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal537);
                    typedef_declaration_wrapper8=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal543);
                    static_declaration_wrapper9=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal549);
                    variable_declaration_wrapper10=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal555);
                    comments11=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal12=(Token)match(input,134,FOLLOW_134_in_code_internal561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal12_tree = 
                    (Object)adaptor.create(char_literal12)
                    ;
                    adaptor.addChild(root_0, char_literal12_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:134:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment13 =null;

        ObjcParser.multi_comment_return multi_comment14 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:135:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments573);
                    single_comment13=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment13.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments579);
                    multi_comment14=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment14.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:139:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT15=null;

        Object SINGLE_COMMENT_LIT15_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT15=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT15);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 140:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:140:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:143:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT16=null;

        Object MULTI_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT16=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT16);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 144:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:144:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:151:2: extern_wrapper : extern -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern17 =null;


        RewriteRuleSubtreeStream stream_extern=new RewriteRuleSubtreeStream(adaptor,"rule extern");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:3: ( extern -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:5: extern
            {
            pushFollow(FOLLOW_extern_in_extern_wrapper644);
            extern17=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern.add(extern17.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 152:12: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:152:15: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:2: extern : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal18=null;
        Token string_literal19=null;
        Token char_literal20=null;
        Token set21=null;
        Token char_literal22=null;

        Object string_literal18_tree=null;
        Object string_literal19_tree=null;
        Object char_literal20_tree=null;
        Object set21_tree=null;
        Object char_literal22_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:9: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:155:11: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal18=(Token)match(input,179,FOLLOW_179_in_extern663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal18_tree = 
            (Object)adaptor.create(string_literal18)
            ;
            adaptor.addChild(root_0, string_literal18_tree);
            }

            string_literal19=(Token)match(input,114,FOLLOW_114_in_extern666); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            char_literal20=(Token)match(input,118,FOLLOW_118_in_extern669); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = 
            (Object)adaptor.create(char_literal20)
            ;
            adaptor.addChild(root_0, char_literal20_tree);
            }

            set21=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 118)||(input.LA(1) >= 120 && input.LA(1) <= 202) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set21)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal22=(Token)match(input,119,FOLLOW_119_in_extern676); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = 
            (Object)adaptor.create(char_literal22)
            ;
            adaptor.addChild(root_0, char_literal22_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation23 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper691);
            implementation23=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation23.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 159:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:159:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal24=null;
        Token string_literal28=null;
        ObjcParser.name_return name25 =null;

        ObjcParser.category_return category26 =null;

        ObjcParser.implementation_body_return implementation_body27 =null;


        Object string_literal24_tree=null;
        Object string_literal28_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal24=(Token)match(input,151,FOLLOW_151_in_implementation710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal24_tree = 
            (Object)adaptor.create(string_literal24)
            ;
            adaptor.addChild(root_0, string_literal24_tree);
            }

            pushFollow(FOLLOW_name_in_implementation713);
            name25=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name25.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==118) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==119) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation716);
                    category26=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category26.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==118||LA5_0==122||LA5_0==126||LA5_0==134||LA5_0==148||LA5_0==161||LA5_0==173||LA5_0==178||LA5_0==182||(LA5_0 >= 185 && LA5_0 <= 186)||(LA5_0 >= 188 && LA5_0 <= 190)||(LA5_0 >= 192 && LA5_0 <= 195)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:163:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation721);
            	    implementation_body27=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body27.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal28=(Token)match(input,149,FOLLOW_149_in_implementation726); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal28_tree = 
            (Object)adaptor.create(string_literal28)
            ;
            adaptor.addChild(root_0, string_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:167:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal37=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper29 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper30 =null;

        ObjcParser.directives_return directives31 =null;

        ObjcParser.define_declaration_return define_declaration32 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper33 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper34 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper35 =null;

        ObjcParser.comments_return comments36 =null;


        Object char_literal37_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 129 && LA6_1 <= 130)) && (synpred1_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==118) && (synpred1_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==116||LA6_1==120||LA6_1==166||LA6_1==173) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 122:
            case 126:
                {
                alt6=2;
                }
                break;
            case 148:
            case 161:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 192:
                {
                alt6=5;
                }
                break;
            case 189:
                {
                alt6=6;
                }
                break;
            case 118:
            case 173:
            case 178:
            case 182:
            case 185:
            case 186:
            case 188:
            case 190:
            case 193:
            case 194:
            case 195:
                {
                alt6=7;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=8;
                }
                break;
            case 134:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body745);
                    classical_method_call_wrapper29=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper29.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:169:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body751);
                    implementation_method_wrapper30=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper30.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body757);
                    directives31=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives31.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body763);
                    define_declaration32=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration32.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body768);
                    typedef_declaration_wrapper33=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper33.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body773);
                    static_declaration_wrapper34=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper34.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body779);
                    variable_declaration_wrapper35=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper35.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body785);
                    comments36=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments36.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal37=(Token)match(input,134,FOLLOW_134_in_implementation_body790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal37_tree = 
                    (Object)adaptor.create(char_literal37)
                    ;
                    adaptor.addChild(root_0, char_literal37_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:179:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize38 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives801);
            synthesize38=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize38.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 180:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:180:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal39=null;
        Token string_literal40=null;
        Token ID41=null;
        Token char_literal42=null;
        Token char_literal44=null;
        ObjcParser.name_return name43 =null;


        Object string_literal39_tree=null;
        Object string_literal40_tree=null;
        Object ID41_tree=null;
        Object char_literal42_tree=null;
        Object char_literal44_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==161) ) {
                alt7=1;
            }
            else if ( (LA7_0==148) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:5: '@synthesize'
                    {
                    string_literal39=(Token)match(input,161,FOLLOW_161_in_synthesize823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(string_literal39);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:21: '@dynamic'
                    {
                    string_literal40=(Token)match(input,148,FOLLOW_148_in_synthesize827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_148.add(string_literal40);


                    }
                    break;

            }


            ID41=(Token)match(input,ID,FOLLOW_ID_in_synthesize831); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID41);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==139) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:38: '=' name
                    {
                    char_literal42=(Token)match(input,139,FOLLOW_139_in_synthesize834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal42);


                    pushFollow(FOLLOW_name_in_synthesize836);
                    name43=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name43.getTree());

                    }
                    break;

            }


            char_literal44=(Token)match(input,134,FOLLOW_134_in_synthesize840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal44);


            // AST REWRITE
            // elements: name, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 184:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:184:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal45=null;
        ObjcParser.field_declaration_return field_declaration46 =null;


        Object string_literal45_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:4: 'static' field_declaration
            {
            string_literal45=(Token)match(input,189,FOLLOW_189_in_static_declaration_wrapper864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal45);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper866);
            field_declaration46=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration46.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 188:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:188:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:1: block_call_predicate : ( '^(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal47=null;
        Token char_literal48=null;
        Token char_literal49=null;

        Object string_literal47_tree=null;
        Object char_literal48_tree=null;
        Object char_literal49_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:3: ( '^(' | ( '^' '{' ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==170) ) {
                alt9=1;
            }
            else if ( (LA9_0==169) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:192:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal47=(Token)match(input,170,FOLLOW_170_in_block_call_predicate886); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal47_tree = 
                    (Object)adaptor.create(string_literal47)
                    ;
                    adaptor.addChild(root_0, string_literal47_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:193:6: '^' '{'
                    {
                    char_literal48=(Token)match(input,169,FOLLOW_169_in_block_call_predicate893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal48_tree = 
                    (Object)adaptor.create(char_literal48)
                    ;
                    adaptor.addChild(root_0, char_literal48_tree);
                    }

                    char_literal49=(Token)match(input,197,FOLLOW_197_in_block_call_predicate895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:196:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call50 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper911);
            block_call50=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call50.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 197:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:200:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal51=null;
        Token char_literal52=null;
        Token char_literal54=null;
        Token string_literal55=null;
        Token char_literal57=null;
        ObjcParser.block_internal_return block_internal53 =null;

        ObjcParser.block_params_return block_params56 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper58 =null;


        Object char_literal51_tree=null;
        Object char_literal52_tree=null;
        Object char_literal54_tree=null;
        Object string_literal55_tree=null;
        Object char_literal57_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==169) ) {
                alt12=1;
            }
            else if ( (LA12_0==170) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal51=(Token)match(input,169,FOLLOW_169_in_block_call933); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_169.add(char_literal51);


                    char_literal52=(Token)match(input,197,FOLLOW_197_in_block_call935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(char_literal52);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:14: ( block_internal )*
                    loop10:
                    do {
                        int alt10=2;
                        int LA10_0 = input.LA(1);

                        if ( (LA10_0==ID||LA10_0==MULTI_COMMENT_LIT||LA10_0==SINGLE_COMMENT_LIT||LA10_0==116||LA10_0==118||LA10_0==120||LA10_0==134||LA10_0==160||(LA10_0 >= 162 && LA10_0 <= 163)||LA10_0==166||LA10_0==171||(LA10_0 >= 173 && LA10_0 <= 174)||(LA10_0 >= 176 && LA10_0 <= 178)||(LA10_0 >= 180 && LA10_0 <= 183)||(LA10_0 >= 185 && LA10_0 <= 191)||(LA10_0 >= 193 && LA10_0 <= 197)) ) {
                            alt10=1;
                        }


                        switch (alt10) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call937);
                    	    block_internal53=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal53.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop10;
                        }
                    } while (true);


                    char_literal54=(Token)match(input,201,FOLLOW_201_in_block_call940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal54);


                    }


                    // AST REWRITE
                    // elements: 201, block_internal, 197
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 201:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_197.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_201.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:6: '^(' ( block_params )? ')'
                    {
                    string_literal55=(Token)match(input,170,FOLLOW_170_in_block_call961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal55_tree = 
                    (Object)adaptor.create(string_literal55)
                    ;
                    adaptor.addChild(root_0, string_literal55_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:11: ( block_params )?
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==ID||LA11_0==118||LA11_0==173||LA11_0==178||LA11_0==182||(LA11_0 >= 185 && LA11_0 <= 186)||LA11_0==188||LA11_0==190||(LA11_0 >= 193 && LA11_0 <= 195)) ) {
                        alt11=1;
                    }
                    switch (alt11) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:202:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call963);
                            block_params56=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params56.getTree());

                            }
                            break;

                    }


                    char_literal57=(Token)match(input,119,FOLLOW_119_in_block_call966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal57_tree = 
                    (Object)adaptor.create(char_literal57)
                    ;
                    adaptor.addChild(root_0, char_literal57_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call969);
                    block_multiline_wrapper58=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper58.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call59 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper983);
            synchronized_call59=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call59.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 206:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:206:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal60=null;
        Token char_literal61=null;
        Token char_literal63=null;
        ObjcParser.element_value_return element_value62 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper64 =null;


        Object string_literal60_tree=null;
        Object char_literal61_tree=null;
        Object char_literal63_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:210:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal60=(Token)match(input,160,FOLLOW_160_in_synchronized_call1006); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal60_tree = 
            (Object)adaptor.create(string_literal60)
            ;
            adaptor.addChild(root_0, string_literal60_tree);
            }

            char_literal61=(Token)match(input,118,FOLLOW_118_in_synchronized_call1008); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal61_tree = 
            (Object)adaptor.create(char_literal61)
            ;
            adaptor.addChild(root_0, char_literal61_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1010);
            element_value62=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value62.getTree());

            char_literal63=(Token)match(input,119,FOLLOW_119_in_synchronized_call1012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal63_tree = 
            (Object)adaptor.create(char_literal63)
            ;
            adaptor.addChild(root_0, char_literal63_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1014);
            block_multiline_wrapper64=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper64.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal66=null;
        ObjcParser.classical_param_return classical_param65 =null;

        ObjcParser.classical_param_return classical_param67 =null;


        Object char_literal66_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1030);
            classical_param65=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param65.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:22: ( ',' classical_param )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==125) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:23: ',' classical_param
            	    {
            	    char_literal66=(Token)match(input,125,FOLLOW_125_in_block_params1033); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal66);


            	    pushFollow(FOLLOW_classical_param_in_block_params1035);
            	    classical_param67=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param67.getTree());

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 214:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:214:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:218:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline68 =null;

        ObjcParser.block_singleline_return block_singleline69 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==197) ) {
                alt14=1;
            }
            else if ( (LA14_0==ID||LA14_0==MULTI_COMMENT_LIT||LA14_0==SINGLE_COMMENT_LIT||LA14_0==116||LA14_0==118||LA14_0==120||LA14_0==134||LA14_0==160||LA14_0==166||LA14_0==171||LA14_0==174||(LA14_0 >= 176 && LA14_0 <= 177)||(LA14_0 >= 180 && LA14_0 <= 181)||LA14_0==183||LA14_0==187||LA14_0==191||LA14_0==196) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;

            }
            switch (alt14) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1064);
                    block_multiline68=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline68.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 219:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:219:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1076);
                    block_singleline69=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline69.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 220:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:1: block_multiline : '{' ( block_internal_macro )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal70=null;
        Token char_literal72=null;
        ObjcParser.block_internal_macro_return block_internal_macro71 =null;


        Object char_literal70_tree=null;
        Object char_literal72_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:224:2: ( '{' ( block_internal_macro )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:225:3: '{' ( block_internal_macro )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal70=(Token)match(input,197,FOLLOW_197_in_block_multiline1098); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal70_tree = 
            (Object)adaptor.create(char_literal70)
            ;
            adaptor.addChild(root_0, char_literal70_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:4: ( block_internal_macro )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==ID||LA15_0==MULTI_COMMENT_LIT||LA15_0==SINGLE_COMMENT_LIT||LA15_0==116||LA15_0==118||LA15_0==120||LA15_0==134||LA15_0==160||(LA15_0 >= 162 && LA15_0 <= 163)||(LA15_0 >= 166 && LA15_0 <= 167)||LA15_0==171||(LA15_0 >= 173 && LA15_0 <= 174)||(LA15_0 >= 176 && LA15_0 <= 178)||(LA15_0 >= 180 && LA15_0 <= 183)||(LA15_0 >= 185 && LA15_0 <= 191)||(LA15_0 >= 193 && LA15_0 <= 197)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:4: block_internal_macro
            	    {
            	    pushFollow(FOLLOW_block_internal_macro_in_block_multiline1103);
            	    block_internal_macro71=block_internal_macro();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal_macro71.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            char_literal72=(Token)match(input,201,FOLLOW_201_in_block_multiline1110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal72_tree = 
            (Object)adaptor.create(char_literal72)
            ;
            adaptor.addChild(root_0, char_literal72_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline73 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1122);
            block_multiline73=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline73.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 231:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline74 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1143);
            block_singleline74=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline74.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:238:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal84=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper75 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper76 =null;

        ObjcParser.do_stmt_return do_stmt77 =null;

        ObjcParser.if_stmt_return if_stmt78 =null;

        ObjcParser.else_stmt_return else_stmt79 =null;

        ObjcParser.switch_stmt_return switch_stmt80 =null;

        ObjcParser.return_stmt_return return_stmt81 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper82 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper83 =null;

        ObjcParser.break_stmt_return break_stmt85 =null;

        ObjcParser.continue_stmt_return continue_stmt86 =null;

        ObjcParser.goto_stmt_return goto_stmt87 =null;

        ObjcParser.method_msg_return method_msg88 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper89 =null;

        ObjcParser.comments_return comments90 =null;


        Object char_literal84_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | method_msg | variable_assignment_wrapper | comments )
            int alt16=16;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA16_1 = input.LA(2);

                if ( ((LA16_1 >= 129 && LA16_1 <= 130)) ) {
                    int LA16_20 = input.LA(3);

                    if ( (LA16_20==ID) ) {
                        int LA16_24 = input.LA(4);

                        if ( (LA16_24==118) && (synpred2_Objc())) {
                            alt16=1;
                        }
                        else if ( ((LA16_24 >= 129 && LA16_24 <= 130)) ) {
                            int LA16_26 = input.LA(5);

                            if ( (synpred2_Objc()) ) {
                                alt16=1;
                            }
                            else if ( (true) ) {
                                alt16=15;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 16, 26, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA16_24==117||LA16_24==121||LA16_24==124||LA16_24==128||LA16_24==132||LA16_24==137||LA16_24==139||LA16_24==144||LA16_24==199) ) {
                            alt16=15;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 16, 24, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 16, 20, input);

                        throw nvae;

                    }
                }
                else if ( (LA16_1==118) && (synpred2_Objc())) {
                    alt16=1;
                }
                else if ( (LA16_1==117||LA16_1==121||LA16_1==124||LA16_1==128||LA16_1==132||LA16_1==137||LA16_1==139||LA16_1==144||LA16_1==166||LA16_1==199) ) {
                    alt16=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
                }
                break;
            case 160:
                {
                alt16=2;
                }
                break;
            case 176:
                {
                alt16=3;
                }
                break;
            case 183:
                {
                alt16=4;
                }
                break;
            case 177:
                {
                alt16=5;
                }
                break;
            case 191:
                {
                alt16=6;
                }
                break;
            case 187:
                {
                alt16=7;
                }
                break;
            case 180:
                {
                alt16=8;
                }
                break;
            case 196:
                {
                alt16=9;
                }
                break;
            case 134:
                {
                alt16=10;
                }
                break;
            case 171:
                {
                alt16=11;
                }
                break;
            case 174:
                {
                alt16=12;
                }
                break;
            case 181:
                {
                alt16=13;
                }
                break;
            case 166:
                {
                alt16=14;
                }
                break;
            case 116:
            case 118:
            case 120:
                {
                alt16=15;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt16=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }

            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1170);
                    classical_method_call_wrapper75=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper75.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1175);
                    synchronized_call_wrapper76=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper76.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1180);
                    do_stmt77=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt77.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:242:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1185);
                    if_stmt78=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt78.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:243:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1190);
                    else_stmt79=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt79.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1195);
                    switch_stmt80=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt80.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1200);
                    return_stmt81=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt81.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1205);
                    for_stmt_wrapper82=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper82.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1210);
                    while_stmt_wrapper83=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper83.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:248:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal84=(Token)match(input,134,FOLLOW_134_in_block_singleline1215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal84_tree = 
                    (Object)adaptor.create(char_literal84)
                    ;
                    adaptor.addChild(root_0, char_literal84_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:249:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1221);
                    break_stmt85=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt85.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:250:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1227);
                    continue_stmt86=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt86.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1232);
                    goto_stmt87=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt87.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:4: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1237);
                    method_msg88=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg88.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:253:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1243);
                    variable_assignment_wrapper89=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper89.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:254:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1249);
                    comments90=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments90.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_macro_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_macro"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:257:1: block_internal_macro : ( '\\\\' | block_internal );
    public final ObjcParser.block_internal_macro_return block_internal_macro() throws RecognitionException {
        ObjcParser.block_internal_macro_return retval = new ObjcParser.block_internal_macro_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal91=null;
        ObjcParser.block_internal_return block_internal92 =null;


        Object char_literal91_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:3: ( '\\\\' | block_internal )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==167) ) {
                alt17=1;
            }
            else if ( (LA17_0==ID||LA17_0==MULTI_COMMENT_LIT||LA17_0==SINGLE_COMMENT_LIT||LA17_0==116||LA17_0==118||LA17_0==120||LA17_0==134||LA17_0==160||(LA17_0 >= 162 && LA17_0 <= 163)||LA17_0==166||LA17_0==171||(LA17_0 >= 173 && LA17_0 <= 174)||(LA17_0 >= 176 && LA17_0 <= 178)||(LA17_0 >= 180 && LA17_0 <= 183)||(LA17_0 >= 185 && LA17_0 <= 191)||(LA17_0 >= 193 && LA17_0 <= 197)) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:258:5: '\\\\'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal91=(Token)match(input,167,FOLLOW_167_in_block_internal_macro1261); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal91_tree = 
                    (Object)adaptor.create(char_literal91)
                    ;
                    adaptor.addChild(root_0, char_literal91_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_block_internal_macro1267);
                    block_internal92=block_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal92.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_macro"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal109=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper93 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper94 =null;

        ObjcParser.increment_decrement_return increment_decrement95 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper96 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper97 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper98 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper99 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper100 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper101 =null;

        ObjcParser.do_stmt_return do_stmt102 =null;

        ObjcParser.if_stmt_return if_stmt103 =null;

        ObjcParser.else_stmt_return else_stmt104 =null;

        ObjcParser.switch_stmt_return switch_stmt105 =null;

        ObjcParser.return_stmt_return return_stmt106 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper107 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper108 =null;

        ObjcParser.break_stmt_return break_stmt110 =null;

        ObjcParser.continue_stmt_return continue_stmt111 =null;

        ObjcParser.goto_stmt_return goto_stmt112 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper113 =null;

        ObjcParser.method_msg_return method_msg114 =null;

        ObjcParser.comments_return comments115 =null;


        Object char_literal109_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments )
            int alt18=22;
            alt18 = dfa18.predict(input);
            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1287);
                    classical_method_call_wrapper93=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper93.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1300);
                    object_access_simple_wrapper94=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper94.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1302);
                    increment_decrement95=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement95.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1316);
                    variable_assignment_wrapper96=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper96.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1322);
                    variable_declaration_wrapper97=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper97.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1328);
                    synchronized_call_wrapper98=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper98.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1334);
                    try_stmt_wrapper99=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper99.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1339);
                    throw_stmt_wrapper100=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper100.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1344);
                    static_declaration_wrapper101=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper101.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1349);
                    do_stmt102=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt102.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1354);
                    if_stmt103=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt103.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1359);
                    else_stmt104=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt104.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1364);
                    switch_stmt105=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt105.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1369);
                    return_stmt106=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt106.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1374);
                    for_stmt_wrapper107=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper107.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:277:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1379);
                    while_stmt_wrapper108=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper108.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal109=(Token)match(input,134,FOLLOW_134_in_block_internal1384); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal109_tree = 
                    (Object)adaptor.create(char_literal109)
                    ;
                    adaptor.addChild(root_0, char_literal109_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1389);
                    break_stmt110=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt110.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1394);
                    continue_stmt111=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt111.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:281:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1399);
                    goto_stmt112=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt112.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:282:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1404);
                    block_multiline_wrapper113=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper113.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1410);
                    method_msg114=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg114.getTree());

                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1416);
                    comments115=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments115.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal116=null;
        Token char_literal117=null;
        Token ID118=null;
        Token char_literal119=null;

        Object string_literal116_tree=null;
        Object char_literal117_tree=null;
        Object ID118_tree=null;
        Object char_literal119_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:5: 'goto' ':' ID ';'
            {
            string_literal116=(Token)match(input,181,FOLLOW_181_in_goto_stmt1428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_181.add(string_literal116);


            char_literal117=(Token)match(input,133,FOLLOW_133_in_goto_stmt1430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal117);


            ID118=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID118);


            char_literal119=(Token)match(input,134,FOLLOW_134_in_goto_stmt1434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal119);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt120 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1457);
            while_stmt120=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt120.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal121=null;
        Token char_literal122=null;
        Token char_literal124=null;
        ObjcParser.element_value_return element_value123 =null;

        ObjcParser.block_return block125 =null;


        Object string_literal121_tree=null;
        Object char_literal122_tree=null;
        Object char_literal124_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal121=(Token)match(input,196,FOLLOW_196_in_while_stmt1480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal121_tree = 
            (Object)adaptor.create(string_literal121)
            ;
            adaptor.addChild(root_0, string_literal121_tree);
            }

            char_literal122=(Token)match(input,118,FOLLOW_118_in_while_stmt1482); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal122_tree = 
            (Object)adaptor.create(char_literal122)
            ;
            adaptor.addChild(root_0, char_literal122_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1484);
            element_value123=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value123.getTree());

            char_literal124=(Token)match(input,119,FOLLOW_119_in_while_stmt1486); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal124_tree = 
            (Object)adaptor.create(char_literal124)
            ;
            adaptor.addChild(root_0, char_literal124_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1488);
            block125=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block125.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal126=null;
        ObjcParser.element_value_return element_value127 =null;


        Object string_literal126_tree=null;
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:5: 'in' element_value
            {
            string_literal126=(Token)match(input,184,FOLLOW_184_in_for_in_stmt1503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal126);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1505);
            element_value127=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value127.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 300:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal128=null;
        Token char_literal130=null;
        ObjcParser.element_value_return element_value129 =null;

        ObjcParser.element_value_return element_value131 =null;


        Object char_literal128_tree=null;
        Object char_literal130_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal128=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1528); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal128_tree = 
            (Object)adaptor.create(char_literal128)
            ;
            adaptor.addChild(root_0, char_literal128_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:9: ( element_value )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==BOOL_LITERAL||LA19_0==CHAR_LITERAL||LA19_0==ID||LA19_0==NUMBER_LITERAL||(LA19_0 >= STRING_LITERAL && LA19_0 <= STRING_OBJC)||LA19_0==112||LA19_0==116||LA19_0==118||LA19_0==120||LA19_0==123||(LA19_0 >= 126 && LA19_0 <= 127)||LA19_0==159||LA19_0==166||(LA19_0 >= 169 && LA19_0 <= 170)||LA19_0==202) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1530);
                    element_value129=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value129.getTree());

                    }
                    break;

            }


            char_literal130=(Token)match(input,134,FOLLOW_134_in_for_classic_stmt1533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal130_tree = 
            (Object)adaptor.create(char_literal130)
            ;
            adaptor.addChild(root_0, char_literal130_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:28: ( element_value )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==BOOL_LITERAL||LA20_0==CHAR_LITERAL||LA20_0==ID||LA20_0==NUMBER_LITERAL||(LA20_0 >= STRING_LITERAL && LA20_0 <= STRING_OBJC)||LA20_0==112||LA20_0==116||LA20_0==118||LA20_0==120||LA20_0==123||(LA20_0 >= 126 && LA20_0 <= 127)||LA20_0==159||LA20_0==166||(LA20_0 >= 169 && LA20_0 <= 170)||LA20_0==202) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1535);
                    element_value131=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value131.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:307:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal134=null;
        Token char_literal138=null;
        Token char_literal142=null;
        Token char_literal149=null;
        ObjcParser.name_return name132 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt133 =null;

        ObjcParser.block_return block135 =null;

        ObjcParser.name_return name136 =null;

        ObjcParser.for_in_stmt_return for_in_stmt137 =null;

        ObjcParser.block_return block139 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper140 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt141 =null;

        ObjcParser.block_return block143 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple144 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper145 =null;

        ObjcParser.element_value_return element_value146 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt147 =null;

        ObjcParser.for_in_stmt_return for_in_stmt148 =null;

        ObjcParser.block_return block150 =null;


        Object char_literal134_tree=null;
        Object char_literal138_tree=null;
        Object char_literal142_tree=null;
        Object char_literal149_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt22=4;
            alt22 = dfa22.predict(input);
            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1558);
                    name132=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name132.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1560);
                    for_classic_stmt133=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt133.getTree());

                    char_literal134=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal134_tree = 
                    (Object)adaptor.create(char_literal134)
                    ;
                    adaptor.addChild(root_0, char_literal134_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1564);
                    block135=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block135.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1577);
                    name136=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name136.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1579);
                    for_in_stmt137=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt137.getTree());

                    char_literal138=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal138_tree = 
                    (Object)adaptor.create(char_literal138)
                    ;
                    adaptor.addChild(root_0, char_literal138_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1583);
                    block139=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block139.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1597);
                    variable_assignment_wrapper140=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper140.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1599);
                    for_classic_stmt141=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt141.getTree());

                    char_literal142=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal142_tree = 
                    (Object)adaptor.create(char_literal142)
                    ;
                    adaptor.addChild(root_0, char_literal142_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1603);
                    block143=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block143.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1609);
                    field_declaration_simple144=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple144.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==117||LA21_0==121||LA21_0==124||LA21_0==128||LA21_0==132||LA21_0==137||LA21_0==139||LA21_0==144||LA21_0==199) ) {
                        alt21=1;
                    }
                    else if ( (LA21_0==184) ) {
                        alt21=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 0, input);

                        throw nvae;

                    }
                    switch (alt21) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1613);
                            op_assign_wrapper145=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper145.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1615);
                            element_value146=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value146.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1617);
                            for_classic_stmt147=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt147.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1622);
                            for_in_stmt148=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt148.getTree());

                            }
                            break;

                    }


                    char_literal149=(Token)match(input,119,FOLLOW_119_in_for_stmt_body1625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal149_tree = 
                    (Object)adaptor.create(char_literal149)
                    ;
                    adaptor.addChild(root_0, char_literal149_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1627);
                    block150=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block150.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:314:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal151=null;
        Token char_literal152=null;
        ObjcParser.for_stmt_body_return for_stmt_body153 =null;


        Object string_literal151_tree=null;
        Object char_literal152_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal151=(Token)match(input,180,FOLLOW_180_in_for_stmt1640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal151_tree = 
            (Object)adaptor.create(string_literal151)
            ;
            adaptor.addChild(root_0, string_literal151_tree);
            }

            char_literal152=(Token)match(input,118,FOLLOW_118_in_for_stmt1642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal152_tree = 
            (Object)adaptor.create(char_literal152)
            ;
            adaptor.addChild(root_0, char_literal152_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1644);
            for_stmt_body153=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body153.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:318:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt154 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1657);
            for_stmt154=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt154.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 319:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:322:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal155=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon156 =null;


        Object string_literal155_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:5: 'return' element_value_or_semicolon
            {
            string_literal155=(Token)match(input,187,FOLLOW_187_in_return_stmt1680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal155);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1682);
            element_value_or_semicolon156=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon156.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 323:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:326:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal157=null;
        Token char_literal158=null;
        Token char_literal160=null;
        Token char_literal161=null;
        Token char_literal163=null;
        ObjcParser.element_value_return element_value159 =null;

        ObjcParser.switch_body_return switch_body162 =null;


        Object string_literal157_tree=null;
        Object char_literal158_tree=null;
        Object char_literal160_tree=null;
        Object char_literal161_tree=null;
        Object char_literal163_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal157=(Token)match(input,191,FOLLOW_191_in_switch_stmt1705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal157);


            char_literal158=(Token)match(input,118,FOLLOW_118_in_switch_stmt1707); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal158);


            pushFollow(FOLLOW_element_value_in_switch_stmt1709);
            element_value159=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value159.getTree());

            char_literal160=(Token)match(input,119,FOLLOW_119_in_switch_stmt1711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal160);


            char_literal161=(Token)match(input,197,FOLLOW_197_in_switch_stmt1713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(char_literal161);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:41: ( switch_body )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==ID||LA23_0==MULTI_COMMENT_LIT||LA23_0==SINGLE_COMMENT_LIT||LA23_0==116||LA23_0==118||LA23_0==120||LA23_0==134||LA23_0==160||LA23_0==166||(LA23_0 >= 171 && LA23_0 <= 172)||(LA23_0 >= 174 && LA23_0 <= 177)||(LA23_0 >= 180 && LA23_0 <= 181)||LA23_0==183||LA23_0==187||LA23_0==191||(LA23_0 >= 196 && LA23_0 <= 197)) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1716);
            	    switch_body162=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body162.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);


            }


            char_literal163=(Token)match(input,201,FOLLOW_201_in_switch_stmt1720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_201.add(char_literal163);


            // AST REWRITE
            // elements: switch_body, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 327:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt164 =null;

        ObjcParser.default_stmt_return default_stmt165 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper166 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper167 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt24=4;
            switch ( input.LA(1) ) {
            case 172:
                {
                alt24=1;
                }
                break;
            case 175:
                {
                alt24=2;
                }
                break;
            case 197:
                {
                alt24=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 116:
            case 118:
            case 120:
            case 134:
            case 160:
            case 166:
            case 171:
            case 174:
            case 176:
            case 177:
            case 180:
            case 181:
            case 183:
            case 187:
            case 191:
            case 196:
                {
                alt24=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;

            }

            switch (alt24) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1746);
                    case_stmt164=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt164.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1752);
                    default_stmt165=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt165.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1758);
                    block_multiline_wrapper166=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper166.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1764);
                    block_singleline_wrapper167=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper167.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:337:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal168=null;
        Token char_literal170=null;
        ObjcParser.name_number_return name_number169 =null;


        Object string_literal168_tree=null;
        Object char_literal170_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:5: 'case' name_number ':'
            {
            string_literal168=(Token)match(input,172,FOLLOW_172_in_case_stmt1779); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_172.add(string_literal168);


            pushFollow(FOLLOW_name_number_in_case_stmt1781);
            name_number169=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number169.getTree());

            char_literal170=(Token)match(input,133,FOLLOW_133_in_case_stmt1783); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal170);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 338:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:338:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:341:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal171=null;
        Token char_literal172=null;

        Object string_literal171_tree=null;
        Object char_literal172_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:5: 'default' ':'
            {
            string_literal171=(Token)match(input,175,FOLLOW_175_in_default_stmt1806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(string_literal171);


            char_literal172=(Token)match(input,133,FOLLOW_133_in_default_stmt1808); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal172);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 342:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:342:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:345:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal173=null;
        Token string_literal175=null;
        Token char_literal176=null;
        Token char_literal178=null;
        ObjcParser.block_return block174 =null;

        ObjcParser.element_value_return element_value177 =null;


        Object string_literal173_tree=null;
        Object string_literal175_tree=null;
        Object char_literal176_tree=null;
        Object char_literal178_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal173=(Token)match(input,176,FOLLOW_176_in_do_stmt1829); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_176.add(string_literal173);


            pushFollow(FOLLOW_block_in_do_stmt1831);
            block174=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block174.getTree());

            string_literal175=(Token)match(input,196,FOLLOW_196_in_do_stmt1833); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal175);


            char_literal176=(Token)match(input,118,FOLLOW_118_in_do_stmt1835); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal176);


            pushFollow(FOLLOW_element_value_in_do_stmt1837);
            element_value177=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value177.getTree());

            char_literal178=(Token)match(input,119,FOLLOW_119_in_do_stmt1839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal178);


            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 346:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:346:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:349:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal179=null;
        Token char_literal180=null;
        Token char_literal182=null;
        ObjcParser.element_value_return element_value181 =null;

        ObjcParser.block_return block183 =null;


        Object string_literal179_tree=null;
        Object char_literal180_tree=null;
        Object char_literal182_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:5: 'if' '(' element_value ')' block
            {
            string_literal179=(Token)match(input,183,FOLLOW_183_in_if_stmt1864); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal179);


            char_literal180=(Token)match(input,118,FOLLOW_118_in_if_stmt1866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal180);


            pushFollow(FOLLOW_element_value_in_if_stmt1868);
            element_value181=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value181.getTree());

            char_literal182=(Token)match(input,119,FOLLOW_119_in_if_stmt1870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal182);


            pushFollow(FOLLOW_block_in_if_stmt1872);
            block183=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block183.getTree());

            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 350:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:350:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal184=null;
        ObjcParser.block_return block185 =null;


        Object string_literal184_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:5: 'else' block
            {
            string_literal184=(Token)match(input,177,FOLLOW_177_in_else_stmt1895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_177.add(string_literal184);


            pushFollow(FOLLOW_block_in_else_stmt1897);
            block185=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block185.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 354:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal186=null;
        ObjcParser.block_return block187 =null;

        ObjcParser.catch_stmt_return catch_stmt188 =null;

        ObjcParser.finally_stmt_return finally_stmt189 =null;


        Object string_literal186_tree=null;
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal186=(Token)match(input,163,FOLLOW_163_in_try_stmt_wrapper1919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_163.add(string_literal186);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper1922);
            block187=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block187.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:19: ( catch_stmt )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==146) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper1925);
            	    catch_stmt188=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt188.getTree());

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:31: ( finally_stmt )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==150) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper1928);
                    finally_stmt189=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt189.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: finally_stmt, catch_stmt, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 358:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:361:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal190=null;
        Token char_literal191=null;
        Token char_literal193=null;
        Token char_literal195=null;
        ObjcParser.name_return name192 =null;

        ObjcParser.name_return name194 =null;

        ObjcParser.block_return block196 =null;


        Object string_literal190_tree=null;
        Object char_literal191_tree=null;
        Object char_literal193_tree=null;
        Object char_literal195_tree=null;
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:4: '@catch' '(' name '*' name ')' block
            {
            string_literal190=(Token)match(input,146,FOLLOW_146_in_catch_stmt1954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_146.add(string_literal190);


            char_literal191=(Token)match(input,118,FOLLOW_118_in_catch_stmt1957); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal191);


            pushFollow(FOLLOW_name_in_catch_stmt1960);
            name192=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name192.getTree());

            char_literal193=(Token)match(input,120,FOLLOW_120_in_catch_stmt1963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal193);


            pushFollow(FOLLOW_name_in_catch_stmt1965);
            name194=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name194.getTree());

            char_literal195=(Token)match(input,119,FOLLOW_119_in_catch_stmt1968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal195);


            pushFollow(FOLLOW_block_in_catch_stmt1971);
            block196=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block196.getTree());

            // AST REWRITE
            // elements: block, name, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 362:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:365:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal197=null;
        ObjcParser.block_return block198 =null;


        Object string_literal197_tree=null;
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:4: '@finally' block
            {
            string_literal197=(Token)match(input,150,FOLLOW_150_in_finally_stmt1995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_150.add(string_literal197);


            pushFollow(FOLLOW_block_in_finally_stmt1998);
            block198=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block198.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 366:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:369:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt199 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper2017);
            throw_stmt199=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt199.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 370:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:373:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal200=null;
        Token char_literal202=null;
        ObjcParser.element_value_return element_value201 =null;


        Object string_literal200_tree=null;
        Object char_literal202_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal200=(Token)match(input,162,FOLLOW_162_in_throw_stmt2036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal200_tree = 
            (Object)adaptor.create(string_literal200)
            ;
            adaptor.addChild(root_0, string_literal200_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2038);
            element_value201=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value201.getTree());

            char_literal202=(Token)match(input,134,FOLLOW_134_in_throw_stmt2040); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal202_tree = 
            (Object)adaptor.create(char_literal202)
            ;
            adaptor.addChild(root_0, char_literal202_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:377:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID203=null;

        Object ID203_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:4: ID
            {
            ID203=(Token)match(input,ID,FOLLOW_ID_in_name2051); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID203);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 378:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:381:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID204=null;
        Token char_literal205=null;
        Token NUMBER_LITERAL206=null;

        Object ID204_tree=null;
        Object char_literal205_tree=null;
        Object NUMBER_LITERAL206_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:3: ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==ID) ) {
                alt28=1;
            }
            else if ( (LA28_0==NUMBER_LITERAL||LA28_0==126) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;

            }
            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:5: ID
                    {
                    ID204=(Token)match(input,ID,FOLLOW_ID_in_name_number2071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID204);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 382:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: ( '-' )? NUMBER_LITERAL
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: ( '-' )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==126) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: '-'
                            {
                            char_literal205=(Token)match(input,126,FOLLOW_126_in_name_number2085); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal205);


                            }
                            break;

                    }


                    NUMBER_LITERAL206=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number2088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL206);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL, 126
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 383:25: -> ^( NUMBER ( '-' )? NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:28: ^( NUMBER ( '-' )? NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:37: ( '-' )?
                        if ( stream_126.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_126.nextNode()
                            );

                        }
                        stream_126.reset();

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper207 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2114);
            field_declaration_wrapper207=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper207.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment208 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2137);
            variable_assignment208=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment208.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper209 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper210 =null;

        ObjcParser.element_value_return element_value211 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2160);
            object_access_wrapper209=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper209.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2162);
            op_assign_wrapper210=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper210.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2164);
            element_value211=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value211.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper212 =null;

        ObjcParser.increment_decrement_return increment_decrement213 =null;

        ObjcParser.increment_decrement_return increment_decrement214 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper215 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==118) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==116) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==ID) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==120) && (synpred9_Objc())) {
                alt29=1;
            }
            else if ( (LA29_0==123||LA29_0==127) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;

            }
            switch (alt29) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2185);
                    object_access_wrapper212=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper212.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2187);
                    increment_decrement213=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement213.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:400:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2193);
                    increment_decrement214=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement214.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2195);
                    object_access_wrapper215=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper215.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper216 =null;

        ObjcParser.method_implementation_common_return method_implementation_common217 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2210);
            method_modifier_wrapper216=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper216.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2212);
            method_implementation_common217=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common217.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal218=null;
        Token char_literal220=null;
        ObjcParser.type_declaration_return type_declaration219 =null;

        ObjcParser.method_name_return method_name221 =null;

        ObjcParser.method_params_return method_params222 =null;


        Object char_literal218_tree=null;
        Object char_literal220_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:6: '(' type_declaration ')' method_name
            {
            char_literal218=(Token)match(input,118,FOLLOW_118_in_method_implementation_common2225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal218_tree = 
            (Object)adaptor.create(char_literal218)
            ;
            adaptor.addChild(root_0, char_literal218_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2227);
            type_declaration219=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration219.getTree());

            char_literal220=(Token)match(input,119,FOLLOW_119_in_method_implementation_common2229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal220_tree = 
            (Object)adaptor.create(char_literal220)
            ;
            adaptor.addChild(root_0, char_literal220_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2231);
            method_name221=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name221.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:44: ( method_params )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==ID||LA30_0==133) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2234);
                    method_params222=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params222.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:409:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation223 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper224 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2246);
            method_implementation223=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation223.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2250);
            block_multiline_wrapper224=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper224.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call225 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2273);
            classical_method_call225=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call225.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 415:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:418:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal229=null;
        ObjcParser.name_return name226 =null;

        ObjcParser.access_wrapper_return access_wrapper227 =null;

        ObjcParser.name_return name228 =null;


        Object char_literal229_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2294);
            name226=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name226.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:10: ( access_wrapper name )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( ((LA31_0 >= 129 && LA31_0 <= 130)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2297);
            	    access_wrapper227=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper227.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2299);
            	    name228=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name228.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            char_literal229=(Token)match(input,118,FOLLOW_118_in_clasical_method_call_predicate2303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal229_tree = 
            (Object)adaptor.create(char_literal229)
            ;
            adaptor.addChild(root_0, char_literal229_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:422:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal233=null;
        Token char_literal235=null;
        ObjcParser.name_return name230 =null;

        ObjcParser.access_wrapper_return access_wrapper231 =null;

        ObjcParser.name_return name232 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push234 =null;


        Object char_literal233_tree=null;
        Object char_literal235_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2318);
            name230=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name230.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:10: ( access_wrapper name )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( ((LA32_0 >= 129 && LA32_0 <= 130)) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2321);
            	    access_wrapper231=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper231.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2323);
            	    name232=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name232.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal233=(Token)match(input,118,FOLLOW_118_in_classical_method_call2328); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal233_tree = 
            (Object)adaptor.create(char_literal233)
            ;
            adaptor.addChild(root_0, char_literal233_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:38: ( classical_method_params_push )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==BOOL_LITERAL||LA33_0==CHAR_LITERAL||LA33_0==ID||LA33_0==NUMBER_LITERAL||(LA33_0 >= STRING_LITERAL && LA33_0 <= STRING_OBJC)||LA33_0==112||LA33_0==116||LA33_0==118||LA33_0==120||LA33_0==123||(LA33_0 >= 126 && LA33_0 <= 127)||LA33_0==159||LA33_0==166||(LA33_0 >= 169 && LA33_0 <= 170)||LA33_0==202) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2330);
                    classical_method_params_push234=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push234.getTree());

                    }
                    break;

            }


            char_literal235=(Token)match(input,119,FOLLOW_119_in_classical_method_call2333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal235_tree = 
            (Object)adaptor.create(char_literal235)
            ;
            adaptor.addChild(root_0, char_literal235_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:426:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal237=null;
        ObjcParser.method_param_push_return method_param_push236 =null;

        ObjcParser.method_param_push_return method_param_push238 =null;


        Object char_literal237_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2348);
            method_param_push236=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push236.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:24: ( ',' method_param_push )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==125) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:25: ',' method_param_push
            	    {
            	    char_literal237=(Token)match(input,125,FOLLOW_125_in_classical_method_params_push2351); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal237);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2353);
            	    method_param_push238=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push238.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 427:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:430:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal241=null;
        Token char_literal242=null;
        ObjcParser.method_param_push_return method_param_push239 =null;

        ObjcParser.prefix_return prefix240 =null;

        ObjcParser.method_param_push_return method_param_push243 =null;


        Object char_literal241_tree=null;
        Object char_literal242_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2377);
            method_param_push239=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push239.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ID||LA36_0==125) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:23: ( ( prefix ':' ) | ',' )
            	    int alt35=2;
            	    int LA35_0 = input.LA(1);

            	    if ( (LA35_0==ID) ) {
            	        alt35=1;
            	    }
            	    else if ( (LA35_0==125) ) {
            	        alt35=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 35, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt35) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2382);
            	            prefix240=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix240.getTree());

            	            char_literal241=(Token)match(input,133,FOLLOW_133_in_method_params_push2384); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_133.add(char_literal241);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:39: ','
            	            {
            	            char_literal242=(Token)match(input,125,FOLLOW_125_in_method_params_push2389); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_125.add(char_literal242);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2392);
            	    method_param_push243=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push243.getTree());

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:1: method_param_push : element_value ( multi_comment )? -> ^( METHOD_PARAM element_value ( multi_comment )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.element_value_return element_value244 =null;

        ObjcParser.multi_comment_return multi_comment245 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_multi_comment=new RewriteRuleSubtreeStream(adaptor,"rule multi_comment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:3: ( element_value ( multi_comment )? -> ^( METHOD_PARAM element_value ( multi_comment )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:5: element_value ( multi_comment )?
            {
            pushFollow(FOLLOW_element_value_in_method_param_push2413);
            element_value244=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value244.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:19: ( multi_comment )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==MULTI_COMMENT_LIT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:19: multi_comment
                    {
                    pushFollow(FOLLOW_multi_comment_in_method_param_push2415);
                    multi_comment245=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_multi_comment.add(multi_comment245.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: element_value, multi_comment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 434:34: -> ^( METHOD_PARAM element_value ( multi_comment )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:37: ^( METHOD_PARAM element_value ( multi_comment )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:434:66: ( multi_comment )?
                if ( stream_multi_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_multi_comment.nextTree());

                }
                stream_multi_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal246=null;
        Token char_literal249=null;
        Token char_literal251=null;
        ObjcParser.element_value_return element_value247 =null;

        ObjcParser.method_name_return method_name248 =null;

        ObjcParser.method_params_push_return method_params_push250 =null;


        Object char_literal246_tree=null;
        Object char_literal249_tree=null;
        Object char_literal251_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal246=(Token)match(input,166,FOLLOW_166_in_method_msg2441); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_166.add(char_literal246);


            pushFollow(FOLLOW_element_value_in_method_msg2443);
            element_value247=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value247.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2445);
            method_name248=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name248.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:35: ( ':' method_params_push )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==133) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:36: ':' method_params_push
                    {
                    char_literal249=(Token)match(input,133,FOLLOW_133_in_method_msg2448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal249);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2450);
                    method_params_push250=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push250.getTree());

                    }
                    break;

            }


            char_literal251=(Token)match(input,168,FOLLOW_168_in_method_msg2454); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_168.add(char_literal251);


            // AST REWRITE
            // elements: method_params_push, element_value, method_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 438:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:438:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:441:1: questionmark_if_stmt : ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal252=null;
        Token char_literal254=null;
        ObjcParser.element_value_return element_value253 =null;

        ObjcParser.element_value_return element_value255 =null;


        Object char_literal252_tree=null;
        Object char_literal254_tree=null;
        RewriteRuleTokenStream stream_145=new RewriteRuleTokenStream(adaptor,"token 145");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:3: ( ( '?' element_value ':' element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:5: ( '?' element_value ':' element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:5: ( '?' element_value ':' element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:6: '?' element_value ':' element_value
            {
            char_literal252=(Token)match(input,145,FOLLOW_145_in_questionmark_if_stmt2480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_145.add(char_literal252);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2482);
            element_value253=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value253.getTree());

            char_literal254=(Token)match(input,133,FOLLOW_133_in_questionmark_if_stmt2484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal254);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2486);
            element_value255=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value255.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 442:43: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:46: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:445:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression256 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:2: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:4: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2511);
            simple_expression256=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression256.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 446:22: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:446:25: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:449:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal257=null;
        ObjcParser.element_value_return element_value258 =null;


        Object char_literal257_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:5: ( ';' | element_value )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==134) ) {
                alt39=1;
            }
            else if ( (LA39_0==BOOL_LITERAL||LA39_0==CHAR_LITERAL||LA39_0==ID||LA39_0==NUMBER_LITERAL||(LA39_0 >= STRING_LITERAL && LA39_0 <= STRING_OBJC)||LA39_0==112||LA39_0==116||LA39_0==118||LA39_0==120||LA39_0==123||(LA39_0 >= 126 && LA39_0 <= 127)||LA39_0==159||LA39_0==166||(LA39_0 >= 169 && LA39_0 <= 170)||LA39_0==202) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;

            }
            switch (alt39) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:6: ';'
                    {
                    char_literal257=(Token)match(input,134,FOLLOW_134_in_element_value_or_semicolon2534); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal257_tree = 
                    (Object)adaptor.create(char_literal257)
                    ;
                    adaptor.addChild(root_0, char_literal257_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:450:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2538);
                    element_value258=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value258.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:453:1: array_init : element_value_or_array_init ( ',' element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal260=null;
        ObjcParser.element_value_or_array_init_return element_value_or_array_init259 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init261 =null;


        Object char_literal260_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:3: ( element_value_or_array_init ( ',' element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: element_value_or_array_init ( ',' element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2555);
            element_value_or_array_init259=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init259.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:33: ( ',' element_value_or_array_init )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( (LA40_0==125) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:34: ',' element_value_or_array_init
            	    {
            	    char_literal260=(Token)match(input,125,FOLLOW_125_in_array_init2558); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal260_tree = 
            	    (Object)adaptor.create(char_literal260)
            	    ;
            	    adaptor.addChild(root_0, char_literal260_tree);
            	    }

            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2560);
            	    element_value_or_array_init261=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init261.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:458:1: element_value_or_array_init : ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal262=null;
        Token char_literal264=null;
        ObjcParser.array_init_return array_init263 =null;

        ObjcParser.element_value_return element_value265 =null;


        Object char_literal262_tree=null;
        Object char_literal264_tree=null;
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:3: ( '{' ( array_init )? '}' -> ^( ARRAY_INIT ( array_init )? ) | element_value )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==197) ) {
                alt42=1;
            }
            else if ( (LA42_0==BOOL_LITERAL||LA42_0==CHAR_LITERAL||LA42_0==ID||LA42_0==NUMBER_LITERAL||(LA42_0 >= STRING_LITERAL && LA42_0 <= STRING_OBJC)||LA42_0==112||LA42_0==116||LA42_0==118||LA42_0==120||LA42_0==123||(LA42_0 >= 126 && LA42_0 <= 127)||LA42_0==159||LA42_0==166||(LA42_0 >= 169 && LA42_0 <= 170)||LA42_0==202) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;

            }
            switch (alt42) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:5: '{' ( array_init )? '}'
                    {
                    char_literal262=(Token)match(input,197,FOLLOW_197_in_element_value_or_array_init2577); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(char_literal262);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:9: ( array_init )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==BOOL_LITERAL||LA41_0==CHAR_LITERAL||LA41_0==ID||LA41_0==NUMBER_LITERAL||(LA41_0 >= STRING_LITERAL && LA41_0 <= STRING_OBJC)||LA41_0==112||LA41_0==116||LA41_0==118||LA41_0==120||LA41_0==123||(LA41_0 >= 126 && LA41_0 <= 127)||LA41_0==159||LA41_0==166||(LA41_0 >= 169 && LA41_0 <= 170)||LA41_0==197||LA41_0==202) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2579);
                            array_init263=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init263.getTree());

                            }
                            break;

                    }


                    char_literal264=(Token)match(input,201,FOLLOW_201_in_element_value_or_array_init2582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal264);


                    // AST REWRITE
                    // elements: array_init
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 459:26: -> ^( ARRAY_INIT ( array_init )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:29: ^( ARRAY_INIT ( array_init )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:42: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2598);
                    element_value265=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value265.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set266=null;

        Object set266_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set266=(Token)input.LT(1);

            if ( input.LA(1)==123||input.LA(1)==127 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set266)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1267 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt268 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2633);
            cast_unary_expression1267=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1267.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop43:
            do {
                int alt43=2;
                switch ( input.LA(1) ) {
                case 116:
                    {
                    alt43=1;
                    }
                    break;
                case 120:
                    {
                    alt43=1;
                    }
                    break;
                case 122:
                case 126:
                    {
                    alt43=1;
                    }
                    break;
                case 113:
                case 115:
                case 131:
                case 135:
                case 136:
                case 138:
                case 139:
                case 140:
                case 141:
                case 142:
                case 143:
                case 169:
                case 198:
                case 200:
                    {
                    alt43=1;
                    }
                    break;
                case 145:
                    {
                    alt43=1;
                    }
                    break;

                }

                switch (alt43) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:468:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2635);
            	    op2_unary_expression_or_questionmark_if_stmt268=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt268.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal269=null;
        ObjcParser.cast_expression_return cast_expression270 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression271 =null;


        Object char_literal269_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==126) ) {
                alt44=1;
            }
            else if ( (LA44_0==BOOL_LITERAL||LA44_0==CHAR_LITERAL||LA44_0==ID||LA44_0==NUMBER_LITERAL||(LA44_0 >= STRING_LITERAL && LA44_0 <= STRING_OBJC)||LA44_0==112||LA44_0==116||LA44_0==118||LA44_0==120||LA44_0==123||LA44_0==127||LA44_0==159||LA44_0==166||(LA44_0 >= 169 && LA44_0 <= 170)||LA44_0==202) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;

            }
            switch (alt44) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:5: '-' cast_expression
                    {
                    char_literal269=(Token)match(input,126,FOLLOW_126_in_cast_unary_expression12650); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(char_literal269);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12652);
                    cast_expression270=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression270.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 472:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:472:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:473:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12666);
                    cast_unary_expression271=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression271.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper272 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1273 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt274 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==113||(LA45_0 >= 115 && LA45_0 <= 116)||LA45_0==120||LA45_0==122||LA45_0==126||LA45_0==131||(LA45_0 >= 135 && LA45_0 <= 136)||(LA45_0 >= 138 && LA45_0 <= 143)||LA45_0==169||LA45_0==198||LA45_0==200) ) {
                alt45=1;
            }
            else if ( (LA45_0==145) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;

            }
            switch (alt45) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:477:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2680);
                    op2_wrapper272=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper272.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2682);
                    cast_unary_expression1273=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1273.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:478:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2689);
                    questionmark_if_stmt274=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt274.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal277=null;
        Token char_literal279=null;
        ObjcParser.cast_expression_return cast_expression275 =null;

        ObjcParser.increment_decrement_return increment_decrement276 =null;

        ObjcParser.cast_expression_return cast_expression278 =null;

        ObjcParser.cast_expression_return cast_expression280 =null;

        ObjcParser.increment_decrement_return increment_decrement281 =null;

        ObjcParser.cast_expression_return cast_expression282 =null;


        Object char_literal277_tree=null;
        Object char_literal279_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt47=4;
            switch ( input.LA(1) ) {
            case BOOL_LITERAL:
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case STRING_OBJC:
            case 116:
            case 118:
            case 120:
            case 159:
            case 166:
            case 169:
            case 170:
                {
                alt47=1;
                }
                break;
            case 112:
                {
                alt47=2;
                }
                break;
            case 202:
                {
                alt47=3;
                }
                break;
            case 123:
            case 127:
                {
                alt47=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;

            }

            switch (alt47) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2702);
                    cast_expression275=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression275.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:21: ( increment_decrement )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==123||LA46_0==127) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:482:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2704);
                            increment_decrement276=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement276.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:5: '!' cast_expression
                    {
                    char_literal277=(Token)match(input,112,FOLLOW_112_in_cast_unary_expression2711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(char_literal277);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2713);
                    cast_expression278=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression278.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 483:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:483:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:5: '~' cast_expression
                    {
                    char_literal279=(Token)match(input,202,FOLLOW_202_in_cast_unary_expression2727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_202.add(char_literal279);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2729);
                    cast_expression280=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression280.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 484:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2743);
                    increment_decrement281=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement281.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2745);
                    cast_expression282=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression282.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal285=null;
        Token char_literal288=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper283 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access284 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper286 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access287 =null;

        ObjcParser.access_wrapper_return access_wrapper289 =null;

        ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call290 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access291 =null;


        Object char_literal285_tree=null;
        Object char_literal288_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:3: ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access )
            int alt49=3;
            alt49 = dfa49.predict(input);
            switch (alt49) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:5: ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2763);
                    type_cast_wrapper283=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper283.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2765);
                    simple_expression_value_access284=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access284.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal285=(Token)match(input,118,FOLLOW_118_in_cast_expression2784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal285_tree = 
                    (Object)adaptor.create(char_literal285)
                    ;
                    adaptor.addChild(root_0, char_literal285_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2786);
                    type_cast_wrapper286=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper286.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2788);
                    simple_expression_value_access287=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access287.getTree());

                    char_literal288=(Token)match(input,119,FOLLOW_119_in_cast_expression2790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal288_tree = 
                    (Object)adaptor.create(char_literal288)
                    ;
                    adaptor.addChild(root_0, char_literal288_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:138: ( access_wrapper simple_name_or_classical_function_call )+
                    int cnt48=0;
                    loop48:
                    do {
                        int alt48=2;
                        alt48 = dfa48.predict(input);
                        switch (alt48) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:139: access_wrapper simple_name_or_classical_function_call
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression2793);
                    	    access_wrapper289=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper289.getTree());

                    	    pushFollow(FOLLOW_simple_name_or_classical_function_call_in_cast_expression2795);
                    	    simple_name_or_classical_function_call290=simple_name_or_classical_function_call();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_name_or_classical_function_call290.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt48 >= 1 ) break loop48;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(48, input);
                                throw eee;
                        }
                        cnt48++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:491:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2803);
                    simple_expression_value_access291=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access291.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_name_or_classical_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_name_or_classical_function_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );
    public final ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call() throws RecognitionException {
        ObjcParser.simple_name_or_classical_function_call_return retval = new ObjcParser.simple_name_or_classical_function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal293=null;
        Token char_literal295=null;
        ObjcParser.name_return name292 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push294 =null;

        ObjcParser.name_return name296 =null;


        Object char_literal293_tree=null;
        Object char_literal295_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:3: ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name )
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2824);
                    name292=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name292.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:24: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:25: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal293=(Token)match(input,118,FOLLOW_118_in_simple_name_or_classical_function_call2827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal293_tree = 
                    (Object)adaptor.create(char_literal293)
                    ;
                    adaptor.addChild(root_0, char_literal293_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:29: ( classical_method_params_push )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==BOOL_LITERAL||LA50_0==CHAR_LITERAL||LA50_0==ID||LA50_0==NUMBER_LITERAL||(LA50_0 >= STRING_LITERAL && LA50_0 <= STRING_OBJC)||LA50_0==112||LA50_0==116||LA50_0==118||LA50_0==120||LA50_0==123||(LA50_0 >= 126 && LA50_0 <= 127)||LA50_0==159||LA50_0==166||(LA50_0 >= 169 && LA50_0 <= 170)||LA50_0==202) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:29: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2829);
                            classical_method_params_push294=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push294.getTree());

                            }
                            break;

                    }


                    char_literal295=(Token)match(input,119,FOLLOW_119_in_simple_name_or_classical_function_call2832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal295_tree = 
                    (Object)adaptor.create(char_literal295)
                    ;
                    adaptor.addChild(root_0, char_literal295_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:496:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call2839);
                    name296=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name296.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name_or_classical_function_call"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal298=null;
        Token char_literal300=null;
        Token char_literal302=null;
        Token char_literal303=null;
        Token char_literal307=null;
        Token char_literal309=null;
        ObjcParser.selector_wrapper_return selector_wrapper297 =null;

        ObjcParser.name_return name299 =null;

        ObjcParser.name_return name301 =null;

        ObjcParser.simple_expression_value_return simple_expression_value304 =null;

        ObjcParser.access_wrapper_return access_wrapper305 =null;

        ObjcParser.name_return name306 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push308 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2310 =null;

        ObjcParser.access_wrapper_return access_wrapper311 =null;

        ObjcParser.name_return name312 =null;


        Object char_literal298_tree=null;
        Object char_literal300_tree=null;
        Object char_literal302_tree=null;
        Object char_literal303_tree=null;
        Object char_literal307_tree=null;
        Object char_literal309_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:3: ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* )
            int alt57=3;
            alt57 = dfa57.predict(input);
            switch (alt57) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access2854);
                    selector_wrapper297=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper297.getTree());

                    char_literal298=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal298_tree = 
                    (Object)adaptor.create(char_literal298)
                    ;
                    adaptor.addChild(root_0, char_literal298_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access2858);
                    name299=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name299.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:31: ( ':' ( name ':' )* )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==133) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:32: ':' ( name ':' )*
                            {
                            char_literal300=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2861); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal300_tree = 
                            (Object)adaptor.create(char_literal300)
                            ;
                            adaptor.addChild(root_0, char_literal300_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:36: ( name ':' )*
                            loop52:
                            do {
                                int alt52=2;
                                int LA52_0 = input.LA(1);

                                if ( (LA52_0==ID) ) {
                                    alt52=1;
                                }


                                switch (alt52) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:500:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access2864);
                            	    name301=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name301.getTree());

                            	    char_literal302=(Token)match(input,133,FOLLOW_133_in_simple_expression_value_access2866); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal302_tree = 
                            	    (Object)adaptor.create(char_literal302)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal302_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop52;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal303=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal303_tree = 
                    (Object)adaptor.create(char_literal303)
                    ;
                    adaptor.addChild(root_0, char_literal303_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access2892);
                    simple_expression_value304=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value304.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:84: ( access_wrapper name )*
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( ((LA54_0 >= 129 && LA54_0 <= 130)) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2895);
                    	    access_wrapper305=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper305.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2897);
                    	    name306=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name306.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop54;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal307=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access2902); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal307_tree = 
                    (Object)adaptor.create(char_literal307)
                    ;
                    adaptor.addChild(root_0, char_literal307_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:112: ( classical_method_params_push )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==BOOL_LITERAL||LA55_0==CHAR_LITERAL||LA55_0==ID||LA55_0==NUMBER_LITERAL||(LA55_0 >= STRING_LITERAL && LA55_0 <= STRING_OBJC)||LA55_0==112||LA55_0==116||LA55_0==118||LA55_0==120||LA55_0==123||(LA55_0 >= 126 && LA55_0 <= 127)||LA55_0==159||LA55_0==166||(LA55_0 >= 169 && LA55_0 <= 170)||LA55_0==202) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access2904);
                            classical_method_params_push308=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push308.getTree());

                            }
                            break;

                    }


                    char_literal309=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access2907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal309_tree = 
                    (Object)adaptor.create(char_literal309)
                    ;
                    adaptor.addChild(root_0, char_literal309_tree);
                    }

                    }


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:5: simple_expression_value2 ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access2914);
                    simple_expression_value2310=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2310.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:30: ( access_wrapper name )*
                    loop56:
                    do {
                        int alt56=2;
                        alt56 = dfa56.predict(input);
                        switch (alt56) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:31: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access2917);
                    	    access_wrapper311=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper311.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access2919);
                    	    name312=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name312.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop56;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal313=null;
        Token char_literal315=null;
        Token char_literal317=null;
        Token set318=null;
        Token STRING_LITERAL320=null;
        Token STRING_OBJC321=null;
        Token CHAR_LITERAL322=null;
        Token NUMBER_LITERAL323=null;
        Token BOOL_LITERAL324=null;
        ObjcParser.name_return name314 =null;

        ObjcParser.element_value_return element_value316 =null;

        ObjcParser.name_return name319 =null;

        ObjcParser.name_return name325 =null;


        Object char_literal313_tree=null;
        Object char_literal315_tree=null;
        Object char_literal317_tree=null;
        Object set318_tree=null;
        Object STRING_LITERAL320_tree=null;
        Object STRING_OBJC321_tree=null;
        Object CHAR_LITERAL322_tree=null;
        Object NUMBER_LITERAL323_tree=null;
        Object BOOL_LITERAL324_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_STRING_OBJC=new RewriteRuleTokenStream(adaptor,"token STRING_OBJC");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_BOOL_LITERAL=new RewriteRuleTokenStream(adaptor,"token BOOL_LITERAL");
        RewriteRuleTokenStream stream_CHAR_LITERAL=new RewriteRuleTokenStream(adaptor,"token CHAR_LITERAL");
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name )
            int alt59=8;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:23: ( '&' )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==116) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:23: '&'
                            {
                            char_literal313=(Token)match(input,116,FOLLOW_116_in_simple_expression_value2946); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal313);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2949);
                    name314=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name314.getTree());

                    char_literal315=(Token)match(input,166,FOLLOW_166_in_simple_expression_value2951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal315);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value2953);
                    element_value316=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value316.getTree());

                    char_literal317=(Token)match(input,168,FOLLOW_168_in_simple_expression_value2955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(char_literal317);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 506:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set318=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set318)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value2989);
                    name319=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name319.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:4: STRING_LITERAL
                    {
                    STRING_LITERAL320=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_simple_expression_value2994); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL320);


                    // AST REWRITE
                    // elements: STRING_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 508:19: -> ^( STRING STRING_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:22: ^( STRING STRING_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:4: STRING_OBJC
                    {
                    STRING_OBJC321=(Token)match(input,STRING_OBJC,FOLLOW_STRING_OBJC_in_simple_expression_value3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_OBJC.add(STRING_OBJC321);


                    // AST REWRITE
                    // elements: STRING_OBJC
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 509:16: -> ^( STRING STRING_OBJC )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:19: ^( STRING STRING_OBJC )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRING, "STRING")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_STRING_OBJC.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:4: CHAR_LITERAL
                    {
                    CHAR_LITERAL322=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_simple_expression_value3020); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_LITERAL.add(CHAR_LITERAL322);


                    // AST REWRITE
                    // elements: CHAR_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 510:17: -> ^( CHAR CHAR_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:20: ^( CHAR CHAR_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL323=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value3033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL323);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 511:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:4: BOOL_LITERAL
                    {
                    BOOL_LITERAL324=(Token)match(input,BOOL_LITERAL,FOLLOW_BOOL_LITERAL_in_simple_expression_value3046); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOL_LITERAL.add(BOOL_LITERAL324);


                    // AST REWRITE
                    // elements: BOOL_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 512:17: -> ^( BOOL BOOL_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:20: ^( BOOL BOOL_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_BOOL_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3060);
                    name325=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name325.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:1: simple_expression_value2 : ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal329=null;
        Token char_literal331=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper326 =null;

        ObjcParser.simple_expression_value_return simple_expression_value327 =null;

        ObjcParser.method_msg_return method_msg328 =null;

        ObjcParser.element_value_return element_value330 =null;


        Object char_literal329_tree=null;
        Object char_literal331_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:3: ( ( block_call_predicate )=> block_call_wrapper | simple_expression_value | method_msg | '(' element_value ')' )
            int alt60=4;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==169) && (synpred16_Objc())) {
                alt60=1;
            }
            else if ( (LA60_0==170) && (synpred16_Objc())) {
                alt60=1;
            }
            else if ( (LA60_0==BOOL_LITERAL||LA60_0==CHAR_LITERAL||LA60_0==ID||LA60_0==NUMBER_LITERAL||(LA60_0 >= STRING_LITERAL && LA60_0 <= STRING_OBJC)||LA60_0==116||LA60_0==120) ) {
                alt60=2;
            }
            else if ( (LA60_0==166) ) {
                alt60=3;
            }
            else if ( (LA60_0==118) ) {
                alt60=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;

            }
            switch (alt60) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value23078);
                    block_call_wrapper326=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper326.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23084);
                    simple_expression_value327=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value327.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23090);
                    method_msg328=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg328.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal329=(Token)match(input,118,FOLLOW_118_in_simple_expression_value23096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal329_tree = 
                    (Object)adaptor.create(char_literal329)
                    ;
                    adaptor.addChild(root_0, char_literal329_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23098);
                    element_value330=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value330.getTree());

                    char_literal331=(Token)match(input,119,FOLLOW_119_in_simple_expression_value23100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal331_tree = 
                    (Object)adaptor.create(char_literal331)
                    ;
                    adaptor.addChild(root_0, char_literal331_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2332 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3114);
            op2332=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2332.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 524:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set333=null;

        Object set333_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:527:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set333=(Token)input.LT(1);

            if ( input.LA(1)==113||(input.LA(1) >= 115 && input.LA(1) <= 116)||input.LA(1)==120||input.LA(1)==122||input.LA(1)==126||input.LA(1)==131||(input.LA(1) >= 135 && input.LA(1) <= 136)||(input.LA(1) >= 138 && input.LA(1) <= 143)||input.LA(1)==169||input.LA(1)==198||input.LA(1)==200 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set333)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign334 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3215);
            op_assign334=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign334.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 530:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set335=null;

        Object set335_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set335=(Token)input.LT(1);

            if ( input.LA(1)==117||input.LA(1)==121||input.LA(1)==124||input.LA(1)==128||input.LA(1)==132||input.LA(1)==137||input.LA(1)==139||input.LA(1)==144||input.LA(1)==199 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set335)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:537:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector336 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3283);
            selector336=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector336.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 538:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal337=null;

        Object string_literal337_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal337=(Token)match(input,159,FOLLOW_159_in_selector3306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal337_tree = 
            (Object)adaptor.create(string_literal337)
            ;
            adaptor.addChild(root_0, string_literal337_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name338 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3321);
            type_cast_name338=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name338.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal339=null;
        Token char_literal341=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration340 =null;


        Object char_literal339_tree=null;
        Object char_literal341_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal339=(Token)match(input,118,FOLLOW_118_in_type_cast_name3344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal339_tree = 
            (Object)adaptor.create(char_literal339)
            ;
            adaptor.addChild(root_0, char_literal339_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3346);
            type_cast_declaration340=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration340.getTree());

            char_literal341=(Token)match(input,119,FOLLOW_119_in_type_cast_name3348); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal341_tree = 
            (Object)adaptor.create(char_literal341)
            ;
            adaptor.addChild(root_0, char_literal341_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol342 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration343 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==182) ) {
                int LA61_1 = input.LA(2);

                if ( (LA61_1==135) ) {
                    switch ( input.LA(3) ) {
                    case 185:
                        {
                        int LA61_19 = input.LA(4);

                        if ( (LA61_19==141) ) {
                            int LA61_24 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 24, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 182:
                        {
                        int LA61_20 = input.LA(4);

                        if ( (LA61_20==141) ) {
                            int LA61_25 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 25, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 186:
                        {
                        switch ( input.LA(4) ) {
                        case 185:
                            {
                            int LA61_26 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 26, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA61_27 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 27, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 186:
                            {
                            int LA61_28 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 21, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 188:
                        {
                        switch ( input.LA(4) ) {
                        case 185:
                            {
                            int LA61_29 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 141:
                            {
                            int LA61_30 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 188:
                            {
                            int LA61_31 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 31, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 22, input);

                            throw nvae;

                        }

                        }
                        break;
                    case ID:
                        {
                        int LA61_23 = input.LA(4);

                        if ( (LA61_23==141) ) {
                            int LA61_32 = input.LA(5);

                            if ( (synpred17_Objc()) ) {
                                alt61=1;
                            }
                            else if ( (true) ) {
                                alt61=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 61, 32, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 61, 23, input);

                            throw nvae;

                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 61, 13, input);

                        throw nvae;

                    }

                }
                else if ( (LA61_1==116||(LA61_1 >= 119 && LA61_1 <= 120)||LA61_1==166||LA61_1==173) ) {
                    alt61=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 61, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA61_0==ID||LA61_0==118||LA61_0==173||LA61_0==178||(LA61_0 >= 185 && LA61_0 <= 186)||LA61_0==188||LA61_0==190||(LA61_0 >= 193 && LA61_0 <= 195)) ) {
                alt61=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 61, 0, input);

                throw nvae;

            }
            switch (alt61) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3366);
                    type_declaration_protocol342=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol342.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3372);
                    classical_type_declaration343=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration343.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set344=null;

        Object set344_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:560:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set344=(Token)input.LT(1);

            if ( (input.LA(1) >= 129 && input.LA(1) <= 130) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set344)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access345 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3400);
            access345=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access345.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple346 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3419);
            object_access_simple346=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple346.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name347 =null;

        ObjcParser.access_wrapper_return access_wrapper348 =null;

        ObjcParser.name_return name349 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3440);
            name347=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name347.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:10: ( access_wrapper name )*
            loop62:
            do {
                int alt62=2;
                int LA62_0 = input.LA(1);

                if ( ((LA62_0 >= 129 && LA62_0 <= 130)) ) {
                    alt62=1;
                }


                switch (alt62) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:572:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3443);
            	    access_wrapper348=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper348.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3445);
            	    name349=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name349.getTree());

            	    }
            	    break;

            	default :
            	    break loop62;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:575:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access350 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3462);
            object_access350=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access350.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 576:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:579:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue351 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:2: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:580:4: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3482);
            cast_lvalue351=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue351.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:583:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal354=null;
        Token char_literal357=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper352 =null;

        ObjcParser.lvalue_access_return lvalue_access353 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper355 =null;

        ObjcParser.lvalue_access_return lvalue_access356 =null;

        ObjcParser.access_wrapper_return access_wrapper358 =null;

        ObjcParser.name_return name359 =null;

        ObjcParser.lvalue_access_return lvalue_access360 =null;


        Object char_literal354_tree=null;
        Object char_literal357_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:3: ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt64=3;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==118) ) {
                int LA64_1 = input.LA(2);

                if ( (LA64_1==182) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==118) ) {
                    int LA64_6 = input.LA(3);

                    if ( (LA64_6==120) && (synpred18_Objc())) {
                        alt64=1;
                    }
                    else if ( (LA64_6==182) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==118) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==195) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==173) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==194) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==185) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==186) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==188) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==ID) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==190) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==193) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else if ( (LA64_6==178) && (synpred19_Objc())) {
                        alt64=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 64, 6, input);

                        throw nvae;

                    }
                }
                else if ( (LA64_1==195) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==173) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==194) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==185) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==186) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==188) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==ID) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==190) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==193) && (synpred18_Objc())) {
                    alt64=1;
                }
                else if ( (LA64_1==178) && (synpred18_Objc())) {
                    alt64=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 64, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA64_0==ID||LA64_0==116||LA64_0==120) ) {
                alt64=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;

            }
            switch (alt64) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:5: ( type_cast_wrapper )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3500);
                    type_cast_wrapper352=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper352.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3502);
                    lvalue_access353=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access353.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal354=(Token)match(input,118,FOLLOW_118_in_cast_lvalue3515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal354_tree = 
                    (Object)adaptor.create(char_literal354)
                    ;
                    adaptor.addChild(root_0, char_literal354_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3517);
                    type_cast_wrapper355=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper355.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3519);
                    lvalue_access356=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access356.getTree());

                    char_literal357=(Token)match(input,119,FOLLOW_119_in_cast_lvalue3521); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal357_tree = 
                    (Object)adaptor.create(char_literal357)
                    ;
                    adaptor.addChild(root_0, char_literal357_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:71: ( access_wrapper name )+
                    int cnt63=0;
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);

                        if ( ((LA63_0 >= 129 && LA63_0 <= 130)) ) {
                            alt63=1;
                        }


                        switch (alt63) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:72: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3524);
                    	    access_wrapper358=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper358.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3526);
                    	    name359=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name359.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt63 >= 1 ) break loop63;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(63, input);
                                throw eee;
                        }
                        cnt63++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3534);
                    lvalue_access360=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access360.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:589:1: lvalue_access : lvalue ( access_wrapper name )* ;
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.lvalue_return lvalue361 =null;

        ObjcParser.access_wrapper_return access_wrapper362 =null;

        ObjcParser.name_return name363 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:3: ( lvalue ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:5: lvalue ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_lvalue_in_lvalue_access3547);
            lvalue361=lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue361.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:12: ( access_wrapper name )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( ((LA65_0 >= 129 && LA65_0 <= 130)) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:13: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3550);
            	    access_wrapper362=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper362.getTree());

            	    pushFollow(FOLLOW_name_in_lvalue_access3552);
            	    name363=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name363.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal364=null;
        Token char_literal366=null;
        Token char_literal368=null;
        Token set369=null;
        ObjcParser.name_return name365 =null;

        ObjcParser.element_value_return element_value367 =null;

        ObjcParser.name_return name370 =null;

        ObjcParser.name_return name371 =null;


        Object char_literal364_tree=null;
        Object char_literal366_tree=null;
        Object char_literal368_tree=null;
        Object set369_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_166=new RewriteRuleTokenStream(adaptor,"token 166");
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt67=3;
            switch ( input.LA(1) ) {
            case 116:
                {
                int LA67_1 = input.LA(2);

                if ( (LA67_1==ID) ) {
                    int LA67_4 = input.LA(3);

                    if ( (LA67_4==166) && (synpred20_Objc())) {
                        alt67=1;
                    }
                    else if ( (LA67_4==EOF||LA67_4==117||LA67_4==119||LA67_4==121||(LA67_4 >= 123 && LA67_4 <= 124)||(LA67_4 >= 127 && LA67_4 <= 130)||LA67_4==132||LA67_4==137||LA67_4==139||LA67_4==144||LA67_4==199) ) {
                        alt67=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 67, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA67_2 = input.LA(2);

                if ( (LA67_2==166) && (synpred20_Objc())) {
                    alt67=1;
                }
                else if ( (LA67_2==EOF||LA67_2==117||LA67_2==119||LA67_2==121||(LA67_2 >= 123 && LA67_2 <= 124)||(LA67_2 >= 127 && LA67_2 <= 130)||LA67_2==132||LA67_2==137||LA67_2==139||LA67_2==144||LA67_2==199) ) {
                    alt67=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 67, 2, input);

                    throw nvae;

                }
                }
                break;
            case 120:
                {
                alt67=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 67, 0, input);

                throw nvae;

            }

            switch (alt67) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:23: ( '&' )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==116) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:23: '&'
                            {
                            char_literal364=(Token)match(input,116,FOLLOW_116_in_lvalue3579); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal364);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue3582);
                    name365=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name365.getTree());

                    char_literal366=(Token)match(input,166,FOLLOW_166_in_lvalue3584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_166.add(char_literal366);


                    pushFollow(FOLLOW_element_value_in_lvalue3586);
                    element_value367=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value367.getTree());

                    char_literal368=(Token)match(input,168,FOLLOW_168_in_lvalue3588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(char_literal368);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 594:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set369=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==120 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set369)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue3610);
                    name370=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name370.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:596:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue3616);
                    name371=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name371.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:600:1: break_stmt : 'break' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal372=null;

        Object string_literal372_tree=null;
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:3: ( 'break' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:5: 'break'
            {
            string_literal372=(Token)match(input,171,FOLLOW_171_in_break_stmt3632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_171.add(string_literal372);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 601:13: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:16: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:1: continue_stmt : 'continue' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal373=null;

        Object string_literal373_tree=null;
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:3: ( 'continue' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:5: 'continue'
            {
            string_literal373=(Token)match(input,174,FOLLOW_174_in_continue_stmt3653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_174.add(string_literal373);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 605:16: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:18: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration374 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3679);
            extern_declaration374=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration374.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 612:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:614:1: extern_declaration : 'extern' field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal375=null;
        ObjcParser.field_declaration_return field_declaration376 =null;


        Object string_literal375_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:3: ( 'extern' field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:5: 'extern' field_declaration
            {
            root_0 = (Object)adaptor.nil();


            string_literal375=(Token)match(input,179,FOLLOW_179_in_extern_declaration3700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal375_tree = 
            (Object)adaptor.create(string_literal375)
            ;
            adaptor.addChild(root_0, string_literal375_tree);
            }

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3702);
            field_declaration376=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration376.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix377 =null;

        ObjcParser.method_declaration_return method_declaration378 =null;

        ObjcParser.property_prefix_return property_prefix379 =null;

        ObjcParser.optional_prefix_return optional_prefix380 =null;

        ObjcParser.field_declaration_return field_declaration381 =null;

        ObjcParser.comments_return comments382 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt70=3;
            switch ( input.LA(1) ) {
            case 122:
            case 126:
            case 153:
                {
                alt70=1;
                }
                break;
            case 155:
                {
                alt70=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt70=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;

            }

            switch (alt70) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: ( optional_prefix )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==153) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3714);
                            optional_prefix377=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix377.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations3717);
                    method_declaration378=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration378.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 618:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations3731);
                    property_prefix379=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix379.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:21: ( optional_prefix )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==153) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations3733);
                            optional_prefix380=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix380.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations3736);
                    field_declaration381=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration381.getTree());

                    // AST REWRITE
                    // elements: field_declaration, property_prefix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 619:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations3752);
                    comments382=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments382.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration383 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper3767);
            field_declaration383=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration383.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:1: optional_prefix : '@optional' ;
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal384=null;

        Object string_literal384_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:3: ( '@optional' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:5: '@optional'
            {
            root_0 = (Object)adaptor.nil();


            string_literal384=(Token)match(input,153,FOLLOW_153_in_optional_prefix3790); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal384_tree = 
            (Object)adaptor.create(string_literal384)
            ;
            adaptor.addChild(root_0, string_literal384_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal385=null;

        Object string_literal385_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal385=(Token)match(input,165,FOLLOW_165_in_ns_inline3802); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal385_tree = 
            (Object)adaptor.create(string_literal385)
            ;
            adaptor.addChild(root_0, string_literal385_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:633:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal386=null;
        Token char_literal387=null;
        Token char_literal389=null;
        Token char_literal391=null;
        Token char_literal393=null;
        Token char_literal395=null;
        Token char_literal396=null;
        ObjcParser.name_return name388 =null;

        ObjcParser.name_return name390 =null;

        ObjcParser.name_return name392 =null;

        ObjcParser.name_return name394 =null;


        Object string_literal386_tree=null;
        Object char_literal387_tree=null;
        Object char_literal389_tree=null;
        Object char_literal391_tree=null;
        Object char_literal393_tree=null;
        Object char_literal395_tree=null;
        Object char_literal396_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal386=(Token)match(input,155,FOLLOW_155_in_property_prefix3814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal386_tree = 
            (Object)adaptor.create(string_literal386)
            ;
            adaptor.addChild(root_0, string_literal386_tree);
            }

            char_literal387=(Token)match(input,118,FOLLOW_118_in_property_prefix3816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal387_tree = 
            (Object)adaptor.create(char_literal387)
            ;
            adaptor.addChild(root_0, char_literal387_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix3818);
            name388=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name388.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:26: ( '=' name )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==139) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:27: '=' name
                    {
                    char_literal389=(Token)match(input,139,FOLLOW_139_in_property_prefix3821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal389_tree = 
                    (Object)adaptor.create(char_literal389)
                    ;
                    adaptor.addChild(root_0, char_literal389_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix3823);
                    name390=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name390.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==125) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal391=(Token)match(input,125,FOLLOW_125_in_property_prefix3828); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal391_tree = 
            	    (Object)adaptor.create(char_literal391)
            	    ;
            	    adaptor.addChild(root_0, char_literal391_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix3830);
            	    name392=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name392.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:48: ( '=' name ( ':' )? )?
            	    int alt73=2;
            	    int LA73_0 = input.LA(1);

            	    if ( (LA73_0==139) ) {
            	        alt73=1;
            	    }
            	    switch (alt73) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:49: '=' name ( ':' )?
            	            {
            	            char_literal393=(Token)match(input,139,FOLLOW_139_in_property_prefix3833); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal393_tree = 
            	            (Object)adaptor.create(char_literal393)
            	            ;
            	            adaptor.addChild(root_0, char_literal393_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix3835);
            	            name394=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name394.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:58: ( ':' )?
            	            int alt72=2;
            	            int LA72_0 = input.LA(1);

            	            if ( (LA72_0==133) ) {
            	                alt72=1;
            	            }
            	            switch (alt72) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:58: ':'
            	                    {
            	                    char_literal395=(Token)match(input,133,FOLLOW_133_in_property_prefix3837); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal395_tree = 
            	                    (Object)adaptor.create(char_literal395)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal395_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            char_literal396=(Token)match(input,119,FOLLOW_119_in_property_prefix3844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal396_tree = 
            (Object)adaptor.create(char_literal396)
            ;
            adaptor.addChild(root_0, char_literal396_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration397 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper3857);
            interface_declaration397=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration397.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 645:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration398 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3877);
            protocol_declaration398=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration398.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 648:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal399=null;
        ObjcParser.typedef_declaration_return typedef_declaration400 =null;


        Object string_literal399_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:5: 'typedef' typedef_declaration
            {
            string_literal399=(Token)match(input,192,FOLLOW_192_in_typedef_declaration_wrapper3895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_192.add(string_literal399);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3897);
            typedef_declaration400=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration400.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 651:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:651:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal403=null;
        Token char_literal405=null;
        ObjcParser.typedef_internal_return typedef_internal401 =null;

        ObjcParser.typedef_name_return typedef_name402 =null;

        ObjcParser.typedef_name_return typedef_name404 =null;


        Object char_literal403_tree=null;
        Object char_literal405_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration3915);
            typedef_internal401=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal401.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration3917);
            typedef_name402=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name402.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:35: ( ',' typedef_name )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==125) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:36: ',' typedef_name
            	    {
            	    char_literal403=(Token)match(input,125,FOLLOW_125_in_typedef_declaration3920); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal403_tree = 
            	    (Object)adaptor.create(char_literal403)
            	    ;
            	    adaptor.addChild(root_0, char_literal403_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration3922);
            	    typedef_name404=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name404.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            char_literal405=(Token)match(input,134,FOLLOW_134_in_typedef_declaration3926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal405_tree = 
            (Object)adaptor.create(char_literal405)
            ;
            adaptor.addChild(root_0, char_literal405_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal406=null;
        Token char_literal407=null;
        Token char_literal409=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane408 =null;


        Object char_literal406_tree=null;
        Object char_literal407_tree=null;
        Object char_literal409_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal406=(Token)match(input,118,FOLLOW_118_in_func_pointer_predicate3938); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal406_tree = 
            (Object)adaptor.create(char_literal406)
            ;
            adaptor.addChild(root_0, char_literal406_tree);
            }

            char_literal407=(Token)match(input,120,FOLLOW_120_in_func_pointer_predicate3940); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal407_tree = 
            (Object)adaptor.create(char_literal407)
            ;
            adaptor.addChild(root_0, char_literal407_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate3942);
            type_declaration_plane408=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane408.getTree());

            char_literal409=(Token)match(input,119,FOLLOW_119_in_func_pointer_predicate3944); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal409_tree = 
            (Object)adaptor.create(char_literal409)
            ;
            adaptor.addChild(root_0, char_literal409_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal410=null;
        Token char_literal411=null;
        Token char_literal413=null;
        Token char_literal414=null;
        Token char_literal416=null;
        Token char_literal418=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane412 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane415 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane417 =null;


        Object char_literal410_tree=null;
        Object char_literal411_tree=null;
        Object char_literal413_tree=null;
        Object char_literal414_tree=null;
        Object char_literal416_tree=null;
        Object char_literal418_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal410=(Token)match(input,118,FOLLOW_118_in_func_pointer3959); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal410);


            char_literal411=(Token)match(input,120,FOLLOW_120_in_func_pointer3961); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal411);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3963);
            type_declaration_plane412=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane412.getTree());

            char_literal413=(Token)match(input,119,FOLLOW_119_in_func_pointer3965); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal413);


            char_literal414=(Token)match(input,118,FOLLOW_118_in_func_pointer3967); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal414);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==ID||LA77_0==173||LA77_0==182||(LA77_0 >= 185 && LA77_0 <= 186)||LA77_0==188||(LA77_0 >= 194 && LA77_0 <= 195)) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3970);
                    type_declaration_plane415=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane415.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:68: ( ',' type_declaration_plane )*
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( (LA76_0==125) ) {
                            alt76=1;
                        }


                        switch (alt76) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:69: ',' type_declaration_plane
                    	    {
                    	    char_literal416=(Token)match(input,125,FOLLOW_125_in_func_pointer3973); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_125.add(char_literal416);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer3975);
                    	    type_declaration_plane417=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane417.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop76;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal418=(Token)match(input,119,FOLLOW_119_in_func_pointer3981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal418);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 661:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:661:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:664:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer419 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct420 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum421 =null;

        ObjcParser.type_declaration_union_return type_declaration_union422 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane423 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt78=5;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==118) && (synpred21_Objc())) {
                alt78=1;
            }
            else if ( (LA78_0==190) ) {
                alt78=2;
            }
            else if ( (LA78_0==178) ) {
                alt78=3;
            }
            else if ( (LA78_0==193) ) {
                alt78=4;
            }
            else if ( (LA78_0==ID||LA78_0==173||LA78_0==182||(LA78_0 >= 185 && LA78_0 <= 186)||LA78_0==188||(LA78_0 >= 194 && LA78_0 <= 195)) ) {
                alt78=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;

            }
            switch (alt78) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal4010);
                    func_pointer419=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer419.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal4016);
                    type_declaration_struct420=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct420.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal4022);
                    type_declaration_enum421=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum421.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal4028);
                    type_declaration_union422=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union422.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal4034);
                    type_declaration_plane423=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane423.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID424=null;

        Object ID424_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:5: ID
            {
            ID424=(Token)match(input,ID,FOLLOW_ID_in_typedef_name4049); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID424);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal425=null;
        Token char_literal427=null;
        Token string_literal428=null;
        Token char_literal430=null;
        Token char_literal432=null;
        Token char_literal434=null;
        Token char_literal436=null;
        ObjcParser.class_name_return class_name426 =null;

        ObjcParser.protocol_name_return protocol_name429 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple431 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple433 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple435 =null;


        Object string_literal425_tree=null;
        Object char_literal427_tree=null;
        Object string_literal428_tree=null;
        Object char_literal430_tree=null;
        Object char_literal432_tree=null;
        Object char_literal434_tree=null;
        Object char_literal436_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_157=new RewriteRuleTokenStream(adaptor,"token 157");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt79=5;
            switch ( input.LA(1) ) {
            case 147:
                {
                alt79=1;
                }
                break;
            case 157:
                {
                alt79=2;
                }
                break;
            case 190:
                {
                alt79=3;
                }
                break;
            case 193:
                {
                alt79=4;
                }
                break;
            case 178:
                {
                alt79=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;

            }

            switch (alt79) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:5: '@class' class_name ';'
                    {
                    string_literal425=(Token)match(input,147,FOLLOW_147_in_forward_class_declaration4067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_147.add(string_literal425);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4069);
                    class_name426=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name426.getTree());

                    char_literal427=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal427);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 676:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:5: '@protocol' protocol_name ';'
                    {
                    string_literal428=(Token)match(input,157,FOLLOW_157_in_forward_class_declaration4084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_157.add(string_literal428);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4086);
                    protocol_name429=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name429.getTree());

                    char_literal430=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal430);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 677:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4101);
                    type_declaration_struct_simple431=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple431.getTree());

                    char_literal432=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal432);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 678:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4116);
                    type_declaration_union_simple433=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple433.getTree());

                    char_literal434=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4118); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal434);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 679:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:680:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4131);
                    type_declaration_enum_simple435=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple435.getTree());

                    char_literal436=(Token)match(input,134,FOLLOW_134_in_forward_class_declaration4133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal436);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 680:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:680:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID437=null;

        Object ID437_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:5: ID
            {
            ID437=(Token)match(input,ID,FOLLOW_ID_in_class_name4153); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID437);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 684:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:684:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal438=null;
        ObjcParser.protocol_name_return protocol_name439 =null;

        ObjcParser.implements_interfaces_return implements_interfaces440 =null;

        ObjcParser.class_protocol_end_return class_protocol_end441 =null;


        Object string_literal438_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal438=(Token)match(input,157,FOLLOW_157_in_protocol_declaration4173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal438_tree = 
            (Object)adaptor.create(string_literal438)
            ;
            adaptor.addChild(root_0, string_literal438_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4175);
            protocol_name439=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name439.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:31: ( implements_interfaces )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==135) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4177);
                    implements_interfaces440=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces440.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4185);
            class_protocol_end441=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end441.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:691:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal443=null;
        ObjcParser.declarations_return declarations442 =null;


        Object string_literal443_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: ( declarations )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==MULTI_COMMENT_LIT||LA81_0==SINGLE_COMMENT_LIT||LA81_0==122||LA81_0==126||LA81_0==153||LA81_0==155) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4199);
            	    declarations442=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations442.getTree());

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            string_literal443=(Token)match(input,149,FOLLOW_149_in_class_protocol_end4206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal443_tree = 
            (Object)adaptor.create(string_literal443)
            ;
            adaptor.addChild(root_0, string_literal443_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal444=null;
        Token char_literal446=null;
        ObjcParser.template_internal_return template_internal445 =null;


        Object char_literal444_tree=null;
        Object char_literal446_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal444=(Token)match(input,135,FOLLOW_135_in_template4218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal444_tree = 
            (Object)adaptor.create(char_literal444)
            ;
            adaptor.addChild(root_0, char_literal444_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4220);
            template_internal445=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal445.getTree());

            char_literal446=(Token)match(input,141,FOLLOW_141_in_template4222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal446_tree = 
            (Object)adaptor.create(char_literal446)
            ;
            adaptor.addChild(root_0, char_literal446_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols447 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4231);
            implements_protocols447=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols447.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 699:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal448=null;
        Token char_literal450=null;
        Token char_literal452=null;
        ObjcParser.type_dec_internal_return type_dec_internal449 =null;

        ObjcParser.type_dec_internal_return type_dec_internal451 =null;


        Object char_literal448_tree=null;
        Object char_literal450_tree=null;
        Object char_literal452_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal448=(Token)match(input,135,FOLLOW_135_in_implements_protocols4256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal448);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4258);
            type_dec_internal449=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal449.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:27: ( ',' type_dec_internal )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==125) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:28: ',' type_dec_internal
            	    {
            	    char_literal450=(Token)match(input,125,FOLLOW_125_in_implements_protocols4261); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal450);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4263);
            	    type_dec_internal451=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal451.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            char_literal452=(Token)match(input,141,FOLLOW_141_in_implements_protocols4267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal452);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 703:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:703:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal454=null;
        ObjcParser.template_type_return template_type453 =null;

        ObjcParser.template_type_return template_type455 =null;


        Object char_literal454_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4289);
            template_type453=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type453.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:19: ( ',' template_type )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==125) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:20: ',' template_type
            	    {
            	    char_literal454=(Token)match(input,125,FOLLOW_125_in_template_internal4292); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal454_tree = 
            	    (Object)adaptor.create(char_literal454)
            	    ;
            	    adaptor.addChild(root_0, char_literal454_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4294);
            	    template_type455=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type455.getTree());

            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal457=null;
        ObjcParser.template_name_return template_name456 =null;

        ObjcParser.template_name_return template_name458 =null;


        Object string_literal457_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:3: ( template_name | 'struct' template_name )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ID) ) {
                alt84=1;
            }
            else if ( (LA84_0==190) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }
            switch (alt84) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4308);
                    template_name456=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name456.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal457=(Token)match(input,190,FOLLOW_190_in_template_type4314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal457_tree = 
                    (Object)adaptor.create(string_literal457)
                    ;
                    adaptor.addChild(root_0, string_literal457_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4316);
                    template_name458=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name458.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID459=null;

        Object ID459_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:5: ID
            {
            ID459=(Token)match(input,ID,FOLLOW_ID_in_template_name4331); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID459);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 715:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:715:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID460=null;

        Object ID460_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:5: ID
            {
            ID460=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4354); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID460);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 719:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal461=null;
        Token string_literal466=null;
        ObjcParser.interface_name_return interface_name462 =null;

        ObjcParser.superclass_name_return superclass_name463 =null;

        ObjcParser.fields_body_return fields_body464 =null;

        ObjcParser.declarations_return declarations465 =null;


        Object string_literal461_tree=null;
        Object string_literal466_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal461=(Token)match(input,152,FOLLOW_152_in_interface_declaration4378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal461_tree = 
            (Object)adaptor.create(string_literal461)
            ;
            adaptor.addChild(root_0, string_literal461_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4380);
            interface_name462=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name462.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4382);
            superclass_name463=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name463.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:723:3: ( fields_body )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==197) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:723:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4386);
                    fields_body464=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body464.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:3: ( declarations )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==MULTI_COMMENT_LIT||LA86_0==SINGLE_COMMENT_LIT||LA86_0==122||LA86_0==126||LA86_0==153||LA86_0==155) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4391);
            	    declarations465=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations465.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            string_literal466=(Token)match(input,149,FOLLOW_149_in_interface_declaration4396); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal466_tree = 
            (Object)adaptor.create(string_literal466)
            ;
            adaptor.addChild(root_0, string_literal466_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal467=null;
        Token char_literal469=null;
        ObjcParser.body_item_return body_item468 =null;


        Object char_literal467_tree=null;
        Object char_literal469_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal467=(Token)match(input,197,FOLLOW_197_in_fields_body4413); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal467_tree = 
            (Object)adaptor.create(char_literal467)
            ;
            adaptor.addChild(root_0, char_literal467_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: ( body_item )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==ID||LA87_0==MULTI_COMMENT_LIT||LA87_0==SINGLE_COMMENT_LIT||LA87_0==118||LA87_0==154||LA87_0==156||LA87_0==158||LA87_0==164||LA87_0==173||LA87_0==178||LA87_0==182||(LA87_0 >= 185 && LA87_0 <= 186)||LA87_0==188||LA87_0==190||(LA87_0 >= 192 && LA87_0 <= 195)) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4419);
            	    body_item468=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item468.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);


            char_literal469=(Token)match(input,201,FOLLOW_201_in_fields_body4424); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal469_tree = 
            (Object)adaptor.create(char_literal469)
            ;
            adaptor.addChild(root_0, char_literal469_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper470 =null;

        ObjcParser.field_modifiers_return field_modifiers471 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper472 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper473 =null;

        ObjcParser.comments_return comments474 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==ID||LA91_0==118||LA91_0==154||LA91_0==156||LA91_0==158||LA91_0==164||LA91_0==173||LA91_0==178||LA91_0==182||(LA91_0 >= 185 && LA91_0 <= 186)||LA91_0==188||LA91_0==190||(LA91_0 >= 192 && LA91_0 <= 195)) ) {
                alt91=1;
            }
            else if ( (LA91_0==MULTI_COMMENT_LIT||LA91_0==SINGLE_COMMENT_LIT) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: ( group_modifier_wrapper )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==154||LA88_0==156||LA88_0==158) ) {
                        alt88=1;
                    }
                    switch (alt88) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4439);
                            group_modifier_wrapper470=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper470.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:29: ( field_modifiers )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==164) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4442);
                            field_modifiers471=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers471.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==192) ) {
                        alt90=1;
                    }
                    else if ( (LA90_0==ID||LA90_0==118||LA90_0==173||LA90_0==178||LA90_0==182||(LA90_0 >= 185 && LA90_0 <= 186)||LA90_0==188||LA90_0==190||(LA90_0 >= 193 && LA90_0 <= 195)) ) {
                        alt90=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 90, 0, input);

                        throw nvae;

                    }
                    switch (alt90) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4446);
                            typedef_declaration_wrapper472=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper472.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4450);
                            field_declaration_wrapper473=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper473.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4457);
                    comments474=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments474.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier475 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4470);
            group_modifier475=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier475.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 741:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:741:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set476=null;

        Object set476_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set476=(Token)input.LT(1);

            if ( input.LA(1)==154||input.LA(1)==156||input.LA(1)==158 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set476)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:746:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal477=null;

        Object string_literal477_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal477=(Token)match(input,164,FOLLOW_164_in_field_modifiers4515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal477_tree = 
            (Object)adaptor.create(string_literal477)
            ;
            adaptor.addChild(root_0, string_literal477_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:750:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID478=null;
        ObjcParser.category_return category479 =null;


        Object ID478_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:5: ID ( category )?
            {
            ID478=(Token)match(input,ID,FOLLOW_ID_in_interface_name4530); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID478);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:8: ( category )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==118) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4532);
                    category479=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category479.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, category
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 751:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal480=null;
        Token ID481=null;
        Token char_literal482=null;

        Object char_literal480_tree=null;
        Object ID481_tree=null;
        Object char_literal482_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:11: '(' ( ID )? ')'
            {
            char_literal480=(Token)match(input,118,FOLLOW_118_in_category4551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal480);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:15: ( ID )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==ID) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:15: ID
                    {
                    ID481=(Token)match(input,ID,FOLLOW_ID_in_category4553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID481);


                    }
                    break;

            }


            char_literal482=(Token)match(input,119,FOLLOW_119_in_category4556); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal482);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 753:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:753:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal483=null;
        Token ID484=null;
        ObjcParser.implements_interfaces_return implements_interfaces485 =null;


        Object char_literal483_tree=null;
        Object ID484_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:5: ( ':' ID )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==133) ) {
                alt94=1;
            }
            switch (alt94) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:6: ':' ID
                    {
                    char_literal483=(Token)match(input,133,FOLLOW_133_in_superclass_name4576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal483);


                    ID484=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID484);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:15: ( implements_interfaces )?
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==135) ) {
                alt95=1;
            }
            switch (alt95) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4582);
                    implements_interfaces485=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces485.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: implements_interfaces, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 756:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration486 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:5: ( field_declaration )+
            int cnt96=0;
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==ID||LA96_0==118||LA96_0==173||LA96_0==178||LA96_0==182||(LA96_0 >= 185 && LA96_0 <= 186)||LA96_0==188||LA96_0==190||(LA96_0 >= 193 && LA96_0 <= 195)) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4611);
            	    field_declaration486=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration486.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt96 >= 1 ) break loop96;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(96, input);
                        throw eee;
                }
                cnt96++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 760:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:1: field_declaration : ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) ;
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal489=null;
        Token char_literal492=null;
        Token char_literal496=null;
        Token char_literal497=null;
        ObjcParser.type_declaration_return type_declaration487 =null;

        ObjcParser.field_name_return field_name488 =null;

        ObjcParser.field_name_return field_name490 =null;

        ObjcParser.classical_method_params_return classical_method_params491 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper493 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper494 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init495 =null;


        Object char_literal489_tree=null;
        Object char_literal492_tree=null;
        Object char_literal496_tree=null;
        Object char_literal497_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:3: ( ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:6: ( type_declaration field_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:7: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration4635);
            type_declaration487=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration487.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration4637);
            field_name488=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name488.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:36: ( ',' field_name )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==125) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:37: ',' field_name
            	    {
            	    char_literal489=(Token)match(input,125,FOLLOW_125_in_field_declaration4641); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal489_tree = 
            	    (Object)adaptor.create(char_literal489)
            	    ;
            	    adaptor.addChild(root_0, char_literal489_tree);
            	    }

            	    pushFollow(FOLLOW_field_name_in_field_declaration4643);
            	    field_name490=field_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name490.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( ((LA100_0 >= 117 && LA100_0 <= 118)||LA100_0==121||LA100_0==124||LA100_0==128||LA100_0==132||LA100_0==137||LA100_0==139||LA100_0==144||LA100_0==199) ) {
                alt100=1;
            }
            else if ( (LA100_0==134) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==118) ) {
                        alt99=1;
                    }
                    else if ( (LA99_0==117||LA99_0==121||LA99_0==124||LA99_0==128||LA99_0==132||LA99_0==137||LA99_0==139||LA99_0==144||LA99_0==199) ) {
                        alt99=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 99, 0, input);

                        throw nvae;

                    }
                    switch (alt99) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:57: classical_method_params ( ';' | block_multiline_wrapper )
                            {
                            pushFollow(FOLLOW_classical_method_params_in_field_declaration4650);
                            classical_method_params491=classical_method_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params491.getTree());

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:81: ( ';' | block_multiline_wrapper )
                            int alt98=2;
                            int LA98_0 = input.LA(1);

                            if ( (LA98_0==134) ) {
                                alt98=1;
                            }
                            else if ( (LA98_0==197) ) {
                                alt98=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 98, 0, input);

                                throw nvae;

                            }
                            switch (alt98) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:82: ';'
                                    {
                                    char_literal492=(Token)match(input,134,FOLLOW_134_in_field_declaration4653); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal492_tree = 
                                    (Object)adaptor.create(char_literal492)
                                    ;
                                    adaptor.addChild(root_0, char_literal492_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:88: block_multiline_wrapper
                                    {
                                    pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4657);
                                    block_multiline_wrapper493=block_multiline_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper493.getTree());

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:116: ( op_assign_wrapper element_value_or_array_init ';' )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:117: op_assign_wrapper element_value_or_array_init ';'
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4664);
                            op_assign_wrapper494=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper494.getTree());

                            pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4666);
                            element_value_or_array_init495=element_value_or_array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init495.getTree());

                            char_literal496=(Token)match(input,134,FOLLOW_134_in_field_declaration4668); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal496_tree = 
                            (Object)adaptor.create(char_literal496)
                            ;
                            adaptor.addChild(root_0, char_literal496_tree);
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:171: ';'
                    {
                    char_literal497=(Token)match(input,134,FOLLOW_134_in_field_declaration4674); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal497_tree = 
                    (Object)adaptor.create(char_literal497)
                    ;
                    adaptor.addChild(root_0, char_literal497_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:766:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration498 =null;

        ObjcParser.field_name_return field_name499 =null;


        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple4689);
            type_declaration498=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration498.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple4691);
            field_name499=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name499.getTree());

            // AST REWRITE
            // elements: field_name, type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 767:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal500=null;
        Token char_literal502=null;
        Token char_literal504=null;
        ObjcParser.classical_param_return classical_param501 =null;

        ObjcParser.classical_param_return classical_param503 =null;


        Object char_literal500_tree=null;
        Object char_literal502_tree=null;
        Object char_literal504_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal500=(Token)match(input,118,FOLLOW_118_in_classical_method_params4716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal500);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:9: ( classical_param )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==ID||LA101_0==118||LA101_0==173||LA101_0==178||LA101_0==182||(LA101_0 >= 185 && LA101_0 <= 186)||LA101_0==188||LA101_0==190||(LA101_0 >= 193 && LA101_0 <= 195)) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params4718);
                    classical_param501=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param501.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:26: ( ',' classical_param )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==125) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:27: ',' classical_param
            	    {
            	    char_literal502=(Token)match(input,125,FOLLOW_125_in_classical_method_params4722); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_125.add(char_literal502);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params4724);
            	    classical_param503=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param503.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            char_literal504=(Token)match(input,119,FOLLOW_119_in_classical_method_params4728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal504);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 771:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration505 =null;

        ObjcParser.param_name_return param_name506 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param4753);
            classical_type_declaration505=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration505.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param4755);
            param_name506=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name506.getTree());

            // AST REWRITE
            // elements: param_name, classical_type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 775:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:778:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal510=null;
        Token string_literal511=null;
        Token char_literal513=null;
        Token string_literal514=null;
        Token char_literal516=null;
        Token string_literal517=null;
        Token char_literal519=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol507 =null;

        ObjcParser.func_pointer_return func_pointer508 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane509 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper512 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper515 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper518 =null;


        Object char_literal510_tree=null;
        Object string_literal511_tree=null;
        Object char_literal513_tree=null;
        Object string_literal514_tree=null;
        Object char_literal516_tree=null;
        Object string_literal517_tree=null;
        Object char_literal519_tree=null;
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt107=6;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==182) ) {
                int LA107_1 = input.LA(2);

                if ( (LA107_1==135) && (synpred22_Objc())) {
                    alt107=1;
                }
                else if ( (LA107_1==ID||LA107_1==116||(LA107_1 >= 119 && LA107_1 <= 120)||LA107_1==166||LA107_1==173) ) {
                    alt107=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA107_0==118) && (synpred23_Objc())) {
                alt107=2;
            }
            else if ( (LA107_0==ID||LA107_0==173||(LA107_0 >= 185 && LA107_0 <= 186)||LA107_0==188||(LA107_0 >= 194 && LA107_0 <= 195)) ) {
                alt107=3;
            }
            else if ( (LA107_0==190) ) {
                alt107=4;
            }
            else if ( (LA107_0==193) ) {
                alt107=5;
            }
            else if ( (LA107_0==178) ) {
                alt107=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration4784);
                    type_declaration_protocol507=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol507.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration4795);
                    func_pointer508=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer508.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration4801);
                    type_declaration_plane509=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane509.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:28: ( '&' )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==116) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:28: '&'
                            {
                            char_literal510=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4803); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal510_tree = 
                            (Object)adaptor.create(char_literal510)
                            ;
                            adaptor.addChild(root_0, char_literal510_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal511=(Token)match(input,190,FOLLOW_190_in_classical_type_declaration4811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal511);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4813);
                    type_dec_wrapper512=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper512.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:32: ( '&' )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==116) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:32: '&'
                            {
                            char_literal513=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4815); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal513);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 782:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal514=(Token)match(input,193,FOLLOW_193_in_classical_type_declaration4832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal514);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4834);
                    type_dec_wrapper515=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper515.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:31: ( '&' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==116) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:31: '&'
                            {
                            char_literal516=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4836); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal516);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 783:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal517=(Token)match(input,178,FOLLOW_178_in_classical_type_declaration4853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal517);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration4855);
                    type_dec_wrapper518=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper518.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:30: ( '&' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==116) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:30: '&'
                            {
                            char_literal519=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration4857); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal519);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 784:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:787:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal523=null;
        Token char_literal524=null;
        Token char_literal526=null;
        Token char_literal528=null;
        Token char_literal530=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol520 =null;

        ObjcParser.func_pointer_return func_pointer521 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct522 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum525 =null;

        ObjcParser.type_declaration_union_return type_declaration_union527 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane529 =null;


        Object char_literal523_tree=null;
        Object char_literal524_tree=null;
        Object char_literal526_tree=null;
        Object char_literal528_tree=null;
        Object char_literal530_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt113=6;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==182) ) {
                int LA113_1 = input.LA(2);

                if ( (LA113_1==135) && (synpred24_Objc())) {
                    alt113=1;
                }
                else if ( (LA113_1==ID||LA113_1==116||(LA113_1 >= 119 && LA113_1 <= 120)||LA113_1==166||LA113_1==173) ) {
                    alt113=6;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA113_0==118) && (synpred25_Objc())) {
                alt113=2;
            }
            else if ( (LA113_0==190) ) {
                alt113=3;
            }
            else if ( (LA113_0==178) ) {
                alt113=4;
            }
            else if ( (LA113_0==193) ) {
                alt113=5;
            }
            else if ( (LA113_0==ID||LA113_0==173||(LA113_0 >= 185 && LA113_0 <= 186)||LA113_0==188||(LA113_0 >= 194 && LA113_0 <= 195)) ) {
                alt113=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;

            }
            switch (alt113) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration4886);
                    type_declaration_protocol520=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol520.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration4897);
                    func_pointer521=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer521.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:5: type_declaration_struct ( '&' )? ( '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration4903);
                    type_declaration_struct522=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct522.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:29: ( '&' )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==116) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:29: '&'
                            {
                            char_literal523=(Token)match(input,116,FOLLOW_116_in_type_declaration4905); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal523_tree = 
                            (Object)adaptor.create(char_literal523)
                            ;
                            adaptor.addChild(root_0, char_literal523_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:33: ( '*' )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==120) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:33: '*'
                            {
                            char_literal524=(Token)match(input,120,FOLLOW_120_in_type_declaration4907); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal524_tree = 
                            (Object)adaptor.create(char_literal524)
                            ;
                            adaptor.addChild(root_0, char_literal524_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration4914);
                    type_declaration_enum525=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum525.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:27: ( '&' )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==116) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:791:27: '&'
                            {
                            char_literal526=(Token)match(input,116,FOLLOW_116_in_type_declaration4916); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal526_tree = 
                            (Object)adaptor.create(char_literal526)
                            ;
                            adaptor.addChild(root_0, char_literal526_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration4923);
                    type_declaration_union527=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union527.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:28: ( '&' )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==116) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:28: '&'
                            {
                            char_literal528=(Token)match(input,116,FOLLOW_116_in_type_declaration4925); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal528_tree = 
                            (Object)adaptor.create(char_literal528)
                            ;
                            adaptor.addChild(root_0, char_literal528_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration4932);
                    type_declaration_plane529=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane529.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:28: ( '&' )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==116) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:28: '&'
                            {
                            char_literal530=(Token)match(input,116,FOLLOW_116_in_type_declaration4934); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal530_tree = 
                            (Object)adaptor.create(char_literal530)
                            ;
                            adaptor.addChild(root_0, char_literal530_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:1: type_declaration_plane : ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal531=null;
        Token string_literal532=null;
        Token string_literal533=null;
        Token string_literal535=null;
        Token char_literal536=null;
        ObjcParser.type_dec_return type_dec534 =null;


        Object string_literal531_tree=null;
        Object string_literal532_tree=null;
        Object string_literal533_tree=null;
        Object string_literal535_tree=null;
        Object char_literal536_tree=null;
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:3: ( ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( 'volatile' )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==195) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: 'volatile'
                    {
                    string_literal531=(Token)match(input,195,FOLLOW_195_in_type_declaration_plane4949); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(string_literal531);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:17: ( 'const' )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==173) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:17: 'const'
                    {
                    string_literal532=(Token)match(input,173,FOLLOW_173_in_type_declaration_plane4952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(string_literal532);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:26: ( 'unsigned' )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==194) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:26: 'unsigned'
                    {
                    string_literal533=(Token)match(input,194,FOLLOW_194_in_type_declaration_plane4955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(string_literal533);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane4958);
            type_dec534=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec534.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:47: ( 'const' ( '*' )? )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==173) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:48: 'const' ( '*' )?
                    {
                    string_literal535=(Token)match(input,173,FOLLOW_173_in_type_declaration_plane4961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(string_literal535);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:56: ( '*' )?
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==120) ) {
                        alt117=1;
                    }
                    switch (alt117) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:56: '*'
                            {
                            char_literal536=(Token)match(input,120,FOLLOW_120_in_type_declaration_plane4963); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_120.add(char_literal536);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: type_dec, 195, 173
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 797:63: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:66: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:79: ( 'volatile' )?
                if ( stream_195.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_195.nextNode()
                    );

                }
                stream_195.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:100: ( 'const' )?
                if ( stream_173.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_173.nextNode()
                    );

                }
                stream_173.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal537=null;
        Token char_literal538=null;

        Object string_literal537_tree=null;
        Object char_literal538_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:6: 'id' '<'
            {
            string_literal537=(Token)match(input,182,FOLLOW_182_in_type_decl_protocol_predicate4995); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal537_tree = 
            (Object)adaptor.create(string_literal537)
            ;
            adaptor.addChild(root_0, string_literal537_tree);
            }

            char_literal538=(Token)match(input,135,FOLLOW_135_in_type_decl_protocol_predicate4997); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal538_tree = 
            (Object)adaptor.create(char_literal538)
            ;
            adaptor.addChild(root_0, char_literal538_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal539=null;
        Token char_literal540=null;
        Token char_literal542=null;
        ObjcParser.type_dec_internal_return type_dec_internal541 =null;


        Object string_literal539_tree=null;
        Object char_literal540_tree=null;
        Object char_literal542_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:5: 'id' '<' type_dec_internal '>'
            {
            string_literal539=(Token)match(input,182,FOLLOW_182_in_type_declaration_protocol5013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal539);


            char_literal540=(Token)match(input,135,FOLLOW_135_in_type_declaration_protocol5015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal540);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol5017);
            type_dec_internal541=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal541.getTree());

            char_literal542=(Token)match(input,141,FOLLOW_141_in_type_declaration_protocol5019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_141.add(char_literal542);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal543=null;
        ObjcParser.typedef_name_return typedef_name544 =null;


        Object string_literal543_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: 'struct' typedef_name
            {
            string_literal543=(Token)match(input,190,FOLLOW_190_in_type_declaration_struct_simple5041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal543);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple5043);
            typedef_name544=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name544.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal545=null;
        ObjcParser.typedef_name_return typedef_name546 =null;


        Object string_literal545_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: 'union' typedef_name
            {
            string_literal545=(Token)match(input,193,FOLLOW_193_in_type_declaration_union_simple5063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal545);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5065);
            typedef_name546=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name546.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 813:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal547=null;
        ObjcParser.typedef_name_return typedef_name548 =null;


        Object string_literal547_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: 'enum' typedef_name
            {
            string_literal547=(Token)match(input,178,FOLLOW_178_in_type_declaration_enum_simple5089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_178.add(string_literal547);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5091);
            typedef_name548=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name548.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 817:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal549=null;
        ObjcParser.typedef_name_return typedef_name550 =null;

        ObjcParser.struct_wrapper_return struct_wrapper551 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple552 =null;


        Object string_literal549_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:3: ( ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) | type_declaration_struct_simple )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==190) ) {
                int LA120_1 = input.LA(2);

                if ( (LA120_1==ID) ) {
                    int LA120_2 = input.LA(3);

                    if ( (LA120_2==197) && (synpred26_Objc())) {
                        alt120=1;
                    }
                    else if ( (LA120_2==ID||LA120_2==116||(LA120_2 >= 119 && LA120_2 <= 120)) ) {
                        alt120=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 120, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA120_1==197) && (synpred26_Objc())) {
                    alt120=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 120, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;

            }
            switch (alt120) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: ( 'struct' ( typedef_name )? '{' )=> 'struct' ( typedef_name )? struct_wrapper
                    {
                    string_literal549=(Token)match(input,190,FOLLOW_190_in_type_declaration_struct5121); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal549);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:45: ( typedef_name )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==ID) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:45: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct5123);
                            typedef_name550=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name550.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct5126);
                    struct_wrapper551=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper551.getTree());

                    // AST REWRITE
                    // elements: typedef_name, struct_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 821:74: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:76: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:89: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5142);
                    type_declaration_struct_simple552=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple552.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal553=null;
        ObjcParser.typedef_name_return typedef_name554 =null;

        ObjcParser.struct_wrapper_return struct_wrapper555 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple556 =null;


        Object string_literal553_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:3: ( ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) | type_declaration_union_simple )
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==193) ) {
                int LA122_1 = input.LA(2);

                if ( (LA122_1==ID) ) {
                    int LA122_2 = input.LA(3);

                    if ( (LA122_2==197) && (synpred27_Objc())) {
                        alt122=1;
                    }
                    else if ( (LA122_2==ID||LA122_2==116||LA122_2==119) ) {
                        alt122=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 122, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA122_1==197) && (synpred27_Objc())) {
                    alt122=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 122, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 122, 0, input);

                throw nvae;

            }
            switch (alt122) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: ( 'union' ( typedef_name )? '{' )=> 'union' ( typedef_name )? struct_wrapper
                    {
                    string_literal553=(Token)match(input,193,FOLLOW_193_in_type_declaration_union5166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal553);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:43: ( typedef_name )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==ID) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:43: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_union5168);
                            typedef_name554=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name554.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union5171);
                    struct_wrapper555=struct_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper555.getTree());

                    // AST REWRITE
                    // elements: typedef_name, struct_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 826:72: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:74: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:86: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5187);
                    type_declaration_union_simple556=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple556.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:830:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal557=null;
        ObjcParser.typedef_name_return typedef_name558 =null;

        ObjcParser.enum_wrapper_return enum_wrapper559 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple560 =null;


        Object string_literal557_tree=null;
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:3: ( ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) | type_declaration_enum_simple )
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==178) ) {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==ID) ) {
                    int LA124_2 = input.LA(3);

                    if ( (LA124_2==197) && (synpred28_Objc())) {
                        alt124=1;
                    }
                    else if ( (LA124_2==ID||LA124_2==116||LA124_2==119) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA124_1==197) && (synpred28_Objc())) {
                    alt124=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 124, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:5: ( 'enum' ( typedef_name )? '{' )=> 'enum' ( typedef_name )? enum_wrapper
                    {
                    string_literal557=(Token)match(input,178,FOLLOW_178_in_type_declaration_enum5211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal557);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:41: ( typedef_name )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==ID) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:41: typedef_name
                            {
                            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum5213);
                            typedef_name558=typedef_name();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name558.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum5216);
                    enum_wrapper559=enum_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper559.getTree());

                    // AST REWRITE
                    // elements: enum_wrapper, typedef_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 831:68: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:70: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:81: ( typedef_name )?
                        if ( stream_typedef_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_typedef_name.nextTree());

                        }
                        stream_typedef_name.reset();

                        adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5232);
                    type_declaration_enum_simple560=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple560.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal561=null;
        Token char_literal563=null;
        ObjcParser.enum_element_return enum_element562 =null;


        Object char_literal561_tree=null;
        Object char_literal563_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal561=(Token)match(input,197,FOLLOW_197_in_enum_wrapper5245); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal561_tree = 
            (Object)adaptor.create(char_literal561)
            ;
            adaptor.addChild(root_0, char_literal561_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:9: ( enum_element )+
            int cnt125=0;
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==ID||LA125_0==MULTI_COMMENT_LIT||LA125_0==SINGLE_COMMENT_LIT) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5255);
            	    enum_element562=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element562.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt125 >= 1 ) break loop125;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(125, input);
                        throw eee;
                }
                cnt125++;
            } while (true);


            char_literal563=(Token)match(input,201,FOLLOW_201_in_enum_wrapper5262); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal563_tree = 
            (Object)adaptor.create(char_literal563)
            ;
            adaptor.addChild(root_0, char_literal563_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:1: enum_element : ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal567=null;
        ObjcParser.name_return name564 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper565 =null;

        ObjcParser.element_value_return element_value566 =null;

        ObjcParser.comments_return comments568 =null;


        Object char_literal567_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:3: ( name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( (LA128_0==ID) ) {
                alt128=1;
            }
            else if ( (LA128_0==MULTI_COMMENT_LIT||LA128_0==SINGLE_COMMENT_LIT) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;

            }
            switch (alt128) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    pushFollow(FOLLOW_name_in_enum_element5277);
                    name564=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name564.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:10: ( op_assign_wrapper element_value )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==117||LA126_0==121||LA126_0==124||LA126_0==128||LA126_0==132||LA126_0==137||LA126_0==139||LA126_0==144||LA126_0==199) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:11: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5280);
                            op_assign_wrapper565=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper565.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5282);
                            element_value566=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value566.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:45: ( ',' )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==125) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:45: ','
                            {
                            char_literal567=(Token)match(input,125,FOLLOW_125_in_enum_element5286); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_125.add(char_literal567);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: op_assign_wrapper, name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 842:50: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:52: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:70: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5307);
                    comments568=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments568.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct569 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5322);
            struct569=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct569.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 847:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:849:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal570=null;
        Token char_literal572=null;
        ObjcParser.struct_internal_return struct_internal571 =null;


        Object char_literal570_tree=null;
        Object char_literal572_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:850:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal570=(Token)match(input,197,FOLLOW_197_in_struct5340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal570_tree = 
            (Object)adaptor.create(char_literal570)
            ;
            adaptor.addChild(root_0, char_literal570_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:7: ( struct_internal )+
            int cnt129=0;
            loop129:
            do {
                int alt129=2;
                int LA129_0 = input.LA(1);

                if ( (LA129_0==ID||LA129_0==MULTI_COMMENT_LIT||LA129_0==SINGLE_COMMENT_LIT||LA129_0==118||LA129_0==173||LA129_0==178||LA129_0==182||(LA129_0 >= 185 && LA129_0 <= 186)||LA129_0==188||LA129_0==190||(LA129_0 >= 193 && LA129_0 <= 195)) ) {
                    alt129=1;
                }


                switch (alt129) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5349);
            	    struct_internal571=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal571.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt129 >= 1 ) break loop129;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(129, input);
                        throw eee;
                }
                cnt129++;
            } while (true);


            char_literal572=(Token)match(input,201,FOLLOW_201_in_struct5356); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal572_tree = 
            (Object)adaptor.create(char_literal572)
            ;
            adaptor.addChild(root_0, char_literal572_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper573 =null;

        ObjcParser.comments_return comments574 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:3: ( field_declaration_wrapper | comments )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ID||LA130_0==118||LA130_0==173||LA130_0==178||LA130_0==182||(LA130_0 >= 185 && LA130_0 <= 186)||LA130_0==188||LA130_0==190||(LA130_0 >= 193 && LA130_0 <= 195)) ) {
                alt130=1;
            }
            else if ( (LA130_0==MULTI_COMMENT_LIT||LA130_0==SINGLE_COMMENT_LIT) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;

            }
            switch (alt130) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5370);
                    field_declaration_wrapper573=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper573.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:857:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5376);
                    comments574=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments574.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec575 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5391);
            type_dec575=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec575.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 861:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:861:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:1: type_dec : type_dec_internal ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal577=null;
        ObjcParser.type_dec_internal_return type_dec_internal576 =null;

        ObjcParser.array_size_return array_size578 =null;


        Object char_literal577_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:9: ( type_dec_internal ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:11: type_dec_internal ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec5411);
            type_dec_internal576=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal576.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:29: ( '*' )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==120) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:29: '*'
            	    {
            	    char_literal577=(Token)match(input,120,FOLLOW_120_in_type_dec5413); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal577_tree = 
            	    (Object)adaptor.create(char_literal577)
            	    ;
            	    adaptor.addChild(root_0, char_literal577_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:34: ( array_size )*
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);

                if ( (LA132_0==166) ) {
                    alt132=1;
                }


                switch (alt132) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:35: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec5417);
            	    array_size578=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size578.getTree());

            	    }
            	    break;

            	default :
            	    break loop132;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID580=null;
        ObjcParser.knownTypes_return knownTypes579 =null;


        Object ID580_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:3: ( knownTypes | ID )
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==182||(LA133_0 >= 185 && LA133_0 <= 186)||LA133_0==188) ) {
                alt133=1;
            }
            else if ( (LA133_0==ID) ) {
                alt133=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;

            }
            switch (alt133) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal5434);
                    knownTypes579=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes579.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID580=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal5443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID580_tree = 
                    (Object)adaptor.create(ID580)
                    ;
                    adaptor.addChild(root_0, ID580_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal581=null;
        Token string_literal582=null;
        Token string_literal583=null;
        Token string_literal584=null;
        Token string_literal585=null;
        Token string_literal586=null;

        Object string_literal581_tree=null;
        Object string_literal582_tree=null;
        Object string_literal583_tree=null;
        Object string_literal584_tree=null;
        Object string_literal585_tree=null;
        Object string_literal586_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt138=4;
            switch ( input.LA(1) ) {
            case 185:
                {
                alt138=1;
                }
                break;
            case 182:
                {
                alt138=2;
                }
                break;
            case 186:
                {
                alt138=3;
                }
                break;
            case 188:
                {
                alt138=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;

            }

            switch (alt138) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal581=(Token)match(input,185,FOLLOW_185_in_knownTypes5456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal581_tree = 
                    (Object)adaptor.create(string_literal581)
                    ;
                    adaptor.addChild(root_0, string_literal581_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:874:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal582=(Token)match(input,182,FOLLOW_182_in_knownTypes5462); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal582_tree = 
                    (Object)adaptor.create(string_literal582)
                    ;
                    adaptor.addChild(root_0, string_literal582_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:5: ( 'long' )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==186) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:5: 'long'
                    	    {
                    	    string_literal583=(Token)match(input,186,FOLLOW_186_in_knownTypes5468); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal583_tree = 
                    	    (Object)adaptor.create(string_literal583)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal583_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:13: ( 'int' )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==185) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:13: 'int'
                            {
                            string_literal584=(Token)match(input,185,FOLLOW_185_in_knownTypes5471); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal584_tree = 
                            (Object)adaptor.create(string_literal584)
                            ;
                            adaptor.addChild(root_0, string_literal584_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: ( 'short' )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==188) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: 'short'
                    	    {
                    	    string_literal585=(Token)match(input,188,FOLLOW_188_in_knownTypes5478); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal585_tree = 
                    	    (Object)adaptor.create(string_literal585)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal585_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:14: ( 'int' )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==185) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:14: 'int'
                            {
                            string_literal586=(Token)match(input,185,FOLLOW_185_in_knownTypes5481); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal586_tree = 
                            (Object)adaptor.create(string_literal586)
                            ;
                            adaptor.addChild(root_0, string_literal586_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID587=null;
        ObjcParser.array_size_return array_size588 =null;

        ObjcParser.field_crap_return field_crap589 =null;


        Object ID587_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:5: ID ( array_size )* ( field_crap )?
            {
            ID587=(Token)match(input,ID,FOLLOW_ID_in_field_name5497); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID587);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:8: ( array_size )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==166) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name5499);
            	    array_size588=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size588.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:20: ( field_crap )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==133) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name5503);
                    field_crap589=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap589.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: array_size, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 880:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:1: array_size : '[' ( NUMBER_LITERAL | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal590=null;
        Token set591=null;
        Token char_literal592=null;

        Object char_literal590_tree=null;
        Object set591_tree=null;
        Object char_literal592_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:3: ( '[' ( NUMBER_LITERAL | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:5: '[' ( NUMBER_LITERAL | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal590=(Token)match(input,166,FOLLOW_166_in_array_size5531); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal590_tree = 
            (Object)adaptor.create(char_literal590)
            ;
            adaptor.addChild(root_0, char_literal590_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:9: ( NUMBER_LITERAL | ID )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==ID||LA141_0==NUMBER_LITERAL) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set591=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER_LITERAL ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set591)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal592=(Token)match(input,168,FOLLOW_168_in_array_size5542); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal592_tree = 
            (Object)adaptor.create(char_literal592)
            ;
            adaptor.addChild(root_0, char_literal592_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:885:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal593=null;
        Token NUMBER_LITERAL594=null;

        Object char_literal593_tree=null;
        Object NUMBER_LITERAL594_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:886:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal593=(Token)match(input,133,FOLLOW_133_in_field_crap5552); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal593_tree = 
            (Object)adaptor.create(char_literal593)
            ;
            adaptor.addChild(root_0, char_literal593_tree);
            }

            NUMBER_LITERAL594=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap5554); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL594_tree = 
            (Object)adaptor.create(NUMBER_LITERAL594)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL594_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper595 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants596 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration5566);
            method_modifier_wrapper595=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper595.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration5568);
            method_declaration_variants596=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants596.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:891:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier597 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5580);
            method_modifier597=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier597.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 892:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set598=null;

        Object set598_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:895:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set598=(Token)input.LT(1);

            if ( input.LA(1)==122||input.LA(1)==126 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set598)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common599 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants5617);
            method_declaration_common599=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common599.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:900:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal600=null;
        Token char_literal602=null;
        Token char_literal605=null;
        ObjcParser.type_declaration_return type_declaration601 =null;

        ObjcParser.method_name_return method_name603 =null;

        ObjcParser.method_params_return method_params604 =null;


        Object char_literal600_tree=null;
        Object char_literal602_tree=null;
        Object char_literal605_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:6: '(' type_declaration ')' method_name
            {
            char_literal600=(Token)match(input,118,FOLLOW_118_in_method_declaration_common5630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal600_tree = 
            (Object)adaptor.create(char_literal600)
            ;
            adaptor.addChild(root_0, char_literal600_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common5632);
            type_declaration601=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration601.getTree());

            char_literal602=(Token)match(input,119,FOLLOW_119_in_method_declaration_common5634); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal602_tree = 
            (Object)adaptor.create(char_literal602)
            ;
            adaptor.addChild(root_0, char_literal602_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common5636);
            method_name603=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name603.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:44: ( method_params )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==ID||LA142_0==133) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:901:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common5639);
                    method_params604=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params604.getTree());

                    }
                    break;

            }


            char_literal605=(Token)match(input,134,FOLLOW_134_in_method_declaration_common5642); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal605_tree = 
            (Object)adaptor.create(char_literal605)
            ;
            adaptor.addChild(root_0, char_literal605_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal607=null;
        Token char_literal609=null;
        ObjcParser.method_modifier_return method_modifier606 =null;

        ObjcParser.type_declaration_return type_declaration608 =null;

        ObjcParser.method_name_return method_name610 =null;


        Object char_literal607_tree=null;
        Object char_literal609_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate5654);
            method_modifier606=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier606.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:22: '(' type_declaration ')' method_name
            {
            char_literal607=(Token)match(input,118,FOLLOW_118_in_method_declaration_predicate5657); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal607_tree = 
            (Object)adaptor.create(char_literal607)
            ;
            adaptor.addChild(root_0, char_literal607_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate5659);
            type_declaration608=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration608.getTree());

            char_literal609=(Token)match(input,119,FOLLOW_119_in_method_declaration_predicate5661); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal609_tree = 
            (Object)adaptor.create(char_literal609)
            ;
            adaptor.addChild(root_0, char_literal609_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate5663);
            method_name610=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name610.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:907:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID611=null;

        Object ID611_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:5: ID
            {
            ID611=(Token)match(input,ID,FOLLOW_ID_in_method_name5681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID611);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param612 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:5: ( method_param )+
            int cnt143=0;
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==ID||LA143_0==133) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params5704);
            	    method_param612=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param612.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 912:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:912:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal614=null;
        Token char_literal615=null;
        Token char_literal617=null;
        ObjcParser.prefix_return prefix613 =null;

        ObjcParser.type_declaration_return type_declaration616 =null;

        ObjcParser.param_name_return param_name618 =null;


        Object char_literal614_tree=null;
        Object char_literal615_tree=null;
        Object char_literal617_tree=null;
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: ( prefix )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==ID) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param5724);
                    prefix613=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix613.getTree());

                    }
                    break;

            }


            char_literal614=(Token)match(input,133,FOLLOW_133_in_method_param5727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal614);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:17: ( '(' type_declaration ')' )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==118) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:18: '(' type_declaration ')'
                    {
                    char_literal615=(Token)match(input,118,FOLLOW_118_in_method_param5730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal615);


                    pushFollow(FOLLOW_type_declaration_in_method_param5732);
                    type_declaration616=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration616.getTree());

                    char_literal617=(Token)match(input,119,FOLLOW_119_in_method_param5734); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal617);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param5738);
            param_name618=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name618.getTree());

            // AST REWRITE
            // elements: 119, type_declaration, 118, 133, param_name, prefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 915:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_133.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_118.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:917:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID619=null;

        Object ID619_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:5: ID
            {
            ID619=(Token)match(input,ID,FOLLOW_ID_in_param_name5771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID619);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 918:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID620=null;

        Object ID620_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:11: ID
            {
            ID620=(Token)match(input,ID,FOLLOW_ID_in_prefix5790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID620);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 920:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL622=null;
        Token DEFINE_LITERAL625=null;
        ObjcParser.define_as_function_return define_as_function621 =null;

        ObjcParser.name_return name623 =null;

        ObjcParser.element_value_return element_value624 =null;

        ObjcParser.name_return name626 =null;


        Object DEFINE_LITERAL622_tree=null;
        Object DEFINE_LITERAL625_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:3: ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt146=3;
            alt146 = dfa146.predict(input);
            switch (alt146) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_function_in_define_declaration5819);
                    define_as_function621=define_as_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_function621.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL622=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL622);


                    pushFollow(FOLLOW_name_in_define_declaration5835);
                    name623=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name623.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration5837);
                    element_value624=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value624.getTree());

                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 925:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:926:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL625=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration5853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL625);


                    pushFollow(FOLLOW_name_in_define_declaration5855);
                    name626=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name626.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 926:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:926:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"


    public static class define_as_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_function"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:929:1: define_as_function : DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) ;
    public final ObjcParser.define_as_function_return define_as_function() throws RecognitionException {
        ObjcParser.define_as_function_return retval = new ObjcParser.define_as_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL627=null;
        Token char_literal629=null;
        Token char_literal630=null;
        Token char_literal632=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper628 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper631 =null;


        Object DEFINE_LITERAL627_tree=null;
        Object char_literal629_tree=null;
        Object char_literal630_tree=null;
        Object char_literal632_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_block_singleline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:3: ( DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:5: DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            {
            DEFINE_LITERAL627=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_function5879); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL627);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_function5881);
            classical_method_call_wrapper628=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper628.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:50: ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            int cnt149=0;
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==167) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:51: '\\\\' ( '{' )? block_singleline_wrapper ( '}' )?
            	    {
            	    char_literal629=(Token)match(input,167,FOLLOW_167_in_define_as_function5884); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_167.add(char_literal629);


            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:56: ( '{' )?
            	    int alt147=2;
            	    int LA147_0 = input.LA(1);

            	    if ( (LA147_0==197) ) {
            	        alt147=1;
            	    }
            	    switch (alt147) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:56: '{'
            	            {
            	            char_literal630=(Token)match(input,197,FOLLOW_197_in_define_as_function5886); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_197.add(char_literal630);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_block_singleline_wrapper_in_define_as_function5889);
            	    block_singleline_wrapper631=block_singleline_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block_singleline_wrapper.add(block_singleline_wrapper631.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:86: ( '}' )?
            	    int alt148=2;
            	    int LA148_0 = input.LA(1);

            	    if ( (LA148_0==201) ) {
            	        alt148=1;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:86: '}'
            	            {
            	            char_literal632=(Token)match(input,201,FOLLOW_201_in_define_as_function5891); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_201.add(char_literal632);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt149 >= 1 ) break loop149;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(149, input);
                        throw eee;
                }
                cnt149++;
            } while (true);


            // AST REWRITE
            // elements: block_singleline_wrapper, classical_method_call_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 930:93: -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:96: ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                if ( !(stream_block_singleline_wrapper.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_block_singleline_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_singleline_wrapper.nextTree());

                }
                stream_block_singleline_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_function"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:168:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred1_Objc741);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1166);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1283);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred4_Objc1294);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred4_Objc1296);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred5_Objc1309);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred5_Objc1311);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred6_Objc1552);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,134,FOLLOW_134_in_synpred6_Objc1554); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1571);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,184,FOLLOW_184_in_synpred7_Objc1573); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:310:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred8_Objc1590);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred8_Objc1592);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred9_Objc2178);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred9_Objc2180);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred10_Objc2759);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred11_Objc2772); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred11_Objc2774);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred11_Objc2776);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred11_Objc2778); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred11_Objc2780);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( name '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:6: name '('
        {
        pushFollow(FOLLOW_name_in_synpred12_Objc2817);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,118,FOLLOW_118_in_synpred12_Objc2819); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred13_Objc2879);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:30: ( access_wrapper name )*
        loop150:
        do {
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0 >= 129 && LA150_0 <= 130)) ) {
                alt150=1;
            }


            switch (alt150) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:501:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred13_Objc2882);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred13_Objc2884);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop150;
            }
        } while (true);


        match(input,118,FOLLOW_118_in_synpred13_Objc2888); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:6: ( '&' )?
        int alt151=2;
        int LA151_0 = input.LA(1);

        if ( (LA151_0==116) ) {
            alt151=1;
        }
        switch (alt151) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred14_Objc2937); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred14_Objc2940);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred14_Objc2942); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==116||input.LA(1)==120 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred15_Objc2978);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred16_Objc3073);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred17_Objc3362);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:584:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred18_Objc3496);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:6: '(' type_cast_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred19_Objc3509); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred19_Objc3511);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:6: ( '&' )?
        int alt152=2;
        int LA152_0 = input.LA(1);

        if ( (LA152_0==116) ) {
            alt152=1;
        }
        switch (alt152) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred20_Objc3570); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred20_Objc3573);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,166,FOLLOW_166_in_synpred20_Objc3575); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred21_Objc4006);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred22_Objc4780);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred23_Objc4791);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred24_Objc4882);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred25_Objc4893);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:6: 'struct' ( typedef_name )? '{'
        {
        match(input,190,FOLLOW_190_in_synpred26_Objc5112); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:15: ( typedef_name )?
        int alt153=2;
        int LA153_0 = input.LA(1);

        if ( (LA153_0==ID) ) {
            alt153=1;
        }
        switch (alt153) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred26_Objc5114);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred26_Objc5117); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:6: 'union' ( typedef_name )? '{'
        {
        match(input,193,FOLLOW_193_in_synpred27_Objc5157); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:14: ( typedef_name )?
        int alt154=2;
        int LA154_0 = input.LA(1);

        if ( (LA154_0==ID) ) {
            alt154=1;
        }
        switch (alt154) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred27_Objc5159);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred27_Objc5162); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:6: 'enum' ( typedef_name )? '{'
        {
        match(input,178,FOLLOW_178_in_synpred28_Objc5202); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:13: ( typedef_name )?
        int alt155=2;
        int LA155_0 = input.LA(1);

        if ( (LA155_0==ID) ) {
            alt155=1;
        }
        switch (alt155) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred28_Objc5204);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,197,FOLLOW_197_in_synpred28_Objc5207); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // $ANTLR start synpred29_Objc
    public final void synpred29_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:6: DEFINE_LITERAL classical_method_call_wrapper '\\\\'
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred29_Objc5810); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred29_Objc5812);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,167,FOLLOW_167_in_synpred29_Objc5814); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Objc

    // $ANTLR start synpred30_Objc
    public final void synpred30_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:925:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5826); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred30_Objc5828);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred30_Objc5830);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Objc

    // Delegated rules

    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA18 dfa18 = new DFA18(this);
    protected DFA22 dfa22 = new DFA22(this);
    protected DFA49 dfa49 = new DFA49(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA146 dfa146 = new DFA146(this);
    static final String DFA18_eotS =
        "\134\uffff";
    static final String DFA18_eofS =
        "\134\uffff";
    static final String DFA18_minS =
        "\3\57\37\uffff\1\57\2\uffff\1\13\22\uffff\1\165\4\uffff\1\161\4"+
        "\uffff\1\161\11\uffff\1\0\10\uffff\1\0\5\uffff\1\0";
    static final String DFA18_maxS =
        "\1\u00c5\1\u00c7\1\u00c3\37\uffff\1\57\2\uffff\1\u00ca\22\uffff"+
        "\1\u00c7\4\uffff\1\u00c8\4\uffff\1\u00c8\11\uffff\1\0\10\uffff\1"+
        "\0\5\uffff\1\0";
    static final String DFA18_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\uffff\1\1\1\2"+
        "\1\uffff\1\3\5\uffff\14\3\1\uffff\4\3\1\uffff\4\3\1\uffff\7\3\1"+
        "\uffff\1\1\1\uffff\1\2\7\3\1\uffff\5\3\1\uffff";
    static final String DFA18_specialS =
        "\1\0\1\1\1\2\42\uffff\1\3\22\uffff\1\4\4\uffff\1\5\4\uffff\1\6\11"+
        "\uffff\1\7\10\uffff\1\10\5\uffff\1\11}>";
    static final String[] DFA18_transitionS = {
            "\1\1\21\uffff\1\40\21\uffff\1\40\40\uffff\1\3\1\uffff\1\2\1"+
            "\uffff\1\4\15\uffff\1\32\31\uffff\1\17\1\uffff\1\21\1\20\2\uffff"+
            "\1\37\4\uffff\1\33\1\uffff\1\5\1\34\1\uffff\1\23\1\25\1\5\1"+
            "\uffff\1\30\1\35\1\5\1\24\1\uffff\2\5\1\27\1\5\1\22\1\5\1\26"+
            "\1\uffff\3\5\1\31\1\36",
            "\1\5\104\uffff\1\5\1\46\1\43\1\uffff\1\5\1\46\1\uffff\1\44"+
            "\1\46\2\uffff\1\44\1\46\2\42\1\uffff\1\46\4\uffff\1\46\1\uffff"+
            "\1\46\4\uffff\1\46\25\uffff\1\45\6\uffff\1\5\31\uffff\1\46",
            "\1\64\106\uffff\1\55\1\uffff\1\5\64\uffff\1\57\4\uffff\1\67"+
            "\3\uffff\1\54\2\uffff\1\61\1\62\1\uffff\1\63\1\uffff\1\65\2"+
            "\uffff\1\66\1\60\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\70",
            "",
            "",
            "\1\103\5\uffff\1\101\35\uffff\1\75\24\uffff\1\102\23\uffff"+
            "\1\77\1\100\26\uffff\1\107\3\uffff\1\74\1\uffff\1\72\1\uffff"+
            "\1\76\2\uffff\1\111\2\uffff\1\71\1\111\37\uffff\1\73\6\uffff"+
            "\1\106\1\uffff\1\5\1\104\1\105\37\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\116\1\113\2\uffff\1\116\1\uffff\1\115\1\116\2\uffff\1\115"+
            "\1\116\2\114\1\uffff\1\116\4\uffff\1\116\1\uffff\1\116\4\uffff"+
            "\1\116\66\uffff\1\116",
            "",
            "",
            "",
            "",
            "\1\123\1\uffff\2\123\1\uffff\1\121\1\uffff\1\123\1\uffff\1"+
            "\123\1\122\2\uffff\1\123\1\122\1\uffff\2\120\1\123\3\uffff\2"+
            "\123\1\uffff\6\123\1\uffff\1\124\24\uffff\1\117\1\uffff\1\125"+
            "\1\123\34\uffff\1\123\1\uffff\1\123",
            "",
            "",
            "",
            "",
            "\1\131\1\uffff\2\131\1\uffff\1\127\1\uffff\1\131\1\uffff\1"+
            "\131\1\130\2\uffff\1\131\1\130\1\uffff\2\126\1\131\3\uffff\2"+
            "\131\1\uffff\6\131\1\uffff\1\132\26\uffff\1\133\1\131\34\uffff"+
            "\1\131\1\uffff\1\131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA18_eot = DFA.unpackEncodedString(DFA18_eotS);
    static final short[] DFA18_eof = DFA.unpackEncodedString(DFA18_eofS);
    static final char[] DFA18_min = DFA.unpackEncodedStringToUnsignedChars(DFA18_minS);
    static final char[] DFA18_max = DFA.unpackEncodedStringToUnsignedChars(DFA18_maxS);
    static final short[] DFA18_accept = DFA.unpackEncodedString(DFA18_acceptS);
    static final short[] DFA18_special = DFA.unpackEncodedString(DFA18_specialS);
    static final short[][] DFA18_transition;

    static {
        int numStates = DFA18_transitionS.length;
        DFA18_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA18_transition[i] = DFA.unpackEncodedString(DFA18_transitionS[i]);
        }
    }

    class DFA18 extends DFA {

        public DFA18(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 18;
            this.eot = DFA18_eot;
            this.eof = DFA18_eof;
            this.min = DFA18_min;
            this.max = DFA18_max;
            this.accept = DFA18_accept;
            this.special = DFA18_special;
            this.transition = DFA18_transition;
        }
        public String getDescription() {
            return "262:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA18_0 = input.LA(1);

                         
                        int index18_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_0==ID) ) {s = 1;}

                        else if ( (LA18_0==118) ) {s = 2;}

                        else if ( (LA18_0==116) && (synpred5_Objc())) {s = 3;}

                        else if ( (LA18_0==120) && (synpred5_Objc())) {s = 4;}

                        else if ( (LA18_0==173||LA18_0==178||LA18_0==182||(LA18_0 >= 185 && LA18_0 <= 186)||LA18_0==188||LA18_0==190||(LA18_0 >= 193 && LA18_0 <= 195)) ) {s = 5;}

                        else if ( (LA18_0==160) ) {s = 15;}

                        else if ( (LA18_0==163) ) {s = 16;}

                        else if ( (LA18_0==162) ) {s = 17;}

                        else if ( (LA18_0==189) ) {s = 18;}

                        else if ( (LA18_0==176) ) {s = 19;}

                        else if ( (LA18_0==183) ) {s = 20;}

                        else if ( (LA18_0==177) ) {s = 21;}

                        else if ( (LA18_0==191) ) {s = 22;}

                        else if ( (LA18_0==187) ) {s = 23;}

                        else if ( (LA18_0==180) ) {s = 24;}

                        else if ( (LA18_0==196) ) {s = 25;}

                        else if ( (LA18_0==134) ) {s = 26;}

                        else if ( (LA18_0==171) ) {s = 27;}

                        else if ( (LA18_0==174) ) {s = 28;}

                        else if ( (LA18_0==181) ) {s = 29;}

                        else if ( (LA18_0==197) ) {s = 30;}

                        else if ( (LA18_0==166) ) {s = 31;}

                        else if ( (LA18_0==MULTI_COMMENT_LIT||LA18_0==SINGLE_COMMENT_LIT) ) {s = 32;}

                         
                        input.seek(index18_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA18_1 = input.LA(1);

                         
                        int index18_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA18_1 >= 129 && LA18_1 <= 130)) ) {s = 34;}

                        else if ( (LA18_1==118) && (synpred3_Objc())) {s = 35;}

                        else if ( (LA18_1==123||LA18_1==127) && (synpred4_Objc())) {s = 36;}

                        else if ( (LA18_1==166) ) {s = 37;}

                        else if ( (LA18_1==117||LA18_1==121||LA18_1==124||LA18_1==128||LA18_1==132||LA18_1==137||LA18_1==139||LA18_1==144||LA18_1==199) && (synpred5_Objc())) {s = 38;}

                        else if ( (LA18_1==ID||LA18_1==116||LA18_1==120||LA18_1==173) ) {s = 5;}

                         
                        input.seek(index18_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA18_2 = input.LA(1);

                         
                        int index18_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_2==120) ) {s = 5;}

                        else if ( (LA18_2==182) && (synpred5_Objc())) {s = 44;}

                        else if ( (LA18_2==118) && (synpred5_Objc())) {s = 45;}

                        else if ( (LA18_2==195) && (synpred5_Objc())) {s = 46;}

                        else if ( (LA18_2==173) && (synpred5_Objc())) {s = 47;}

                        else if ( (LA18_2==194) && (synpred5_Objc())) {s = 48;}

                        else if ( (LA18_2==185) && (synpred5_Objc())) {s = 49;}

                        else if ( (LA18_2==186) && (synpred5_Objc())) {s = 50;}

                        else if ( (LA18_2==188) && (synpred5_Objc())) {s = 51;}

                        else if ( (LA18_2==ID) && (synpred5_Objc())) {s = 52;}

                        else if ( (LA18_2==190) && (synpred5_Objc())) {s = 53;}

                        else if ( (LA18_2==193) && (synpred5_Objc())) {s = 54;}

                        else if ( (LA18_2==178) && (synpred5_Objc())) {s = 55;}

                         
                        input.seek(index18_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA18_37 = input.LA(1);

                         
                        int index18_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_37==126) && (synpred5_Objc())) {s = 57;}

                        else if ( (LA18_37==118) && (synpred5_Objc())) {s = 58;}

                        else if ( (LA18_37==159) && (synpred5_Objc())) {s = 59;}

                        else if ( (LA18_37==116) && (synpred5_Objc())) {s = 60;}

                        else if ( (LA18_37==ID) ) {s = 61;}

                        else if ( (LA18_37==120) && (synpred5_Objc())) {s = 62;}

                        else if ( (LA18_37==STRING_LITERAL) && (synpred5_Objc())) {s = 63;}

                        else if ( (LA18_37==STRING_OBJC) && (synpred5_Objc())) {s = 64;}

                        else if ( (LA18_37==CHAR_LITERAL) && (synpred5_Objc())) {s = 65;}

                        else if ( (LA18_37==NUMBER_LITERAL) ) {s = 66;}

                        else if ( (LA18_37==BOOL_LITERAL) && (synpred5_Objc())) {s = 67;}

                        else if ( (LA18_37==169) && (synpred5_Objc())) {s = 68;}

                        else if ( (LA18_37==170) && (synpred5_Objc())) {s = 69;}

                        else if ( (LA18_37==166) && (synpred5_Objc())) {s = 70;}

                        else if ( (LA18_37==112) && (synpred5_Objc())) {s = 71;}

                        else if ( (LA18_37==202) && (synpred5_Objc())) {s = 72;}

                        else if ( (LA18_37==123||LA18_37==127) && (synpred5_Objc())) {s = 73;}

                        else if ( (LA18_37==168) ) {s = 5;}

                         
                        input.seek(index18_37);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA18_56 = input.LA(1);

                         
                        int index18_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_56==118) && (synpred3_Objc())) {s = 75;}

                        else if ( ((LA18_56 >= 129 && LA18_56 <= 130)) ) {s = 76;}

                        else if ( (LA18_56==123||LA18_56==127) && (synpred4_Objc())) {s = 77;}

                        else if ( (LA18_56==117||LA18_56==121||LA18_56==124||LA18_56==128||LA18_56==132||LA18_56==137||LA18_56==139||LA18_56==144||LA18_56==199) && (synpred5_Objc())) {s = 78;}

                         
                        input.seek(index18_56);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA18_61 = input.LA(1);

                         
                        int index18_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA18_61==166) && (synpred5_Objc())) {s = 79;}

                        else if ( ((LA18_61 >= 129 && LA18_61 <= 130)) && (synpred5_Objc())) {s = 80;}

                        else if ( (LA18_61==118) && (synpred5_Objc())) {s = 81;}

                        else if ( (LA18_61==123||LA18_61==127) && (synpred5_Objc())) {s = 82;}

                        else if ( (LA18_61==113||(LA18_61 >= 115 && LA18_61 <= 116)||LA18_61==120||LA18_61==122||LA18_61==126||LA18_61==131||(LA18_61 >= 135 && LA18_61 <= 136)||(LA18_61 >= 138 && LA18_61 <= 143)||LA18_61==169||LA18_61==198||LA18_61==200) && (synpred5_Objc())) {s = 83;}

                        else if ( (LA18_61==145) && (synpred5_Objc())) {s = 84;}

                        else if ( (LA18_61==168) ) {s = 85;}

                         
                        input.seek(index18_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA18_66 = input.LA(1);

                         
                        int index18_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA18_66 >= 129 && LA18_66 <= 130)) && (synpred5_Objc())) {s = 86;}

                        else if ( (LA18_66==118) && (synpred5_Objc())) {s = 87;}

                        else if ( (LA18_66==123||LA18_66==127) && (synpred5_Objc())) {s = 88;}

                        else if ( (LA18_66==113||(LA18_66 >= 115 && LA18_66 <= 116)||LA18_66==120||LA18_66==122||LA18_66==126||LA18_66==131||(LA18_66 >= 135 && LA18_66 <= 136)||(LA18_66 >= 138 && LA18_66 <= 143)||LA18_66==169||LA18_66==198||LA18_66==200) && (synpred5_Objc())) {s = 89;}

                        else if ( (LA18_66==145) && (synpred5_Objc())) {s = 90;}

                        else if ( (LA18_66==168) ) {s = 91;}

                         
                        input.seek(index18_66);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA18_76 = input.LA(1);

                         
                        int index18_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred3_Objc()) ) {s = 75;}

                        else if ( (synpred4_Objc()) ) {s = 77;}

                        else if ( (synpred5_Objc()) ) {s = 90;}

                         
                        input.seek(index18_76);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA18_85 = input.LA(1);

                         
                        int index18_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index18_85);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA18_91 = input.LA(1);

                         
                        int index18_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred5_Objc()) ) {s = 90;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index18_91);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 18, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA22_eotS =
        "\104\uffff";
    static final String DFA22_eofS =
        "\104\uffff";
    static final String DFA22_minS =
        "\3\57\16\uffff\1\13\27\uffff\1\161\4\uffff\1\161\16\uffff\1\0\5"+
        "\uffff\1\0";
    static final String DFA22_maxS =
        "\1\u00c3\1\u00c7\1\u00c3\16\uffff\1\u00ca\27\uffff\1\u00c8\4\uffff"+
        "\1\u00c8\16\uffff\1\0\5\uffff\1\0";
    static final String DFA22_acceptS =
        "\3\uffff\2\3\1\4\11\uffff\1\1\1\2\1\uffff\2\3\5\uffff\20\3\1\uffff"+
        "\4\3\1\uffff\7\3\1\uffff\6\3\1\uffff\5\3\1\uffff";
    static final String DFA22_specialS =
        "\1\0\1\1\1\2\16\uffff\1\3\27\uffff\1\4\4\uffff\1\5\16\uffff\1\6"+
        "\5\uffff\1\7}>";
    static final String[] DFA22_transitionS = {
            "\1\1\104\uffff\1\3\1\uffff\1\2\1\uffff\1\4\64\uffff\1\5\4\uffff"+
            "\1\5\3\uffff\1\5\2\uffff\2\5\1\uffff\1\5\1\uffff\1\5\2\uffff"+
            "\3\5",
            "\1\5\104\uffff\1\5\1\23\2\uffff\1\5\1\23\2\uffff\1\23\3\uffff"+
            "\1\23\2\22\1\uffff\1\23\1\uffff\1\17\2\uffff\1\23\1\uffff\1"+
            "\23\4\uffff\1\23\25\uffff\1\21\6\uffff\1\5\12\uffff\1\20\16"+
            "\uffff\1\23",
            "\1\41\106\uffff\1\32\1\uffff\1\5\64\uffff\1\34\4\uffff\1\44"+
            "\3\uffff\1\31\2\uffff\1\36\1\37\1\uffff\1\40\1\uffff\1\42\2"+
            "\uffff\1\43\1\35\1\33",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\57\5\uffff\1\55\35\uffff\1\51\24\uffff\1\56\23\uffff\1\53"+
            "\1\54\26\uffff\1\63\3\uffff\1\50\1\uffff\1\46\1\uffff\1\52\2"+
            "\uffff\1\65\2\uffff\1\45\1\65\37\uffff\1\47\6\uffff\1\62\1\uffff"+
            "\1\5\1\60\1\61\37\uffff\1\64",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\73\1\uffff\2\73\1\uffff\1\71\1\uffff\1\73\1\uffff\1\73\1"+
            "\72\2\uffff\1\73\1\72\1\uffff\2\70\1\73\3\uffff\2\73\1\uffff"+
            "\6\73\1\uffff\1\74\24\uffff\1\67\1\uffff\1\75\1\73\34\uffff"+
            "\1\73\1\uffff\1\73",
            "",
            "",
            "",
            "",
            "\1\101\1\uffff\2\101\1\uffff\1\77\1\uffff\1\101\1\uffff\1\101"+
            "\1\100\2\uffff\1\101\1\100\1\uffff\2\76\1\101\3\uffff\2\101"+
            "\1\uffff\6\101\1\uffff\1\102\26\uffff\1\103\1\101\34\uffff\1"+
            "\101\1\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA22_eot = DFA.unpackEncodedString(DFA22_eotS);
    static final short[] DFA22_eof = DFA.unpackEncodedString(DFA22_eofS);
    static final char[] DFA22_min = DFA.unpackEncodedStringToUnsignedChars(DFA22_minS);
    static final char[] DFA22_max = DFA.unpackEncodedStringToUnsignedChars(DFA22_maxS);
    static final short[] DFA22_accept = DFA.unpackEncodedString(DFA22_acceptS);
    static final short[] DFA22_special = DFA.unpackEncodedString(DFA22_specialS);
    static final short[][] DFA22_transition;

    static {
        int numStates = DFA22_transitionS.length;
        DFA22_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
        }
    }

    class DFA22 extends DFA {

        public DFA22(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 22;
            this.eot = DFA22_eot;
            this.eof = DFA22_eof;
            this.min = DFA22_min;
            this.max = DFA22_max;
            this.accept = DFA22_accept;
            this.special = DFA22_special;
            this.transition = DFA22_transition;
        }
        public String getDescription() {
            return "307:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA22_0 = input.LA(1);

                         
                        int index22_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_0==ID) ) {s = 1;}

                        else if ( (LA22_0==118) ) {s = 2;}

                        else if ( (LA22_0==116) && (synpred8_Objc())) {s = 3;}

                        else if ( (LA22_0==120) && (synpred8_Objc())) {s = 4;}

                        else if ( (LA22_0==173||LA22_0==178||LA22_0==182||(LA22_0 >= 185 && LA22_0 <= 186)||LA22_0==188||LA22_0==190||(LA22_0 >= 193 && LA22_0 <= 195)) ) {s = 5;}

                         
                        input.seek(index22_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA22_1 = input.LA(1);

                         
                        int index22_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_1==134) && (synpred6_Objc())) {s = 15;}

                        else if ( (LA22_1==184) && (synpred7_Objc())) {s = 16;}

                        else if ( (LA22_1==166) ) {s = 17;}

                        else if ( ((LA22_1 >= 129 && LA22_1 <= 130)) && (synpred8_Objc())) {s = 18;}

                        else if ( (LA22_1==117||LA22_1==121||LA22_1==124||LA22_1==128||LA22_1==132||LA22_1==137||LA22_1==139||LA22_1==144||LA22_1==199) && (synpred8_Objc())) {s = 19;}

                        else if ( (LA22_1==ID||LA22_1==116||LA22_1==120||LA22_1==173) ) {s = 5;}

                         
                        input.seek(index22_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA22_2 = input.LA(1);

                         
                        int index22_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_2==120) ) {s = 5;}

                        else if ( (LA22_2==182) && (synpred8_Objc())) {s = 25;}

                        else if ( (LA22_2==118) && (synpred8_Objc())) {s = 26;}

                        else if ( (LA22_2==195) && (synpred8_Objc())) {s = 27;}

                        else if ( (LA22_2==173) && (synpred8_Objc())) {s = 28;}

                        else if ( (LA22_2==194) && (synpred8_Objc())) {s = 29;}

                        else if ( (LA22_2==185) && (synpred8_Objc())) {s = 30;}

                        else if ( (LA22_2==186) && (synpred8_Objc())) {s = 31;}

                        else if ( (LA22_2==188) && (synpred8_Objc())) {s = 32;}

                        else if ( (LA22_2==ID) && (synpred8_Objc())) {s = 33;}

                        else if ( (LA22_2==190) && (synpred8_Objc())) {s = 34;}

                        else if ( (LA22_2==193) && (synpred8_Objc())) {s = 35;}

                        else if ( (LA22_2==178) && (synpred8_Objc())) {s = 36;}

                         
                        input.seek(index22_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA22_17 = input.LA(1);

                         
                        int index22_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_17==126) && (synpred8_Objc())) {s = 37;}

                        else if ( (LA22_17==118) && (synpred8_Objc())) {s = 38;}

                        else if ( (LA22_17==159) && (synpred8_Objc())) {s = 39;}

                        else if ( (LA22_17==116) && (synpred8_Objc())) {s = 40;}

                        else if ( (LA22_17==ID) ) {s = 41;}

                        else if ( (LA22_17==120) && (synpred8_Objc())) {s = 42;}

                        else if ( (LA22_17==STRING_LITERAL) && (synpred8_Objc())) {s = 43;}

                        else if ( (LA22_17==STRING_OBJC) && (synpred8_Objc())) {s = 44;}

                        else if ( (LA22_17==CHAR_LITERAL) && (synpred8_Objc())) {s = 45;}

                        else if ( (LA22_17==NUMBER_LITERAL) ) {s = 46;}

                        else if ( (LA22_17==BOOL_LITERAL) && (synpred8_Objc())) {s = 47;}

                        else if ( (LA22_17==169) && (synpred8_Objc())) {s = 48;}

                        else if ( (LA22_17==170) && (synpred8_Objc())) {s = 49;}

                        else if ( (LA22_17==166) && (synpred8_Objc())) {s = 50;}

                        else if ( (LA22_17==112) && (synpred8_Objc())) {s = 51;}

                        else if ( (LA22_17==202) && (synpred8_Objc())) {s = 52;}

                        else if ( (LA22_17==123||LA22_17==127) && (synpred8_Objc())) {s = 53;}

                        else if ( (LA22_17==168) ) {s = 5;}

                         
                        input.seek(index22_17);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA22_41 = input.LA(1);

                         
                        int index22_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA22_41==166) && (synpred8_Objc())) {s = 55;}

                        else if ( ((LA22_41 >= 129 && LA22_41 <= 130)) && (synpred8_Objc())) {s = 56;}

                        else if ( (LA22_41==118) && (synpred8_Objc())) {s = 57;}

                        else if ( (LA22_41==123||LA22_41==127) && (synpred8_Objc())) {s = 58;}

                        else if ( (LA22_41==113||(LA22_41 >= 115 && LA22_41 <= 116)||LA22_41==120||LA22_41==122||LA22_41==126||LA22_41==131||(LA22_41 >= 135 && LA22_41 <= 136)||(LA22_41 >= 138 && LA22_41 <= 143)||LA22_41==169||LA22_41==198||LA22_41==200) && (synpred8_Objc())) {s = 59;}

                        else if ( (LA22_41==145) && (synpred8_Objc())) {s = 60;}

                        else if ( (LA22_41==168) ) {s = 61;}

                         
                        input.seek(index22_41);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA22_46 = input.LA(1);

                         
                        int index22_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA22_46 >= 129 && LA22_46 <= 130)) && (synpred8_Objc())) {s = 62;}

                        else if ( (LA22_46==118) && (synpred8_Objc())) {s = 63;}

                        else if ( (LA22_46==123||LA22_46==127) && (synpred8_Objc())) {s = 64;}

                        else if ( (LA22_46==113||(LA22_46 >= 115 && LA22_46 <= 116)||LA22_46==120||LA22_46==122||LA22_46==126||LA22_46==131||(LA22_46 >= 135 && LA22_46 <= 136)||(LA22_46 >= 138 && LA22_46 <= 143)||LA22_46==169||LA22_46==198||LA22_46==200) && (synpred8_Objc())) {s = 65;}

                        else if ( (LA22_46==145) && (synpred8_Objc())) {s = 66;}

                        else if ( (LA22_46==168) ) {s = 67;}

                         
                        input.seek(index22_46);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA22_61 = input.LA(1);

                         
                        int index22_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_61);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA22_67 = input.LA(1);

                         
                        int index22_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred8_Objc()) ) {s = 66;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index22_67);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 22, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA49_eotS =
        "\u0130\uffff";
    static final String DFA49_eofS =
        "\110\uffff\1\2\u00e7\uffff";
    static final String DFA49_minS =
        "\2\13\15\uffff\1\13\6\uffff\1\161\22\uffff\1\57\1\164\1\13\3\57"+
        "\3\164\1\161\3\57\16\uffff\2\13\1\uffff\2\13\14\uffff\10\0\32\uffff"+
        "\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0\5\uffff"+
        "\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\67\uffff";
    static final String DFA49_maxS =
        "\1\u00aa\1\u00ca\15\uffff\1\u00ca\6\uffff\1\u00c8\22\uffff\1\u00c3"+
        "\1\u00ad\1\u00ca\2\u00c2\1\u00bc\1\u00ad\1\u00ba\1\u00bc\1\u00c8"+
        "\3\u00bc\16\uffff\2\u00ca\1\uffff\1\u00ca\1\u00c9\14\uffff\10\0"+
        "\32\uffff\52\0\5\uffff\20\0\1\uffff\1\0\1\uffff\1\0\16\uffff\1\0"+
        "\5\uffff\1\0\36\uffff\3\0\5\uffff\1\0\1\uffff\2\0\67\uffff";
    static final String DFA49_acceptS =
        "\2\uffff\1\3\13\uffff\1\1\1\uffff\6\1\1\uffff\3\1\54\uffff\1\1\7"+
        "\uffff\7\1\141\uffff\1\1\1\uffff\1\1\20\uffff\1\1\20\uffff\1\1\21"+
        "\uffff\1\1\3\uffff\5\1\1\uffff\1\1\70\uffff\1\2";
    static final String DFA49_specialS =
        "\1\uffff\1\0\24\uffff\1\1\22\uffff\1\2\32\uffff\1\3\1\4\1\uffff"+
        "\1\5\1\6\14\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\32\uffff"+
        "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
        "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
        "\1\66\1\67\1\70\5\uffff\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\uffff\1\111\1"+
        "\uffff\1\112\16\uffff\1\113\5\uffff\1\114\36\uffff\1\115\1\116\1"+
        "\117\5\uffff\1\120\1\uffff\1\121\1\122\67\uffff}>";
    static final String[] DFA49_transitionS = {
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\32\uffff"+
            "\1\2\1\uffff\1\1\1\uffff\1\2\46\uffff\1\2\6\uffff\1\2\2\uffff"+
            "\2\2",
            "\1\2\5\uffff\1\2\35\uffff\1\26\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\17\1\uffff\1\2\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\21\4\uffff\1\31\3\uffff\1\16\2\uffff\1\23\1\24\1\uffff\1\25"+
            "\1\uffff\1\27\2\uffff\1\30\1\22\1\20\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\62\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\53\1\uffff\1\51\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\55\4\uffff\1\65\3\uffff\1\52\2\uffff\1\57\1\60\1\uffff\1\61"+
            "\1\uffff\1\63\2\uffff\1\64\1\56\1\54\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\1\2\1\107\1\uffff\1\2\1\110\1\104\1\uffff\2\2"+
            "\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff\1\2"+
            "\24\uffff\1\105\2\uffff\1\2\3\uffff\1\106\30\uffff\1\2\1\uffff"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\125\175\uffff\1\117\10\uffff\1\122\2\uffff\1\121\1\123\1"+
            "\uffff\1\124\5\uffff\1\120\1\116",
            "\1\132\2\uffff\1\133\1\127\16\uffff\1\126\36\uffff\1\130\6"+
            "\uffff\1\131",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\134\2\uffff\1\2"+
            "\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\2\uffff\1"+
            "\2\4\uffff\1\2\3\uffff\1\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1"+
            "\2\2\uffff\3\2\6\uffff\1\2",
            "\1\175\175\uffff\1\167\10\uffff\1\172\2\uffff\1\171\1\173\1"+
            "\uffff\1\174\5\uffff\1\170",
            "\1\u0083\u0086\uffff\1\u0080\2\uffff\1\177\1\u0081\1\uffff"+
            "\1\u0082\5\uffff\1\176",
            "\1\u0088\u0086\uffff\1\u0085\2\uffff\1\u0084\1\u0086\1\uffff"+
            "\1\u0087",
            "\1\u008c\2\uffff\1\u008d\1\u0089\55\uffff\1\u008a\6\uffff\1"+
            "\u008b",
            "\1\u0092\2\uffff\1\u0093\1\u008f\55\uffff\1\u0090\6\uffff\1"+
            "\u0091\13\uffff\1\u008e\1\u0094",
            "\1\u0099\2\uffff\1\u009a\1\u0096\55\uffff\1\u0097\6\uffff\1"+
            "\u0098\13\uffff\1\u0095\2\uffff\1\u009b",
            "\1\2\1\uffff\1\2\1\u009f\1\uffff\1\2\1\u00a0\1\u009c\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\3\2\3\uffff\2\2\1\uffff\6\2\1\uffff"+
            "\1\2\24\uffff\1\u009d\2\uffff\1\2\3\uffff\1\u009e\30\uffff\1"+
            "\2\1\uffff\1\2",
            "\1\u00aa\u0086\uffff\1\u00a7\2\uffff\1\u00a6\1\u00a8\1\uffff"+
            "\1\u00a9",
            "\1\u00af\u0086\uffff\1\u00ac\2\uffff\1\u00ab\1\u00ad\1\uffff"+
            "\1\u00ae",
            "\1\u00b4\u0086\uffff\1\u00b1\2\uffff\1\u00b0\1\u00b2\1\uffff"+
            "\1\u00b3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\u00b7\1\uffff\1\2\1\u00b8\1\u00b9\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\u00b5\2\uffff\2\2\2"+
            "\uffff\1\u00b6\34\uffff\1\2",
            "\1\2\5\uffff\1\2\35\uffff\1\u00c8\24\uffff\1\u00ce\23\uffff"+
            "\2\2\26\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\2\uffff\2\2\37\uffff\1\2\6\uffff\1\2\1\uffff\1\u00c9\2"+
            "\2\37\uffff\1\2",
            "",
            "\1\2\5\uffff\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\2\2\26"+
            "\uffff\1\2\3\uffff\1\2\1\uffff\1\2\1\u00da\1\2\2\uffff\1\2\2"+
            "\uffff\2\2\37\uffff\1\2\6\uffff\1\2\2\uffff\2\2\37\uffff\1\2",
            "\1\u00f4\5\uffff\1\u00f2\5\uffff\1\2\27\uffff\1\u00ee\21\uffff"+
            "\1\2\2\uffff\1\u00f3\16\uffff\1\2\4\uffff\1\u00f0\1\u00f1\27"+
            "\uffff\1\2\1\uffff\1\2\1\u00ed\1\uffff\1\u00f8\1\2\1\u00ef\1"+
            "\uffff\2\2\1\uffff\3\2\1\uffff\3\2\1\uffff\4\2\1\uffff\6\2\1"+
            "\uffff\10\2\4\uffff\1\2\1\uffff\1\u00ec\4\2\2\uffff\1\u00f7"+
            "\2\2\1\u00f5\1\u00f6\15\2\1\uffff\16\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA49_eot = DFA.unpackEncodedString(DFA49_eotS);
    static final short[] DFA49_eof = DFA.unpackEncodedString(DFA49_eofS);
    static final char[] DFA49_min = DFA.unpackEncodedStringToUnsignedChars(DFA49_minS);
    static final char[] DFA49_max = DFA.unpackEncodedStringToUnsignedChars(DFA49_maxS);
    static final short[] DFA49_accept = DFA.unpackEncodedString(DFA49_acceptS);
    static final short[] DFA49_special = DFA.unpackEncodedString(DFA49_specialS);
    static final short[][] DFA49_transition;

    static {
        int numStates = DFA49_transitionS.length;
        DFA49_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA49_transition[i] = DFA.unpackEncodedString(DFA49_transitionS[i]);
        }
    }

    class DFA49 extends DFA {

        public DFA49(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 49;
            this.eot = DFA49_eot;
            this.eof = DFA49_eof;
            this.min = DFA49_min;
            this.max = DFA49_max;
            this.accept = DFA49_accept;
            this.special = DFA49_special;
            this.transition = DFA49_transition;
        }
        public String getDescription() {
            return "488:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA49_1 = input.LA(1);

                         
                        int index49_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_1==182) && (synpred10_Objc())) {s = 14;}

                        else if ( (LA49_1==118) ) {s = 15;}

                        else if ( (LA49_1==195) && (synpred10_Objc())) {s = 16;}

                        else if ( (LA49_1==173) && (synpred10_Objc())) {s = 17;}

                        else if ( (LA49_1==194) && (synpred10_Objc())) {s = 18;}

                        else if ( (LA49_1==185) && (synpred10_Objc())) {s = 19;}

                        else if ( (LA49_1==186) && (synpred10_Objc())) {s = 20;}

                        else if ( (LA49_1==188) && (synpred10_Objc())) {s = 21;}

                        else if ( (LA49_1==ID) ) {s = 22;}

                        else if ( (LA49_1==190) && (synpred10_Objc())) {s = 23;}

                        else if ( (LA49_1==193) && (synpred10_Objc())) {s = 24;}

                        else if ( (LA49_1==178) && (synpred10_Objc())) {s = 25;}

                        else if ( (LA49_1==BOOL_LITERAL||LA49_1==CHAR_LITERAL||LA49_1==NUMBER_LITERAL||(LA49_1 >= STRING_LITERAL && LA49_1 <= STRING_OBJC)||LA49_1==112||LA49_1==116||LA49_1==120||LA49_1==123||(LA49_1 >= 126 && LA49_1 <= 127)||LA49_1==159||LA49_1==166||(LA49_1 >= 169 && LA49_1 <= 170)||LA49_1==202) ) {s = 2;}

                         
                        input.seek(index49_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA49_22 = input.LA(1);

                         
                        int index49_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_22==120) ) {s = 68;}

                        else if ( (LA49_22==166) ) {s = 69;}

                        else if ( (LA49_22==173) && (synpred10_Objc())) {s = 70;}

                        else if ( (LA49_22==116) ) {s = 71;}

                        else if ( (LA49_22==119) ) {s = 72;}

                        else if ( (LA49_22==113||LA49_22==115||LA49_22==118||(LA49_22 >= 122 && LA49_22 <= 123)||(LA49_22 >= 126 && LA49_22 <= 127)||(LA49_22 >= 129 && LA49_22 <= 131)||(LA49_22 >= 135 && LA49_22 <= 136)||(LA49_22 >= 138 && LA49_22 <= 143)||LA49_22==145||LA49_22==169||LA49_22==198||LA49_22==200) ) {s = 2;}

                         
                        input.seek(index49_22);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA49_41 = input.LA(1);

                         
                        int index49_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_41==195) && (synpred10_Objc())) {s = 78;}

                        else if ( (LA49_41==173) && (synpred10_Objc())) {s = 79;}

                        else if ( (LA49_41==194) && (synpred10_Objc())) {s = 80;}

                        else if ( (LA49_41==185) && (synpred10_Objc())) {s = 81;}

                        else if ( (LA49_41==182) && (synpred10_Objc())) {s = 82;}

                        else if ( (LA49_41==186) && (synpred10_Objc())) {s = 83;}

                        else if ( (LA49_41==188) && (synpred10_Objc())) {s = 84;}

                        else if ( (LA49_41==ID) ) {s = 85;}

                         
                        input.seek(index49_41);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA49_68 = input.LA(1);

                         
                        int index49_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_68==166) ) {s = 181;}

                        else if ( (LA49_68==173) && (synpred10_Objc())) {s = 182;}

                        else if ( (LA49_68==116) ) {s = 183;}

                        else if ( (LA49_68==119) && (synpred10_Objc())) {s = 184;}

                        else if ( (LA49_68==120) ) {s = 185;}

                        else if ( (LA49_68==BOOL_LITERAL||LA49_68==CHAR_LITERAL||LA49_68==ID||LA49_68==NUMBER_LITERAL||(LA49_68 >= STRING_LITERAL && LA49_68 <= STRING_OBJC)||LA49_68==112||LA49_68==118||LA49_68==123||(LA49_68 >= 126 && LA49_68 <= 127)||LA49_68==159||(LA49_68 >= 169 && LA49_68 <= 170)||LA49_68==202) ) {s = 2;}

                         
                        input.seek(index49_68);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA49_69 = input.LA(1);

                         
                        int index49_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_69==ID) ) {s = 200;}

                        else if ( (LA49_69==168) && (synpred10_Objc())) {s = 201;}

                        else if ( (LA49_69==BOOL_LITERAL||LA49_69==CHAR_LITERAL||(LA49_69 >= STRING_LITERAL && LA49_69 <= STRING_OBJC)||LA49_69==112||LA49_69==116||LA49_69==118||LA49_69==120||LA49_69==123||(LA49_69 >= 126 && LA49_69 <= 127)||LA49_69==159||LA49_69==166||(LA49_69 >= 169 && LA49_69 <= 170)||LA49_69==202) ) {s = 2;}

                        else if ( (LA49_69==NUMBER_LITERAL) ) {s = 206;}

                         
                        input.seek(index49_69);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA49_71 = input.LA(1);

                         
                        int index49_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_71==119) && (synpred10_Objc())) {s = 218;}

                        else if ( (LA49_71==BOOL_LITERAL||LA49_71==CHAR_LITERAL||LA49_71==ID||LA49_71==NUMBER_LITERAL||(LA49_71 >= STRING_LITERAL && LA49_71 <= STRING_OBJC)||LA49_71==112||LA49_71==116||LA49_71==118||LA49_71==120||LA49_71==123||(LA49_71 >= 126 && LA49_71 <= 127)||LA49_71==159||LA49_71==166||(LA49_71 >= 169 && LA49_71 <= 170)||LA49_71==202) ) {s = 2;}

                         
                        input.seek(index49_71);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA49_72 = input.LA(1);

                         
                        int index49_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA49_72==159) && (synpred10_Objc())) {s = 236;}

                        else if ( (LA49_72==116) ) {s = 237;}

                        else if ( (LA49_72==ID) ) {s = 238;}

                        else if ( (LA49_72==120) ) {s = 239;}

                        else if ( (LA49_72==STRING_LITERAL) && (synpred10_Objc())) {s = 240;}

                        else if ( (LA49_72==STRING_OBJC) && (synpred10_Objc())) {s = 241;}

                        else if ( (LA49_72==CHAR_LITERAL) && (synpred10_Objc())) {s = 242;}

                        else if ( (LA49_72==NUMBER_LITERAL) && (synpred10_Objc())) {s = 243;}

                        else if ( (LA49_72==BOOL_LITERAL) && (synpred10_Objc())) {s = 244;}

                        else if ( (LA49_72==169) ) {s = 245;}

                        else if ( (LA49_72==170) && (synpred10_Objc())) {s = 246;}

                        else if ( (LA49_72==166) ) {s = 247;}

                        else if ( (LA49_72==118) ) {s = 248;}

                        else if ( (LA49_72==EOF||LA49_72==DEFINE_LITERAL||LA49_72==MULTI_COMMENT_LIT||LA49_72==SINGLE_COMMENT_LIT||LA49_72==113||LA49_72==115||LA49_72==119||(LA49_72 >= 122 && LA49_72 <= 123)||(LA49_72 >= 125 && LA49_72 <= 127)||(LA49_72 >= 129 && LA49_72 <= 131)||(LA49_72 >= 133 && LA49_72 <= 136)||(LA49_72 >= 138 && LA49_72 <= 143)||(LA49_72 >= 145 && LA49_72 <= 152)||LA49_72==157||(LA49_72 >= 160 && LA49_72 <= 163)||(LA49_72 >= 167 && LA49_72 <= 168)||(LA49_72 >= 171 && LA49_72 <= 183)||(LA49_72 >= 185 && LA49_72 <= 198)||(LA49_72 >= 200 && LA49_72 <= 201)) ) {s = 2;}

                         
                        input.seek(index49_72);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA49_85 = input.LA(1);

                         
                        int index49_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_85);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA49_86 = input.LA(1);

                         
                        int index49_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_86);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA49_87 = input.LA(1);

                         
                        int index49_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_87);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA49_88 = input.LA(1);

                         
                        int index49_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_88);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA49_89 = input.LA(1);

                         
                        int index49_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_89);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA49_90 = input.LA(1);

                         
                        int index49_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_90);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA49_91 = input.LA(1);

                         
                        int index49_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_91);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA49_92 = input.LA(1);

                         
                        int index49_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_92);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA49_119 = input.LA(1);

                         
                        int index49_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_119);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA49_120 = input.LA(1);

                         
                        int index49_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_120);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA49_121 = input.LA(1);

                         
                        int index49_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_121);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA49_122 = input.LA(1);

                         
                        int index49_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_122);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA49_123 = input.LA(1);

                         
                        int index49_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_123);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA49_124 = input.LA(1);

                         
                        int index49_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_124);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA49_125 = input.LA(1);

                         
                        int index49_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_125);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA49_126 = input.LA(1);

                         
                        int index49_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_126);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA49_127 = input.LA(1);

                         
                        int index49_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_127);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA49_128 = input.LA(1);

                         
                        int index49_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_128);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA49_129 = input.LA(1);

                         
                        int index49_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_129);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA49_130 = input.LA(1);

                         
                        int index49_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_130);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA49_131 = input.LA(1);

                         
                        int index49_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_131);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA49_132 = input.LA(1);

                         
                        int index49_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_132);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA49_133 = input.LA(1);

                         
                        int index49_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_133);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA49_134 = input.LA(1);

                         
                        int index49_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_134);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA49_135 = input.LA(1);

                         
                        int index49_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_135);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA49_136 = input.LA(1);

                         
                        int index49_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_136);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA49_137 = input.LA(1);

                         
                        int index49_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_137);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA49_138 = input.LA(1);

                         
                        int index49_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_138);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA49_139 = input.LA(1);

                         
                        int index49_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_139);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA49_140 = input.LA(1);

                         
                        int index49_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_140);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA49_141 = input.LA(1);

                         
                        int index49_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_141);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA49_142 = input.LA(1);

                         
                        int index49_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_142);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA49_143 = input.LA(1);

                         
                        int index49_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_143);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA49_144 = input.LA(1);

                         
                        int index49_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_144);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA49_145 = input.LA(1);

                         
                        int index49_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_145);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA49_146 = input.LA(1);

                         
                        int index49_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_146);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA49_147 = input.LA(1);

                         
                        int index49_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_147);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA49_148 = input.LA(1);

                         
                        int index49_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_148);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA49_149 = input.LA(1);

                         
                        int index49_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_149);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA49_150 = input.LA(1);

                         
                        int index49_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_150);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA49_151 = input.LA(1);

                         
                        int index49_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_151);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA49_152 = input.LA(1);

                         
                        int index49_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_152);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA49_153 = input.LA(1);

                         
                        int index49_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_153);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA49_154 = input.LA(1);

                         
                        int index49_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_154);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA49_155 = input.LA(1);

                         
                        int index49_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_155);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA49_156 = input.LA(1);

                         
                        int index49_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_156);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA49_157 = input.LA(1);

                         
                        int index49_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_157);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA49_158 = input.LA(1);

                         
                        int index49_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_158);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA49_159 = input.LA(1);

                         
                        int index49_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_159);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA49_160 = input.LA(1);

                         
                        int index49_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_160);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA49_166 = input.LA(1);

                         
                        int index49_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_166);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA49_167 = input.LA(1);

                         
                        int index49_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_167);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA49_168 = input.LA(1);

                         
                        int index49_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_168);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA49_169 = input.LA(1);

                         
                        int index49_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_169);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA49_170 = input.LA(1);

                         
                        int index49_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_170);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA49_171 = input.LA(1);

                         
                        int index49_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_171);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA49_172 = input.LA(1);

                         
                        int index49_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_172);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA49_173 = input.LA(1);

                         
                        int index49_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_173);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA49_174 = input.LA(1);

                         
                        int index49_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_174);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA49_175 = input.LA(1);

                         
                        int index49_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_175);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA49_176 = input.LA(1);

                         
                        int index49_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_176);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA49_177 = input.LA(1);

                         
                        int index49_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_177);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA49_178 = input.LA(1);

                         
                        int index49_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_178);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA49_179 = input.LA(1);

                         
                        int index49_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_179);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA49_180 = input.LA(1);

                         
                        int index49_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 303;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_180);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA49_181 = input.LA(1);

                         
                        int index49_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_181);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA49_183 = input.LA(1);

                         
                        int index49_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_183);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA49_185 = input.LA(1);

                         
                        int index49_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_185);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA49_200 = input.LA(1);

                         
                        int index49_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_200);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA49_206 = input.LA(1);

                         
                        int index49_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_206);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA49_237 = input.LA(1);

                         
                        int index49_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_237);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA49_238 = input.LA(1);

                         
                        int index49_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_238);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA49_239 = input.LA(1);

                         
                        int index49_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_239);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA49_245 = input.LA(1);

                         
                        int index49_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_245);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA49_247 = input.LA(1);

                         
                        int index49_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_247);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA49_248 = input.LA(1);

                         
                        int index49_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index49_248);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 49, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA48_eotS =
        "\74\uffff";
    static final String DFA48_eofS =
        "\1\1\73\uffff";
    static final String DFA48_minS =
        "\1\27\73\uffff";
    static final String DFA48_maxS =
        "\1\u00c9\73\uffff";
    static final String DFA48_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA48_specialS =
        "\74\uffff}>";
    static final String[] DFA48_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\10\1\4\uffff\1\1\2\uffff\4\1"+
            "\2\uffff\4\1\1\uffff\15\1\1\uffff\16\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA48_eot = DFA.unpackEncodedString(DFA48_eotS);
    static final short[] DFA48_eof = DFA.unpackEncodedString(DFA48_eofS);
    static final char[] DFA48_min = DFA.unpackEncodedStringToUnsignedChars(DFA48_minS);
    static final char[] DFA48_max = DFA.unpackEncodedStringToUnsignedChars(DFA48_maxS);
    static final short[] DFA48_accept = DFA.unpackEncodedString(DFA48_acceptS);
    static final short[] DFA48_special = DFA.unpackEncodedString(DFA48_specialS);
    static final short[][] DFA48_transition;

    static {
        int numStates = DFA48_transitionS.length;
        DFA48_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA48_transition[i] = DFA.unpackEncodedString(DFA48_transitionS[i]);
        }
    }

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = DFA48_eot;
            this.eof = DFA48_eof;
            this.min = DFA48_min;
            this.max = DFA48_max;
            this.accept = DFA48_accept;
            this.special = DFA48_special;
            this.transition = DFA48_transition;
        }
        public String getDescription() {
            return "()+ loopback of 490:138: ( access_wrapper simple_name_or_classical_function_call )+";
        }
    }
    static final String DFA51_eotS =
        "\u0088\uffff";
    static final String DFA51_eofS =
        "\1\uffff\1\3\u0086\uffff";
    static final String DFA51_minS =
        "\1\57\1\27\1\13\72\uffff\1\57\1\uffff\1\13\2\uffff\1\101\35\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff";
    static final String DFA51_maxS =
        "\1\57\1\u00c9\1\u00ca\72\uffff\1\u00c3\1\uffff\1\u00ca\2\uffff\1"+
        "\u00c8\35\uffff\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff";
    static final String DFA51_acceptS =
        "\3\uffff\1\2\72\uffff\1\1\1\uffff\2\1\1\uffff\14\1\37\uffff\16\1"+
        "\1\uffff\3\1\1\uffff\3\1\3\uffff\1\1";
    static final String DFA51_specialS =
        "\2\uffff\1\0\74\uffff\1\1\2\uffff\1\2\35\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\16\uffff\1\21\3"+
        "\uffff\1\22\3\uffff\1\23\1\24\2\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\1",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\35\uffff\1\3\1"+
            "\uffff\2\3\1\uffff\1\2\2\3\1\uffff\2\3\1\uffff\3\3\1\uffff\3"+
            "\3\1\uffff\4\3\1\uffff\6\3\1\uffff\10\3\4\uffff\1\3\2\uffff"+
            "\4\3\2\uffff\4\3\1\uffff\15\3\1\uffff\16\3\1\uffff\2\3",
            "\1\107\5\uffff\1\105\35\uffff\1\102\24\uffff\1\106\23\uffff"+
            "\1\103\1\104\26\uffff\1\113\3\uffff\1\101\1\uffff\1\77\1\116"+
            "\1\75\2\uffff\1\115\2\uffff\1\76\1\115\37\uffff\1\100\6\uffff"+
            "\1\112\2\uffff\1\110\1\111\2\uffff\1\3\4\uffff\1\3\3\uffff\1"+
            "\3\2\uffff\2\3\1\uffff\1\3\1\uffff\1\3\2\uffff\3\3\6\uffff\1"+
            "\114",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\140\175\uffff\1\3\10\uffff\1\3\2\uffff\2\3\1\uffff\1\3\5"+
            "\uffff\2\3",
            "",
            "\1\165\5\uffff\1\163\35\uffff\1\152\24\uffff\1\164\23\uffff"+
            "\1\161\1\162\26\uffff\1\171\3\uffff\1\160\1\uffff\1\143\1\uffff"+
            "\1\141\2\uffff\1\173\2\uffff\1\156\1\173\37\uffff\1\157\6\uffff"+
            "\1\170\2\uffff\1\166\1\167\2\uffff\1\145\4\uffff\1\155\3\uffff"+
            "\1\142\2\uffff\1\147\1\150\1\uffff\1\151\1\uffff\1\153\2\uffff"+
            "\1\154\1\146\1\144\6\uffff\1\172",
            "",
            "",
            "\1\u0082\57\uffff\1\u0087\1\uffff\1\u0087\1\u0085\1\uffff\1"+
            "\176\1\u0084\1\u0080\1\uffff\1\u0087\1\177\1\uffff\1\u0083\1"+
            "\u0087\1\177\1\uffff\2\175\1\u0087\3\uffff\2\u0087\1\uffff\6"+
            "\u0087\1\uffff\1\u0081\24\uffff\1\174\2\uffff\1\u0087\3\uffff"+
            "\1\3\30\uffff\1\u0087\1\uffff\1\u0087",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "494:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_2 = input.LA(1);

                         
                        int index51_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_2==120) ) {s = 61;}

                        else if ( (LA51_2==126) && (synpred12_Objc())) {s = 62;}

                        else if ( (LA51_2==118) ) {s = 63;}

                        else if ( (LA51_2==159) && (synpred12_Objc())) {s = 64;}

                        else if ( (LA51_2==116) && (synpred12_Objc())) {s = 65;}

                        else if ( (LA51_2==ID) ) {s = 66;}

                        else if ( (LA51_2==STRING_LITERAL) && (synpred12_Objc())) {s = 67;}

                        else if ( (LA51_2==STRING_OBJC) && (synpred12_Objc())) {s = 68;}

                        else if ( (LA51_2==CHAR_LITERAL) && (synpred12_Objc())) {s = 69;}

                        else if ( (LA51_2==NUMBER_LITERAL) && (synpred12_Objc())) {s = 70;}

                        else if ( (LA51_2==BOOL_LITERAL) && (synpred12_Objc())) {s = 71;}

                        else if ( (LA51_2==169) && (synpred12_Objc())) {s = 72;}

                        else if ( (LA51_2==170) && (synpred12_Objc())) {s = 73;}

                        else if ( (LA51_2==166) && (synpred12_Objc())) {s = 74;}

                        else if ( (LA51_2==112) && (synpred12_Objc())) {s = 75;}

                        else if ( (LA51_2==202) && (synpred12_Objc())) {s = 76;}

                        else if ( (LA51_2==123||LA51_2==127) && (synpred12_Objc())) {s = 77;}

                        else if ( (LA51_2==119) && (synpred12_Objc())) {s = 78;}

                        else if ( (LA51_2==173||LA51_2==178||LA51_2==182||(LA51_2 >= 185 && LA51_2 <= 186)||LA51_2==188||LA51_2==190||(LA51_2 >= 193 && LA51_2 <= 195)) ) {s = 3;}

                         
                        input.seek(index51_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_63 = input.LA(1);

                         
                        int index51_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_63==120) ) {s = 97;}

                        else if ( (LA51_63==182) ) {s = 98;}

                        else if ( (LA51_63==118) ) {s = 99;}

                        else if ( (LA51_63==195) ) {s = 100;}

                        else if ( (LA51_63==173) ) {s = 101;}

                        else if ( (LA51_63==194) ) {s = 102;}

                        else if ( (LA51_63==185) ) {s = 103;}

                        else if ( (LA51_63==186) ) {s = 104;}

                        else if ( (LA51_63==188) ) {s = 105;}

                        else if ( (LA51_63==ID) ) {s = 106;}

                        else if ( (LA51_63==190) ) {s = 107;}

                        else if ( (LA51_63==193) ) {s = 108;}

                        else if ( (LA51_63==178) ) {s = 109;}

                        else if ( (LA51_63==126) && (synpred12_Objc())) {s = 110;}

                        else if ( (LA51_63==159) && (synpred12_Objc())) {s = 111;}

                        else if ( (LA51_63==116) && (synpred12_Objc())) {s = 112;}

                        else if ( (LA51_63==STRING_LITERAL) && (synpred12_Objc())) {s = 113;}

                        else if ( (LA51_63==STRING_OBJC) && (synpred12_Objc())) {s = 114;}

                        else if ( (LA51_63==CHAR_LITERAL) && (synpred12_Objc())) {s = 115;}

                        else if ( (LA51_63==NUMBER_LITERAL) && (synpred12_Objc())) {s = 116;}

                        else if ( (LA51_63==BOOL_LITERAL) && (synpred12_Objc())) {s = 117;}

                        else if ( (LA51_63==169) && (synpred12_Objc())) {s = 118;}

                        else if ( (LA51_63==170) && (synpred12_Objc())) {s = 119;}

                        else if ( (LA51_63==166) && (synpred12_Objc())) {s = 120;}

                        else if ( (LA51_63==112) && (synpred12_Objc())) {s = 121;}

                        else if ( (LA51_63==202) && (synpred12_Objc())) {s = 122;}

                        else if ( (LA51_63==123||LA51_63==127) && (synpred12_Objc())) {s = 123;}

                         
                        input.seek(index51_63);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_66 = input.LA(1);

                         
                        int index51_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA51_66==166) ) {s = 124;}

                        else if ( ((LA51_66 >= 129 && LA51_66 <= 130)) && (synpred12_Objc())) {s = 125;}

                        else if ( (LA51_66==118) && (synpred12_Objc())) {s = 126;}

                        else if ( (LA51_66==123||LA51_66==127) && (synpred12_Objc())) {s = 127;}

                        else if ( (LA51_66==120) ) {s = 128;}

                        else if ( (LA51_66==145) && (synpred12_Objc())) {s = 129;}

                        else if ( (LA51_66==MULTI_COMMENT_LIT) && (synpred12_Objc())) {s = 130;}

                        else if ( (LA51_66==125) && (synpred12_Objc())) {s = 131;}

                        else if ( (LA51_66==119) ) {s = 132;}

                        else if ( (LA51_66==116) ) {s = 133;}

                        else if ( (LA51_66==173) ) {s = 3;}

                        else if ( (LA51_66==113||LA51_66==115||LA51_66==122||LA51_66==126||LA51_66==131||(LA51_66 >= 135 && LA51_66 <= 136)||(LA51_66 >= 138 && LA51_66 <= 143)||LA51_66==169||LA51_66==198||LA51_66==200) && (synpred12_Objc())) {s = 135;}

                         
                        input.seek(index51_66);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_96 = input.LA(1);

                         
                        int index51_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_96);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_97 = input.LA(1);

                         
                        int index51_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_97);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA51_98 = input.LA(1);

                         
                        int index51_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_98);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA51_99 = input.LA(1);

                         
                        int index51_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_99);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA51_100 = input.LA(1);

                         
                        int index51_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_100);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA51_101 = input.LA(1);

                         
                        int index51_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_101);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA51_102 = input.LA(1);

                         
                        int index51_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_102);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA51_103 = input.LA(1);

                         
                        int index51_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_103);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA51_104 = input.LA(1);

                         
                        int index51_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_104);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA51_105 = input.LA(1);

                         
                        int index51_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_105);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA51_106 = input.LA(1);

                         
                        int index51_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_106);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA51_107 = input.LA(1);

                         
                        int index51_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_107);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA51_108 = input.LA(1);

                         
                        int index51_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_108);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA51_109 = input.LA(1);

                         
                        int index51_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_109);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA51_124 = input.LA(1);

                         
                        int index51_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_124);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA51_128 = input.LA(1);

                         
                        int index51_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_128);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA51_132 = input.LA(1);

                         
                        int index51_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_132);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA51_133 = input.LA(1);

                         
                        int index51_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 135;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index51_133);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA57_eotS =
        "\u060a\uffff";
    static final String DFA57_eofS =
        "\3\uffff\1\12\1\uffff\5\12\4\uffff\1\12\73\uffff\1\12\u0173\uffff"+
        "\1\12\127\uffff\1\12\34\uffff\1\12\34\uffff\1\12\34\uffff\1\12\34"+
        "\uffff\1\12\u037f\uffff";
    static final String DFA57_minS =
        "\1\13\1\uffff\1\57\1\27\1\57\5\27\4\uffff\1\27\1\13\1\57\1\13\70"+
        "\uffff\1\27\1\57\1\13\71\uffff\1\57\1\13\71\uffff\1\57\1\13\71\uffff"+
        "\1\57\1\13\71\uffff\1\57\1\13\71\uffff\1\13\1\57\1\13\70\uffff\2"+
        "\13\1\166\10\57\1\u00c5\1\57\4\13\1\27\1\57\1\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\57\1\13\71\uffff\1\27\1\57\1\uffff\1\13\2\uffff"+
        "\1\101\26\uffff\1\27\1\57\1\uffff\1\13\2\uffff\1\101\26\uffff\1"+
        "\27\1\57\1\uffff\1\13\2\uffff\1\101\26\uffff\1\27\1\57\1\uffff\1"+
        "\13\2\uffff\1\101\26\uffff\1\27\1\57\1\uffff\1\13\2\uffff\1\101"+
        "\26\uffff\23\0\1\uffff\1\0\2\uffff\1\0\26\uffff\61\0\1\uffff\7\0"+
        "\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff\110\0\100"+
        "\uffff\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\1\uffff"+
        "\1\0\2\uffff\1\0\26\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff\16\0\16\uffff\1\0\3\uffff"+
        "\1\0\3\uffff\2\0\2\uffff";
    static final String DFA57_maxS =
        "\1\u00aa\1\uffff\1\57\1\u00c9\1\57\5\u00c9\4\uffff\1\u00c9\1\u00ca"+
        "\1\57\1\u00ca\70\uffff\1\u00c9\1\57\1\u00ca\71\uffff\1\57\1\u00ca"+
        "\71\uffff\1\57\1\u00ca\71\uffff\1\57\1\u00ca\71\uffff\1\57\1\u00ca"+
        "\71\uffff\1\u00ca\1\57\1\u00ca\70\uffff\1\u00aa\1\u00ca\1\166\1"+
        "\57\1\u00c8\1\57\5\u00c8\1\u00c5\1\u00c3\1\u00ca\3\u00aa\1\u00c9"+
        "\1\u00c3\1\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\57\1\u00ca\71"+
        "\uffff\1\u00c9\1\u00c3\1\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff"+
        "\1\u00c9\1\u00c3\1\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9"+
        "\1\u00c3\1\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9\1\u00c3"+
        "\1\uffff\1\u00ca\2\uffff\1\u00c8\26\uffff\1\u00c9\1\u00c3\1\uffff"+
        "\1\u00ca\2\uffff\1\u00c8\26\uffff\23\0\1\uffff\1\0\2\uffff\1\0\26"+
        "\uffff\61\0\1\uffff\7\0\1\uffff\6\0\1\uffff\6\0\1\uffff\6\0\1\uffff"+
        "\6\0\1\uffff\110\0\100\uffff\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff"+
        "\2\0\2\uffff\2\0\1\uffff\1\0\2\uffff\1\0\26\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff\2\0\100\uffff"+
        "\16\0\16\uffff\1\0\3\uffff\1\0\3\uffff\2\0\2\uffff";
    static final String DFA57_acceptS =
        "\1\uffff\1\1\10\uffff\1\3\u01b5\uffff\1\2\1\uffff\2\2\1\uffff\14"+
        "\2\107\uffff\1\2\1\uffff\2\2\1\uffff\14\2\14\uffff\1\2\1\uffff\2"+
        "\2\1\uffff\14\2\14\uffff\1\2\1\uffff\2\2\1\uffff\14\2\14\uffff\1"+
        "\2\1\uffff\2\2\1\uffff\14\2\14\uffff\1\2\1\uffff\2\2\1\uffff\14"+
        "\2\35\uffff\1\2\1\uffff\2\2\1\uffff\14\2\u00f6\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\3\2\3\uffff\1\2\2\uffff\1\2\1\uffff\2\2\1\uffff\14"+
        "\2\132\uffff\16\2\1\uffff\3\2\1\uffff\3\2\3\uffff\1\2\120\uffff"+
        "\16\2\1\uffff\3\2\1\uffff\3\2\3\uffff\1\2\120\uffff\16\2\1\uffff"+
        "\3\2\1\uffff\3\2\3\uffff\1\2\120\uffff\16\2\1\uffff\3\2\1\uffff"+
        "\3\2\3\uffff\1\2\120\uffff\16\2\1\uffff\3\2\1\uffff\3\2\3\uffff"+
        "\1\2";
    static final String DFA57_specialS =
        "\21\uffff\1\0\72\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1"+
        "\4\72\uffff\1\5\73\uffff\1\6\114\uffff\1\7\2\uffff\1\10\27\uffff"+
        "\1\11\74\uffff\1\12\2\uffff\1\13\31\uffff\1\14\2\uffff\1\15\31\uffff"+
        "\1\16\2\uffff\1\17\31\uffff\1\20\2\uffff\1\21\31\uffff\1\22\2\uffff"+
        "\1\23\26\uffff\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
        "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\uffff\1\47\2\uffff"+
        "\1\50\26\uffff\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\uffff\1\132\1\133\1\134\1\135\1\136\1"+
        "\137\1\140\1\uffff\1\141\1\142\1\143\1\144\1\145\1\146\1\uffff\1"+
        "\147\1\150\1\151\1\152\1\153\1\154\1\uffff\1\155\1\156\1\157\1\160"+
        "\1\161\1\162\1\uffff\1\163\1\164\1\165\1\166\1\167\1\170\1\uffff"+
        "\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082"+
        "\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a"+
        "\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092"+
        "\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a"+
        "\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2"+
        "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa"+
        "\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2"+
        "\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba"+
        "\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\100\uffff\1\u00c1"+
        "\1\u00c2\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9"+
        "\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\16\uffff\1\u00cf\3\uffff"+
        "\1\u00d0\3\uffff\1\u00d1\1\u00d2\2\uffff\1\u00d3\1\u00d4\1\uffff"+
        "\1\u00d5\2\uffff\1\u00d6\26\uffff\1\u00d7\1\u00d8\100\uffff\1\u00d9"+
        "\1\u00da\1\u00db\1\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1"+
        "\1\u00e2\1\u00e3\1\u00e4\1\u00e5\1\u00e6\16\uffff\1\u00e7\3\uffff"+
        "\1\u00e8\3\uffff\1\u00e9\1\u00ea\2\uffff\1\u00eb\1\u00ec\100\uffff"+
        "\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4"+
        "\1\u00f5\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa\16\uffff\1\u00fb"+
        "\3\uffff\1\u00fc\3\uffff\1\u00fd\1\u00fe\2\uffff\1\u00ff\1\u0100"+
        "\100\uffff\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107"+
        "\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d\1\u010e\16\uffff"+
        "\1\u010f\3\uffff\1\u0110\3\uffff\1\u0111\1\u0112\2\uffff\1\u0113"+
        "\1\u0114\100\uffff\1\u0115\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a"+
        "\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122"+
        "\16\uffff\1\u0123\3\uffff\1\u0124\3\uffff\1\u0125\1\u0126\2\uffff"+
        "\1\u0127\1\u0128\100\uffff\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d"+
        "\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135"+
        "\1\u0136\16\uffff\1\u0137\3\uffff\1\u0138\3\uffff\1\u0139\1\u013a"+
        "\2\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\11\5\uffff\1\7\35\uffff\1\3\24\uffff\1\10\23\uffff\1\5\1"+
            "\6\32\uffff\1\2\1\uffff\1\12\1\uffff\1\4\46\uffff\1\1\6\uffff"+
            "\1\12\2\uffff\2\12",
            "",
            "\1\16",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\21\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\20\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12\4"+
            "\uffff\1\12\2\uffff\4\12\2\uffff\1\17\3\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\112",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\114\2\12\1\uffff\2\12\1\uffff\3\12"+
            "\1\uffff\2\113\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10\12"+
            "\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0087\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0086\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00c2\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00c1\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u00fd\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u00fc\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0138\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0137\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0174\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0173\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\1\u0172\3\12\1\uffff\15"+
            "\12\1\uffff\16\12\1\uffff\2\12",
            "\1\u01b7\5\uffff\1\u01b5\35\uffff\1\u01b1\24\uffff\1\u01b6"+
            "\23\uffff\1\u01b3\1\u01b4\26\uffff\1\u01bb\3\uffff\1\u01b0\1"+
            "\uffff\1\u01ae\1\uffff\1\u01b2\2\uffff\1\u01bd\2\uffff\1\u01ad"+
            "\1\u01bd\37\uffff\1\u01af\6\uffff\1\u01ba\2\uffff\1\u01b8\1"+
            "\u01b9\37\uffff\1\u01bc",
            "\1\u01be",
            "\1\u01c9\5\uffff\1\u01c7\35\uffff\1\u01c4\24\uffff\1\u01c8"+
            "\23\uffff\1\u01c5\1\u01c6\26\uffff\1\u01cd\3\uffff\1\u01c3\1"+
            "\uffff\1\u01c1\1\u01d0\1\u01bf\2\uffff\1\u01cf\2\uffff\1\u01c0"+
            "\1\u01cf\37\uffff\1\u01c2\6\uffff\1\u01cc\2\uffff\1\u01ca\1"+
            "\u01cb\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u01ce",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u01dc\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u01db\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0216",
            "\1\u0221\5\uffff\1\u021f\35\uffff\1\u021c\24\uffff\1\u0220"+
            "\23\uffff\1\u021d\1\u021e\26\uffff\1\u0225\3\uffff\1\u021b\1"+
            "\uffff\1\u0219\1\u0228\1\u0217\2\uffff\1\u0227\2\uffff\1\u0218"+
            "\1\u0227\37\uffff\1\u021a\6\uffff\1\u0224\2\uffff\1\u0222\1"+
            "\u0223\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u0226",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0233",
            "\1\u023e\5\uffff\1\u023c\35\uffff\1\u0239\24\uffff\1\u023d"+
            "\23\uffff\1\u023a\1\u023b\26\uffff\1\u0242\3\uffff\1\u0238\1"+
            "\uffff\1\u0236\1\u0245\1\u0234\2\uffff\1\u0244\2\uffff\1\u0235"+
            "\1\u0244\37\uffff\1\u0237\6\uffff\1\u0241\2\uffff\1\u023f\1"+
            "\u0240\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u0243",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0250",
            "\1\u025b\5\uffff\1\u0259\35\uffff\1\u0256\24\uffff\1\u025a"+
            "\23\uffff\1\u0257\1\u0258\26\uffff\1\u025f\3\uffff\1\u0255\1"+
            "\uffff\1\u0253\1\u0262\1\u0251\2\uffff\1\u0261\2\uffff\1\u0252"+
            "\1\u0261\37\uffff\1\u0254\6\uffff\1\u025e\2\uffff\1\u025c\1"+
            "\u025d\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u0260",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u026d",
            "\1\u0278\5\uffff\1\u0276\35\uffff\1\u0273\24\uffff\1\u0277"+
            "\23\uffff\1\u0274\1\u0275\26\uffff\1\u027c\3\uffff\1\u0272\1"+
            "\uffff\1\u0270\1\u027f\1\u026e\2\uffff\1\u027e\2\uffff\1\u026f"+
            "\1\u027e\37\uffff\1\u0271\6\uffff\1\u027b\2\uffff\1\u0279\1"+
            "\u027a\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u027d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u028a",
            "\1\u0295\5\uffff\1\u0293\35\uffff\1\u0290\24\uffff\1\u0294"+
            "\23\uffff\1\u0291\1\u0292\26\uffff\1\u0299\3\uffff\1\u028f\1"+
            "\uffff\1\u028d\1\u029c\1\u028b\2\uffff\1\u029b\2\uffff\1\u028c"+
            "\1\u029b\37\uffff\1\u028e\6\uffff\1\u0298\2\uffff\1\u0296\1"+
            "\u0297\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u029a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02b1\5\uffff\1\u02af\35\uffff\1\u02ab\24\uffff\1\u02b0"+
            "\23\uffff\1\u02ad\1\u02ae\26\uffff\1\u02b5\3\uffff\1\u02aa\1"+
            "\uffff\1\u02a8\1\uffff\1\u02ac\2\uffff\1\u02b7\2\uffff\1\u02a7"+
            "\1\u02b7\37\uffff\1\u02a9\6\uffff\1\u02b4\2\uffff\1\u02b2\1"+
            "\u02b3\37\uffff\1\u02b6",
            "\1\u02b8",
            "\1\u02c3\5\uffff\1\u02c1\35\uffff\1\u02be\24\uffff\1\u02c2"+
            "\23\uffff\1\u02bf\1\u02c0\26\uffff\1\u02c7\3\uffff\1\u02bd\1"+
            "\uffff\1\u02bb\1\u02ca\1\u02b9\2\uffff\1\u02c9\2\uffff\1\u02ba"+
            "\1\u02c9\37\uffff\1\u02bc\6\uffff\1\u02c6\2\uffff\1\u02c4\1"+
            "\u02c5\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u02c8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02de\5\uffff\1\u02dc\35\uffff\1\u02d8\24\uffff\1\u02dd"+
            "\23\uffff\1\u02da\1\u02db\32\uffff\1\u02d7\1\uffff\1\u02d5\1"+
            "\uffff\1\u02d9\46\uffff\1\u02d6\6\uffff\1\u02e1\2\uffff\1\u02df"+
            "\1\u02e0",
            "\1\u02f6\5\uffff\1\u02f4\35\uffff\1\u02ea\24\uffff\1\u02f5"+
            "\23\uffff\1\u02f2\1\u02f3\26\uffff\1\u02fa\3\uffff\1\u02f0\1"+
            "\uffff\1\u02e3\1\uffff\1\u02f1\2\uffff\1\u02fc\2\uffff\1\u02ee"+
            "\1\u02fc\37\uffff\1\u02ef\6\uffff\1\u02f9\2\uffff\1\u02f7\1"+
            "\u02f8\2\uffff\1\u02e5\4\uffff\1\u02ed\3\uffff\1\u02e2\2\uffff"+
            "\1\u02e7\1\u02e8\1\uffff\1\u02e9\1\uffff\1\u02eb\2\uffff\1\u02ec"+
            "\1\u02e6\1\u02e4\6\uffff\1\u02fb",
            "\1\u02fd",
            "\1\u02fe",
            "\1\12\101\uffff\1\u0303\1\uffff\2\u0303\1\uffff\1\u0301\1\uffff"+
            "\1\u0303\1\uffff\1\u0303\1\u0302\2\uffff\1\u0303\1\u0302\1\uffff"+
            "\2\u0300\1\u0303\3\uffff\2\u0303\1\uffff\6\u0303\1\uffff\1\u0304"+
            "\24\uffff\1\u02ff\1\uffff\1\u0305\1\u0303\34\uffff\1\u0303\1"+
            "\uffff\1\u0303",
            "\1\u0307",
            "\1\12\101\uffff\1\u030b\1\uffff\2\u030b\1\uffff\1\u0309\1\uffff"+
            "\1\u030b\1\uffff\1\u030b\1\u030a\2\uffff\1\u030b\1\u030a\1\uffff"+
            "\2\u0308\1\u030b\3\uffff\2\u030b\1\uffff\6\u030b\1\uffff\1\u030c"+
            "\26\uffff\1\u030d\1\u030b\34\uffff\1\u030b\1\uffff\1\u030b",
            "\1\12\101\uffff\1\u0312\1\uffff\2\u0312\1\uffff\1\u0310\1\uffff"+
            "\1\u0312\1\uffff\1\u0312\1\u0311\2\uffff\1\u0312\1\u0311\1\uffff"+
            "\2\u030f\1\u0312\3\uffff\2\u0312\1\uffff\6\u0312\1\uffff\1\u0313"+
            "\26\uffff\1\u0314\1\u0312\34\uffff\1\u0312\1\uffff\1\u0312",
            "\1\12\101\uffff\1\u0319\1\uffff\2\u0319\1\uffff\1\u0317\1\uffff"+
            "\1\u0319\1\uffff\1\u0319\1\u0318\2\uffff\1\u0319\1\u0318\1\uffff"+
            "\2\u0316\1\u0319\3\uffff\2\u0319\1\uffff\6\u0319\1\uffff\1\u031a"+
            "\26\uffff\1\u031b\1\u0319\34\uffff\1\u0319\1\uffff\1\u0319",
            "\1\12\101\uffff\1\u0320\1\uffff\2\u0320\1\uffff\1\u031e\1\uffff"+
            "\1\u0320\1\uffff\1\u0320\1\u031f\2\uffff\1\u0320\1\u031f\1\uffff"+
            "\2\u031d\1\u0320\3\uffff\2\u0320\1\uffff\6\u0320\1\uffff\1\u0321"+
            "\26\uffff\1\u0322\1\u0320\34\uffff\1\u0320\1\uffff\1\u0320",
            "\1\12\101\uffff\1\u0327\1\uffff\2\u0327\1\uffff\1\u0325\1\uffff"+
            "\1\u0327\1\uffff\1\u0327\1\u0326\2\uffff\1\u0327\1\u0326\1\uffff"+
            "\2\u0324\1\u0327\3\uffff\2\u0327\1\uffff\6\u0327\1\uffff\1\u0328"+
            "\26\uffff\1\u0329\1\u0327\34\uffff\1\u0327\1\uffff\1\u0327",
            "\1\u032b",
            "\1\u0334\106\uffff\1\u032d\1\u0338\65\uffff\1\u032f\4\uffff"+
            "\1\u0337\3\uffff\1\u032c\2\uffff\1\u0331\1\u0332\1\uffff\1\u0333"+
            "\1\uffff\1\u0335\2\uffff\1\u0336\1\u0330\1\u032e",
            "\1\u0343\5\uffff\1\u0341\35\uffff\1\u033d\24\uffff\1\u0342"+
            "\23\uffff\1\u033f\1\u0340\26\uffff\1\u0347\3\uffff\1\u033c\1"+
            "\uffff\1\u033a\1\uffff\1\u033e\2\uffff\1\u0349\2\uffff\1\u0339"+
            "\1\u0349\37\uffff\1\u033b\6\uffff\1\u0346\2\uffff\1\u0344\1"+
            "\u0345\37\uffff\1\u0348",
            "\1\u0353\5\uffff\1\u0351\35\uffff\1\u034d\24\uffff\1\u0352"+
            "\23\uffff\1\u034f\1\u0350\32\uffff\1\u034c\1\uffff\1\u034a\1"+
            "\uffff\1\u034e\46\uffff\1\u034b\6\uffff\1\u0356\2\uffff\1\u0354"+
            "\1\u0355",
            "\1\u0360\5\uffff\1\u035e\35\uffff\1\u035a\24\uffff\1\u035f"+
            "\23\uffff\1\u035c\1\u035d\32\uffff\1\u0359\1\uffff\1\u0357\1"+
            "\uffff\1\u035b\46\uffff\1\u0358\6\uffff\1\u0363\2\uffff\1\u0361"+
            "\1\u0362",
            "\1\u036d\5\uffff\1\u036b\35\uffff\1\u0367\24\uffff\1\u036c"+
            "\23\uffff\1\u0369\1\u036a\32\uffff\1\u0366\1\uffff\1\u0364\1"+
            "\uffff\1\u0368\46\uffff\1\u0365\6\uffff\1\u0370\2\uffff\1\u036e"+
            "\1\u036f",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0371\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0372\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u03b3\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u03c8\5\uffff\1\u03c6\35\uffff\1\u03bd\24\uffff\1\u03c7"+
            "\23\uffff\1\u03c4\1\u03c5\26\uffff\1\u03cc\3\uffff\1\u03c3\1"+
            "\uffff\1\u03b6\1\uffff\1\u03b4\2\uffff\1\u03ce\2\uffff\1\u03c1"+
            "\1\u03ce\37\uffff\1\u03c2\6\uffff\1\u03cb\2\uffff\1\u03c9\1"+
            "\u03ca\2\uffff\1\u03b8\4\uffff\1\u03c0\3\uffff\1\u03b5\2\uffff"+
            "\1\u03ba\1\u03bb\1\uffff\1\u03bc\1\uffff\1\u03be\2\uffff\1\u03bf"+
            "\1\u03b9\1\u03b7\6\uffff\1\u03cd",
            "",
            "",
            "\1\u03d5\57\uffff\1\u03da\1\uffff\1\u03da\1\u03d8\1\uffff\1"+
            "\u03d1\1\u03d7\1\u03d3\1\uffff\1\u03da\1\u03d2\1\uffff\1\u03d6"+
            "\1\u03da\1\u03d2\1\uffff\2\u03d0\1\u03da\3\uffff\2\u03da\1\uffff"+
            "\6\u03da\1\uffff\1\u03d4\24\uffff\1\u03cf\2\uffff\1\u03da\3"+
            "\uffff\1\12\30\uffff\1\u03da\1\uffff\1\u03da",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03db",
            "\1\u03e6\5\uffff\1\u03e4\35\uffff\1\u03e1\24\uffff\1\u03e5"+
            "\23\uffff\1\u03e2\1\u03e3\26\uffff\1\u03ea\3\uffff\1\u03e0\1"+
            "\uffff\1\u03de\1\u03ed\1\u03dc\2\uffff\1\u03ec\2\uffff\1\u03dd"+
            "\1\u03ec\37\uffff\1\u03df\6\uffff\1\u03e9\2\uffff\1\u03e7\1"+
            "\u03e8\2\uffff\1\12\4\uffff\1\12\3\uffff\1\12\2\uffff\2\12\1"+
            "\uffff\1\12\1\uffff\1\12\2\uffff\3\12\6\uffff\1\u03eb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u03f8\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u03f9\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u043a\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u044f\5\uffff\1\u044d\35\uffff\1\u0444\24\uffff\1\u044e"+
            "\23\uffff\1\u044b\1\u044c\26\uffff\1\u0453\3\uffff\1\u044a\1"+
            "\uffff\1\u043d\1\uffff\1\u043b\2\uffff\1\u0455\2\uffff\1\u0448"+
            "\1\u0455\37\uffff\1\u0449\6\uffff\1\u0452\2\uffff\1\u0450\1"+
            "\u0451\2\uffff\1\u043f\4\uffff\1\u0447\3\uffff\1\u043c\2\uffff"+
            "\1\u0441\1\u0442\1\uffff\1\u0443\1\uffff\1\u0445\2\uffff\1\u0446"+
            "\1\u0440\1\u043e\6\uffff\1\u0454",
            "",
            "",
            "\1\u045c\57\uffff\1\u0461\1\uffff\1\u0461\1\u045f\1\uffff\1"+
            "\u0458\1\u045e\1\u045a\1\uffff\1\u0461\1\u0459\1\uffff\1\u045d"+
            "\1\u0461\1\u0459\1\uffff\2\u0457\1\u0461\3\uffff\2\u0461\1\uffff"+
            "\6\u0461\1\uffff\1\u045b\24\uffff\1\u0456\2\uffff\1\u0461\3"+
            "\uffff\1\12\30\uffff\1\u0461\1\uffff\1\u0461",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0462\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0463\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u04a4\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u04b9\5\uffff\1\u04b7\35\uffff\1\u04ae\24\uffff\1\u04b8"+
            "\23\uffff\1\u04b5\1\u04b6\26\uffff\1\u04bd\3\uffff\1\u04b4\1"+
            "\uffff\1\u04a7\1\uffff\1\u04a5\2\uffff\1\u04bf\2\uffff\1\u04b2"+
            "\1\u04bf\37\uffff\1\u04b3\6\uffff\1\u04bc\2\uffff\1\u04ba\1"+
            "\u04bb\2\uffff\1\u04a9\4\uffff\1\u04b1\3\uffff\1\u04a6\2\uffff"+
            "\1\u04ab\1\u04ac\1\uffff\1\u04ad\1\uffff\1\u04af\2\uffff\1\u04b0"+
            "\1\u04aa\1\u04a8\6\uffff\1\u04be",
            "",
            "",
            "\1\u04c6\57\uffff\1\u04cb\1\uffff\1\u04cb\1\u04c9\1\uffff\1"+
            "\u04c2\1\u04c8\1\u04c4\1\uffff\1\u04cb\1\u04c3\1\uffff\1\u04c7"+
            "\1\u04cb\1\u04c3\1\uffff\2\u04c1\1\u04cb\3\uffff\2\u04cb\1\uffff"+
            "\6\u04cb\1\uffff\1\u04c5\24\uffff\1\u04c0\2\uffff\1\u04cb\3"+
            "\uffff\1\12\30\uffff\1\u04cb\1\uffff\1\u04cb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u04cc\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u04cd\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u050e\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u0523\5\uffff\1\u0521\35\uffff\1\u0518\24\uffff\1\u0522"+
            "\23\uffff\1\u051f\1\u0520\26\uffff\1\u0527\3\uffff\1\u051e\1"+
            "\uffff\1\u0511\1\uffff\1\u050f\2\uffff\1\u0529\2\uffff\1\u051c"+
            "\1\u0529\37\uffff\1\u051d\6\uffff\1\u0526\2\uffff\1\u0524\1"+
            "\u0525\2\uffff\1\u0513\4\uffff\1\u051b\3\uffff\1\u0510\2\uffff"+
            "\1\u0515\1\u0516\1\uffff\1\u0517\1\uffff\1\u0519\2\uffff\1\u051a"+
            "\1\u0514\1\u0512\6\uffff\1\u0528",
            "",
            "",
            "\1\u0530\57\uffff\1\u0535\1\uffff\1\u0535\1\u0533\1\uffff\1"+
            "\u052c\1\u0532\1\u052e\1\uffff\1\u0535\1\u052d\1\uffff\1\u0531"+
            "\1\u0535\1\u052d\1\uffff\2\u052b\1\u0535\3\uffff\2\u0535\1\uffff"+
            "\6\u0535\1\uffff\1\u052f\24\uffff\1\u052a\2\uffff\1\u0535\3"+
            "\uffff\1\12\30\uffff\1\u0535\1\uffff\1\u0535",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u0536\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u0537\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u0578\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u058d\5\uffff\1\u058b\35\uffff\1\u0582\24\uffff\1\u058c"+
            "\23\uffff\1\u0589\1\u058a\26\uffff\1\u0591\3\uffff\1\u0588\1"+
            "\uffff\1\u057b\1\uffff\1\u0579\2\uffff\1\u0593\2\uffff\1\u0586"+
            "\1\u0593\37\uffff\1\u0587\6\uffff\1\u0590\2\uffff\1\u058e\1"+
            "\u058f\2\uffff\1\u057d\4\uffff\1\u0585\3\uffff\1\u057a\2\uffff"+
            "\1\u057f\1\u0580\1\uffff\1\u0581\1\uffff\1\u0583\2\uffff\1\u0584"+
            "\1\u057e\1\u057c\6\uffff\1\u0592",
            "",
            "",
            "\1\u059a\57\uffff\1\u059f\1\uffff\1\u059f\1\u059d\1\uffff\1"+
            "\u0596\1\u059c\1\u0598\1\uffff\1\u059f\1\u0597\1\uffff\1\u059b"+
            "\1\u059f\1\u0597\1\uffff\2\u0595\1\u059f\3\uffff\2\u059f\1\uffff"+
            "\6\u059f\1\uffff\1\u0599\24\uffff\1\u0594\2\uffff\1\u059f\3"+
            "\uffff\1\12\30\uffff\1\u059f\1\uffff\1\u059f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\27\uffff\1\12\21\uffff\1\12\21\uffff\1\12\35\uffff\1"+
            "\12\1\uffff\2\12\1\uffff\1\u05a0\2\12\1\uffff\2\12\1\uffff\3"+
            "\12\1\uffff\2\u05a1\1\12\1\uffff\4\12\1\uffff\6\12\1\uffff\10"+
            "\12\4\uffff\1\12\2\uffff\4\12\2\uffff\4\12\1\uffff\15\12\1\uffff"+
            "\16\12\1\uffff\2\12",
            "\1\u05e2\175\uffff\1\12\10\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\12\5\uffff\2\12",
            "",
            "\1\u05f7\5\uffff\1\u05f5\35\uffff\1\u05ec\24\uffff\1\u05f6"+
            "\23\uffff\1\u05f3\1\u05f4\26\uffff\1\u05fb\3\uffff\1\u05f2\1"+
            "\uffff\1\u05e5\1\uffff\1\u05e3\2\uffff\1\u05fd\2\uffff\1\u05f0"+
            "\1\u05fd\37\uffff\1\u05f1\6\uffff\1\u05fa\2\uffff\1\u05f8\1"+
            "\u05f9\2\uffff\1\u05e7\4\uffff\1\u05ef\3\uffff\1\u05e4\2\uffff"+
            "\1\u05e9\1\u05ea\1\uffff\1\u05eb\1\uffff\1\u05ed\2\uffff\1\u05ee"+
            "\1\u05e8\1\u05e6\6\uffff\1\u05fc",
            "",
            "",
            "\1\u0604\57\uffff\1\u0609\1\uffff\1\u0609\1\u0607\1\uffff\1"+
            "\u0600\1\u0606\1\u0602\1\uffff\1\u0609\1\u0601\1\uffff\1\u0605"+
            "\1\u0609\1\u0601\1\uffff\2\u05ff\1\u0609\3\uffff\2\u0609\1\uffff"+
            "\6\u0609\1\uffff\1\u0603\24\uffff\1\u05fe\2\uffff\1\u0609\3"+
            "\uffff\1\12\30\uffff\1\u0609\1\uffff\1\u0609",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "499:1: simple_expression_value_access : ( selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper name )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA57_17 = input.LA(1);

                         
                        int index57_17 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_17==120) ) {s = 447;}

                        else if ( (LA57_17==126) && (synpred13_Objc())) {s = 448;}

                        else if ( (LA57_17==118) ) {s = 449;}

                        else if ( (LA57_17==159) && (synpred13_Objc())) {s = 450;}

                        else if ( (LA57_17==116) && (synpred13_Objc())) {s = 451;}

                        else if ( (LA57_17==ID) ) {s = 452;}

                        else if ( (LA57_17==STRING_LITERAL) && (synpred13_Objc())) {s = 453;}

                        else if ( (LA57_17==STRING_OBJC) && (synpred13_Objc())) {s = 454;}

                        else if ( (LA57_17==CHAR_LITERAL) && (synpred13_Objc())) {s = 455;}

                        else if ( (LA57_17==NUMBER_LITERAL) && (synpred13_Objc())) {s = 456;}

                        else if ( (LA57_17==BOOL_LITERAL) && (synpred13_Objc())) {s = 457;}

                        else if ( (LA57_17==169) && (synpred13_Objc())) {s = 458;}

                        else if ( (LA57_17==170) && (synpred13_Objc())) {s = 459;}

                        else if ( (LA57_17==166) && (synpred13_Objc())) {s = 460;}

                        else if ( (LA57_17==112) && (synpred13_Objc())) {s = 461;}

                        else if ( (LA57_17==202) && (synpred13_Objc())) {s = 462;}

                        else if ( (LA57_17==123||LA57_17==127) && (synpred13_Objc())) {s = 463;}

                        else if ( (LA57_17==119) && (synpred13_Objc())) {s = 464;}

                        else if ( (LA57_17==173||LA57_17==178||LA57_17==182||(LA57_17 >= 185 && LA57_17 <= 186)||LA57_17==188||LA57_17==190||(LA57_17 >= 193 && LA57_17 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_17);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA57_76 = input.LA(1);

                         
                        int index57_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_76==120) ) {s = 535;}

                        else if ( (LA57_76==126) && (synpred13_Objc())) {s = 536;}

                        else if ( (LA57_76==118) ) {s = 537;}

                        else if ( (LA57_76==159) && (synpred13_Objc())) {s = 538;}

                        else if ( (LA57_76==116) && (synpred13_Objc())) {s = 539;}

                        else if ( (LA57_76==ID) ) {s = 540;}

                        else if ( (LA57_76==STRING_LITERAL) && (synpred13_Objc())) {s = 541;}

                        else if ( (LA57_76==STRING_OBJC) && (synpred13_Objc())) {s = 542;}

                        else if ( (LA57_76==CHAR_LITERAL) && (synpred13_Objc())) {s = 543;}

                        else if ( (LA57_76==NUMBER_LITERAL) && (synpred13_Objc())) {s = 544;}

                        else if ( (LA57_76==BOOL_LITERAL) && (synpred13_Objc())) {s = 545;}

                        else if ( (LA57_76==169) && (synpred13_Objc())) {s = 546;}

                        else if ( (LA57_76==170) && (synpred13_Objc())) {s = 547;}

                        else if ( (LA57_76==166) && (synpred13_Objc())) {s = 548;}

                        else if ( (LA57_76==112) && (synpred13_Objc())) {s = 549;}

                        else if ( (LA57_76==202) && (synpred13_Objc())) {s = 550;}

                        else if ( (LA57_76==123||LA57_76==127) && (synpred13_Objc())) {s = 551;}

                        else if ( (LA57_76==119) && (synpred13_Objc())) {s = 552;}

                        else if ( (LA57_76==173||LA57_76==178||LA57_76==182||(LA57_76 >= 185 && LA57_76 <= 186)||LA57_76==188||LA57_76==190||(LA57_76 >= 193 && LA57_76 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_76);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA57_135 = input.LA(1);

                         
                        int index57_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_135==120) ) {s = 564;}

                        else if ( (LA57_135==126) && (synpred13_Objc())) {s = 565;}

                        else if ( (LA57_135==118) ) {s = 566;}

                        else if ( (LA57_135==159) && (synpred13_Objc())) {s = 567;}

                        else if ( (LA57_135==116) && (synpred13_Objc())) {s = 568;}

                        else if ( (LA57_135==ID) ) {s = 569;}

                        else if ( (LA57_135==STRING_LITERAL) && (synpred13_Objc())) {s = 570;}

                        else if ( (LA57_135==STRING_OBJC) && (synpred13_Objc())) {s = 571;}

                        else if ( (LA57_135==CHAR_LITERAL) && (synpred13_Objc())) {s = 572;}

                        else if ( (LA57_135==NUMBER_LITERAL) && (synpred13_Objc())) {s = 573;}

                        else if ( (LA57_135==BOOL_LITERAL) && (synpred13_Objc())) {s = 574;}

                        else if ( (LA57_135==169) && (synpred13_Objc())) {s = 575;}

                        else if ( (LA57_135==170) && (synpred13_Objc())) {s = 576;}

                        else if ( (LA57_135==166) && (synpred13_Objc())) {s = 577;}

                        else if ( (LA57_135==112) && (synpred13_Objc())) {s = 578;}

                        else if ( (LA57_135==202) && (synpred13_Objc())) {s = 579;}

                        else if ( (LA57_135==123||LA57_135==127) && (synpred13_Objc())) {s = 580;}

                        else if ( (LA57_135==119) && (synpred13_Objc())) {s = 581;}

                        else if ( (LA57_135==173||LA57_135==178||LA57_135==182||(LA57_135 >= 185 && LA57_135 <= 186)||LA57_135==188||LA57_135==190||(LA57_135 >= 193 && LA57_135 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_135);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA57_194 = input.LA(1);

                         
                        int index57_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_194==120) ) {s = 593;}

                        else if ( (LA57_194==126) && (synpred13_Objc())) {s = 594;}

                        else if ( (LA57_194==118) ) {s = 595;}

                        else if ( (LA57_194==159) && (synpred13_Objc())) {s = 596;}

                        else if ( (LA57_194==116) && (synpred13_Objc())) {s = 597;}

                        else if ( (LA57_194==ID) ) {s = 598;}

                        else if ( (LA57_194==STRING_LITERAL) && (synpred13_Objc())) {s = 599;}

                        else if ( (LA57_194==STRING_OBJC) && (synpred13_Objc())) {s = 600;}

                        else if ( (LA57_194==CHAR_LITERAL) && (synpred13_Objc())) {s = 601;}

                        else if ( (LA57_194==NUMBER_LITERAL) && (synpred13_Objc())) {s = 602;}

                        else if ( (LA57_194==BOOL_LITERAL) && (synpred13_Objc())) {s = 603;}

                        else if ( (LA57_194==169) && (synpred13_Objc())) {s = 604;}

                        else if ( (LA57_194==170) && (synpred13_Objc())) {s = 605;}

                        else if ( (LA57_194==166) && (synpred13_Objc())) {s = 606;}

                        else if ( (LA57_194==112) && (synpred13_Objc())) {s = 607;}

                        else if ( (LA57_194==202) && (synpred13_Objc())) {s = 608;}

                        else if ( (LA57_194==123||LA57_194==127) && (synpred13_Objc())) {s = 609;}

                        else if ( (LA57_194==119) && (synpred13_Objc())) {s = 610;}

                        else if ( (LA57_194==173||LA57_194==178||LA57_194==182||(LA57_194 >= 185 && LA57_194 <= 186)||LA57_194==188||LA57_194==190||(LA57_194 >= 193 && LA57_194 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_194);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA57_253 = input.LA(1);

                         
                        int index57_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_253==120) ) {s = 622;}

                        else if ( (LA57_253==126) && (synpred13_Objc())) {s = 623;}

                        else if ( (LA57_253==118) ) {s = 624;}

                        else if ( (LA57_253==159) && (synpred13_Objc())) {s = 625;}

                        else if ( (LA57_253==116) && (synpred13_Objc())) {s = 626;}

                        else if ( (LA57_253==ID) ) {s = 627;}

                        else if ( (LA57_253==STRING_LITERAL) && (synpred13_Objc())) {s = 628;}

                        else if ( (LA57_253==STRING_OBJC) && (synpred13_Objc())) {s = 629;}

                        else if ( (LA57_253==CHAR_LITERAL) && (synpred13_Objc())) {s = 630;}

                        else if ( (LA57_253==NUMBER_LITERAL) && (synpred13_Objc())) {s = 631;}

                        else if ( (LA57_253==BOOL_LITERAL) && (synpred13_Objc())) {s = 632;}

                        else if ( (LA57_253==169) && (synpred13_Objc())) {s = 633;}

                        else if ( (LA57_253==170) && (synpred13_Objc())) {s = 634;}

                        else if ( (LA57_253==166) && (synpred13_Objc())) {s = 635;}

                        else if ( (LA57_253==112) && (synpred13_Objc())) {s = 636;}

                        else if ( (LA57_253==202) && (synpred13_Objc())) {s = 637;}

                        else if ( (LA57_253==123||LA57_253==127) && (synpred13_Objc())) {s = 638;}

                        else if ( (LA57_253==119) && (synpred13_Objc())) {s = 639;}

                        else if ( (LA57_253==173||LA57_253==178||LA57_253==182||(LA57_253 >= 185 && LA57_253 <= 186)||LA57_253==188||LA57_253==190||(LA57_253 >= 193 && LA57_253 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_253);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA57_312 = input.LA(1);

                         
                        int index57_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_312==120) ) {s = 651;}

                        else if ( (LA57_312==126) && (synpred13_Objc())) {s = 652;}

                        else if ( (LA57_312==118) ) {s = 653;}

                        else if ( (LA57_312==159) && (synpred13_Objc())) {s = 654;}

                        else if ( (LA57_312==116) && (synpred13_Objc())) {s = 655;}

                        else if ( (LA57_312==ID) ) {s = 656;}

                        else if ( (LA57_312==STRING_LITERAL) && (synpred13_Objc())) {s = 657;}

                        else if ( (LA57_312==STRING_OBJC) && (synpred13_Objc())) {s = 658;}

                        else if ( (LA57_312==CHAR_LITERAL) && (synpred13_Objc())) {s = 659;}

                        else if ( (LA57_312==NUMBER_LITERAL) && (synpred13_Objc())) {s = 660;}

                        else if ( (LA57_312==BOOL_LITERAL) && (synpred13_Objc())) {s = 661;}

                        else if ( (LA57_312==169) && (synpred13_Objc())) {s = 662;}

                        else if ( (LA57_312==170) && (synpred13_Objc())) {s = 663;}

                        else if ( (LA57_312==166) && (synpred13_Objc())) {s = 664;}

                        else if ( (LA57_312==112) && (synpred13_Objc())) {s = 665;}

                        else if ( (LA57_312==202) && (synpred13_Objc())) {s = 666;}

                        else if ( (LA57_312==123||LA57_312==127) && (synpred13_Objc())) {s = 667;}

                        else if ( (LA57_312==119) && (synpred13_Objc())) {s = 668;}

                        else if ( (LA57_312==173||LA57_312==178||LA57_312==182||(LA57_312 >= 185 && LA57_312 <= 186)||LA57_312==188||LA57_312==190||(LA57_312 >= 193 && LA57_312 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_312);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA57_372 = input.LA(1);

                         
                        int index57_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_372==120) ) {s = 697;}

                        else if ( (LA57_372==126) && (synpred13_Objc())) {s = 698;}

                        else if ( (LA57_372==118) ) {s = 699;}

                        else if ( (LA57_372==159) && (synpred13_Objc())) {s = 700;}

                        else if ( (LA57_372==116) && (synpred13_Objc())) {s = 701;}

                        else if ( (LA57_372==ID) ) {s = 702;}

                        else if ( (LA57_372==STRING_LITERAL) && (synpred13_Objc())) {s = 703;}

                        else if ( (LA57_372==STRING_OBJC) && (synpred13_Objc())) {s = 704;}

                        else if ( (LA57_372==CHAR_LITERAL) && (synpred13_Objc())) {s = 705;}

                        else if ( (LA57_372==NUMBER_LITERAL) && (synpred13_Objc())) {s = 706;}

                        else if ( (LA57_372==BOOL_LITERAL) && (synpred13_Objc())) {s = 707;}

                        else if ( (LA57_372==169) && (synpred13_Objc())) {s = 708;}

                        else if ( (LA57_372==170) && (synpred13_Objc())) {s = 709;}

                        else if ( (LA57_372==166) && (synpred13_Objc())) {s = 710;}

                        else if ( (LA57_372==112) && (synpred13_Objc())) {s = 711;}

                        else if ( (LA57_372==202) && (synpred13_Objc())) {s = 712;}

                        else if ( (LA57_372==123||LA57_372==127) && (synpred13_Objc())) {s = 713;}

                        else if ( (LA57_372==119) && (synpred13_Objc())) {s = 714;}

                        else if ( (LA57_372==173||LA57_372==178||LA57_372==182||(LA57_372 >= 185 && LA57_372 <= 186)||LA57_372==188||LA57_372==190||(LA57_372 >= 193 && LA57_372 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_372);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA57_449 = input.LA(1);

                         
                        int index57_449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_449==120) ) {s = 948;}

                        else if ( (LA57_449==182) ) {s = 949;}

                        else if ( (LA57_449==118) ) {s = 950;}

                        else if ( (LA57_449==195) ) {s = 951;}

                        else if ( (LA57_449==173) ) {s = 952;}

                        else if ( (LA57_449==194) ) {s = 953;}

                        else if ( (LA57_449==185) ) {s = 954;}

                        else if ( (LA57_449==186) ) {s = 955;}

                        else if ( (LA57_449==188) ) {s = 956;}

                        else if ( (LA57_449==ID) ) {s = 957;}

                        else if ( (LA57_449==190) ) {s = 958;}

                        else if ( (LA57_449==193) ) {s = 959;}

                        else if ( (LA57_449==178) ) {s = 960;}

                        else if ( (LA57_449==126) && (synpred13_Objc())) {s = 961;}

                        else if ( (LA57_449==159) && (synpred13_Objc())) {s = 962;}

                        else if ( (LA57_449==116) && (synpred13_Objc())) {s = 963;}

                        else if ( (LA57_449==STRING_LITERAL) && (synpred13_Objc())) {s = 964;}

                        else if ( (LA57_449==STRING_OBJC) && (synpred13_Objc())) {s = 965;}

                        else if ( (LA57_449==CHAR_LITERAL) && (synpred13_Objc())) {s = 966;}

                        else if ( (LA57_449==NUMBER_LITERAL) && (synpred13_Objc())) {s = 967;}

                        else if ( (LA57_449==BOOL_LITERAL) && (synpred13_Objc())) {s = 968;}

                        else if ( (LA57_449==169) && (synpred13_Objc())) {s = 969;}

                        else if ( (LA57_449==170) && (synpred13_Objc())) {s = 970;}

                        else if ( (LA57_449==166) && (synpred13_Objc())) {s = 971;}

                        else if ( (LA57_449==112) && (synpred13_Objc())) {s = 972;}

                        else if ( (LA57_449==202) && (synpred13_Objc())) {s = 973;}

                        else if ( (LA57_449==123||LA57_449==127) && (synpred13_Objc())) {s = 974;}

                         
                        input.seek(index57_449);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA57_452 = input.LA(1);

                         
                        int index57_452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_452==166) ) {s = 975;}

                        else if ( ((LA57_452 >= 129 && LA57_452 <= 130)) && (synpred13_Objc())) {s = 976;}

                        else if ( (LA57_452==118) && (synpred13_Objc())) {s = 977;}

                        else if ( (LA57_452==123||LA57_452==127) && (synpred13_Objc())) {s = 978;}

                        else if ( (LA57_452==120) ) {s = 979;}

                        else if ( (LA57_452==145) && (synpred13_Objc())) {s = 980;}

                        else if ( (LA57_452==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 981;}

                        else if ( (LA57_452==125) && (synpred13_Objc())) {s = 982;}

                        else if ( (LA57_452==119) ) {s = 983;}

                        else if ( (LA57_452==116) ) {s = 984;}

                        else if ( (LA57_452==173) ) {s = 10;}

                        else if ( (LA57_452==113||LA57_452==115||LA57_452==122||LA57_452==126||LA57_452==131||(LA57_452 >= 135 && LA57_452 <= 136)||(LA57_452 >= 138 && LA57_452 <= 143)||LA57_452==169||LA57_452==198||LA57_452==200) && (synpred13_Objc())) {s = 986;}

                         
                        input.seek(index57_452);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA57_476 = input.LA(1);

                         
                        int index57_476 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_476==120) ) {s = 988;}

                        else if ( (LA57_476==126) && (synpred13_Objc())) {s = 989;}

                        else if ( (LA57_476==118) ) {s = 990;}

                        else if ( (LA57_476==159) && (synpred13_Objc())) {s = 991;}

                        else if ( (LA57_476==116) && (synpred13_Objc())) {s = 992;}

                        else if ( (LA57_476==ID) ) {s = 993;}

                        else if ( (LA57_476==STRING_LITERAL) && (synpred13_Objc())) {s = 994;}

                        else if ( (LA57_476==STRING_OBJC) && (synpred13_Objc())) {s = 995;}

                        else if ( (LA57_476==CHAR_LITERAL) && (synpred13_Objc())) {s = 996;}

                        else if ( (LA57_476==NUMBER_LITERAL) && (synpred13_Objc())) {s = 997;}

                        else if ( (LA57_476==BOOL_LITERAL) && (synpred13_Objc())) {s = 998;}

                        else if ( (LA57_476==169) && (synpred13_Objc())) {s = 999;}

                        else if ( (LA57_476==170) && (synpred13_Objc())) {s = 1000;}

                        else if ( (LA57_476==166) && (synpred13_Objc())) {s = 1001;}

                        else if ( (LA57_476==112) && (synpred13_Objc())) {s = 1002;}

                        else if ( (LA57_476==202) && (synpred13_Objc())) {s = 1003;}

                        else if ( (LA57_476==123||LA57_476==127) && (synpred13_Objc())) {s = 1004;}

                        else if ( (LA57_476==119) && (synpred13_Objc())) {s = 1005;}

                        else if ( (LA57_476==173||LA57_476==178||LA57_476==182||(LA57_476 >= 185 && LA57_476 <= 186)||LA57_476==188||LA57_476==190||(LA57_476 >= 193 && LA57_476 <= 195)) ) {s = 10;}

                         
                        input.seek(index57_476);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA57_537 = input.LA(1);

                         
                        int index57_537 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_537==120) ) {s = 1083;}

                        else if ( (LA57_537==182) ) {s = 1084;}

                        else if ( (LA57_537==118) ) {s = 1085;}

                        else if ( (LA57_537==195) ) {s = 1086;}

                        else if ( (LA57_537==173) ) {s = 1087;}

                        else if ( (LA57_537==194) ) {s = 1088;}

                        else if ( (LA57_537==185) ) {s = 1089;}

                        else if ( (LA57_537==186) ) {s = 1090;}

                        else if ( (LA57_537==188) ) {s = 1091;}

                        else if ( (LA57_537==ID) ) {s = 1092;}

                        else if ( (LA57_537==190) ) {s = 1093;}

                        else if ( (LA57_537==193) ) {s = 1094;}

                        else if ( (LA57_537==178) ) {s = 1095;}

                        else if ( (LA57_537==126) && (synpred13_Objc())) {s = 1096;}

                        else if ( (LA57_537==159) && (synpred13_Objc())) {s = 1097;}

                        else if ( (LA57_537==116) && (synpred13_Objc())) {s = 1098;}

                        else if ( (LA57_537==STRING_LITERAL) && (synpred13_Objc())) {s = 1099;}

                        else if ( (LA57_537==STRING_OBJC) && (synpred13_Objc())) {s = 1100;}

                        else if ( (LA57_537==CHAR_LITERAL) && (synpred13_Objc())) {s = 1101;}

                        else if ( (LA57_537==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1102;}

                        else if ( (LA57_537==BOOL_LITERAL) && (synpred13_Objc())) {s = 1103;}

                        else if ( (LA57_537==169) && (synpred13_Objc())) {s = 1104;}

                        else if ( (LA57_537==170) && (synpred13_Objc())) {s = 1105;}

                        else if ( (LA57_537==166) && (synpred13_Objc())) {s = 1106;}

                        else if ( (LA57_537==112) && (synpred13_Objc())) {s = 1107;}

                        else if ( (LA57_537==202) && (synpred13_Objc())) {s = 1108;}

                        else if ( (LA57_537==123||LA57_537==127) && (synpred13_Objc())) {s = 1109;}

                         
                        input.seek(index57_537);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA57_540 = input.LA(1);

                         
                        int index57_540 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_540==166) ) {s = 1110;}

                        else if ( ((LA57_540 >= 129 && LA57_540 <= 130)) && (synpred13_Objc())) {s = 1111;}

                        else if ( (LA57_540==118) && (synpred13_Objc())) {s = 1112;}

                        else if ( (LA57_540==123||LA57_540==127) && (synpred13_Objc())) {s = 1113;}

                        else if ( (LA57_540==120) ) {s = 1114;}

                        else if ( (LA57_540==145) && (synpred13_Objc())) {s = 1115;}

                        else if ( (LA57_540==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1116;}

                        else if ( (LA57_540==125) && (synpred13_Objc())) {s = 1117;}

                        else if ( (LA57_540==119) ) {s = 1118;}

                        else if ( (LA57_540==116) ) {s = 1119;}

                        else if ( (LA57_540==173) ) {s = 10;}

                        else if ( (LA57_540==113||LA57_540==115||LA57_540==122||LA57_540==126||LA57_540==131||(LA57_540 >= 135 && LA57_540 <= 136)||(LA57_540 >= 138 && LA57_540 <= 143)||LA57_540==169||LA57_540==198||LA57_540==200) && (synpred13_Objc())) {s = 1121;}

                         
                        input.seek(index57_540);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA57_566 = input.LA(1);

                         
                        int index57_566 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_566==120) ) {s = 1189;}

                        else if ( (LA57_566==182) ) {s = 1190;}

                        else if ( (LA57_566==118) ) {s = 1191;}

                        else if ( (LA57_566==195) ) {s = 1192;}

                        else if ( (LA57_566==173) ) {s = 1193;}

                        else if ( (LA57_566==194) ) {s = 1194;}

                        else if ( (LA57_566==185) ) {s = 1195;}

                        else if ( (LA57_566==186) ) {s = 1196;}

                        else if ( (LA57_566==188) ) {s = 1197;}

                        else if ( (LA57_566==ID) ) {s = 1198;}

                        else if ( (LA57_566==190) ) {s = 1199;}

                        else if ( (LA57_566==193) ) {s = 1200;}

                        else if ( (LA57_566==178) ) {s = 1201;}

                        else if ( (LA57_566==126) && (synpred13_Objc())) {s = 1202;}

                        else if ( (LA57_566==159) && (synpred13_Objc())) {s = 1203;}

                        else if ( (LA57_566==116) && (synpred13_Objc())) {s = 1204;}

                        else if ( (LA57_566==STRING_LITERAL) && (synpred13_Objc())) {s = 1205;}

                        else if ( (LA57_566==STRING_OBJC) && (synpred13_Objc())) {s = 1206;}

                        else if ( (LA57_566==CHAR_LITERAL) && (synpred13_Objc())) {s = 1207;}

                        else if ( (LA57_566==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1208;}

                        else if ( (LA57_566==BOOL_LITERAL) && (synpred13_Objc())) {s = 1209;}

                        else if ( (LA57_566==169) && (synpred13_Objc())) {s = 1210;}

                        else if ( (LA57_566==170) && (synpred13_Objc())) {s = 1211;}

                        else if ( (LA57_566==166) && (synpred13_Objc())) {s = 1212;}

                        else if ( (LA57_566==112) && (synpred13_Objc())) {s = 1213;}

                        else if ( (LA57_566==202) && (synpred13_Objc())) {s = 1214;}

                        else if ( (LA57_566==123||LA57_566==127) && (synpred13_Objc())) {s = 1215;}

                         
                        input.seek(index57_566);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA57_569 = input.LA(1);

                         
                        int index57_569 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_569==166) ) {s = 1216;}

                        else if ( ((LA57_569 >= 129 && LA57_569 <= 130)) && (synpred13_Objc())) {s = 1217;}

                        else if ( (LA57_569==118) && (synpred13_Objc())) {s = 1218;}

                        else if ( (LA57_569==123||LA57_569==127) && (synpred13_Objc())) {s = 1219;}

                        else if ( (LA57_569==120) ) {s = 1220;}

                        else if ( (LA57_569==145) && (synpred13_Objc())) {s = 1221;}

                        else if ( (LA57_569==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1222;}

                        else if ( (LA57_569==125) && (synpred13_Objc())) {s = 1223;}

                        else if ( (LA57_569==119) ) {s = 1224;}

                        else if ( (LA57_569==116) ) {s = 1225;}

                        else if ( (LA57_569==173) ) {s = 10;}

                        else if ( (LA57_569==113||LA57_569==115||LA57_569==122||LA57_569==126||LA57_569==131||(LA57_569 >= 135 && LA57_569 <= 136)||(LA57_569 >= 138 && LA57_569 <= 143)||LA57_569==169||LA57_569==198||LA57_569==200) && (synpred13_Objc())) {s = 1227;}

                         
                        input.seek(index57_569);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA57_595 = input.LA(1);

                         
                        int index57_595 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_595==120) ) {s = 1295;}

                        else if ( (LA57_595==182) ) {s = 1296;}

                        else if ( (LA57_595==118) ) {s = 1297;}

                        else if ( (LA57_595==195) ) {s = 1298;}

                        else if ( (LA57_595==173) ) {s = 1299;}

                        else if ( (LA57_595==194) ) {s = 1300;}

                        else if ( (LA57_595==185) ) {s = 1301;}

                        else if ( (LA57_595==186) ) {s = 1302;}

                        else if ( (LA57_595==188) ) {s = 1303;}

                        else if ( (LA57_595==ID) ) {s = 1304;}

                        else if ( (LA57_595==190) ) {s = 1305;}

                        else if ( (LA57_595==193) ) {s = 1306;}

                        else if ( (LA57_595==178) ) {s = 1307;}

                        else if ( (LA57_595==126) && (synpred13_Objc())) {s = 1308;}

                        else if ( (LA57_595==159) && (synpred13_Objc())) {s = 1309;}

                        else if ( (LA57_595==116) && (synpred13_Objc())) {s = 1310;}

                        else if ( (LA57_595==STRING_LITERAL) && (synpred13_Objc())) {s = 1311;}

                        else if ( (LA57_595==STRING_OBJC) && (synpred13_Objc())) {s = 1312;}

                        else if ( (LA57_595==CHAR_LITERAL) && (synpred13_Objc())) {s = 1313;}

                        else if ( (LA57_595==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1314;}

                        else if ( (LA57_595==BOOL_LITERAL) && (synpred13_Objc())) {s = 1315;}

                        else if ( (LA57_595==169) && (synpred13_Objc())) {s = 1316;}

                        else if ( (LA57_595==170) && (synpred13_Objc())) {s = 1317;}

                        else if ( (LA57_595==166) && (synpred13_Objc())) {s = 1318;}

                        else if ( (LA57_595==112) && (synpred13_Objc())) {s = 1319;}

                        else if ( (LA57_595==202) && (synpred13_Objc())) {s = 1320;}

                        else if ( (LA57_595==123||LA57_595==127) && (synpred13_Objc())) {s = 1321;}

                         
                        input.seek(index57_595);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA57_598 = input.LA(1);

                         
                        int index57_598 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_598==166) ) {s = 1322;}

                        else if ( ((LA57_598 >= 129 && LA57_598 <= 130)) && (synpred13_Objc())) {s = 1323;}

                        else if ( (LA57_598==118) && (synpred13_Objc())) {s = 1324;}

                        else if ( (LA57_598==123||LA57_598==127) && (synpred13_Objc())) {s = 1325;}

                        else if ( (LA57_598==120) ) {s = 1326;}

                        else if ( (LA57_598==145) && (synpred13_Objc())) {s = 1327;}

                        else if ( (LA57_598==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1328;}

                        else if ( (LA57_598==125) && (synpred13_Objc())) {s = 1329;}

                        else if ( (LA57_598==119) ) {s = 1330;}

                        else if ( (LA57_598==116) ) {s = 1331;}

                        else if ( (LA57_598==173) ) {s = 10;}

                        else if ( (LA57_598==113||LA57_598==115||LA57_598==122||LA57_598==126||LA57_598==131||(LA57_598 >= 135 && LA57_598 <= 136)||(LA57_598 >= 138 && LA57_598 <= 143)||LA57_598==169||LA57_598==198||LA57_598==200) && (synpred13_Objc())) {s = 1333;}

                         
                        input.seek(index57_598);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA57_624 = input.LA(1);

                         
                        int index57_624 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_624==120) ) {s = 1401;}

                        else if ( (LA57_624==182) ) {s = 1402;}

                        else if ( (LA57_624==118) ) {s = 1403;}

                        else if ( (LA57_624==195) ) {s = 1404;}

                        else if ( (LA57_624==173) ) {s = 1405;}

                        else if ( (LA57_624==194) ) {s = 1406;}

                        else if ( (LA57_624==185) ) {s = 1407;}

                        else if ( (LA57_624==186) ) {s = 1408;}

                        else if ( (LA57_624==188) ) {s = 1409;}

                        else if ( (LA57_624==ID) ) {s = 1410;}

                        else if ( (LA57_624==190) ) {s = 1411;}

                        else if ( (LA57_624==193) ) {s = 1412;}

                        else if ( (LA57_624==178) ) {s = 1413;}

                        else if ( (LA57_624==126) && (synpred13_Objc())) {s = 1414;}

                        else if ( (LA57_624==159) && (synpred13_Objc())) {s = 1415;}

                        else if ( (LA57_624==116) && (synpred13_Objc())) {s = 1416;}

                        else if ( (LA57_624==STRING_LITERAL) && (synpred13_Objc())) {s = 1417;}

                        else if ( (LA57_624==STRING_OBJC) && (synpred13_Objc())) {s = 1418;}

                        else if ( (LA57_624==CHAR_LITERAL) && (synpred13_Objc())) {s = 1419;}

                        else if ( (LA57_624==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1420;}

                        else if ( (LA57_624==BOOL_LITERAL) && (synpred13_Objc())) {s = 1421;}

                        else if ( (LA57_624==169) && (synpred13_Objc())) {s = 1422;}

                        else if ( (LA57_624==170) && (synpred13_Objc())) {s = 1423;}

                        else if ( (LA57_624==166) && (synpred13_Objc())) {s = 1424;}

                        else if ( (LA57_624==112) && (synpred13_Objc())) {s = 1425;}

                        else if ( (LA57_624==202) && (synpred13_Objc())) {s = 1426;}

                        else if ( (LA57_624==123||LA57_624==127) && (synpred13_Objc())) {s = 1427;}

                         
                        input.seek(index57_624);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA57_627 = input.LA(1);

                         
                        int index57_627 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_627==166) ) {s = 1428;}

                        else if ( ((LA57_627 >= 129 && LA57_627 <= 130)) && (synpred13_Objc())) {s = 1429;}

                        else if ( (LA57_627==118) && (synpred13_Objc())) {s = 1430;}

                        else if ( (LA57_627==123||LA57_627==127) && (synpred13_Objc())) {s = 1431;}

                        else if ( (LA57_627==120) ) {s = 1432;}

                        else if ( (LA57_627==145) && (synpred13_Objc())) {s = 1433;}

                        else if ( (LA57_627==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1434;}

                        else if ( (LA57_627==125) && (synpred13_Objc())) {s = 1435;}

                        else if ( (LA57_627==119) ) {s = 1436;}

                        else if ( (LA57_627==116) ) {s = 1437;}

                        else if ( (LA57_627==173) ) {s = 10;}

                        else if ( (LA57_627==113||LA57_627==115||LA57_627==122||LA57_627==126||LA57_627==131||(LA57_627 >= 135 && LA57_627 <= 136)||(LA57_627 >= 138 && LA57_627 <= 143)||LA57_627==169||LA57_627==198||LA57_627==200) && (synpred13_Objc())) {s = 1439;}

                         
                        input.seek(index57_627);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA57_653 = input.LA(1);

                         
                        int index57_653 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_653==120) ) {s = 1507;}

                        else if ( (LA57_653==182) ) {s = 1508;}

                        else if ( (LA57_653==118) ) {s = 1509;}

                        else if ( (LA57_653==195) ) {s = 1510;}

                        else if ( (LA57_653==173) ) {s = 1511;}

                        else if ( (LA57_653==194) ) {s = 1512;}

                        else if ( (LA57_653==185) ) {s = 1513;}

                        else if ( (LA57_653==186) ) {s = 1514;}

                        else if ( (LA57_653==188) ) {s = 1515;}

                        else if ( (LA57_653==ID) ) {s = 1516;}

                        else if ( (LA57_653==190) ) {s = 1517;}

                        else if ( (LA57_653==193) ) {s = 1518;}

                        else if ( (LA57_653==178) ) {s = 1519;}

                        else if ( (LA57_653==126) && (synpred13_Objc())) {s = 1520;}

                        else if ( (LA57_653==159) && (synpred13_Objc())) {s = 1521;}

                        else if ( (LA57_653==116) && (synpred13_Objc())) {s = 1522;}

                        else if ( (LA57_653==STRING_LITERAL) && (synpred13_Objc())) {s = 1523;}

                        else if ( (LA57_653==STRING_OBJC) && (synpred13_Objc())) {s = 1524;}

                        else if ( (LA57_653==CHAR_LITERAL) && (synpred13_Objc())) {s = 1525;}

                        else if ( (LA57_653==NUMBER_LITERAL) && (synpred13_Objc())) {s = 1526;}

                        else if ( (LA57_653==BOOL_LITERAL) && (synpred13_Objc())) {s = 1527;}

                        else if ( (LA57_653==169) && (synpred13_Objc())) {s = 1528;}

                        else if ( (LA57_653==170) && (synpred13_Objc())) {s = 1529;}

                        else if ( (LA57_653==166) && (synpred13_Objc())) {s = 1530;}

                        else if ( (LA57_653==112) && (synpred13_Objc())) {s = 1531;}

                        else if ( (LA57_653==202) && (synpred13_Objc())) {s = 1532;}

                        else if ( (LA57_653==123||LA57_653==127) && (synpred13_Objc())) {s = 1533;}

                         
                        input.seek(index57_653);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA57_656 = input.LA(1);

                         
                        int index57_656 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA57_656==166) ) {s = 1534;}

                        else if ( ((LA57_656 >= 129 && LA57_656 <= 130)) && (synpred13_Objc())) {s = 1535;}

                        else if ( (LA57_656==118) && (synpred13_Objc())) {s = 1536;}

                        else if ( (LA57_656==123||LA57_656==127) && (synpred13_Objc())) {s = 1537;}

                        else if ( (LA57_656==120) ) {s = 1538;}

                        else if ( (LA57_656==145) && (synpred13_Objc())) {s = 1539;}

                        else if ( (LA57_656==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 1540;}

                        else if ( (LA57_656==125) && (synpred13_Objc())) {s = 1541;}

                        else if ( (LA57_656==119) ) {s = 1542;}

                        else if ( (LA57_656==116) ) {s = 1543;}

                        else if ( (LA57_656==173) ) {s = 10;}

                        else if ( (LA57_656==113||LA57_656==115||LA57_656==122||LA57_656==126||LA57_656==131||(LA57_656 >= 135 && LA57_656 <= 136)||(LA57_656 >= 138 && LA57_656 <= 143)||LA57_656==169||LA57_656==198||LA57_656==200) && (synpred13_Objc())) {s = 1545;}

                         
                        input.seek(index57_656);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA57_679 = input.LA(1);

                         
                        int index57_679 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_679);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA57_680 = input.LA(1);

                         
                        int index57_680 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_680);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA57_681 = input.LA(1);

                         
                        int index57_681 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_681);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA57_682 = input.LA(1);

                         
                        int index57_682 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_682);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA57_683 = input.LA(1);

                         
                        int index57_683 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_683);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA57_684 = input.LA(1);

                         
                        int index57_684 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_684);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA57_685 = input.LA(1);

                         
                        int index57_685 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_685);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA57_686 = input.LA(1);

                         
                        int index57_686 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_686);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA57_687 = input.LA(1);

                         
                        int index57_687 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_687);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA57_688 = input.LA(1);

                         
                        int index57_688 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_688);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA57_689 = input.LA(1);

                         
                        int index57_689 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_689);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA57_690 = input.LA(1);

                         
                        int index57_690 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_690);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA57_691 = input.LA(1);

                         
                        int index57_691 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_691);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA57_692 = input.LA(1);

                         
                        int index57_692 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_692);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA57_693 = input.LA(1);

                         
                        int index57_693 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_693);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA57_694 = input.LA(1);

                         
                        int index57_694 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_694);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA57_695 = input.LA(1);

                         
                        int index57_695 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_695);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA57_696 = input.LA(1);

                         
                        int index57_696 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_696);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA57_697 = input.LA(1);

                         
                        int index57_697 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_697);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA57_699 = input.LA(1);

                         
                        int index57_699 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_699);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA57_702 = input.LA(1);

                         
                        int index57_702 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_702);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA57_725 = input.LA(1);

                         
                        int index57_725 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_725);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA57_726 = input.LA(1);

                         
                        int index57_726 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_726);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA57_727 = input.LA(1);

                         
                        int index57_727 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_727);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA57_728 = input.LA(1);

                         
                        int index57_728 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_728);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA57_729 = input.LA(1);

                         
                        int index57_729 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_729);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA57_730 = input.LA(1);

                         
                        int index57_730 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_730);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA57_731 = input.LA(1);

                         
                        int index57_731 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_731);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA57_732 = input.LA(1);

                         
                        int index57_732 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_732);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA57_733 = input.LA(1);

                         
                        int index57_733 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_733);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA57_734 = input.LA(1);

                         
                        int index57_734 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_734);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA57_735 = input.LA(1);

                         
                        int index57_735 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_735);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA57_736 = input.LA(1);

                         
                        int index57_736 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_736);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA57_737 = input.LA(1);

                         
                        int index57_737 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_737);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA57_738 = input.LA(1);

                         
                        int index57_738 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_738);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA57_739 = input.LA(1);

                         
                        int index57_739 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_739);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA57_740 = input.LA(1);

                         
                        int index57_740 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_740);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA57_741 = input.LA(1);

                         
                        int index57_741 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_741);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA57_742 = input.LA(1);

                         
                        int index57_742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_742);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA57_743 = input.LA(1);

                         
                        int index57_743 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_743);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA57_744 = input.LA(1);

                         
                        int index57_744 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_744);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA57_745 = input.LA(1);

                         
                        int index57_745 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_745);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA57_746 = input.LA(1);

                         
                        int index57_746 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_746);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA57_747 = input.LA(1);

                         
                        int index57_747 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_747);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA57_748 = input.LA(1);

                         
                        int index57_748 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_748);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA57_749 = input.LA(1);

                         
                        int index57_749 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_749);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA57_750 = input.LA(1);

                         
                        int index57_750 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_750);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA57_751 = input.LA(1);

                         
                        int index57_751 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_751);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA57_752 = input.LA(1);

                         
                        int index57_752 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_752);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA57_753 = input.LA(1);

                         
                        int index57_753 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_753);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA57_754 = input.LA(1);

                         
                        int index57_754 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_754);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA57_755 = input.LA(1);

                         
                        int index57_755 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_755);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA57_756 = input.LA(1);

                         
                        int index57_756 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_756);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA57_757 = input.LA(1);

                         
                        int index57_757 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_757);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA57_758 = input.LA(1);

                         
                        int index57_758 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_758);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA57_759 = input.LA(1);

                         
                        int index57_759 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_759);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA57_760 = input.LA(1);

                         
                        int index57_760 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_760);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA57_761 = input.LA(1);

                         
                        int index57_761 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_761);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA57_762 = input.LA(1);

                         
                        int index57_762 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_762);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA57_763 = input.LA(1);

                         
                        int index57_763 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_763);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA57_764 = input.LA(1);

                         
                        int index57_764 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_764);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA57_765 = input.LA(1);

                         
                        int index57_765 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_765);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA57_766 = input.LA(1);

                         
                        int index57_766 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_766);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA57_767 = input.LA(1);

                         
                        int index57_767 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_767);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA57_768 = input.LA(1);

                         
                        int index57_768 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_768);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA57_769 = input.LA(1);

                         
                        int index57_769 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_769);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA57_770 = input.LA(1);

                         
                        int index57_770 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_770);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA57_771 = input.LA(1);

                         
                        int index57_771 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_771);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA57_772 = input.LA(1);

                         
                        int index57_772 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_772);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA57_773 = input.LA(1);

                         
                        int index57_773 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_773);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA57_775 = input.LA(1);

                         
                        int index57_775 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_775);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA57_776 = input.LA(1);

                         
                        int index57_776 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_776);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA57_777 = input.LA(1);

                         
                        int index57_777 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_777);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA57_778 = input.LA(1);

                         
                        int index57_778 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_778);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA57_779 = input.LA(1);

                         
                        int index57_779 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_779);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA57_780 = input.LA(1);

                         
                        int index57_780 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_780);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA57_781 = input.LA(1);

                         
                        int index57_781 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_781);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA57_783 = input.LA(1);

                         
                        int index57_783 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_783);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA57_784 = input.LA(1);

                         
                        int index57_784 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_784);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA57_785 = input.LA(1);

                         
                        int index57_785 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_785);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA57_786 = input.LA(1);

                         
                        int index57_786 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_786);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA57_787 = input.LA(1);

                         
                        int index57_787 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_787);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA57_788 = input.LA(1);

                         
                        int index57_788 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_788);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA57_790 = input.LA(1);

                         
                        int index57_790 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_790);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA57_791 = input.LA(1);

                         
                        int index57_791 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_791);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA57_792 = input.LA(1);

                         
                        int index57_792 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_792);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA57_793 = input.LA(1);

                         
                        int index57_793 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_793);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA57_794 = input.LA(1);

                         
                        int index57_794 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_794);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA57_795 = input.LA(1);

                         
                        int index57_795 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_795);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA57_797 = input.LA(1);

                         
                        int index57_797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_797);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA57_798 = input.LA(1);

                         
                        int index57_798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_798);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA57_799 = input.LA(1);

                         
                        int index57_799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_799);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA57_800 = input.LA(1);

                         
                        int index57_800 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_800);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA57_801 = input.LA(1);

                         
                        int index57_801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_801);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA57_802 = input.LA(1);

                         
                        int index57_802 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_802);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA57_804 = input.LA(1);

                         
                        int index57_804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_804);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA57_805 = input.LA(1);

                         
                        int index57_805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_805);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA57_806 = input.LA(1);

                         
                        int index57_806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_806);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA57_807 = input.LA(1);

                         
                        int index57_807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_807);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA57_808 = input.LA(1);

                         
                        int index57_808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_808);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA57_809 = input.LA(1);

                         
                        int index57_809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_809);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA57_811 = input.LA(1);

                         
                        int index57_811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_811);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA57_812 = input.LA(1);

                         
                        int index57_812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_812);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA57_813 = input.LA(1);

                         
                        int index57_813 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_813);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA57_814 = input.LA(1);

                         
                        int index57_814 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_814);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA57_815 = input.LA(1);

                         
                        int index57_815 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_815);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA57_816 = input.LA(1);

                         
                        int index57_816 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_816);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA57_817 = input.LA(1);

                         
                        int index57_817 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_817);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA57_818 = input.LA(1);

                         
                        int index57_818 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_818);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA57_819 = input.LA(1);

                         
                        int index57_819 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_819);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA57_820 = input.LA(1);

                         
                        int index57_820 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_820);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA57_821 = input.LA(1);

                         
                        int index57_821 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_821);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA57_822 = input.LA(1);

                         
                        int index57_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_822);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA57_823 = input.LA(1);

                         
                        int index57_823 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_823);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA57_824 = input.LA(1);

                         
                        int index57_824 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_824);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA57_825 = input.LA(1);

                         
                        int index57_825 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_825);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA57_826 = input.LA(1);

                         
                        int index57_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_826);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA57_827 = input.LA(1);

                         
                        int index57_827 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_827);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA57_828 = input.LA(1);

                         
                        int index57_828 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_828);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA57_829 = input.LA(1);

                         
                        int index57_829 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_829);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA57_830 = input.LA(1);

                         
                        int index57_830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_830);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA57_831 = input.LA(1);

                         
                        int index57_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_831);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA57_832 = input.LA(1);

                         
                        int index57_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_832);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA57_833 = input.LA(1);

                         
                        int index57_833 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_833);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA57_834 = input.LA(1);

                         
                        int index57_834 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_834);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA57_835 = input.LA(1);

                         
                        int index57_835 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_835);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA57_836 = input.LA(1);

                         
                        int index57_836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_836);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA57_837 = input.LA(1);

                         
                        int index57_837 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_837);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA57_838 = input.LA(1);

                         
                        int index57_838 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_838);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA57_839 = input.LA(1);

                         
                        int index57_839 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_839);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA57_840 = input.LA(1);

                         
                        int index57_840 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_840);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA57_841 = input.LA(1);

                         
                        int index57_841 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_841);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA57_842 = input.LA(1);

                         
                        int index57_842 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_842);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA57_843 = input.LA(1);

                         
                        int index57_843 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_843);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA57_844 = input.LA(1);

                         
                        int index57_844 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_844);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA57_845 = input.LA(1);

                         
                        int index57_845 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_845);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA57_846 = input.LA(1);

                         
                        int index57_846 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_846);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA57_847 = input.LA(1);

                         
                        int index57_847 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_847);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA57_848 = input.LA(1);

                         
                        int index57_848 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_848);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA57_849 = input.LA(1);

                         
                        int index57_849 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_849);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA57_850 = input.LA(1);

                         
                        int index57_850 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_850);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA57_851 = input.LA(1);

                         
                        int index57_851 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_851);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA57_852 = input.LA(1);

                         
                        int index57_852 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_852);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA57_853 = input.LA(1);

                         
                        int index57_853 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_853);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA57_854 = input.LA(1);

                         
                        int index57_854 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_854);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA57_855 = input.LA(1);

                         
                        int index57_855 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_855);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA57_856 = input.LA(1);

                         
                        int index57_856 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_856);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA57_857 = input.LA(1);

                         
                        int index57_857 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_857);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA57_858 = input.LA(1);

                         
                        int index57_858 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_858);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA57_859 = input.LA(1);

                         
                        int index57_859 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_859);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA57_860 = input.LA(1);

                         
                        int index57_860 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_860);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA57_861 = input.LA(1);

                         
                        int index57_861 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_861);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA57_862 = input.LA(1);

                         
                        int index57_862 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_862);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA57_863 = input.LA(1);

                         
                        int index57_863 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_863);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA57_864 = input.LA(1);

                         
                        int index57_864 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_864);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA57_865 = input.LA(1);

                         
                        int index57_865 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_865);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA57_866 = input.LA(1);

                         
                        int index57_866 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_866);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA57_867 = input.LA(1);

                         
                        int index57_867 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_867);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA57_868 = input.LA(1);

                         
                        int index57_868 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_868);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA57_869 = input.LA(1);

                         
                        int index57_869 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_869);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA57_870 = input.LA(1);

                         
                        int index57_870 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_870);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA57_871 = input.LA(1);

                         
                        int index57_871 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_871);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA57_872 = input.LA(1);

                         
                        int index57_872 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_872);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA57_873 = input.LA(1);

                         
                        int index57_873 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_873);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA57_874 = input.LA(1);

                         
                        int index57_874 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_874);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA57_875 = input.LA(1);

                         
                        int index57_875 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_875);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA57_876 = input.LA(1);

                         
                        int index57_876 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_876);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA57_877 = input.LA(1);

                         
                        int index57_877 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_877);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA57_878 = input.LA(1);

                         
                        int index57_878 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_878);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA57_879 = input.LA(1);

                         
                        int index57_879 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_879);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA57_880 = input.LA(1);

                         
                        int index57_880 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_880);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA57_881 = input.LA(1);

                         
                        int index57_881 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_881);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA57_882 = input.LA(1);

                         
                        int index57_882 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_882);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA57_947 = input.LA(1);

                         
                        int index57_947 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_947);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA57_948 = input.LA(1);

                         
                        int index57_948 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_948);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA57_949 = input.LA(1);

                         
                        int index57_949 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_949);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA57_950 = input.LA(1);

                         
                        int index57_950 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_950);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA57_951 = input.LA(1);

                         
                        int index57_951 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_951);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA57_952 = input.LA(1);

                         
                        int index57_952 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_952);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA57_953 = input.LA(1);

                         
                        int index57_953 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_953);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA57_954 = input.LA(1);

                         
                        int index57_954 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_954);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA57_955 = input.LA(1);

                         
                        int index57_955 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_955);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA57_956 = input.LA(1);

                         
                        int index57_956 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_956);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA57_957 = input.LA(1);

                         
                        int index57_957 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_957);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA57_958 = input.LA(1);

                         
                        int index57_958 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_958);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA57_959 = input.LA(1);

                         
                        int index57_959 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_959);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA57_960 = input.LA(1);

                         
                        int index57_960 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_960);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA57_975 = input.LA(1);

                         
                        int index57_975 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_975);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA57_979 = input.LA(1);

                         
                        int index57_979 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_979);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA57_983 = input.LA(1);

                         
                        int index57_983 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_983);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA57_984 = input.LA(1);

                         
                        int index57_984 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_984);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA57_987 = input.LA(1);

                         
                        int index57_987 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_987);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA57_988 = input.LA(1);

                         
                        int index57_988 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_988);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA57_990 = input.LA(1);

                         
                        int index57_990 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_990);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA57_993 = input.LA(1);

                         
                        int index57_993 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_993);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA57_1016 = input.LA(1);

                         
                        int index57_1016 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1016);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA57_1017 = input.LA(1);

                         
                        int index57_1017 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1017);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA57_1082 = input.LA(1);

                         
                        int index57_1082 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1082);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA57_1083 = input.LA(1);

                         
                        int index57_1083 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1083);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA57_1084 = input.LA(1);

                         
                        int index57_1084 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1084);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA57_1085 = input.LA(1);

                         
                        int index57_1085 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1085);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA57_1086 = input.LA(1);

                         
                        int index57_1086 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1086);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA57_1087 = input.LA(1);

                         
                        int index57_1087 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1087);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA57_1088 = input.LA(1);

                         
                        int index57_1088 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1088);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA57_1089 = input.LA(1);

                         
                        int index57_1089 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1089);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA57_1090 = input.LA(1);

                         
                        int index57_1090 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1090);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA57_1091 = input.LA(1);

                         
                        int index57_1091 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1091);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA57_1092 = input.LA(1);

                         
                        int index57_1092 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1092);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA57_1093 = input.LA(1);

                         
                        int index57_1093 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1093);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA57_1094 = input.LA(1);

                         
                        int index57_1094 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1094);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA57_1095 = input.LA(1);

                         
                        int index57_1095 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1095);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA57_1110 = input.LA(1);

                         
                        int index57_1110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1110);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA57_1114 = input.LA(1);

                         
                        int index57_1114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1114);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA57_1118 = input.LA(1);

                         
                        int index57_1118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1118);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA57_1119 = input.LA(1);

                         
                        int index57_1119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1119);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA57_1122 = input.LA(1);

                         
                        int index57_1122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1122);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA57_1123 = input.LA(1);

                         
                        int index57_1123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1123);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA57_1188 = input.LA(1);

                         
                        int index57_1188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1188);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA57_1189 = input.LA(1);

                         
                        int index57_1189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1189);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA57_1190 = input.LA(1);

                         
                        int index57_1190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1190);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA57_1191 = input.LA(1);

                         
                        int index57_1191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1191);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA57_1192 = input.LA(1);

                         
                        int index57_1192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1192);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA57_1193 = input.LA(1);

                         
                        int index57_1193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1193);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA57_1194 = input.LA(1);

                         
                        int index57_1194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1194);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA57_1195 = input.LA(1);

                         
                        int index57_1195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1195);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA57_1196 = input.LA(1);

                         
                        int index57_1196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1196);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA57_1197 = input.LA(1);

                         
                        int index57_1197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1197);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA57_1198 = input.LA(1);

                         
                        int index57_1198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1198);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA57_1199 = input.LA(1);

                         
                        int index57_1199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1199);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA57_1200 = input.LA(1);

                         
                        int index57_1200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1200);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA57_1201 = input.LA(1);

                         
                        int index57_1201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1201);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA57_1216 = input.LA(1);

                         
                        int index57_1216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1216);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA57_1220 = input.LA(1);

                         
                        int index57_1220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1220);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA57_1224 = input.LA(1);

                         
                        int index57_1224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1224);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA57_1225 = input.LA(1);

                         
                        int index57_1225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1225);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA57_1228 = input.LA(1);

                         
                        int index57_1228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1228);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA57_1229 = input.LA(1);

                         
                        int index57_1229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1229);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA57_1294 = input.LA(1);

                         
                        int index57_1294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1294);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA57_1295 = input.LA(1);

                         
                        int index57_1295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1295);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA57_1296 = input.LA(1);

                         
                        int index57_1296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1296);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA57_1297 = input.LA(1);

                         
                        int index57_1297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1297);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA57_1298 = input.LA(1);

                         
                        int index57_1298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1298);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA57_1299 = input.LA(1);

                         
                        int index57_1299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1299);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA57_1300 = input.LA(1);

                         
                        int index57_1300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1300);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA57_1301 = input.LA(1);

                         
                        int index57_1301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1301);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA57_1302 = input.LA(1);

                         
                        int index57_1302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1302);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA57_1303 = input.LA(1);

                         
                        int index57_1303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1303);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA57_1304 = input.LA(1);

                         
                        int index57_1304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1304);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA57_1305 = input.LA(1);

                         
                        int index57_1305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1305);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA57_1306 = input.LA(1);

                         
                        int index57_1306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1306);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA57_1307 = input.LA(1);

                         
                        int index57_1307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1307);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA57_1322 = input.LA(1);

                         
                        int index57_1322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1322);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA57_1326 = input.LA(1);

                         
                        int index57_1326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1326);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA57_1330 = input.LA(1);

                         
                        int index57_1330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1330);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA57_1331 = input.LA(1);

                         
                        int index57_1331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1331);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA57_1334 = input.LA(1);

                         
                        int index57_1334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1334);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA57_1335 = input.LA(1);

                         
                        int index57_1335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1335);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA57_1400 = input.LA(1);

                         
                        int index57_1400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1400);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA57_1401 = input.LA(1);

                         
                        int index57_1401 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1401);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA57_1402 = input.LA(1);

                         
                        int index57_1402 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1402);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA57_1403 = input.LA(1);

                         
                        int index57_1403 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1403);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA57_1404 = input.LA(1);

                         
                        int index57_1404 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1404);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA57_1405 = input.LA(1);

                         
                        int index57_1405 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1405);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA57_1406 = input.LA(1);

                         
                        int index57_1406 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1406);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA57_1407 = input.LA(1);

                         
                        int index57_1407 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1407);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA57_1408 = input.LA(1);

                         
                        int index57_1408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1408);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA57_1409 = input.LA(1);

                         
                        int index57_1409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1409);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA57_1410 = input.LA(1);

                         
                        int index57_1410 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1410);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA57_1411 = input.LA(1);

                         
                        int index57_1411 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1411);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA57_1412 = input.LA(1);

                         
                        int index57_1412 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1412);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA57_1413 = input.LA(1);

                         
                        int index57_1413 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1413);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA57_1428 = input.LA(1);

                         
                        int index57_1428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1428);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA57_1432 = input.LA(1);

                         
                        int index57_1432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1432);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA57_1436 = input.LA(1);

                         
                        int index57_1436 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1436);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA57_1437 = input.LA(1);

                         
                        int index57_1437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1437);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA57_1440 = input.LA(1);

                         
                        int index57_1440 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1440);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA57_1441 = input.LA(1);

                         
                        int index57_1441 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1441);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA57_1506 = input.LA(1);

                         
                        int index57_1506 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1506);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA57_1507 = input.LA(1);

                         
                        int index57_1507 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1507);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA57_1508 = input.LA(1);

                         
                        int index57_1508 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1508);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA57_1509 = input.LA(1);

                         
                        int index57_1509 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1509);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA57_1510 = input.LA(1);

                         
                        int index57_1510 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1510);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA57_1511 = input.LA(1);

                         
                        int index57_1511 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1511);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA57_1512 = input.LA(1);

                         
                        int index57_1512 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1512);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA57_1513 = input.LA(1);

                         
                        int index57_1513 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1513);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA57_1514 = input.LA(1);

                         
                        int index57_1514 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1514);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA57_1515 = input.LA(1);

                         
                        int index57_1515 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1515);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA57_1516 = input.LA(1);

                         
                        int index57_1516 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1516);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA57_1517 = input.LA(1);

                         
                        int index57_1517 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1517);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA57_1518 = input.LA(1);

                         
                        int index57_1518 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1518);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA57_1519 = input.LA(1);

                         
                        int index57_1519 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1519);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA57_1534 = input.LA(1);

                         
                        int index57_1534 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1534);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA57_1538 = input.LA(1);

                         
                        int index57_1538 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1538);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA57_1542 = input.LA(1);

                         
                        int index57_1542 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1542);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA57_1543 = input.LA(1);

                         
                        int index57_1543 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 1545;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index57_1543);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 57, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA56_eotS =
        "\74\uffff";
    static final String DFA56_eofS =
        "\1\1\73\uffff";
    static final String DFA56_minS =
        "\1\27\73\uffff";
    static final String DFA56_maxS =
        "\1\u00c9\73\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\2\71\uffff\1\1";
    static final String DFA56_specialS =
        "\74\uffff}>";
    static final String[] DFA56_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\35\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\3\1\1\uffff\2\1\1\uffff\3\1\1\uffff\2\73\1\1\1"+
            "\uffff\4\1\1\uffff\6\1\1\uffff\10\1\4\uffff\1\1\2\uffff\4\1"+
            "\2\uffff\4\1\1\uffff\15\1\1\uffff\16\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "()* loopback of 502:30: ( access_wrapper name )*";
        }
    }
    static final String DFA59_eotS =
        "\u013e\uffff";
    static final String DFA59_eofS =
        "\2\uffff\1\13\6\uffff\1\160\u0134\uffff";
    static final String DFA59_minS =
        "\1\13\1\57\1\27\6\uffff\1\27\1\13\72\uffff\1\13\72\uffff\2\13\1"+
        "\166\10\57\1\u00c5\1\57\4\13\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff"+
        "\5\0\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA59_maxS =
        "\1\170\1\57\1\u00c9\6\uffff\1\u00c9\1\u00ca\72\uffff\1\u00ca\72"+
        "\uffff\1\u00aa\1\u00ca\1\166\1\57\1\u00c8\1\57\5\u00c8\1\u00c5\1"+
        "\u00c3\1\u00ca\3\u00aa\101\0\2\uffff\6\0\2\uffff\5\0\2\uffff\5\0"+
        "\2\uffff\5\0\2\uffff\5\0\2\uffff\106\0";
    static final String DFA59_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\72\uffff\72\2\122"+
        "\uffff\1\1\7\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff\1\1\6\uffff"+
        "\1\1\107\uffff";
    static final String DFA59_specialS =
        "\1\0\10\uffff\1\1\172\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\6\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
        "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
        "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
        "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
        "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1"+
        "\107\1\110\2\uffff\1\111\1\112\1\113\1\114\1\115\1\116\2\uffff\1"+
        "\117\1\120\1\121\1\122\1\123\2\uffff\1\124\1\125\1\126\1\127\1\130"+
        "\2\uffff\1\131\1\132\1\133\1\134\1\135\2\uffff\1\136\1\137\1\140"+
        "\1\141\1\142\2\uffff\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1"+
        "\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164"+
        "\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177"+
        "\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087"+
        "\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f"+
        "\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097"+
        "\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f"+
        "\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8}>";
    static final String[] DFA59_transitionS = {
            "\1\10\5\uffff\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\1\5"+
            "\32\uffff\1\1\3\uffff\1\3",
            "\1\11",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\35\uffff\1"+
            "\13\1\uffff\2\13\1\uffff\3\13\1\uffff\2\13\1\uffff\3\13\1\uffff"+
            "\3\13\1\uffff\4\13\1\uffff\6\13\1\uffff\10\13\4\uffff\1\13\2"+
            "\uffff\4\13\2\uffff\1\12\3\13\1\uffff\15\13\1\uffff\16\13\1"+
            "\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\27\uffff\1\115\21\uffff\1\152\21\uffff\1\151\35\uffff"+
            "\1\171\1\uffff\1\171\1\110\1\uffff\1\107\1\112\1\116\1\uffff"+
            "\1\117\1\177\1\uffff\1\174\1\117\1\177\1\uffff\2\106\1\171\1"+
            "\uffff\1\176\1\113\2\171\1\uffff\6\171\1\uffff\1\111\1\154\1"+
            "\162\1\173\1\170\1\155\1\161\1\164\4\uffff\1\163\2\uffff\1\132"+
            "\1\172\1\134\1\133\2\uffff\1\105\1\153\1\175\1\171\1\uffff\1"+
            "\145\1\156\1\125\1\146\1\157\1\136\1\140\1\122\1\165\1\143\1"+
            "\147\1\120\1\137\1\uffff\1\127\1\130\1\142\1\131\1\135\1\121"+
            "\1\141\1\167\1\123\1\126\1\124\1\144\1\150\1\171\1\uffff\1\171"+
            "\1\114",
            "\1\u008a\5\uffff\1\u0088\35\uffff\1\u0084\24\uffff\1\u0089"+
            "\23\uffff\1\u0086\1\u0087\26\uffff\1\u008e\3\uffff\1\u0083\1"+
            "\uffff\1\u0081\1\uffff\1\u0085\2\uffff\1\u0090\2\uffff\1\u0080"+
            "\1\u0090\37\uffff\1\u0082\6\uffff\1\u008d\2\uffff\1\u008b\1"+
            "\u008c\37\uffff\1\u008f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009b\5\uffff\1\u0099\35\uffff\1\u0095\24\uffff\1\u009a"+
            "\23\uffff\1\u0097\1\u0098\26\uffff\1\u009f\3\uffff\1\u0094\1"+
            "\uffff\1\u0092\1\uffff\1\u0096\2\uffff\1\u00a1\2\uffff\1\u0091"+
            "\1\u00a1\37\uffff\1\u0093\6\uffff\1\u009e\2\uffff\1\u009c\1"+
            "\u009d\37\uffff\1\u00a0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00ab\5\uffff\1\u00a9\35\uffff\1\u00a5\24\uffff\1\u00aa"+
            "\23\uffff\1\u00a7\1\u00a8\32\uffff\1\u00a4\1\uffff\1\u00a2\1"+
            "\uffff\1\u00a6\46\uffff\1\u00a3\6\uffff\1\u00ae\2\uffff\1\u00ac"+
            "\1\u00ad",
            "\1\u00c3\5\uffff\1\u00c1\35\uffff\1\u00b7\24\uffff\1\u00c2"+
            "\23\uffff\1\u00bf\1\u00c0\26\uffff\1\u00c7\3\uffff\1\u00bd\1"+
            "\uffff\1\u00b0\1\uffff\1\u00be\2\uffff\1\u00c9\2\uffff\1\u00bb"+
            "\1\u00c9\37\uffff\1\u00bc\6\uffff\1\u00c6\2\uffff\1\u00c4\1"+
            "\u00c5\2\uffff\1\u00b2\4\uffff\1\u00ba\3\uffff\1\u00af\2\uffff"+
            "\1\u00b4\1\u00b5\1\uffff\1\u00b6\1\uffff\1\u00b8\2\uffff\1\u00b9"+
            "\1\u00b3\1\u00b1\6\uffff\1\u00c8",
            "\1\u00ca",
            "\1\u00cb",
            "\1\13\101\uffff\1\u00d0\1\uffff\2\u00d0\1\uffff\1\u00ce\1\uffff"+
            "\1\u00d0\1\uffff\1\u00d0\1\u00cf\2\uffff\1\u00d0\1\u00cf\1\uffff"+
            "\2\u00cd\1\u00d0\3\uffff\2\u00d0\1\uffff\6\u00d0\1\uffff\1\u00d1"+
            "\24\uffff\1\u00cc\1\uffff\1\u00d2\1\u00d0\34\uffff\1\u00d0\1"+
            "\uffff\1\u00d0",
            "\1\u00d4",
            "\1\13\101\uffff\1\u00d8\1\uffff\2\u00d8\1\uffff\1\u00d6\1\uffff"+
            "\1\u00d8\1\uffff\1\u00d8\1\u00d7\2\uffff\1\u00d8\1\u00d7\1\uffff"+
            "\2\u00d5\1\u00d8\3\uffff\2\u00d8\1\uffff\6\u00d8\1\uffff\1\u00d9"+
            "\26\uffff\1\u00da\1\u00d8\34\uffff\1\u00d8\1\uffff\1\u00d8",
            "\1\13\101\uffff\1\u00df\1\uffff\2\u00df\1\uffff\1\u00dd\1\uffff"+
            "\1\u00df\1\uffff\1\u00df\1\u00de\2\uffff\1\u00df\1\u00de\1\uffff"+
            "\2\u00dc\1\u00df\3\uffff\2\u00df\1\uffff\6\u00df\1\uffff\1\u00e0"+
            "\26\uffff\1\u00e1\1\u00df\34\uffff\1\u00df\1\uffff\1\u00df",
            "\1\13\101\uffff\1\u00e6\1\uffff\2\u00e6\1\uffff\1\u00e4\1\uffff"+
            "\1\u00e6\1\uffff\1\u00e6\1\u00e5\2\uffff\1\u00e6\1\u00e5\1\uffff"+
            "\2\u00e3\1\u00e6\3\uffff\2\u00e6\1\uffff\6\u00e6\1\uffff\1\u00e7"+
            "\26\uffff\1\u00e8\1\u00e6\34\uffff\1\u00e6\1\uffff\1\u00e6",
            "\1\13\101\uffff\1\u00ed\1\uffff\2\u00ed\1\uffff\1\u00eb\1\uffff"+
            "\1\u00ed\1\uffff\1\u00ed\1\u00ec\2\uffff\1\u00ed\1\u00ec\1\uffff"+
            "\2\u00ea\1\u00ed\3\uffff\2\u00ed\1\uffff\6\u00ed\1\uffff\1\u00ee"+
            "\26\uffff\1\u00ef\1\u00ed\34\uffff\1\u00ed\1\uffff\1\u00ed",
            "\1\13\101\uffff\1\u00f4\1\uffff\2\u00f4\1\uffff\1\u00f2\1\uffff"+
            "\1\u00f4\1\uffff\1\u00f4\1\u00f3\2\uffff\1\u00f4\1\u00f3\1\uffff"+
            "\2\u00f1\1\u00f4\3\uffff\2\u00f4\1\uffff\6\u00f4\1\uffff\1\u00f5"+
            "\26\uffff\1\u00f6\1\u00f4\34\uffff\1\u00f4\1\uffff\1\u00f4",
            "\1\u00f8",
            "\1\u0101\106\uffff\1\u00fa\1\u0105\65\uffff\1\u00fc\4\uffff"+
            "\1\u0104\3\uffff\1\u00f9\2\uffff\1\u00fe\1\u00ff\1\uffff\1\u0100"+
            "\1\uffff\1\u0102\2\uffff\1\u0103\1\u00fd\1\u00fb",
            "\1\u0110\5\uffff\1\u010e\35\uffff\1\u010a\24\uffff\1\u010f"+
            "\23\uffff\1\u010c\1\u010d\26\uffff\1\u0114\3\uffff\1\u0109\1"+
            "\uffff\1\u0107\1\uffff\1\u010b\2\uffff\1\u0116\2\uffff\1\u0106"+
            "\1\u0116\37\uffff\1\u0108\6\uffff\1\u0113\2\uffff\1\u0111\1"+
            "\u0112\37\uffff\1\u0115",
            "\1\u0120\5\uffff\1\u011e\35\uffff\1\u011a\24\uffff\1\u011f"+
            "\23\uffff\1\u011c\1\u011d\32\uffff\1\u0119\1\uffff\1\u0117\1"+
            "\uffff\1\u011b\46\uffff\1\u0118\6\uffff\1\u0123\2\uffff\1\u0121"+
            "\1\u0122",
            "\1\u012d\5\uffff\1\u012b\35\uffff\1\u0127\24\uffff\1\u012c"+
            "\23\uffff\1\u0129\1\u012a\32\uffff\1\u0126\1\uffff\1\u0124\1"+
            "\uffff\1\u0128\46\uffff\1\u0125\6\uffff\1\u0130\2\uffff\1\u012e"+
            "\1\u012f",
            "\1\u013a\5\uffff\1\u0138\35\uffff\1\u0134\24\uffff\1\u0139"+
            "\23\uffff\1\u0136\1\u0137\32\uffff\1\u0133\1\uffff\1\u0131\1"+
            "\uffff\1\u0135\46\uffff\1\u0132\6\uffff\1\u013d\2\uffff\1\u013b"+
            "\1\u013c",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "505:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | STRING_LITERAL -> ^( STRING STRING_LITERAL ) | STRING_OBJC -> ^( STRING STRING_OBJC ) | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | BOOL_LITERAL -> ^( BOOL BOOL_LITERAL ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA59_0 = input.LA(1);

                         
                        int index59_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_0==116) ) {s = 1;}

                        else if ( (LA59_0==ID) ) {s = 2;}

                        else if ( (LA59_0==120) && (synpred15_Objc())) {s = 3;}

                        else if ( (LA59_0==STRING_LITERAL) ) {s = 4;}

                        else if ( (LA59_0==STRING_OBJC) ) {s = 5;}

                        else if ( (LA59_0==CHAR_LITERAL) ) {s = 6;}

                        else if ( (LA59_0==NUMBER_LITERAL) ) {s = 7;}

                        else if ( (LA59_0==BOOL_LITERAL) ) {s = 8;}

                         
                        input.seek(index59_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA59_9 = input.LA(1);

                         
                        int index59_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_9==166) ) {s = 69;}

                        else if ( ((LA59_9 >= 129 && LA59_9 <= 130)) && (synpred15_Objc())) {s = 70;}

                        else if ( (LA59_9==118) && (synpred15_Objc())) {s = 71;}

                        else if ( (LA59_9==116) && (synpred15_Objc())) {s = 72;}

                        else if ( (LA59_9==145) && (synpred15_Objc())) {s = 73;}

                        else if ( (LA59_9==119) && (synpred15_Objc())) {s = 74;}

                        else if ( (LA59_9==134) && (synpred15_Objc())) {s = 75;}

                        else if ( (LA59_9==201) && (synpred15_Objc())) {s = 76;}

                        else if ( (LA59_9==ID) && (synpred15_Objc())) {s = 77;}

                        else if ( (LA59_9==120) && (synpred15_Objc())) {s = 78;}

                        else if ( (LA59_9==122||LA59_9==126) && (synpred15_Objc())) {s = 79;}

                        else if ( (LA59_9==182) && (synpred15_Objc())) {s = 80;}

                        else if ( (LA59_9==190) && (synpred15_Objc())) {s = 81;}

                        else if ( (LA59_9==178) && (synpred15_Objc())) {s = 82;}

                        else if ( (LA59_9==193) && (synpred15_Objc())) {s = 83;}

                        else if ( (LA59_9==195) && (synpred15_Objc())) {s = 84;}

                        else if ( (LA59_9==173) && (synpred15_Objc())) {s = 85;}

                        else if ( (LA59_9==194) && (synpred15_Objc())) {s = 86;}

                        else if ( (LA59_9==185) && (synpred15_Objc())) {s = 87;}

                        else if ( (LA59_9==186) && (synpred15_Objc())) {s = 88;}

                        else if ( (LA59_9==188) && (synpred15_Objc())) {s = 89;}

                        else if ( (LA59_9==160) && (synpred15_Objc())) {s = 90;}

                        else if ( (LA59_9==163) && (synpred15_Objc())) {s = 91;}

                        else if ( (LA59_9==162) && (synpred15_Objc())) {s = 92;}

                        else if ( (LA59_9==189) && (synpred15_Objc())) {s = 93;}

                        else if ( (LA59_9==176) && (synpred15_Objc())) {s = 94;}

                        else if ( (LA59_9==183) && (synpred15_Objc())) {s = 95;}

                        else if ( (LA59_9==177) && (synpred15_Objc())) {s = 96;}

                        else if ( (LA59_9==191) && (synpred15_Objc())) {s = 97;}

                        else if ( (LA59_9==187) && (synpred15_Objc())) {s = 98;}

                        else if ( (LA59_9==180) && (synpred15_Objc())) {s = 99;}

                        else if ( (LA59_9==196) && (synpred15_Objc())) {s = 100;}

                        else if ( (LA59_9==171) && (synpred15_Objc())) {s = 101;}

                        else if ( (LA59_9==174) && (synpred15_Objc())) {s = 102;}

                        else if ( (LA59_9==181) && (synpred15_Objc())) {s = 103;}

                        else if ( (LA59_9==197) && (synpred15_Objc())) {s = 104;}

                        else if ( (LA59_9==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 105;}

                        else if ( (LA59_9==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 106;}

                        else if ( (LA59_9==167) && (synpred15_Objc())) {s = 107;}

                        else if ( (LA59_9==146) && (synpred15_Objc())) {s = 108;}

                        else if ( (LA59_9==150) && (synpred15_Objc())) {s = 109;}

                        else if ( (LA59_9==172) && (synpred15_Objc())) {s = 110;}

                        else if ( (LA59_9==175) && (synpred15_Objc())) {s = 111;}

                        else if ( (LA59_9==EOF) && (synpred15_Objc())) {s = 112;}

                        else if ( (LA59_9==151) && (synpred15_Objc())) {s = 113;}

                        else if ( (LA59_9==147) && (synpred15_Objc())) {s = 114;}

                        else if ( (LA59_9==157) && (synpred15_Objc())) {s = 115;}

                        else if ( (LA59_9==152) && (synpred15_Objc())) {s = 116;}

                        else if ( (LA59_9==179) && (synpred15_Objc())) {s = 117;}

                        else if ( (LA59_9==DEFINE_LITERAL) && (synpred15_Objc())) {s = 118;}

                        else if ( (LA59_9==192) && (synpred15_Objc())) {s = 119;}

                        else if ( (LA59_9==149) && (synpred15_Objc())) {s = 120;}

                        else if ( (LA59_9==113||LA59_9==115||LA59_9==131||(LA59_9 >= 135 && LA59_9 <= 136)||(LA59_9 >= 138 && LA59_9 <= 143)||LA59_9==169||LA59_9==198||LA59_9==200) && (synpred15_Objc())) {s = 121;}

                        else if ( (LA59_9==161) && (synpred15_Objc())) {s = 122;}

                        else if ( (LA59_9==148) && (synpred15_Objc())) {s = 123;}

                        else if ( (LA59_9==125) && (synpred15_Objc())) {s = 124;}

                        else if ( (LA59_9==168) && (synpred15_Objc())) {s = 125;}

                        else if ( (LA59_9==133) && (synpred15_Objc())) {s = 126;}

                        else if ( (LA59_9==123||LA59_9==127) && (synpred15_Objc())) {s = 127;}

                         
                        input.seek(index59_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA59_132 = input.LA(1);

                         
                        int index59_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA59_132==166) ) {s = 204;}

                        else if ( ((LA59_132 >= 129 && LA59_132 <= 130)) ) {s = 205;}

                        else if ( (LA59_132==118) ) {s = 206;}

                        else if ( (LA59_132==123||LA59_132==127) ) {s = 207;}

                        else if ( (LA59_132==113||(LA59_132 >= 115 && LA59_132 <= 116)||LA59_132==120||LA59_132==122||LA59_132==126||LA59_132==131||(LA59_132 >= 135 && LA59_132 <= 136)||(LA59_132 >= 138 && LA59_132 <= 143)||LA59_132==169||LA59_132==198||LA59_132==200) ) {s = 208;}

                        else if ( (LA59_132==145) ) {s = 209;}

                        else if ( (LA59_132==168) && (synpred14_Objc())) {s = 210;}

                        else if ( (LA59_132==ID) ) {s = 11;}

                         
                        input.seek(index59_132);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA59_134 = input.LA(1);

                         
                        int index59_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA59_134 >= 129 && LA59_134 <= 130)) ) {s = 213;}

                        else if ( (LA59_134==118) ) {s = 214;}

                        else if ( (LA59_134==123||LA59_134==127) ) {s = 215;}

                        else if ( (LA59_134==113||(LA59_134 >= 115 && LA59_134 <= 116)||LA59_134==120||LA59_134==122||LA59_134==126||LA59_134==131||(LA59_134 >= 135 && LA59_134 <= 136)||(LA59_134 >= 138 && LA59_134 <= 143)||LA59_134==169||LA59_134==198||LA59_134==200) ) {s = 216;}

                        else if ( (LA59_134==145) ) {s = 217;}

                        else if ( (LA59_134==168) && (synpred14_Objc())) {s = 218;}

                        else if ( (LA59_134==ID) ) {s = 11;}

                         
                        input.seek(index59_134);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA59_135 = input.LA(1);

                         
                        int index59_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA59_135 >= 129 && LA59_135 <= 130)) ) {s = 220;}

                        else if ( (LA59_135==118) ) {s = 221;}

                        else if ( (LA59_135==123||LA59_135==127) ) {s = 222;}

                        else if ( (LA59_135==113||(LA59_135 >= 115 && LA59_135 <= 116)||LA59_135==120||LA59_135==122||LA59_135==126||LA59_135==131||(LA59_135 >= 135 && LA59_135 <= 136)||(LA59_135 >= 138 && LA59_135 <= 143)||LA59_135==169||LA59_135==198||LA59_135==200) ) {s = 223;}

                        else if ( (LA59_135==145) ) {s = 224;}

                        else if ( (LA59_135==168) && (synpred14_Objc())) {s = 225;}

                        else if ( (LA59_135==ID) ) {s = 11;}

                         
                        input.seek(index59_135);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA59_136 = input.LA(1);

                         
                        int index59_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA59_136 >= 129 && LA59_136 <= 130)) ) {s = 227;}

                        else if ( (LA59_136==118) ) {s = 228;}

                        else if ( (LA59_136==123||LA59_136==127) ) {s = 229;}

                        else if ( (LA59_136==113||(LA59_136 >= 115 && LA59_136 <= 116)||LA59_136==120||LA59_136==122||LA59_136==126||LA59_136==131||(LA59_136 >= 135 && LA59_136 <= 136)||(LA59_136 >= 138 && LA59_136 <= 143)||LA59_136==169||LA59_136==198||LA59_136==200) ) {s = 230;}

                        else if ( (LA59_136==145) ) {s = 231;}

                        else if ( (LA59_136==168) && (synpred14_Objc())) {s = 232;}

                        else if ( (LA59_136==ID) ) {s = 11;}

                         
                        input.seek(index59_136);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA59_137 = input.LA(1);

                         
                        int index59_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA59_137 >= 129 && LA59_137 <= 130)) ) {s = 234;}

                        else if ( (LA59_137==118) ) {s = 235;}

                        else if ( (LA59_137==123||LA59_137==127) ) {s = 236;}

                        else if ( (LA59_137==113||(LA59_137 >= 115 && LA59_137 <= 116)||LA59_137==120||LA59_137==122||LA59_137==126||LA59_137==131||(LA59_137 >= 135 && LA59_137 <= 136)||(LA59_137 >= 138 && LA59_137 <= 143)||LA59_137==169||LA59_137==198||LA59_137==200) ) {s = 237;}

                        else if ( (LA59_137==145) ) {s = 238;}

                        else if ( (LA59_137==168) && (synpred14_Objc())) {s = 239;}

                        else if ( (LA59_137==ID) ) {s = 11;}

                         
                        input.seek(index59_137);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA59_138 = input.LA(1);

                         
                        int index59_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA59_138 >= 129 && LA59_138 <= 130)) ) {s = 241;}

                        else if ( (LA59_138==118) ) {s = 242;}

                        else if ( (LA59_138==123||LA59_138==127) ) {s = 243;}

                        else if ( (LA59_138==113||(LA59_138 >= 115 && LA59_138 <= 116)||LA59_138==120||LA59_138==122||LA59_138==126||LA59_138==131||(LA59_138 >= 135 && LA59_138 <= 136)||(LA59_138 >= 138 && LA59_138 <= 143)||LA59_138==169||LA59_138==198||LA59_138==200) ) {s = 244;}

                        else if ( (LA59_138==145) ) {s = 245;}

                        else if ( (LA59_138==168) && (synpred14_Objc())) {s = 246;}

                        else if ( (LA59_138==ID) ) {s = 11;}

                         
                        input.seek(index59_138);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA59_145 = input.LA(1);

                         
                        int index59_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_145);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA59_146 = input.LA(1);

                         
                        int index59_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_146);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA59_147 = input.LA(1);

                         
                        int index59_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_147);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA59_148 = input.LA(1);

                         
                        int index59_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_148);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA59_149 = input.LA(1);

                         
                        int index59_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_149);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA59_150 = input.LA(1);

                         
                        int index59_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_150);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA59_151 = input.LA(1);

                         
                        int index59_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_151);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA59_152 = input.LA(1);

                         
                        int index59_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_152);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA59_153 = input.LA(1);

                         
                        int index59_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_153);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA59_154 = input.LA(1);

                         
                        int index59_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_154);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA59_155 = input.LA(1);

                         
                        int index59_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_155);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA59_156 = input.LA(1);

                         
                        int index59_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_156);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA59_157 = input.LA(1);

                         
                        int index59_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_157);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA59_158 = input.LA(1);

                         
                        int index59_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_158);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA59_159 = input.LA(1);

                         
                        int index59_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_159);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA59_160 = input.LA(1);

                         
                        int index59_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_160);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA59_161 = input.LA(1);

                         
                        int index59_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (synpred15_Objc()) ) {s = 127;}

                         
                        input.seek(index59_161);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA59_162 = input.LA(1);

                         
                        int index59_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_162);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA59_163 = input.LA(1);

                         
                        int index59_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_163);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA59_164 = input.LA(1);

                         
                        int index59_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_164);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA59_165 = input.LA(1);

                         
                        int index59_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_165);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA59_166 = input.LA(1);

                         
                        int index59_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_166);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA59_167 = input.LA(1);

                         
                        int index59_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_167);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA59_168 = input.LA(1);

                         
                        int index59_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_168);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA59_169 = input.LA(1);

                         
                        int index59_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_169);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA59_170 = input.LA(1);

                         
                        int index59_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_170);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA59_171 = input.LA(1);

                         
                        int index59_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_171);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA59_172 = input.LA(1);

                         
                        int index59_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_172);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA59_173 = input.LA(1);

                         
                        int index59_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_173);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA59_174 = input.LA(1);

                         
                        int index59_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_174);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA59_175 = input.LA(1);

                         
                        int index59_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_175);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA59_176 = input.LA(1);

                         
                        int index59_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_176);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA59_177 = input.LA(1);

                         
                        int index59_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_177);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA59_178 = input.LA(1);

                         
                        int index59_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_178);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA59_179 = input.LA(1);

                         
                        int index59_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_179);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA59_180 = input.LA(1);

                         
                        int index59_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_180);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA59_181 = input.LA(1);

                         
                        int index59_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_181);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA59_182 = input.LA(1);

                         
                        int index59_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_182);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA59_183 = input.LA(1);

                         
                        int index59_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_183);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA59_184 = input.LA(1);

                         
                        int index59_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_184);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA59_185 = input.LA(1);

                         
                        int index59_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_185);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA59_186 = input.LA(1);

                         
                        int index59_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_186);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA59_187 = input.LA(1);

                         
                        int index59_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_187);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA59_188 = input.LA(1);

                         
                        int index59_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_188);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA59_189 = input.LA(1);

                         
                        int index59_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_189);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA59_190 = input.LA(1);

                         
                        int index59_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_190);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA59_191 = input.LA(1);

                         
                        int index59_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_191);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA59_192 = input.LA(1);

                         
                        int index59_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_192);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA59_193 = input.LA(1);

                         
                        int index59_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_193);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA59_194 = input.LA(1);

                         
                        int index59_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_194);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA59_195 = input.LA(1);

                         
                        int index59_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_195);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA59_196 = input.LA(1);

                         
                        int index59_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_196);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA59_197 = input.LA(1);

                         
                        int index59_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_197);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA59_198 = input.LA(1);

                         
                        int index59_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_198);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA59_199 = input.LA(1);

                         
                        int index59_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_199);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA59_200 = input.LA(1);

                         
                        int index59_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_200);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA59_201 = input.LA(1);

                         
                        int index59_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_201);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA59_202 = input.LA(1);

                         
                        int index59_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_202);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA59_203 = input.LA(1);

                         
                        int index59_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_203);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA59_204 = input.LA(1);

                         
                        int index59_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_204);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA59_205 = input.LA(1);

                         
                        int index59_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_205);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA59_206 = input.LA(1);

                         
                        int index59_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_206);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA59_207 = input.LA(1);

                         
                        int index59_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_207);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA59_208 = input.LA(1);

                         
                        int index59_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_208);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA59_209 = input.LA(1);

                         
                        int index59_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_209);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA59_212 = input.LA(1);

                         
                        int index59_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_212);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA59_213 = input.LA(1);

                         
                        int index59_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_213);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA59_214 = input.LA(1);

                         
                        int index59_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_214);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA59_215 = input.LA(1);

                         
                        int index59_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_215);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA59_216 = input.LA(1);

                         
                        int index59_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_216);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA59_217 = input.LA(1);

                         
                        int index59_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_217);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA59_220 = input.LA(1);

                         
                        int index59_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_220);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA59_221 = input.LA(1);

                         
                        int index59_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_221);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA59_222 = input.LA(1);

                         
                        int index59_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_222);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA59_223 = input.LA(1);

                         
                        int index59_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_223);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA59_224 = input.LA(1);

                         
                        int index59_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_224);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA59_227 = input.LA(1);

                         
                        int index59_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_227);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA59_228 = input.LA(1);

                         
                        int index59_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_228);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA59_229 = input.LA(1);

                         
                        int index59_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_229);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA59_230 = input.LA(1);

                         
                        int index59_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_230);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA59_231 = input.LA(1);

                         
                        int index59_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_231);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA59_234 = input.LA(1);

                         
                        int index59_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_234);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA59_235 = input.LA(1);

                         
                        int index59_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_235);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA59_236 = input.LA(1);

                         
                        int index59_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_236);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA59_237 = input.LA(1);

                         
                        int index59_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_237);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA59_238 = input.LA(1);

                         
                        int index59_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_238);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA59_241 = input.LA(1);

                         
                        int index59_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_241);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA59_242 = input.LA(1);

                         
                        int index59_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_242);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA59_243 = input.LA(1);

                         
                        int index59_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_243);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA59_244 = input.LA(1);

                         
                        int index59_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_244);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA59_245 = input.LA(1);

                         
                        int index59_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_245);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA59_248 = input.LA(1);

                         
                        int index59_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_248);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA59_249 = input.LA(1);

                         
                        int index59_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_249);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA59_250 = input.LA(1);

                         
                        int index59_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_250);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA59_251 = input.LA(1);

                         
                        int index59_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_251);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA59_252 = input.LA(1);

                         
                        int index59_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_252);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA59_253 = input.LA(1);

                         
                        int index59_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_253);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA59_254 = input.LA(1);

                         
                        int index59_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_254);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA59_255 = input.LA(1);

                         
                        int index59_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_255);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA59_256 = input.LA(1);

                         
                        int index59_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_256);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA59_257 = input.LA(1);

                         
                        int index59_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_257);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA59_258 = input.LA(1);

                         
                        int index59_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_258);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA59_259 = input.LA(1);

                         
                        int index59_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_259);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA59_260 = input.LA(1);

                         
                        int index59_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_260);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA59_261 = input.LA(1);

                         
                        int index59_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_261);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA59_262 = input.LA(1);

                         
                        int index59_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_262);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA59_263 = input.LA(1);

                         
                        int index59_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_263);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA59_264 = input.LA(1);

                         
                        int index59_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_264);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA59_265 = input.LA(1);

                         
                        int index59_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_265);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA59_266 = input.LA(1);

                         
                        int index59_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_266);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA59_267 = input.LA(1);

                         
                        int index59_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_267);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA59_268 = input.LA(1);

                         
                        int index59_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_268);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA59_269 = input.LA(1);

                         
                        int index59_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_269);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA59_270 = input.LA(1);

                         
                        int index59_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_270);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA59_271 = input.LA(1);

                         
                        int index59_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_271);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA59_272 = input.LA(1);

                         
                        int index59_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_272);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA59_273 = input.LA(1);

                         
                        int index59_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_273);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA59_274 = input.LA(1);

                         
                        int index59_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_274);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA59_275 = input.LA(1);

                         
                        int index59_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_275);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA59_276 = input.LA(1);

                         
                        int index59_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_276);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA59_277 = input.LA(1);

                         
                        int index59_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_277);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA59_278 = input.LA(1);

                         
                        int index59_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_278);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA59_279 = input.LA(1);

                         
                        int index59_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_279);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA59_280 = input.LA(1);

                         
                        int index59_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_280);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA59_281 = input.LA(1);

                         
                        int index59_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_281);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA59_282 = input.LA(1);

                         
                        int index59_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_282);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA59_283 = input.LA(1);

                         
                        int index59_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_283);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA59_284 = input.LA(1);

                         
                        int index59_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_284);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA59_285 = input.LA(1);

                         
                        int index59_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_285);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA59_286 = input.LA(1);

                         
                        int index59_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_286);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA59_287 = input.LA(1);

                         
                        int index59_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_287);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA59_288 = input.LA(1);

                         
                        int index59_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_288);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA59_289 = input.LA(1);

                         
                        int index59_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_289);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA59_290 = input.LA(1);

                         
                        int index59_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_290);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA59_291 = input.LA(1);

                         
                        int index59_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_291);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA59_292 = input.LA(1);

                         
                        int index59_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_292);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA59_293 = input.LA(1);

                         
                        int index59_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_293);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA59_294 = input.LA(1);

                         
                        int index59_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_294);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA59_295 = input.LA(1);

                         
                        int index59_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_295);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA59_296 = input.LA(1);

                         
                        int index59_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_296);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA59_297 = input.LA(1);

                         
                        int index59_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_297);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA59_298 = input.LA(1);

                         
                        int index59_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_298);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA59_299 = input.LA(1);

                         
                        int index59_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_299);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA59_300 = input.LA(1);

                         
                        int index59_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_300);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA59_301 = input.LA(1);

                         
                        int index59_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_301);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA59_302 = input.LA(1);

                         
                        int index59_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_302);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA59_303 = input.LA(1);

                         
                        int index59_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_303);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA59_304 = input.LA(1);

                         
                        int index59_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_304);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA59_305 = input.LA(1);

                         
                        int index59_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_305);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA59_306 = input.LA(1);

                         
                        int index59_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_306);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA59_307 = input.LA(1);

                         
                        int index59_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_307);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA59_308 = input.LA(1);

                         
                        int index59_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_308);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA59_309 = input.LA(1);

                         
                        int index59_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_309);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA59_310 = input.LA(1);

                         
                        int index59_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_310);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA59_311 = input.LA(1);

                         
                        int index59_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_311);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA59_312 = input.LA(1);

                         
                        int index59_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_312);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA59_313 = input.LA(1);

                         
                        int index59_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_313);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA59_314 = input.LA(1);

                         
                        int index59_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_314);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA59_315 = input.LA(1);

                         
                        int index59_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_315);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA59_316 = input.LA(1);

                         
                        int index59_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_316);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA59_317 = input.LA(1);

                         
                        int index59_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 246;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index59_317);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 59, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA146_eotS =
        "\173\uffff";
    static final String DFA146_eofS =
        "\2\uffff\1\25\5\uffff\1\136\162\uffff";
    static final String DFA146_minS =
        "\1\27\1\57\1\13\1\uffff\2\13\2\uffff\1\27\46\uffff\21\0\13\uffff"+
        "\1\0\14\uffff\3\0\21\uffff\1\0\4\uffff\1\0\4\uffff\1\0\2\uffff\1"+
        "\0\1\uffff";
    static final String DFA146_maxS =
        "\1\27\1\57\1\u00ca\1\uffff\1\u00ca\1\u00aa\2\uffff\1\u00c8\46\uffff"+
        "\21\0\13\uffff\1\0\14\uffff\3\0\21\uffff\1\0\4\uffff\1\0\4\uffff"+
        "\1\0\2\uffff\1\0\1\uffff";
    static final String DFA146_acceptS =
        "\3\uffff\1\1\2\uffff\2\2\1\uffff\14\2\1\3\52\uffff\1\1\12\2\1\uffff"+
        "\14\2\3\uffff\21\2\1\uffff\4\2\1\uffff\4\2\1\uffff\2\2\1\uffff\1"+
        "\2";
    static final String DFA146_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\2\2\uffff\1\3\46\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\13\uffff\1\25\14\uffff\1\26\1\27\1\30\21\uffff\1\31\4\uffff"+
        "\1\32\4\uffff\1\33\2\uffff\1\34\1\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\1",
            "\1\2",
            "\1\16\5\uffff\1\14\5\uffff\1\25\27\uffff\1\10\21\uffff\1\25"+
            "\2\uffff\1\15\16\uffff\1\25\4\uffff\1\12\1\13\26\uffff\1\22"+
            "\3\uffff\1\7\1\uffff\1\4\1\uffff\1\11\1\uffff\1\25\1\24\2\uffff"+
            "\1\5\1\24\1\uffff\2\3\3\uffff\1\25\14\uffff\3\25\1\uffff\2\25"+
            "\4\uffff\1\25\1\uffff\1\6\1\uffff\1\25\4\uffff\1\21\2\uffff"+
            "\1\17\1\20\2\uffff\1\25\4\uffff\2\25\2\uffff\1\25\2\uffff\2"+
            "\25\1\uffff\3\25\1\uffff\4\25\6\uffff\1\23",
            "",
            "\1\71\5\uffff\1\67\35\uffff\1\64\24\uffff\1\70\23\uffff\1\65"+
            "\1\66\26\uffff\1\75\3\uffff\1\63\1\uffff\1\61\1\100\1\57\2\uffff"+
            "\1\77\2\uffff\1\60\1\77\37\uffff\1\62\6\uffff\1\74\2\uffff\1"+
            "\72\1\73\2\uffff\1\103\4\uffff\1\112\3\uffff\1\101\2\uffff\1"+
            "\105\1\106\1\uffff\1\107\1\uffff\1\110\2\uffff\1\111\1\104\1"+
            "\102\6\uffff\1\76",
            "\1\124\5\uffff\1\122\35\uffff\1\116\24\uffff\1\123\23\uffff"+
            "\1\120\1\121\32\uffff\1\115\1\uffff\1\113\1\uffff\1\117\46\uffff"+
            "\1\114\6\uffff\1\127\2\uffff\1\125\1\126",
            "",
            "",
            "\1\147\27\uffff\1\161\21\uffff\1\163\21\uffff\1\162\35\uffff"+
            "\1\172\1\uffff\1\172\1\171\1\uffff\1\132\1\uffff\1\166\1\uffff"+
            "\1\134\1\133\2\uffff\1\134\1\133\1\uffff\2\131\1\172\2\uffff"+
            "\1\164\2\172\1\uffff\6\172\1\uffff\1\135\1\uffff\1\140\1\170"+
            "\1\165\1\uffff\1\137\1\145\4\uffff\1\141\3\uffff\1\167\4\uffff"+
            "\1\130\2\uffff\1\172\3\uffff\1\154\4\uffff\1\144\1\146\2\uffff"+
            "\1\152\2\uffff\1\156\1\157\1\uffff\1\160\1\151\1\142\1\uffff"+
            "\1\150\1\143\1\155\1\153\2\uffff\1\172\1\uffff\1\172",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "923:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA146_2 = input.LA(1);

                         
                        int index146_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA146_2 >= 129 && LA146_2 <= 130)) && (synpred29_Objc())) {s = 3;}

                        else if ( (LA146_2==118) ) {s = 4;}

                        else if ( (LA146_2==126) ) {s = 5;}

                        else if ( (LA146_2==159) && (synpred30_Objc())) {s = 6;}

                        else if ( (LA146_2==116) && (synpred30_Objc())) {s = 7;}

                        else if ( (LA146_2==ID) ) {s = 8;}

                        else if ( (LA146_2==120) && (synpred30_Objc())) {s = 9;}

                        else if ( (LA146_2==STRING_LITERAL) && (synpred30_Objc())) {s = 10;}

                        else if ( (LA146_2==STRING_OBJC) && (synpred30_Objc())) {s = 11;}

                        else if ( (LA146_2==CHAR_LITERAL) && (synpred30_Objc())) {s = 12;}

                        else if ( (LA146_2==NUMBER_LITERAL) && (synpred30_Objc())) {s = 13;}

                        else if ( (LA146_2==BOOL_LITERAL) && (synpred30_Objc())) {s = 14;}

                        else if ( (LA146_2==169) && (synpred30_Objc())) {s = 15;}

                        else if ( (LA146_2==170) && (synpred30_Objc())) {s = 16;}

                        else if ( (LA146_2==166) && (synpred30_Objc())) {s = 17;}

                        else if ( (LA146_2==112) && (synpred30_Objc())) {s = 18;}

                        else if ( (LA146_2==202) && (synpred30_Objc())) {s = 19;}

                        else if ( (LA146_2==123||LA146_2==127) && (synpred30_Objc())) {s = 20;}

                        else if ( (LA146_2==EOF||LA146_2==DEFINE_LITERAL||LA146_2==MULTI_COMMENT_LIT||LA146_2==SINGLE_COMMENT_LIT||LA146_2==122||LA146_2==134||(LA146_2 >= 147 && LA146_2 <= 149)||(LA146_2 >= 151 && LA146_2 <= 152)||LA146_2==157||LA146_2==161||LA146_2==173||(LA146_2 >= 178 && LA146_2 <= 179)||LA146_2==182||(LA146_2 >= 185 && LA146_2 <= 186)||(LA146_2 >= 188 && LA146_2 <= 190)||(LA146_2 >= 192 && LA146_2 <= 195)) ) {s = 21;}

                         
                        input.seek(index146_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA146_4 = input.LA(1);

                         
                        int index146_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA146_4==120) ) {s = 47;}

                        else if ( (LA146_4==126) ) {s = 48;}

                        else if ( (LA146_4==118) ) {s = 49;}

                        else if ( (LA146_4==159) ) {s = 50;}

                        else if ( (LA146_4==116) ) {s = 51;}

                        else if ( (LA146_4==ID) ) {s = 52;}

                        else if ( (LA146_4==STRING_LITERAL) ) {s = 53;}

                        else if ( (LA146_4==STRING_OBJC) ) {s = 54;}

                        else if ( (LA146_4==CHAR_LITERAL) ) {s = 55;}

                        else if ( (LA146_4==NUMBER_LITERAL) ) {s = 56;}

                        else if ( (LA146_4==BOOL_LITERAL) ) {s = 57;}

                        else if ( (LA146_4==169) ) {s = 58;}

                        else if ( (LA146_4==170) ) {s = 59;}

                        else if ( (LA146_4==166) ) {s = 60;}

                        else if ( (LA146_4==112) ) {s = 61;}

                        else if ( (LA146_4==202) ) {s = 62;}

                        else if ( (LA146_4==123||LA146_4==127) ) {s = 63;}

                        else if ( (LA146_4==119) && (synpred29_Objc())) {s = 64;}

                        else if ( (LA146_4==182) && (synpred30_Objc())) {s = 65;}

                        else if ( (LA146_4==195) && (synpred30_Objc())) {s = 66;}

                        else if ( (LA146_4==173) && (synpred30_Objc())) {s = 67;}

                        else if ( (LA146_4==194) && (synpred30_Objc())) {s = 68;}

                        else if ( (LA146_4==185) && (synpred30_Objc())) {s = 69;}

                        else if ( (LA146_4==186) && (synpred30_Objc())) {s = 70;}

                        else if ( (LA146_4==188) && (synpred30_Objc())) {s = 71;}

                        else if ( (LA146_4==190) && (synpred30_Objc())) {s = 72;}

                        else if ( (LA146_4==193) && (synpred30_Objc())) {s = 73;}

                        else if ( (LA146_4==178) && (synpred30_Objc())) {s = 74;}

                         
                        input.seek(index146_4);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA146_5 = input.LA(1);

                         
                        int index146_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA146_5==118) ) {s = 75;}

                        else if ( (LA146_5==159) && (synpred30_Objc())) {s = 76;}

                        else if ( (LA146_5==116) && (synpred30_Objc())) {s = 77;}

                        else if ( (LA146_5==ID) && (synpred30_Objc())) {s = 78;}

                        else if ( (LA146_5==120) && (synpred30_Objc())) {s = 79;}

                        else if ( (LA146_5==STRING_LITERAL) && (synpred30_Objc())) {s = 80;}

                        else if ( (LA146_5==STRING_OBJC) && (synpred30_Objc())) {s = 81;}

                        else if ( (LA146_5==CHAR_LITERAL) && (synpred30_Objc())) {s = 82;}

                        else if ( (LA146_5==NUMBER_LITERAL) && (synpred30_Objc())) {s = 83;}

                        else if ( (LA146_5==BOOL_LITERAL) && (synpred30_Objc())) {s = 84;}

                        else if ( (LA146_5==169) && (synpred30_Objc())) {s = 85;}

                        else if ( (LA146_5==170) && (synpred30_Objc())) {s = 86;}

                        else if ( (LA146_5==166) && (synpred30_Objc())) {s = 87;}

                         
                        input.seek(index146_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA146_8 = input.LA(1);

                         
                        int index146_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA146_8==166) ) {s = 88;}

                        else if ( ((LA146_8 >= 129 && LA146_8 <= 130)) ) {s = 89;}

                        else if ( (LA146_8==118) ) {s = 90;}

                        else if ( (LA146_8==123||LA146_8==127) && (synpred30_Objc())) {s = 91;}

                        else if ( (LA146_8==122||LA146_8==126) && (synpred30_Objc())) {s = 92;}

                        else if ( (LA146_8==145) && (synpred30_Objc())) {s = 93;}

                        else if ( (LA146_8==EOF) && (synpred30_Objc())) {s = 94;}

                        else if ( (LA146_8==151) && (synpred30_Objc())) {s = 95;}

                        else if ( (LA146_8==147) && (synpred30_Objc())) {s = 96;}

                        else if ( (LA146_8==157) && (synpred30_Objc())) {s = 97;}

                        else if ( (LA146_8==190) && (synpred30_Objc())) {s = 98;}

                        else if ( (LA146_8==193) && (synpred30_Objc())) {s = 99;}

                        else if ( (LA146_8==178) && (synpred30_Objc())) {s = 100;}

                        else if ( (LA146_8==152) && (synpred30_Objc())) {s = 101;}

                        else if ( (LA146_8==179) && (synpred30_Objc())) {s = 102;}

                        else if ( (LA146_8==DEFINE_LITERAL) && (synpred30_Objc())) {s = 103;}

                        else if ( (LA146_8==192) && (synpred30_Objc())) {s = 104;}

                        else if ( (LA146_8==189) && (synpred30_Objc())) {s = 105;}

                        else if ( (LA146_8==182) && (synpred30_Objc())) {s = 106;}

                        else if ( (LA146_8==195) && (synpred30_Objc())) {s = 107;}

                        else if ( (LA146_8==173) ) {s = 108;}

                        else if ( (LA146_8==194) && (synpred30_Objc())) {s = 109;}

                        else if ( (LA146_8==185) && (synpred30_Objc())) {s = 110;}

                        else if ( (LA146_8==186) && (synpred30_Objc())) {s = 111;}

                        else if ( (LA146_8==188) && (synpred30_Objc())) {s = 112;}

                        else if ( (LA146_8==ID) ) {s = 113;}

                        else if ( (LA146_8==SINGLE_COMMENT_LIT) && (synpred30_Objc())) {s = 114;}

                        else if ( (LA146_8==MULTI_COMMENT_LIT) && (synpred30_Objc())) {s = 115;}

                        else if ( (LA146_8==134) && (synpred30_Objc())) {s = 116;}

                        else if ( (LA146_8==149) && (synpred30_Objc())) {s = 117;}

                        else if ( (LA146_8==120) ) {s = 118;}

                        else if ( (LA146_8==161) && (synpred30_Objc())) {s = 119;}

                        else if ( (LA146_8==148) && (synpred30_Objc())) {s = 120;}

                        else if ( (LA146_8==116) ) {s = 121;}

                        else if ( (LA146_8==113||LA146_8==115||LA146_8==131||(LA146_8 >= 135 && LA146_8 <= 136)||(LA146_8 >= 138 && LA146_8 <= 143)||LA146_8==169||LA146_8==198||LA146_8==200) && (synpred30_Objc())) {s = 122;}

                         
                        input.seek(index146_8);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA146_47 = input.LA(1);

                         
                        int index146_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_47);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA146_48 = input.LA(1);

                         
                        int index146_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_48);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA146_49 = input.LA(1);

                         
                        int index146_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_49);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA146_50 = input.LA(1);

                         
                        int index146_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_50);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA146_51 = input.LA(1);

                         
                        int index146_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_51);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA146_52 = input.LA(1);

                         
                        int index146_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_52);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA146_53 = input.LA(1);

                         
                        int index146_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_53);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA146_54 = input.LA(1);

                         
                        int index146_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_54);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA146_55 = input.LA(1);

                         
                        int index146_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_55);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA146_56 = input.LA(1);

                         
                        int index146_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_56);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA146_57 = input.LA(1);

                         
                        int index146_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_57);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA146_58 = input.LA(1);

                         
                        int index146_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_58);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA146_59 = input.LA(1);

                         
                        int index146_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_59);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA146_60 = input.LA(1);

                         
                        int index146_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_60);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA146_61 = input.LA(1);

                         
                        int index146_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_61);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA146_62 = input.LA(1);

                         
                        int index146_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_62);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA146_63 = input.LA(1);

                         
                        int index146_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred29_Objc()) ) {s = 64;}

                        else if ( (synpred30_Objc()) ) {s = 122;}

                         
                        input.seek(index146_63);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA146_75 = input.LA(1);

                         
                        int index146_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_75);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA146_88 = input.LA(1);

                         
                        int index146_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_88);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA146_89 = input.LA(1);

                         
                        int index146_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_89);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA146_90 = input.LA(1);

                         
                        int index146_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_90);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA146_108 = input.LA(1);

                         
                        int index146_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_108);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA146_113 = input.LA(1);

                         
                        int index146_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_113);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA146_118 = input.LA(1);

                         
                        int index146_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_118);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA146_121 = input.LA(1);

                         
                        int index146_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 122;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index146_121);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 146, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code478 = new BitSet(new long[]{0x0000800000800002L,0x0040000000080002L,0x764C200021880040L,0x000000000000000FL});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_code_internal561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments579 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_wrapper644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_extern663 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_extern666 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_extern669 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFF7FFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000000007FFL});
    public static final BitSet FOLLOW_set_in_extern671 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_extern676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_implementation710 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_implementation713 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_category_in_implementation716 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_implementation_body_in_implementation721 = new BitSet(new long[]{0x0000800000800000L,0x4440000000080002L,0x7644200200300040L,0x000000000000000FL});
    public static final BitSet FOLLOW_149_in_implementation726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_implementation_body790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_synthesize823 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_148_in_synthesize827 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_139_in_synthesize834 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synthesize836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synthesize840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_static_declaration_wrapper864 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_block_call_predicate886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call_predicate893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_block_call_predicate895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_block_call933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_block_call935 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF7684D00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_block_internal_in_block_call937 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF7684D00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_201_in_block_call940 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_170_in_block_call961 = new BitSet(new long[]{0x0000800000000000L,0x00C0000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_block_params_in_block_call963 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call966 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_synchronized_call1006 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synchronized_call1008 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1010 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synchronized_call1012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1030 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_block_params1033 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_block_params1035 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_block_multiline1098 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF768CD00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_block_internal_macro_in_block_multiline1103 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0xFEF768CD00000040L,0x000000000000023EL});
    public static final BitSet FOLLOW_201_in_block_multiline1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_singleline1215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_block_internal_macro1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_macro1267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1300 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_block_internal1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_goto_stmt1428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_goto_stmt1430 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_goto_stmt1434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_while_stmt1480 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_while_stmt1482 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1484 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_while_stmt1486 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_while_stmt1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_for_in_stmt1503 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1528 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000040L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_for_classic_stmt1533 = new BitSet(new long[]{0x0000800000020802L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1560 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1562 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1579 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1581 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1599 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1601 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1609 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0100000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1613 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1617 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1622 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt_body1625 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_for_stmt1640 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_for_stmt1642 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_return_stmt1680 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000040L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_switch_stmt1705 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_switch_stmt1707 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1709 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_switch_stmt1711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_switch_stmt1713 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3D84100000040L,0x0000000000000230L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1716 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3D84100000040L,0x0000000000000230L});
    public static final BitSet FOLLOW_201_in_switch_stmt1720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_case_stmt1779 = new BitSet(new long[]{0x0000800000000000L,0x4000000000000010L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_case_stmt1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_default_stmt1806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_default_stmt1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_do_stmt1829 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_do_stmt1831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_do_stmt1833 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_do_stmt1835 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_do_stmt1837 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_do_stmt1839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_if_stmt1864 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_if_stmt1866 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_if_stmt1868 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_if_stmt1870 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_if_stmt1872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_else_stmt1895 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_else_stmt1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_try_stmt_wrapper1919 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper1922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper1925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000440000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_catch_stmt1954 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_catch_stmt1957 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1960 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_catch_stmt1963 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt1965 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_catch_stmt1968 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_catch_stmt1971 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_finally_stmt1995 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_block_in_finally_stmt1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper2017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_throw_stmt2036 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_throw_stmt2040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_name_number2085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number2088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2160 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2162 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2185 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2193 = new BitSet(new long[]{0x0000800000000000L,0x0150000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2210 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_implementation_common2225 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2227 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_implementation_common2229 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2231 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2294 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2297 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2299 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_clasical_method_call_predicate2303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2318 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2321 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2323 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_classical_method_call2328 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2330 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_call2333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2348 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params_push2351 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2353 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2377 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_params_push2384 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_125_in_method_params_push2389 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2392 = new BitSet(new long[]{0x0000800000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_method_param_push2415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_method_msg2441 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_method_msg2443 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000020L});
    public static final BitSet FOLLOW_133_in_method_msg2448 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_method_msg2454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_questionmark_if_stmt2480 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_questionmark_if_stmt2484 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_element_value_or_semicolon2534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2555 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_array_init2558 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2560 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_197_in_element_value_or_array_init2577 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000620L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_element_value_or_array_init2582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2633 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000002000002FD88L,0x0000000000000140L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2635 = new BitSet(new long[]{0x0000000000000002L,0x451A000000000000L,0x000002000002FD88L,0x0000000000000140L});
    public static final BitSet FOLLOW_126_in_cast_unary_expression12650 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2680 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2702 = new BitSet(new long[]{0x0000000000000002L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_cast_unary_expression2711 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_cast_unary_expression2727 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2743 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2763 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_expression2784 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2786 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2788 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_expression2790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression2793 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_simple_name_or_classical_function_call_in_cast_expression2795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2824 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_name_or_classical_function_call2827 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call2829 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_name_or_classical_function_call2832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call2839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access2854 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2856 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2858 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2861 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_simple_expression_value_access2866 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access2892 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2895 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2897 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access2902 = new BitSet(new long[]{0x0000800000020800L,0xC9D1000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access2904 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access2914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access2917 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access2919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_simple_expression_value2946 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_simple_expression_value2951 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value2953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_simple_expression_value2955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value2983 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value2989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_simple_expression_value2994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_OBJC_in_simple_expression_value3007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_simple_expression_value3020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value3033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOL_LITERAL_in_simple_expression_value3046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value23078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23084 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_simple_expression_value23096 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23098 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value23100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_selector3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_type_cast_name3344 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3346 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_type_cast_name3348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3443 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3500 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_lvalue3515 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3517 = new BitSet(new long[]{0x0000800000000000L,0x0110000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3519 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_cast_lvalue3521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3524 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3526 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3547 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3550 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3552 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_116_in_lvalue3579 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_lvalue3584 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_lvalue3586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_lvalue3588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue3604 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue3616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_break_stmt3632 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_continue_stmt3653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_extern_declaration3700 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3714 = new BitSet(new long[]{0x0000000000000000L,0x4400000000000000L});
    public static final BitSet FOLLOW_method_declaration_in_declarations3717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations3731 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200002000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_optional_prefix_in_declarations3733 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_field_declaration_in_declarations3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations3752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_optional_prefix3790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_ns_inline3802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_property_prefix3814 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_property_prefix3816 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3818 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3821 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3823 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_property_prefix3828 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3830 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_property_prefix3833 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix3835 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_property_prefix3837 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_property_prefix3844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper3857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper3877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_typedef_declaration_wrapper3895 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper3897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration3915 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3917 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_125_in_typedef_declaration3920 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration3922 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_typedef_declaration3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer_predicate3938 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer_predicate3940 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate3942 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer_predicate3944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer3959 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer3961 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3963 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer3965 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer3967 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3970 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_func_pointer3973 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer3975 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer3981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal4010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal4028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_forward_class_declaration4067 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_forward_class_declaration4084 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_forward_class_declaration4133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_protocol_declaration4173 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4175 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200080L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4177 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4199 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_class_protocol_end4206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_template4218 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_internal_in_template4220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_template4222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_implements_protocols4256 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4258 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_125_in_implements_protocols4261 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4263 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_implements_protocols4267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4289 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_template_internal4292 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_type_in_template_internal4294 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_template_type4314 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_interface_declaration4378 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4380 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A2000A0L,0x0000000000000020L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4382 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L,0x0000000000000020L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4386 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4391 = new BitSet(new long[]{0x0000000000000000L,0x4400000000080002L,0x000000000A200000L});
    public static final BitSet FOLLOW_149_in_interface_declaration4396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_fields_body4413 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644201054000000L,0x000000000000020FL});
    public static final BitSet FOLLOW_body_item_in_fields_body4419 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644201054000000L,0x000000000000020FL});
    public static final BitSet FOLLOW_201_in_fields_body4424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4439 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644201000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4442 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000FL});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_field_modifiers4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4530 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_category4551 = new BitSet(new long[]{0x0000800000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_ID_in_category4553 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_category4556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_superclass_name4576 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4578 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4611 = new BitSet(new long[]{0x0000800000000002L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4635 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4637 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000080L});
    public static final BitSet FOLLOW_125_in_field_declaration4641 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4643 = new BitSet(new long[]{0x0000000000000000L,0x3260000000000000L,0x0000000000010A51L,0x0000000000000080L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L,0x0000000000000020L});
    public static final BitSet FOLLOW_134_in_field_declaration4653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4664 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_field_declaration4668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_field_declaration4674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple4689 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple4691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_classical_method_params4716 = new BitSet(new long[]{0x0000800000000000L,0x20C0000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4718 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_125_in_classical_method_params4722 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params4724 = new BitSet(new long[]{0x0000000000000000L,0x2080000000000000L});
    public static final BitSet FOLLOW_119_in_classical_method_params4728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param4753 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration4795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration4801 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_classical_type_declaration4811 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4813 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_classical_type_declaration4832 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4834 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_classical_type_declaration4853 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration4855 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration4857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration4886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration4897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration4903 = new BitSet(new long[]{0x0000000000000002L,0x0110000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4905 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration4907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration4914 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration4923 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration4932 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration4934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_type_declaration_plane4949 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640200000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_173_in_type_declaration_plane4952 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_type_declaration_plane4955 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane4958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_type_declaration_plane4961 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_declaration_plane4963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_decl_protocol_predicate4995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_decl_protocol_predicate4997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_declaration_protocol5013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_type_declaration_protocol5015 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x1640000000000000L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol5017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_type_declaration_protocol5019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_struct_simple5041 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_type_declaration_union_simple5063 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_type_declaration_enum_simple5089 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_struct5121 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct5123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct5126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_type_declaration_union5166 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union5168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union5171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_type_declaration_enum5211 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum5213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum5216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_enum_wrapper5245 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5255 = new BitSet(new long[]{0x0000800000000000L,0x0000000000080002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_enum_wrapper5262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_enum_element5277 = new BitSet(new long[]{0x0000000000000002L,0x3220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5280 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_enum_element5282 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_enum_element5286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_struct5340 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_struct_internal_in_struct5349 = new BitSet(new long[]{0x0000800000000000L,0x0040000000080002L,0x5644200000000000L,0x000000000000020EL});
    public static final BitSet FOLLOW_201_in_struct5356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec5411 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_120_in_type_dec5413 = new BitSet(new long[]{0x0000000000000002L,0x0100000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec5417 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal5434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal5443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_knownTypes5456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_knownTypes5462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_knownTypes5468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_185_in_knownTypes5471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_knownTypes5478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x1200000000000000L});
    public static final BitSet FOLLOW_185_in_knownTypes5481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name5497 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_array_size_in_field_name5499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000004000000020L});
    public static final BitSet FOLLOW_field_crap_in_field_name5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_array_size5531 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000010L,0x0000010000000000L});
    public static final BitSet FOLLOW_168_in_array_size5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_field_crap5552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap5554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration5566 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration5568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_declaration_common5630 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common5632 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_common5634 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common5636 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common5639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_declaration_common5642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate5654 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_declaration_predicate5657 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate5659 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_predicate5661 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate5663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name5681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params5704 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_prefix_in_method_param5724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_method_param5727 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_param5730 = new BitSet(new long[]{0x0000800000000000L,0x0040000000000000L,0x5644200000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_type_declaration_in_method_param5732 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_param5734 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param5738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name5771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix5790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_function_in_define_declaration5819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5833 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5835 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_define_declaration5837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration5853 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration5855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_function5879 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_function5881 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_define_as_function5884 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000030L});
    public static final BitSet FOLLOW_197_in_define_as_function5886 = new BitSet(new long[]{0x0000800000000000L,0x0150000000080002L,0x88B3484100000040L,0x0000000000000010L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_define_as_function5889 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_201_in_define_as_function5891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred1_Objc741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred4_Objc1294 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred4_Objc1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred5_Objc1309 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_in_synpred5_Objc1311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred6_Objc1552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_synpred6_Objc1554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_184_in_synpred7_Objc1573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred8_Objc1590 = new BitSet(new long[]{0x0000000000000000L,0x1220000000000000L,0x0000000000010A11L,0x0000000000000080L});
    public static final BitSet FOLLOW_op_assign_in_synpred8_Objc1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred9_Objc2178 = new BitSet(new long[]{0x0000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred9_Objc2180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred10_Objc2759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred11_Objc2772 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred11_Objc2774 = new BitSet(new long[]{0x0000800000020800L,0x0150000003000010L,0x0000064080000000L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred11_Objc2776 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred11_Objc2778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred11_Objc2780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred12_Objc2817 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synpred12_Objc2819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred13_Objc2879 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred13_Objc2882 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred13_Objc2884 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_118_in_synpred13_Objc2888 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred14_Objc2937 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred14_Objc2940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred14_Objc2942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred15_Objc2972 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred15_Objc2978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred16_Objc3073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred17_Objc3362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred18_Objc3496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred19_Objc3509 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred19_Objc3511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred20_Objc3570 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred20_Objc3573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_166_in_synpred20_Objc3575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred21_Objc4006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred22_Objc4780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred23_Objc4791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred24_Objc4882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred25_Objc4893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred26_Objc5112 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred26_Objc5114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred26_Objc5117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred27_Objc5157 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred27_Objc5159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred27_Objc5162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_synpred28_Objc5202 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_typedef_name_in_synpred28_Objc5204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_197_in_synpred28_Objc5207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred29_Objc5810 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred29_Objc5812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_167_in_synpred29_Objc5814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred30_Objc5826 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_name_in_synpred30_Objc5828 = new BitSet(new long[]{0x0000800000020800L,0xC951000003000010L,0x0000064080000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_element_value_in_synpred30_Objc5830 = new BitSet(new long[]{0x0000000000000002L});

}