// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2018-06-05 19:17:16

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CLASS_NAME", "CODE", "CONTINUE_STMT", "C_LIT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "M_C_LIT", "NAME", "NR_LIT", "NUMBER", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "STR_LIT", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "S_C_LIT", "StringBody", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'%'", "'&&'", "'&'", "'&='", "'('", "'(^'", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?:'", "'@'", "'@('", "'@autoreleasepool'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@required'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'@{'", "'IBOutlet'", "'MH_EXPORT'", "'NO'", "'NS_INLINE'", "'YES'", "'['", "'\\\\'", "']'", "'^'", "'^('", "'__block'", "'__weak'", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern \"C\"'", "'extern'", "'false'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'inout'", "'int'", "'long'", "'nullable'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'true'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__210=210;
    public static final int T__211=211;
    public static final int T__212=212;
    public static final int T__213=213;
    public static final int T__214=214;
    public static final int T__215=215;
    public static final int T__216=216;
    public static final int T__217=217;
    public static final int T__218=218;
    public static final int T__219=219;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BREAK_STMT=11;
    public static final int CASE_STMT=12;
    public static final int CATCH_STMT=13;
    public static final int CATEGORY=14;
    public static final int CHAR=15;
    public static final int CLASS_NAME=16;
    public static final int CODE=17;
    public static final int CONTINUE_STMT=18;
    public static final int C_LIT=19;
    public static final int DEFAULT_STMT=20;
    public static final int DEFINE=21;
    public static final int DEFINE_LITERAL=22;
    public static final int DIGIT=23;
    public static final int DIRECTIVE=24;
    public static final int DO_STMT=25;
    public static final int ELSE_STMT=26;
    public static final int ENUM=27;
    public static final int ENUM_DEC=28;
    public static final int ENUM_FIELD=29;
    public static final int EXPR_COMPLEMENT=30;
    public static final int EXPR_NEGATE=31;
    public static final int EXPR_NOT=32;
    public static final int EXTERN=33;
    public static final int EscapeSequence=34;
    public static final int FIELD=35;
    public static final int FIELDS=36;
    public static final int FIELD_NAME=37;
    public static final int FINALLY_STMT=38;
    public static final int FORWARD_DECLARATION=39;
    public static final int FOR_IN_STMT=40;
    public static final int FOR_STMT=41;
    public static final int FUNC_POINTER=42;
    public static final int GOTO=43;
    public static final int GROUP_MODIFIER=44;
    public static final int HexDigit=45;
    public static final int ID=46;
    public static final int IF_STMT=47;
    public static final int IMPLEMENTATION=48;
    public static final int IMPLEMENTS_INTERFACES=49;
    public static final int IMPLEMENTS_INTERFACE_NAME=50;
    public static final int INTERFACE=51;
    public static final int INTERFACE_NAME=52;
    public static final int LETTER=53;
    public static final int METHOD=54;
    public static final int METHOD_CALL=55;
    public static final int METHOD_IMPL=56;
    public static final int METHOD_MSG=57;
    public static final int METHOD_NAME=58;
    public static final int METHOD_PARAM=59;
    public static final int METHOD_PARAMS=60;
    public static final int MODIFIER=61;
    public static final int MULTI_COMMENT=62;
    public static final int M_C_LIT=63;
    public static final int NAME=64;
    public static final int NR_LIT=65;
    public static final int NUMBER=66;
    public static final int OBJECT_ACCESS=67;
    public static final int OP=68;
    public static final int PARAMS=69;
    public static final int PARAM_NAME=70;
    public static final int PARAM_PREFIX=71;
    public static final int PREFIX=72;
    public static final int PREPROCESSOR_DECLARATION=73;
    public static final int PROPERTY=74;
    public static final int PROTOCOL=75;
    public static final int PROTOCOL_NAME=76;
    public static final int QUESTION_MARK_IF=77;
    public static final int RETURN_STMT=78;
    public static final int SIMPLE_EXPR=79;
    public static final int SINGLE_COMMENT=80;
    public static final int STATIC=81;
    public static final int STATIC_METHOD=82;
    public static final int STATIC_VARIABLE=83;
    public static final int STRING=84;
    public static final int STRING_OBJC=85;
    public static final int STRUCT=86;
    public static final int STRUCT_DEC=87;
    public static final int STR_LIT=88;
    public static final int SUPERCLASS_NAME=89;
    public static final int SWITCH_STMT=90;
    public static final int SYNCHRONIZED=91;
    public static final int SYNTHETIZE=92;
    public static final int S_C_LIT=93;
    public static final int StringBody=94;
    public static final int TEMPLATE_TYPE=95;
    public static final int THROW_STMT=96;
    public static final int TRY_STMT=97;
    public static final int TYPEDEF=98;
    public static final int TYPEDEF_NAME=99;
    public static final int TYPE_CAST=100;
    public static final int TYPE_PLAIN=101;
    public static final int UNION=102;
    public static final int UNION_DEC=103;
    public static final int UnicodeEscape=104;
    public static final int VALUE=105;
    public static final int VARIABLE=106;
    public static final int VARIABLE_ASSIGNMENT=107;
    public static final int VA_ARGS=108;
    public static final int WHILE_STMT=109;
    public static final int WHITESPACE=110;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==M_C_LIT||LA1_0==S_C_LIT||LA1_0==118||LA1_0==135||LA1_0==152||(LA1_0 >= 156 && LA1_0 <= 157)||LA1_0==162||(LA1_0 >= 171 && LA1_0 <= 172)||(LA1_0 >= 181 && LA1_0 <= 182)||LA1_0==185||LA1_0==190||LA1_0==192||LA1_0==196||(LA1_0 >= 199 && LA1_0 <= 202)||(LA1_0 >= 204 && LA1_0 <= 206)||(LA1_0 >= 209 && LA1_0 <= 212)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code483);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 118:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal13=null;
        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper2 =null;

        ObjcParser.implementation_wrapper_return implementation_wrapper3 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration4 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper5 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper6 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper7 =null;

        ObjcParser.define_declaration_return define_declaration8 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper9 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper10 =null;

        ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous11 =null;

        ObjcParser.comments_return comments12 =null;


        Object char_literal13_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:3: ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' )
            int alt2=12;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )=> variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal514);
                    variable_declaration_wrapper2=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal519);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal524);
                    forward_class_declaration4=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal530);
                    protocol_declaration_wrapper5=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal537);
                    interface_declaration_wrapper6=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal544);
                    extern_declaration_wrapper7=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal550);
                    define_declaration8=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal556);
                    typedef_declaration_wrapper9=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal562);
                    static_declaration_wrapper10=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: type_declaration_struct_enum_union_anonymous
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568);
                    type_declaration_struct_enum_union_anonymous11=type_declaration_struct_enum_union_anonymous();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_enum_union_anonymous11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:132:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal574);
                    comments12=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments12.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:133:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal13=(Token)match(input,135,FOLLOW_135_in_code_internal580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal13_tree = 
                    (Object)adaptor.create(char_literal13)
                    ;
                    adaptor.addChild(root_0, char_literal13_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment14 =null;

        ObjcParser.multi_comment_return multi_comment15 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==S_C_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==M_C_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments592);
                    single_comment14=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment14.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments598);
                    multi_comment15=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment15.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:1: single_comment : S_C_LIT -> ^( SINGLE_COMMENT S_C_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token S_C_LIT16=null;

        Object S_C_LIT16_tree=null;
        RewriteRuleTokenStream stream_S_C_LIT=new RewriteRuleTokenStream(adaptor,"token S_C_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:3: ( S_C_LIT -> ^( SINGLE_COMMENT S_C_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:5: S_C_LIT
            {
            S_C_LIT16=(Token)match(input,S_C_LIT,FOLLOW_S_C_LIT_in_single_comment613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_S_C_LIT.add(S_C_LIT16);


            // AST REWRITE
            // elements: S_C_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:13: -> ^( SINGLE_COMMENT S_C_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:15: ^( SINGLE_COMMENT S_C_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_S_C_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:145:1: multi_comment : M_C_LIT -> ^( MULTI_COMMENT M_C_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token M_C_LIT17=null;

        Object M_C_LIT17_tree=null;
        RewriteRuleTokenStream stream_M_C_LIT=new RewriteRuleTokenStream(adaptor,"token M_C_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:3: ( M_C_LIT -> ^( MULTI_COMMENT M_C_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:5: M_C_LIT
            {
            M_C_LIT17=(Token)match(input,M_C_LIT,FOLLOW_M_C_LIT_in_multi_comment635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_M_C_LIT.add(M_C_LIT17);


            // AST REWRITE
            // elements: M_C_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 146:13: -> ^( MULTI_COMMENT M_C_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:16: ^( MULTI_COMMENT M_C_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_M_C_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:2: extern_wrapper : extern_c -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_c_return extern_c18 =null;


        RewriteRuleSubtreeStream stream_extern_c=new RewriteRuleSubtreeStream(adaptor,"rule extern_c");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:3: ( extern_c -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:6: extern_c
            {
            pushFollow(FOLLOW_extern_c_in_extern_wrapper664);
            extern_c18=extern_c();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_c.add(extern_c18.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:15: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:18: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_c_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_c"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:2: extern_c : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_c_return extern_c() throws RecognitionException {
        ObjcParser.extern_c_return retval = new ObjcParser.extern_c_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal20=null;
        Token char_literal21=null;
        Token set22=null;
        Token char_literal23=null;

        Object string_literal19_tree=null;
        Object string_literal20_tree=null;
        Object char_literal21_tree=null;
        Object set22_tree=null;
        Object char_literal23_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:5: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:7: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,192,FOLLOW_192_in_extern_c688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            string_literal20=(Token)match(input,113,FOLLOW_113_in_extern_c691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal20_tree = 
            (Object)adaptor.create(string_literal20)
            ;
            adaptor.addChild(root_0, string_literal20_tree);
            }

            char_literal21=(Token)match(input,118,FOLLOW_118_in_extern_c694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal21_tree = 
            (Object)adaptor.create(char_literal21)
            ;
            adaptor.addChild(root_0, char_literal21_tree);
            }

            set22=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 119)||(input.LA(1) >= 121 && input.LA(1) <= 219) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set22)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal23=(Token)match(input,120,FOLLOW_120_in_extern_c701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal23_tree = 
            (Object)adaptor.create(char_literal23)
            ;
            adaptor.addChild(root_0, char_literal23_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_c"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation24 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper718);
            implementation24=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation24.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 162:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal25=null;
        Token string_literal29=null;
        ObjcParser.name_return name26 =null;

        ObjcParser.category_return category27 =null;

        ObjcParser.implementation_body_return implementation_body28 =null;


        Object string_literal25_tree=null;
        Object string_literal29_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal25=(Token)match(input,156,FOLLOW_156_in_implementation737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal25_tree = 
            (Object)adaptor.create(string_literal25)
            ;
            adaptor.addChild(root_0, string_literal25_tree);
            }

            pushFollow(FOLLOW_name_in_implementation740);
            name26=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name26.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==118) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==120) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation743);
                    category27=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category27.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==M_C_LIT||LA5_0==S_C_LIT||LA5_0==118||LA5_0==123||LA5_0==127||LA5_0==135||LA5_0==153||LA5_0==167||LA5_0==171||(LA5_0 >= 181 && LA5_0 <= 182)||LA5_0==185||LA5_0==190||LA5_0==196||(LA5_0 >= 199 && LA5_0 <= 202)||(LA5_0 >= 204 && LA5_0 <= 206)||(LA5_0 >= 209 && LA5_0 <= 212)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation748);
            	    implementation_body28=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body28.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal29=(Token)match(input,154,FOLLOW_154_in_implementation753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal29_tree = 
            (Object)adaptor.create(string_literal29)
            ;
            adaptor.addChild(root_0, string_literal29_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal38=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper30 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper31 =null;

        ObjcParser.directives_return directives32 =null;

        ObjcParser.define_declaration_return define_declaration33 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper34 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper35 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper36 =null;

        ObjcParser.comments_return comments37 =null;


        Object char_literal38_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 130 && LA6_1 <= 131)) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==118) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==116||LA6_1==119||LA6_1==121||LA6_1==136||LA6_1==176) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 123:
            case 127:
                {
                alt6=2;
                }
                break;
            case 153:
            case 167:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 209:
                {
                alt6=5;
                }
                break;
            case 205:
                {
                alt6=6;
                }
                break;
            case 118:
            case 171:
            case 181:
            case 182:
            case 185:
            case 190:
            case 196:
            case 199:
            case 200:
            case 201:
            case 202:
            case 204:
            case 206:
            case 210:
            case 211:
            case 212:
                {
                alt6=7;
                }
                break;
            case M_C_LIT:
            case S_C_LIT:
                {
                alt6=8;
                }
                break;
            case 135:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body772);
                    classical_method_call_wrapper30=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper30.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body778);
                    implementation_method_wrapper31=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper31.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body784);
                    directives32=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives32.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body790);
                    define_declaration33=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration33.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body795);
                    typedef_declaration_wrapper34=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper34.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body800);
                    static_declaration_wrapper35=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper35.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body806);
                    variable_declaration_wrapper36=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper36.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:178:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body812);
                    comments37=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments37.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:179:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal38=(Token)match(input,135,FOLLOW_135_in_implementation_body817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal38_tree = 
                    (Object)adaptor.create(char_literal38)
                    ;
                    adaptor.addChild(root_0, char_literal38_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize39 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives828);
            synthesize39=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize39.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal40=null;
        Token string_literal41=null;
        Token ID42=null;
        Token char_literal43=null;
        Token char_literal45=null;
        ObjcParser.name_return name44 =null;


        Object string_literal40_tree=null;
        Object string_literal41_tree=null;
        Object ID42_tree=null;
        Object char_literal43_tree=null;
        Object char_literal45_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==167) ) {
                alt7=1;
            }
            else if ( (LA7_0==153) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:5: '@synthesize'
                    {
                    string_literal40=(Token)match(input,167,FOLLOW_167_in_synthesize850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_167.add(string_literal40);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:21: '@dynamic'
                    {
                    string_literal41=(Token)match(input,153,FOLLOW_153_in_synthesize854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_153.add(string_literal41);


                    }
                    break;

            }


            ID42=(Token)match(input,ID,FOLLOW_ID_in_synthesize858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID42);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==140) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:38: '=' name
                    {
                    char_literal43=(Token)match(input,140,FOLLOW_140_in_synthesize861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal43);


                    pushFollow(FOLLOW_name_in_synthesize863);
                    name44=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name44.getTree());

                    }
                    break;

            }


            char_literal45=(Token)match(input,135,FOLLOW_135_in_synthesize867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal45);


            // AST REWRITE
            // elements: ID, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;
        ObjcParser.field_declaration_return field_declaration47 =null;


        Object string_literal46_tree=null;
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:4: 'static' field_declaration
            {
            string_literal46=(Token)match(input,205,FOLLOW_205_in_static_declaration_wrapper891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_205.add(string_literal46);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper893);
            field_declaration47=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration47.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 191:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:1: block_call_predicate : ( '^(' | '^' ID '(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal48=null;
        Token char_literal49=null;
        Token ID50=null;
        Token char_literal51=null;
        Token char_literal52=null;
        Token char_literal53=null;

        Object string_literal48_tree=null;
        Object char_literal49_tree=null;
        Object ID50_tree=null;
        Object char_literal51_tree=null;
        Object char_literal52_tree=null;
        Object char_literal53_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:3: ( '^(' | '^' ID '(' | ( '^' '{' ) )
            int alt9=3;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==180) ) {
                alt9=1;
            }
            else if ( (LA9_0==179) ) {
                int LA9_2 = input.LA(2);

                if ( (LA9_2==ID) ) {
                    alt9=2;
                }
                else if ( (LA9_2==214) ) {
                    alt9=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal48=(Token)match(input,180,FOLLOW_180_in_block_call_predicate913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal48_tree = 
                    (Object)adaptor.create(string_literal48)
                    ;
                    adaptor.addChild(root_0, string_literal48_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:196:5: '^' ID '('
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal49=(Token)match(input,179,FOLLOW_179_in_block_call_predicate919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    ID50=(Token)match(input,ID,FOLLOW_ID_in_block_call_predicate921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID50_tree = 
                    (Object)adaptor.create(ID50)
                    ;
                    adaptor.addChild(root_0, ID50_tree);
                    }

                    char_literal51=(Token)match(input,118,FOLLOW_118_in_block_call_predicate923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal51_tree = 
                    (Object)adaptor.create(char_literal51)
                    ;
                    adaptor.addChild(root_0, char_literal51_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:6: '^' '{'
                    {
                    char_literal52=(Token)match(input,179,FOLLOW_179_in_block_call_predicate930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal52_tree = 
                    (Object)adaptor.create(char_literal52)
                    ;
                    adaptor.addChild(root_0, char_literal52_tree);
                    }

                    char_literal53=(Token)match(input,214,FOLLOW_214_in_block_call_predicate932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal53_tree = 
                    (Object)adaptor.create(char_literal53)
                    ;
                    adaptor.addChild(root_0, char_literal53_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_type_decl_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_type_decl_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:200:1: block_type_decl_predicate : type_dec ( '(^' ')' ) ;
    public final ObjcParser.block_type_decl_predicate_return block_type_decl_predicate() throws RecognitionException {
        ObjcParser.block_type_decl_predicate_return retval = new ObjcParser.block_type_decl_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal55=null;
        Token char_literal56=null;
        ObjcParser.type_dec_return type_dec54 =null;


        Object string_literal55_tree=null;
        Object char_literal56_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( type_dec ( '(^' ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:7: type_dec ( '(^' ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_in_block_type_decl_predicate948);
            type_dec54=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec54.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:16: ( '(^' ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:17: '(^' ')'
            {
            string_literal55=(Token)match(input,119,FOLLOW_119_in_block_type_decl_predicate951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal55_tree = 
            (Object)adaptor.create(string_literal55)
            ;
            adaptor.addChild(root_0, string_literal55_tree);
            }

            char_literal56=(Token)match(input,120,FOLLOW_120_in_block_type_decl_predicate952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal56_tree = 
            (Object)adaptor.create(char_literal56)
            ;
            adaptor.addChild(root_0, char_literal56_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_type_decl_predicate"


    public static class block_type_decl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_type_decl"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:1: block_type_decl : type_dec ( '(^' ')' '(' ( block_params )? ')' ) ;
    public final ObjcParser.block_type_decl_return block_type_decl() throws RecognitionException {
        ObjcParser.block_type_decl_return retval = new ObjcParser.block_type_decl_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal58=null;
        Token char_literal59=null;
        Token char_literal60=null;
        Token char_literal62=null;
        ObjcParser.type_dec_return type_dec57 =null;

        ObjcParser.block_params_return block_params61 =null;


        Object string_literal58_tree=null;
        Object char_literal59_tree=null;
        Object char_literal60_tree=null;
        Object char_literal62_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:5: ( type_dec ( '(^' ')' '(' ( block_params )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:7: type_dec ( '(^' ')' '(' ( block_params )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_in_block_type_decl972);
            type_dec57=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec57.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:16: ( '(^' ')' '(' ( block_params )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:17: '(^' ')' '(' ( block_params )? ')'
            {
            string_literal58=(Token)match(input,119,FOLLOW_119_in_block_type_decl975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal58_tree = 
            (Object)adaptor.create(string_literal58)
            ;
            adaptor.addChild(root_0, string_literal58_tree);
            }

            char_literal59=(Token)match(input,120,FOLLOW_120_in_block_type_decl976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal59_tree = 
            (Object)adaptor.create(char_literal59)
            ;
            adaptor.addChild(root_0, char_literal59_tree);
            }

            char_literal60=(Token)match(input,118,FOLLOW_118_in_block_type_decl977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal60_tree = 
            (Object)adaptor.create(char_literal60)
            ;
            adaptor.addChild(root_0, char_literal60_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:28: ( block_params )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID||LA10_0==118||LA10_0==171||(LA10_0 >= 181 && LA10_0 <= 182)||LA10_0==185||LA10_0==190||LA10_0==196||(LA10_0 >= 199 && LA10_0 <= 202)||LA10_0==204||LA10_0==206||(LA10_0 >= 210 && LA10_0 <= 212)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:28: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_type_decl979);
                    block_params61=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params61.getTree());

                    }
                    break;

            }


            char_literal62=(Token)match(input,120,FOLLOW_120_in_block_type_decl982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal62_tree = 
            (Object)adaptor.create(char_literal62)
            ;
            adaptor.addChild(root_0, char_literal62_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_type_decl"


    public static class block_decl_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_decl_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:208:1: block_decl_predicate : type_dec ( '(^' ID ')' ) ;
    public final ObjcParser.block_decl_predicate_return block_decl_predicate() throws RecognitionException {
        ObjcParser.block_decl_predicate_return retval = new ObjcParser.block_decl_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal64=null;
        Token ID65=null;
        Token char_literal66=null;
        ObjcParser.type_dec_return type_dec63 =null;


        Object string_literal64_tree=null;
        Object ID65_tree=null;
        Object char_literal66_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:5: ( type_dec ( '(^' ID ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:7: type_dec ( '(^' ID ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_in_block_decl_predicate1004);
            type_dec63=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec63.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:16: ( '(^' ID ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:17: '(^' ID ')'
            {
            string_literal64=(Token)match(input,119,FOLLOW_119_in_block_decl_predicate1007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal64_tree = 
            (Object)adaptor.create(string_literal64)
            ;
            adaptor.addChild(root_0, string_literal64_tree);
            }

            ID65=(Token)match(input,ID,FOLLOW_ID_in_block_decl_predicate1009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID65_tree = 
            (Object)adaptor.create(ID65)
            ;
            adaptor.addChild(root_0, ID65_tree);
            }

            char_literal66=(Token)match(input,120,FOLLOW_120_in_block_decl_predicate1011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = 
            (Object)adaptor.create(char_literal66)
            ;
            adaptor.addChild(root_0, char_literal66_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_decl_predicate"


    public static class block_decl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_decl"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:212:1: block_decl : type_dec_wrapper ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) ) ;
    public final ObjcParser.block_decl_return block_decl() throws RecognitionException {
        ObjcParser.block_decl_return retval = new ObjcParser.block_decl_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal68=null;
        Token char_literal70=null;
        Token char_literal71=null;
        Token char_literal73=null;
        Token char_literal74=null;
        Token char_literal76=null;
        ObjcParser.type_dec_wrapper_return type_dec_wrapper67 =null;

        ObjcParser.field_name_return field_name69 =null;

        ObjcParser.block_params_return block_params72 =null;

        ObjcParser.block_call_return block_call75 =null;


        Object string_literal68_tree=null;
        Object char_literal70_tree=null;
        Object char_literal71_tree=null;
        Object char_literal73_tree=null;
        Object char_literal74_tree=null;
        Object char_literal76_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:5: ( type_dec_wrapper ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:7: type_dec_wrapper ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_wrapper_in_block_decl1029);
            type_dec_wrapper67=type_dec_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_wrapper67.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:24: ( '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:25: '(^' field_name ')' '(' ( block_params )? ')' ( ( '=' block_call ) | ';' )
            {
            string_literal68=(Token)match(input,119,FOLLOW_119_in_block_decl1032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal68_tree = 
            (Object)adaptor.create(string_literal68)
            ;
            adaptor.addChild(root_0, string_literal68_tree);
            }

            pushFollow(FOLLOW_field_name_in_block_decl1034);
            field_name69=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name69.getTree());

            char_literal70=(Token)match(input,120,FOLLOW_120_in_block_decl1036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal70_tree = 
            (Object)adaptor.create(char_literal70)
            ;
            adaptor.addChild(root_0, char_literal70_tree);
            }

            char_literal71=(Token)match(input,118,FOLLOW_118_in_block_decl1037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal71_tree = 
            (Object)adaptor.create(char_literal71)
            ;
            adaptor.addChild(root_0, char_literal71_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:48: ( block_params )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ID||LA11_0==118||LA11_0==171||(LA11_0 >= 181 && LA11_0 <= 182)||LA11_0==185||LA11_0==190||LA11_0==196||(LA11_0 >= 199 && LA11_0 <= 202)||LA11_0==204||LA11_0==206||(LA11_0 >= 210 && LA11_0 <= 212)) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:48: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_decl1039);
                    block_params72=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params72.getTree());

                    }
                    break;

            }


            char_literal73=(Token)match(input,120,FOLLOW_120_in_block_decl1042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal73_tree = 
            (Object)adaptor.create(char_literal73)
            ;
            adaptor.addChild(root_0, char_literal73_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:66: ( ( '=' block_call ) | ';' )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==140) ) {
                alt12=1;
            }
            else if ( (LA12_0==135) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;

            }
            switch (alt12) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:67: ( '=' block_call )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:67: ( '=' block_call )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:68: '=' block_call
                    {
                    char_literal74=(Token)match(input,140,FOLLOW_140_in_block_decl1046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal74_tree = 
                    (Object)adaptor.create(char_literal74)
                    ;
                    adaptor.addChild(root_0, char_literal74_tree);
                    }

                    pushFollow(FOLLOW_block_call_in_block_decl1048);
                    block_call75=block_call();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call75.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:86: ';'
                    {
                    char_literal76=(Token)match(input,135,FOLLOW_135_in_block_decl1053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal76_tree = 
                    (Object)adaptor.create(char_literal76)
                    ;
                    adaptor.addChild(root_0, char_literal76_tree);
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_decl"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call77 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper1074);
            block_call77=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call77.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper | ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal78=null;
        Token char_literal79=null;
        Token char_literal81=null;
        Token string_literal82=null;
        Token char_literal84=null;
        Token char_literal86=null;
        Token ID87=null;
        Token char_literal88=null;
        Token char_literal90=null;
        ObjcParser.block_internal_return block_internal80 =null;

        ObjcParser.block_params_return block_params83 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper85 =null;

        ObjcParser.block_params_return block_params89 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper91 =null;


        Object char_literal78_tree=null;
        Object char_literal79_tree=null;
        Object char_literal81_tree=null;
        Object string_literal82_tree=null;
        Object char_literal84_tree=null;
        Object char_literal86_tree=null;
        Object ID87_tree=null;
        Object char_literal88_tree=null;
        Object char_literal90_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_214=new RewriteRuleTokenStream(adaptor,"token 214");
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper | ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt16=3;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==179) ) {
                int LA16_1 = input.LA(2);

                if ( (LA16_1==214) ) {
                    alt16=1;
                }
                else if ( (LA16_1==ID) ) {
                    alt16=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 16, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA16_0==180) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;

            }
            switch (alt16) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal78=(Token)match(input,179,FOLLOW_179_in_block_call1096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(char_literal78);


                    char_literal79=(Token)match(input,214,FOLLOW_214_in_block_call1098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_214.add(char_literal79);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:14: ( block_internal )*
                    loop13:
                    do {
                        int alt13=2;
                        int LA13_0 = input.LA(1);

                        if ( (LA13_0==ID||LA13_0==M_C_LIT||LA13_0==S_C_LIT||LA13_0==116||LA13_0==118||LA13_0==121||LA13_0==135||LA13_0==150||LA13_0==166||(LA13_0 >= 168 && LA13_0 <= 171)||LA13_0==176||(LA13_0 >= 181 && LA13_0 <= 183)||(LA13_0 >= 185 && LA13_0 <= 186)||(LA13_0 >= 188 && LA13_0 <= 191)||(LA13_0 >= 194 && LA13_0 <= 197)||(LA13_0 >= 199 && LA13_0 <= 207)||(LA13_0 >= 210 && LA13_0 <= 214)) ) {
                            alt13=1;
                        }


                        switch (alt13) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call1100);
                    	    block_internal80=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal80.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop13;
                        }
                    } while (true);


                    char_literal81=(Token)match(input,218,FOLLOW_218_in_block_call1103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_218.add(char_literal81);


                    }


                    // AST REWRITE
                    // elements: 218, block_internal, 214
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 221:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_214.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_218.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:6: '^(' ( block_params )? ')'
                    {
                    string_literal82=(Token)match(input,180,FOLLOW_180_in_block_call1124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal82_tree = 
                    (Object)adaptor.create(string_literal82)
                    ;
                    adaptor.addChild(root_0, string_literal82_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:11: ( block_params )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==ID||LA14_0==118||LA14_0==171||(LA14_0 >= 181 && LA14_0 <= 182)||LA14_0==185||LA14_0==190||LA14_0==196||(LA14_0 >= 199 && LA14_0 <= 202)||LA14_0==204||LA14_0==206||(LA14_0 >= 210 && LA14_0 <= 212)) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call1126);
                            block_params83=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params83.getTree());

                            }
                            break;

                    }


                    char_literal84=(Token)match(input,120,FOLLOW_120_in_block_call1129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal84_tree = 
                    (Object)adaptor.create(char_literal84)
                    ;
                    adaptor.addChild(root_0, char_literal84_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call1132);
                    block_multiline_wrapper85=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper85.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:5: ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:5: ( '^' ID '(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:6: '^' ID '(' ( block_params )? ')'
                    {
                    char_literal86=(Token)match(input,179,FOLLOW_179_in_block_call1140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal86_tree = 
                    (Object)adaptor.create(char_literal86)
                    ;
                    adaptor.addChild(root_0, char_literal86_tree);
                    }

                    ID87=(Token)match(input,ID,FOLLOW_ID_in_block_call1142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID87_tree = 
                    (Object)adaptor.create(ID87)
                    ;
                    adaptor.addChild(root_0, ID87_tree);
                    }

                    char_literal88=(Token)match(input,118,FOLLOW_118_in_block_call1144); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal88_tree = 
                    (Object)adaptor.create(char_literal88)
                    ;
                    adaptor.addChild(root_0, char_literal88_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:17: ( block_params )?
                    int alt15=2;
                    int LA15_0 = input.LA(1);

                    if ( (LA15_0==ID||LA15_0==118||LA15_0==171||(LA15_0 >= 181 && LA15_0 <= 182)||LA15_0==185||LA15_0==190||LA15_0==196||(LA15_0 >= 199 && LA15_0 <= 202)||LA15_0==204||LA15_0==206||(LA15_0 >= 210 && LA15_0 <= 212)) ) {
                        alt15=1;
                    }
                    switch (alt15) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:17: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call1146);
                            block_params89=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params89.getTree());

                            }
                            break;

                    }


                    char_literal90=(Token)match(input,120,FOLLOW_120_in_block_call1149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal90_tree = 
                    (Object)adaptor.create(char_literal90)
                    ;
                    adaptor.addChild(root_0, char_literal90_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call1152);
                    block_multiline_wrapper91=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper91.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call92 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper1166);
            synchronized_call92=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call92.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal93=null;
        Token char_literal94=null;
        Token char_literal96=null;
        ObjcParser.element_value_return element_value95 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper97 =null;


        Object string_literal93_tree=null;
        Object char_literal94_tree=null;
        Object char_literal96_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal93=(Token)match(input,166,FOLLOW_166_in_synchronized_call1189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal93_tree = 
            (Object)adaptor.create(string_literal93)
            ;
            adaptor.addChild(root_0, string_literal93_tree);
            }

            char_literal94=(Token)match(input,118,FOLLOW_118_in_synchronized_call1191); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal94_tree = 
            (Object)adaptor.create(char_literal94)
            ;
            adaptor.addChild(root_0, char_literal94_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1193);
            element_value95=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value95.getTree());

            char_literal96=(Token)match(input,120,FOLLOW_120_in_synchronized_call1195); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal96_tree = 
            (Object)adaptor.create(char_literal96)
            ;
            adaptor.addChild(root_0, char_literal96_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1197);
            block_multiline_wrapper97=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper97.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal99=null;
        ObjcParser.classical_param_return classical_param98 =null;

        ObjcParser.classical_param_return classical_param100 =null;


        Object char_literal99_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1213);
            classical_param98=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param98.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:22: ( ',' classical_param )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==126) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:23: ',' classical_param
            	    {
            	    char_literal99=(Token)match(input,126,FOLLOW_126_in_block_params1216); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal99);


            	    pushFollow(FOLLOW_classical_param_in_block_params1218);
            	    classical_param100=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param100.getTree());

            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline101 =null;

        ObjcParser.block_singleline_return block_singleline102 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==214) ) {
                alt18=1;
            }
            else if ( (LA18_0==ID||LA18_0==M_C_LIT||LA18_0==S_C_LIT||LA18_0==116||LA18_0==118||LA18_0==121||LA18_0==135||LA18_0==166||LA18_0==170||LA18_0==176||LA18_0==183||LA18_0==186||(LA18_0 >= 188 && LA18_0 <= 189)||LA18_0==191||(LA18_0 >= 194 && LA18_0 <= 195)||LA18_0==197||LA18_0==203||LA18_0==207||LA18_0==213) ) {
                alt18=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 18, 0, input);

                throw nvae;

            }
            switch (alt18) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1247);
                    block_multiline101=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline101.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 240:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1259);
                    block_singleline102=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline102.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 241:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:1: block_multiline : '{' ( block_internal_macro )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal103=null;
        Token char_literal105=null;
        ObjcParser.block_internal_macro_return block_internal_macro104 =null;


        Object char_literal103_tree=null;
        Object char_literal105_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:2: ( '{' ( block_internal_macro )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:3: '{' ( block_internal_macro )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal103=(Token)match(input,214,FOLLOW_214_in_block_multiline1281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal103_tree = 
            (Object)adaptor.create(char_literal103)
            ;
            adaptor.addChild(root_0, char_literal103_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: ( block_internal_macro )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==ID||LA19_0==M_C_LIT||LA19_0==S_C_LIT||LA19_0==116||LA19_0==118||LA19_0==121||LA19_0==135||LA19_0==150||LA19_0==166||(LA19_0 >= 168 && LA19_0 <= 171)||(LA19_0 >= 176 && LA19_0 <= 177)||(LA19_0 >= 181 && LA19_0 <= 183)||(LA19_0 >= 185 && LA19_0 <= 186)||(LA19_0 >= 188 && LA19_0 <= 191)||(LA19_0 >= 194 && LA19_0 <= 197)||(LA19_0 >= 199 && LA19_0 <= 207)||(LA19_0 >= 210 && LA19_0 <= 214)) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: block_internal_macro
            	    {
            	    pushFollow(FOLLOW_block_internal_macro_in_block_multiline1286);
            	    block_internal_macro104=block_internal_macro();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal_macro104.getTree());

            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);


            char_literal105=(Token)match(input,218,FOLLOW_218_in_block_multiline1293); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal105_tree = 
            (Object)adaptor.create(char_literal105)
            ;
            adaptor.addChild(root_0, char_literal105_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline106 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1305);
            block_multiline106=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline106.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 252:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline107 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1326);
            block_singleline107=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline107.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | externC_stmt | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal118=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper108 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper109 =null;

        ObjcParser.externC_stmt_return externC_stmt110 =null;

        ObjcParser.do_stmt_return do_stmt111 =null;

        ObjcParser.if_stmt_return if_stmt112 =null;

        ObjcParser.else_stmt_return else_stmt113 =null;

        ObjcParser.switch_stmt_return switch_stmt114 =null;

        ObjcParser.return_stmt_return return_stmt115 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper116 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper117 =null;

        ObjcParser.break_stmt_return break_stmt119 =null;

        ObjcParser.continue_stmt_return continue_stmt120 =null;

        ObjcParser.goto_stmt_return goto_stmt121 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper122 =null;

        ObjcParser.method_msg_return method_msg123 =null;

        ObjcParser.access_wrapper_return access_wrapper124 =null;

        ObjcParser.name_return name125 =null;

        ObjcParser.op_assign_return op_assign126 =null;

        ObjcParser.element_value_return element_value127 =null;

        ObjcParser.comments_return comments128 =null;


        Object char_literal118_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | externC_stmt | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments )
            int alt22=17;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA22_1 = input.LA(2);

                if ( ((LA22_1 >= 130 && LA22_1 <= 131)) ) {
                    int LA22_22 = input.LA(3);

                    if ( (LA22_22==ID) ) {
                        int LA22_26 = input.LA(4);

                        if ( (LA22_26==118) && (synpred3_Objc())) {
                            alt22=1;
                        }
                        else if ( ((LA22_26 >= 130 && LA22_26 <= 131)) ) {
                            int LA22_30 = input.LA(5);

                            if ( (synpred3_Objc()) ) {
                                alt22=1;
                            }
                            else if ( (true) ) {
                                alt22=15;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 22, 30, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA22_26==117||LA22_26==122||LA22_26==125||LA22_26==129||LA22_26==133||LA22_26==138||LA22_26==140||LA22_26==145||LA22_26==176||LA22_26==216) ) {
                            alt22=15;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 22, 26, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA22_22==116||LA22_22==121) ) {
                        alt22=15;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 22, 22, input);

                        throw nvae;

                    }
                }
                else if ( (LA22_1==118) && (synpred3_Objc())) {
                    alt22=1;
                }
                else if ( (LA22_1==117||LA22_1==122||LA22_1==125||LA22_1==129||LA22_1==133||LA22_1==138||LA22_1==140||LA22_1==145||LA22_1==176||LA22_1==216) ) {
                    alt22=15;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 22, 1, input);

                    throw nvae;

                }
                }
                break;
            case 166:
                {
                alt22=2;
                }
                break;
            case 191:
                {
                alt22=3;
                }
                break;
            case 188:
                {
                alt22=4;
                }
                break;
            case 197:
                {
                alt22=5;
                }
                break;
            case 189:
                {
                alt22=6;
                }
                break;
            case 207:
                {
                alt22=7;
                }
                break;
            case 203:
                {
                alt22=8;
                }
                break;
            case 194:
                {
                alt22=9;
                }
                break;
            case 213:
                {
                alt22=10;
                }
                break;
            case 135:
                {
                alt22=11;
                }
                break;
            case 183:
                {
                alt22=12;
                }
                break;
            case 186:
                {
                alt22=13;
                }
                break;
            case 195:
                {
                alt22=14;
                }
                break;
            case 116:
            case 118:
            case 121:
                {
                alt22=15;
                }
                break;
            case 170:
            case 176:
                {
                alt22=16;
                }
                break;
            case M_C_LIT:
            case S_C_LIT:
                {
                alt22=17;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }

            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1353);
                    classical_method_call_wrapper108=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper108.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:261:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1358);
                    synchronized_call_wrapper109=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper109.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:4: externC_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_externC_stmt_in_block_singleline1363);
                    externC_stmt110=externC_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, externC_stmt110.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1368);
                    do_stmt111=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt111.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1373);
                    if_stmt112=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt112.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1378);
                    else_stmt113=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt113.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1383);
                    switch_stmt114=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt114.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1388);
                    return_stmt115=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt115.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1393);
                    for_stmt_wrapper116=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper116.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1398);
                    while_stmt_wrapper117=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper117.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal118=(Token)match(input,135,FOLLOW_135_in_block_singleline1403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal118_tree = 
                    (Object)adaptor.create(char_literal118)
                    ;
                    adaptor.addChild(root_0, char_literal118_tree);
                    }

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1409);
                    break_stmt119=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt119.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1415);
                    continue_stmt120=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt120.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1420);
                    goto_stmt121=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt121.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1426);
                    variable_assignment_wrapper122=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper122.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:4: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1431);
                    method_msg123=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg123.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:15: ( ( access_wrapper name )* op_assign element_value )?
                    int alt21=2;
                    alt21 = dfa21.predict(input);
                    switch (alt21) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:16: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:16: ( access_wrapper name )*
                            loop20:
                            do {
                                int alt20=2;
                                int LA20_0 = input.LA(1);

                                if ( ((LA20_0 >= 130 && LA20_0 <= 131)) ) {
                                    alt20=1;
                                }


                                switch (alt20) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:17: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_singleline1435);
                            	    access_wrapper124=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper124.getTree());

                            	    pushFollow(FOLLOW_name_in_block_singleline1437);
                            	    name125=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name125.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop20;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_singleline1441);
                            op_assign126=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign126.getTree());

                            pushFollow(FOLLOW_element_value_in_block_singleline1443);
                            element_value127=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value127.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:276:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1451);
                    comments128=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments128.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_macro_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_macro"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:1: block_internal_macro : ( '\\\\' | block_internal );
    public final ObjcParser.block_internal_macro_return block_internal_macro() throws RecognitionException {
        ObjcParser.block_internal_macro_return retval = new ObjcParser.block_internal_macro_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal129=null;
        ObjcParser.block_internal_return block_internal130 =null;


        Object char_literal129_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:3: ( '\\\\' | block_internal )
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==177) ) {
                alt23=1;
            }
            else if ( (LA23_0==ID||LA23_0==M_C_LIT||LA23_0==S_C_LIT||LA23_0==116||LA23_0==118||LA23_0==121||LA23_0==135||LA23_0==150||LA23_0==166||(LA23_0 >= 168 && LA23_0 <= 171)||LA23_0==176||(LA23_0 >= 181 && LA23_0 <= 183)||(LA23_0 >= 185 && LA23_0 <= 186)||(LA23_0 >= 188 && LA23_0 <= 191)||(LA23_0 >= 194 && LA23_0 <= 197)||(LA23_0 >= 199 && LA23_0 <= 207)||(LA23_0 >= 210 && LA23_0 <= 214)) ) {
                alt23=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;

            }
            switch (alt23) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:5: '\\\\'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal129=(Token)match(input,177,FOLLOW_177_in_block_internal_macro1463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal129_tree = 
                    (Object)adaptor.create(char_literal129)
                    ;
                    adaptor.addChild(root_0, char_literal129_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:281:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_block_internal_macro1469);
                    block_internal130=block_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal130.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_macro"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | externC_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | autorelease_stmt | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal148=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper131 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper132 =null;

        ObjcParser.increment_decrement_return increment_decrement133 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper134 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper135 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper136 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper137 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper138 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper139 =null;

        ObjcParser.do_stmt_return do_stmt140 =null;

        ObjcParser.externC_stmt_return externC_stmt141 =null;

        ObjcParser.if_stmt_return if_stmt142 =null;

        ObjcParser.else_stmt_return else_stmt143 =null;

        ObjcParser.switch_stmt_return switch_stmt144 =null;

        ObjcParser.return_stmt_return return_stmt145 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper146 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper147 =null;

        ObjcParser.break_stmt_return break_stmt149 =null;

        ObjcParser.continue_stmt_return continue_stmt150 =null;

        ObjcParser.goto_stmt_return goto_stmt151 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper152 =null;

        ObjcParser.method_msg_return method_msg153 =null;

        ObjcParser.access_wrapper_return access_wrapper154 =null;

        ObjcParser.name_return name155 =null;

        ObjcParser.op_assign_return op_assign156 =null;

        ObjcParser.element_value_return element_value157 =null;

        ObjcParser.autorelease_stmt_return autorelease_stmt158 =null;

        ObjcParser.comments_return comments159 =null;


        Object char_literal148_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | externC_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | autorelease_stmt | comments )
            int alt26=24;
            alt26 = dfa26.predict(input);
            switch (alt26) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1489);
                    classical_method_call_wrapper131=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper131.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1502);
                    object_access_simple_wrapper132=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper132.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1504);
                    increment_decrement133=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement133.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1518);
                    variable_assignment_wrapper134=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper134.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1524);
                    variable_declaration_wrapper135=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper135.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1530);
                    synchronized_call_wrapper136=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper136.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1536);
                    try_stmt_wrapper137=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper137.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1541);
                    throw_stmt_wrapper138=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper138.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1546);
                    static_declaration_wrapper139=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper139.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1551);
                    do_stmt140=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt140.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:5: externC_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_externC_stmt_in_block_internal1557);
                    externC_stmt141=externC_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, externC_stmt141.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1562);
                    if_stmt142=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt142.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1567);
                    else_stmt143=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt143.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1572);
                    switch_stmt144=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt144.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1577);
                    return_stmt145=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt145.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1582);
                    for_stmt_wrapper146=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper146.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1587);
                    while_stmt_wrapper147=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper147.getTree());

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal148=(Token)match(input,135,FOLLOW_135_in_block_internal1592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal148_tree = 
                    (Object)adaptor.create(char_literal148)
                    ;
                    adaptor.addChild(root_0, char_literal148_tree);
                    }

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1597);
                    break_stmt149=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt149.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1602);
                    continue_stmt150=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt150.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1607);
                    goto_stmt151=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt151.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1612);
                    block_multiline_wrapper152=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper152.getTree());

                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:5: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1618);
                    method_msg153=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg153.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:16: ( ( access_wrapper name )* op_assign element_value )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==117||LA25_0==122||LA25_0==125||(LA25_0 >= 129 && LA25_0 <= 131)||LA25_0==133||LA25_0==138||LA25_0==140||LA25_0==145||LA25_0==216) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:17: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:17: ( access_wrapper name )*
                            loop24:
                            do {
                                int alt24=2;
                                int LA24_0 = input.LA(1);

                                if ( ((LA24_0 >= 130 && LA24_0 <= 131)) ) {
                                    alt24=1;
                                }


                                switch (alt24) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:306:18: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_internal1622);
                            	    access_wrapper154=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper154.getTree());

                            	    pushFollow(FOLLOW_name_in_block_internal1624);
                            	    name155=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name155.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop24;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_internal1628);
                            op_assign156=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign156.getTree());

                            pushFollow(FOLLOW_element_value_in_block_internal1630);
                            element_value157=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value157.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 23 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:307:5: autorelease_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_autorelease_stmt_in_block_internal1638);
                    autorelease_stmt158=autorelease_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, autorelease_stmt158.getTree());

                    }
                    break;
                case 24 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1644);
                    comments159=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments159.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:311:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal160=null;
        Token char_literal161=null;
        Token ID162=null;
        Token char_literal163=null;

        Object string_literal160_tree=null;
        Object char_literal161_tree=null;
        Object ID162_tree=null;
        Object char_literal163_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:5: 'goto' ':' ID ';'
            {
            string_literal160=(Token)match(input,195,FOLLOW_195_in_goto_stmt1656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_195.add(string_literal160);


            char_literal161=(Token)match(input,134,FOLLOW_134_in_goto_stmt1658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal161);


            ID162=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID162);


            char_literal163=(Token)match(input,135,FOLLOW_135_in_goto_stmt1662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal163);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 312:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:315:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt164 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1685);
            while_stmt164=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt164.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 316:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:319:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal165=null;
        Token char_literal166=null;
        Token char_literal168=null;
        ObjcParser.element_value_return element_value167 =null;

        ObjcParser.block_return block169 =null;


        Object string_literal165_tree=null;
        Object char_literal166_tree=null;
        Object char_literal168_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal165=(Token)match(input,213,FOLLOW_213_in_while_stmt1708); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal165_tree = 
            (Object)adaptor.create(string_literal165)
            ;
            adaptor.addChild(root_0, string_literal165_tree);
            }

            char_literal166=(Token)match(input,118,FOLLOW_118_in_while_stmt1710); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal166_tree = 
            (Object)adaptor.create(char_literal166)
            ;
            adaptor.addChild(root_0, char_literal166_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1712);
            element_value167=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value167.getTree());

            char_literal168=(Token)match(input,120,FOLLOW_120_in_while_stmt1714); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal168_tree = 
            (Object)adaptor.create(char_literal168)
            ;
            adaptor.addChild(root_0, char_literal168_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1716);
            block169=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block169.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:323:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal170=null;
        ObjcParser.element_value_return element_value171 =null;


        Object string_literal170_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:5: 'in' element_value
            {
            string_literal170=(Token)match(input,198,FOLLOW_198_in_for_in_stmt1731); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal170);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1733);
            element_value171=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value171.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 324:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:327:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal172=null;
        Token char_literal174=null;
        ObjcParser.element_value_return element_value173 =null;

        ObjcParser.element_value_return element_value175 =null;


        Object char_literal172_tree=null;
        Object char_literal174_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal172=(Token)match(input,135,FOLLOW_135_in_for_classic_stmt1756); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal172_tree = 
            (Object)adaptor.create(char_literal172)
            ;
            adaptor.addChild(root_0, char_literal172_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:9: ( element_value )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==C_LIT||LA27_0==ID||LA27_0==NR_LIT||LA27_0==STR_LIT||LA27_0==111||LA27_0==116||LA27_0==118||LA27_0==121||LA27_0==124||(LA27_0 >= 127 && LA27_0 <= 128)||(LA27_0 >= 148 && LA27_0 <= 149)||LA27_0==162||LA27_0==165||LA27_0==170||LA27_0==173||(LA27_0 >= 175 && LA27_0 <= 176)||(LA27_0 >= 179 && LA27_0 <= 180)||LA27_0==193||LA27_0==208||LA27_0==219) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1758);
                    element_value173=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value173.getTree());

                    }
                    break;

            }


            char_literal174=(Token)match(input,135,FOLLOW_135_in_for_classic_stmt1761); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal174_tree = 
            (Object)adaptor.create(char_literal174)
            ;
            adaptor.addChild(root_0, char_literal174_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:28: ( element_value )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==C_LIT||LA28_0==ID||LA28_0==NR_LIT||LA28_0==STR_LIT||LA28_0==111||LA28_0==116||LA28_0==118||LA28_0==121||LA28_0==124||(LA28_0 >= 127 && LA28_0 <= 128)||(LA28_0 >= 148 && LA28_0 <= 149)||LA28_0==162||LA28_0==165||LA28_0==170||LA28_0==173||(LA28_0 >= 175 && LA28_0 <= 176)||(LA28_0 >= 179 && LA28_0 <= 180)||LA28_0==193||LA28_0==208||LA28_0==219) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1763);
                    element_value175=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value175.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( ';' )=> for_classic_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal178=null;
        Token char_literal182=null;
        Token char_literal185=null;
        Token char_literal189=null;
        Token char_literal196=null;
        ObjcParser.name_return name176 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt177 =null;

        ObjcParser.block_return block179 =null;

        ObjcParser.name_return name180 =null;

        ObjcParser.for_in_stmt_return for_in_stmt181 =null;

        ObjcParser.block_return block183 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt184 =null;

        ObjcParser.block_return block186 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper187 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt188 =null;

        ObjcParser.block_return block190 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple191 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper192 =null;

        ObjcParser.element_value_return element_value193 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt194 =null;

        ObjcParser.for_in_stmt_return for_in_stmt195 =null;

        ObjcParser.block_return block197 =null;


        Object char_literal178_tree=null;
        Object char_literal182_tree=null;
        Object char_literal185_tree=null;
        Object char_literal189_tree=null;
        Object char_literal196_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( ';' )=> for_classic_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt30=5;
            alt30 = dfa30.predict(input);
            switch (alt30) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1786);
                    name176=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name176.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1788);
                    for_classic_stmt177=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt177.getTree());

                    char_literal178=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal178_tree = 
                    (Object)adaptor.create(char_literal178)
                    ;
                    adaptor.addChild(root_0, char_literal178_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1792);
                    block179=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block179.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1805);
                    name180=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name180.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1807);
                    for_in_stmt181=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt181.getTree());

                    char_literal182=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal182_tree = 
                    (Object)adaptor.create(char_literal182)
                    ;
                    adaptor.addChild(root_0, char_literal182_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1811);
                    block183=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block183.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: ( ';' )=> for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1822);
                    for_classic_stmt184=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt184.getTree());

                    char_literal185=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1824); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal185_tree = 
                    (Object)adaptor.create(char_literal185)
                    ;
                    adaptor.addChild(root_0, char_literal185_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1826);
                    block186=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block186.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1840);
                    variable_assignment_wrapper187=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper187.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1842);
                    for_classic_stmt188=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt188.getTree());

                    char_literal189=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal189_tree = 
                    (Object)adaptor.create(char_literal189)
                    ;
                    adaptor.addChild(root_0, char_literal189_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1846);
                    block190=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block190.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1852);
                    field_declaration_simple191=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple191.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==117||LA29_0==122||LA29_0==125||LA29_0==129||LA29_0==133||LA29_0==138||LA29_0==140||LA29_0==145||LA29_0==216) ) {
                        alt29=1;
                    }
                    else if ( (LA29_0==198) ) {
                        alt29=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 29, 0, input);

                        throw nvae;

                    }
                    switch (alt29) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1856);
                            op_assign_wrapper192=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper192.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1858);
                            element_value193=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value193.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1860);
                            for_classic_stmt194=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt194.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1865);
                            for_in_stmt195=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt195.getTree());

                            }
                            break;

                    }


                    char_literal196=(Token)match(input,120,FOLLOW_120_in_for_stmt_body1868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal196_tree = 
                    (Object)adaptor.create(char_literal196)
                    ;
                    adaptor.addChild(root_0, char_literal196_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1870);
                    block197=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block197.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal198=null;
        Token char_literal199=null;
        ObjcParser.for_stmt_body_return for_stmt_body200 =null;


        Object string_literal198_tree=null;
        Object char_literal199_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal198=(Token)match(input,194,FOLLOW_194_in_for_stmt1883); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal198_tree = 
            (Object)adaptor.create(string_literal198)
            ;
            adaptor.addChild(root_0, string_literal198_tree);
            }

            char_literal199=(Token)match(input,118,FOLLOW_118_in_for_stmt1885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal199_tree = 
            (Object)adaptor.create(char_literal199)
            ;
            adaptor.addChild(root_0, char_literal199_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1887);
            for_stmt_body200=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body200.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt201 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1900);
            for_stmt201=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt201.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal202=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon203 =null;


        Object string_literal202_tree=null;
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:5: 'return' element_value_or_semicolon
            {
            string_literal202=(Token)match(input,203,FOLLOW_203_in_return_stmt1923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_203.add(string_literal202);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1925);
            element_value_or_semicolon203=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon203.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal204=null;
        Token char_literal205=null;
        Token char_literal207=null;
        Token char_literal208=null;
        Token char_literal210=null;
        ObjcParser.element_value_return element_value206 =null;

        ObjcParser.switch_body_return switch_body209 =null;


        Object string_literal204_tree=null;
        Object char_literal205_tree=null;
        Object char_literal207_tree=null;
        Object char_literal208_tree=null;
        Object char_literal210_tree=null;
        RewriteRuleTokenStream stream_214=new RewriteRuleTokenStream(adaptor,"token 214");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal204=(Token)match(input,207,FOLLOW_207_in_switch_stmt1948); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_207.add(string_literal204);


            char_literal205=(Token)match(input,118,FOLLOW_118_in_switch_stmt1950); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal205);


            pushFollow(FOLLOW_element_value_in_switch_stmt1952);
            element_value206=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value206.getTree());

            char_literal207=(Token)match(input,120,FOLLOW_120_in_switch_stmt1954); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal207);


            char_literal208=(Token)match(input,214,FOLLOW_214_in_switch_stmt1956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_214.add(char_literal208);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:41: ( switch_body )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ID||LA31_0==M_C_LIT||LA31_0==S_C_LIT||LA31_0==116||LA31_0==118||LA31_0==121||LA31_0==135||LA31_0==166||LA31_0==170||LA31_0==176||(LA31_0 >= 183 && LA31_0 <= 184)||(LA31_0 >= 186 && LA31_0 <= 189)||LA31_0==191||(LA31_0 >= 194 && LA31_0 <= 195)||LA31_0==197||LA31_0==203||LA31_0==207||(LA31_0 >= 213 && LA31_0 <= 214)) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1959);
            	    switch_body209=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body209.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }


            char_literal210=(Token)match(input,218,FOLLOW_218_in_switch_stmt1963); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_218.add(char_literal210);


            // AST REWRITE
            // elements: element_value, switch_body
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 352:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt211 =null;

        ObjcParser.default_stmt_return default_stmt212 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper213 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper214 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt32=4;
            switch ( input.LA(1) ) {
            case 184:
                {
                alt32=1;
                }
                break;
            case 187:
                {
                alt32=2;
                }
                break;
            case 214:
                {
                alt32=3;
                }
                break;
            case ID:
            case M_C_LIT:
            case S_C_LIT:
            case 116:
            case 118:
            case 121:
            case 135:
            case 166:
            case 170:
            case 176:
            case 183:
            case 186:
            case 188:
            case 189:
            case 191:
            case 194:
            case 195:
            case 197:
            case 203:
            case 207:
            case 213:
                {
                alt32=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;

            }

            switch (alt32) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:356:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1989);
                    case_stmt211=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt211.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:357:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1995);
                    default_stmt212=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt212.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body2001);
                    block_multiline_wrapper213=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper213.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body2007);
                    block_singleline_wrapper214=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper214.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class autorelease_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "autorelease_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:1: autorelease_stmt : '@autoreleasepool' block ;
    public final ObjcParser.autorelease_stmt_return autorelease_stmt() throws RecognitionException {
        ObjcParser.autorelease_stmt_return retval = new ObjcParser.autorelease_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal215=null;
        ObjcParser.block_return block216 =null;


        Object string_literal215_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:3: ( '@autoreleasepool' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:5: '@autoreleasepool' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal215=(Token)match(input,150,FOLLOW_150_in_autorelease_stmt2022); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal215_tree = 
            (Object)adaptor.create(string_literal215)
            ;
            adaptor.addChild(root_0, string_literal215_tree);
            }

            pushFollow(FOLLOW_block_in_autorelease_stmt2024);
            block216=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block216.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "autorelease_stmt"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal217=null;
        Token char_literal219=null;
        ObjcParser.name_number_return name_number218 =null;


        Object string_literal217_tree=null;
        Object char_literal219_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:5: 'case' name_number ':'
            {
            string_literal217=(Token)match(input,184,FOLLOW_184_in_case_stmt2039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal217);


            pushFollow(FOLLOW_name_number_in_case_stmt2041);
            name_number218=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number218.getTree());

            char_literal219=(Token)match(input,134,FOLLOW_134_in_case_stmt2043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal219);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal220=null;
        Token char_literal221=null;

        Object string_literal220_tree=null;
        Object char_literal221_tree=null;
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:5: 'default' ':'
            {
            string_literal220=(Token)match(input,187,FOLLOW_187_in_default_stmt2066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_187.add(string_literal220);


            char_literal221=(Token)match(input,134,FOLLOW_134_in_default_stmt2068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal221);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal222=null;
        Token string_literal224=null;
        Token char_literal225=null;
        Token char_literal227=null;
        ObjcParser.block_return block223 =null;

        ObjcParser.element_value_return element_value226 =null;


        Object string_literal222_tree=null;
        Object string_literal224_tree=null;
        Object char_literal225_tree=null;
        Object char_literal227_tree=null;
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_213=new RewriteRuleTokenStream(adaptor,"token 213");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal222=(Token)match(input,188,FOLLOW_188_in_do_stmt2089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_188.add(string_literal222);


            pushFollow(FOLLOW_block_in_do_stmt2091);
            block223=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block223.getTree());

            string_literal224=(Token)match(input,213,FOLLOW_213_in_do_stmt2093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_213.add(string_literal224);


            char_literal225=(Token)match(input,118,FOLLOW_118_in_do_stmt2095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal225);


            pushFollow(FOLLOW_element_value_in_do_stmt2097);
            element_value226=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value226.getTree());

            char_literal227=(Token)match(input,120,FOLLOW_120_in_do_stmt2099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal227);


            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal228=null;
        Token char_literal229=null;
        Token char_literal231=null;
        ObjcParser.element_value_return element_value230 =null;

        ObjcParser.block_return block232 =null;


        Object string_literal228_tree=null;
        Object char_literal229_tree=null;
        Object char_literal231_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:5: 'if' '(' element_value ')' block
            {
            string_literal228=(Token)match(input,197,FOLLOW_197_in_if_stmt2124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_197.add(string_literal228);


            char_literal229=(Token)match(input,118,FOLLOW_118_in_if_stmt2126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal229);


            pushFollow(FOLLOW_element_value_in_if_stmt2128);
            element_value230=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value230.getTree());

            char_literal231=(Token)match(input,120,FOLLOW_120_in_if_stmt2130); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal231);


            pushFollow(FOLLOW_block_in_if_stmt2132);
            block232=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block232.getTree());

            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal233=null;
        ObjcParser.block_return block234 =null;


        Object string_literal233_tree=null;
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:5: 'else' block
            {
            string_literal233=(Token)match(input,189,FOLLOW_189_in_else_stmt2155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_189.add(string_literal233);


            pushFollow(FOLLOW_block_in_else_stmt2157);
            block234=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block234.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal235=null;
        ObjcParser.block_return block236 =null;

        ObjcParser.catch_stmt_return catch_stmt237 =null;

        ObjcParser.finally_stmt_return finally_stmt238 =null;


        Object string_literal235_tree=null;
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal235=(Token)match(input,169,FOLLOW_169_in_try_stmt_wrapper2179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_169.add(string_literal235);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper2182);
            block236=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block236.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:19: ( catch_stmt )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==151) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper2185);
            	    catch_stmt237=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt237.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:31: ( finally_stmt )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==155) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper2188);
                    finally_stmt238=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt238.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: catch_stmt, block, finally_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal239=null;
        Token char_literal240=null;
        Token char_literal242=null;
        Token char_literal244=null;
        ObjcParser.name_return name241 =null;

        ObjcParser.name_return name243 =null;

        ObjcParser.block_return block245 =null;


        Object string_literal239_tree=null;
        Object char_literal240_tree=null;
        Object char_literal242_tree=null;
        Object char_literal244_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:4: '@catch' '(' name '*' name ')' block
            {
            string_literal239=(Token)match(input,151,FOLLOW_151_in_catch_stmt2214); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_151.add(string_literal239);


            char_literal240=(Token)match(input,118,FOLLOW_118_in_catch_stmt2217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal240);


            pushFollow(FOLLOW_name_in_catch_stmt2220);
            name241=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name241.getTree());

            char_literal242=(Token)match(input,121,FOLLOW_121_in_catch_stmt2223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal242);


            pushFollow(FOLLOW_name_in_catch_stmt2225);
            name243=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name243.getTree());

            char_literal244=(Token)match(input,120,FOLLOW_120_in_catch_stmt2228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal244);


            pushFollow(FOLLOW_block_in_catch_stmt2231);
            block245=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block245.getTree());

            // AST REWRITE
            // elements: name, block, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal246=null;
        ObjcParser.block_return block247 =null;


        Object string_literal246_tree=null;
        RewriteRuleTokenStream stream_155=new RewriteRuleTokenStream(adaptor,"token 155");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:4: '@finally' block
            {
            string_literal246=(Token)match(input,155,FOLLOW_155_in_finally_stmt2255); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_155.add(string_literal246);


            pushFollow(FOLLOW_block_in_finally_stmt2258);
            block247=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block247.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 395:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt248 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper2277);
            throw_stmt248=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt248.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal249=null;
        Token char_literal251=null;
        ObjcParser.element_value_return element_value250 =null;


        Object string_literal249_tree=null;
        Object char_literal251_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal249=(Token)match(input,168,FOLLOW_168_in_throw_stmt2296); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal249_tree = 
            (Object)adaptor.create(string_literal249)
            ;
            adaptor.addChild(root_0, string_literal249_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2298);
            element_value250=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value250.getTree());

            char_literal251=(Token)match(input,135,FOLLOW_135_in_throw_stmt2300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal251_tree = 
            (Object)adaptor.create(char_literal251)
            ;
            adaptor.addChild(root_0, char_literal251_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class externC_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "externC_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:406:1: externC_stmt : 'extern \"C\"' block ;
    public final ObjcParser.externC_stmt_return externC_stmt() throws RecognitionException {
        ObjcParser.externC_stmt_return retval = new ObjcParser.externC_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal252=null;
        ObjcParser.block_return block253 =null;


        Object string_literal252_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:3: ( 'extern \"C\"' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:5: 'extern \"C\"' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal252=(Token)match(input,191,FOLLOW_191_in_externC_stmt2312); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal252_tree = 
            (Object)adaptor.create(string_literal252)
            ;
            adaptor.addChild(root_0, string_literal252_tree);
            }

            pushFollow(FOLLOW_block_in_externC_stmt2314);
            block253=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block253.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "externC_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:410:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID254=null;

        Object ID254_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:4: ID
            {
            ID254=(Token)match(input,ID,FOLLOW_ID_in_name2328); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID254);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 411:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:414:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NR_LIT -> ^( NUMBER ( '-' )? NR_LIT ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID255=null;
        Token char_literal256=null;
        Token NR_LIT257=null;

        Object ID255_tree=null;
        Object char_literal256_tree=null;
        Object NR_LIT257_tree=null;
        RewriteRuleTokenStream stream_NR_LIT=new RewriteRuleTokenStream(adaptor,"token NR_LIT");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:3: ( ID -> ^( NAME ID ) | ( '-' )? NR_LIT -> ^( NUMBER ( '-' )? NR_LIT ) )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==ID) ) {
                alt36=1;
            }
            else if ( (LA36_0==NR_LIT||LA36_0==127) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:5: ID
                    {
                    ID255=(Token)match(input,ID,FOLLOW_ID_in_name_number2348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID255);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 415:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: ( '-' )? NR_LIT
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: ( '-' )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==127) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: '-'
                            {
                            char_literal256=(Token)match(input,127,FOLLOW_127_in_name_number2362); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal256);


                            }
                            break;

                    }


                    NR_LIT257=(Token)match(input,NR_LIT,FOLLOW_NR_LIT_in_name_number2365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NR_LIT.add(NR_LIT257);


                    // AST REWRITE
                    // elements: NR_LIT, 127
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 416:17: -> ^( NUMBER ( '-' )? NR_LIT )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:20: ^( NUMBER ( '-' )? NR_LIT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:29: ( '-' )?
                        if ( stream_127.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_127.nextNode()
                            );

                        }
                        stream_127.reset();

                        adaptor.addChild(root_1, 
                        stream_NR_LIT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper258 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2391);
            field_declaration_wrapper258=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper258.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 420:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:423:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment259 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2414);
            variable_assignment259=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment259.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 424:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper260 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper261 =null;

        ObjcParser.element_value_return element_value262 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2437);
            object_access_wrapper260=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper260.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2439);
            op_assign_wrapper261=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper261.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2441);
            element_value262=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value262.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper263 =null;

        ObjcParser.increment_decrement_return increment_decrement264 =null;

        ObjcParser.increment_decrement_return increment_decrement265 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper266 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==118) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==116) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==ID) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==121) && (synpred11_Objc())) {
                alt37=1;
            }
            else if ( (LA37_0==124||LA37_0==128) ) {
                alt37=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;

            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2462);
                    object_access_wrapper263=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper263.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2464);
                    increment_decrement264=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement264.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:433:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2470);
                    increment_decrement265=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement265.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2472);
                    object_access_wrapper266=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper266.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper267 =null;

        ObjcParser.method_implementation_common_return method_implementation_common268 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:437:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2487);
            method_modifier_wrapper267=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper267.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2489);
            method_implementation_common268=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common268.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal269=null;
        Token char_literal271=null;
        ObjcParser.type_declaration_return type_declaration270 =null;

        ObjcParser.method_name_return method_name272 =null;

        ObjcParser.method_params_return method_params273 =null;


        Object char_literal269_tree=null;
        Object char_literal271_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:6: '(' type_declaration ')' method_name
            {
            char_literal269=(Token)match(input,118,FOLLOW_118_in_method_implementation_common2502); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal269_tree = 
            (Object)adaptor.create(char_literal269)
            ;
            adaptor.addChild(root_0, char_literal269_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2504);
            type_declaration270=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration270.getTree());

            char_literal271=(Token)match(input,120,FOLLOW_120_in_method_implementation_common2506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal271_tree = 
            (Object)adaptor.create(char_literal271)
            ;
            adaptor.addChild(root_0, char_literal271_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2508);
            method_name272=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name272.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:44: ( method_params )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==ID||LA38_0==134) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2511);
                    method_params273=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params273.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:442:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation274 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper275 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2523);
            method_implementation274=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation274.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2527);
            block_multiline_wrapper275=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper275.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 444:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call276 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2550);
            classical_method_call276=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call276.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal280=null;
        ObjcParser.name_return name277 =null;

        ObjcParser.access_wrapper_return access_wrapper278 =null;

        ObjcParser.name_return name279 =null;


        Object char_literal280_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2571);
            name277=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name277.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:10: ( access_wrapper name )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( ((LA39_0 >= 130 && LA39_0 <= 131)) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2574);
            	    access_wrapper278=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper278.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2576);
            	    name279=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name279.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            char_literal280=(Token)match(input,118,FOLLOW_118_in_clasical_method_call_predicate2580); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal280_tree = 
            (Object)adaptor.create(char_literal280)
            ;
            adaptor.addChild(root_0, char_literal280_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal284=null;
        Token char_literal286=null;
        ObjcParser.name_return name281 =null;

        ObjcParser.access_wrapper_return access_wrapper282 =null;

        ObjcParser.name_return name283 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push285 =null;


        Object char_literal284_tree=null;
        Object char_literal286_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2595);
            name281=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name281.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:10: ( access_wrapper name )*
            loop40:
            do {
                int alt40=2;
                int LA40_0 = input.LA(1);

                if ( ((LA40_0 >= 130 && LA40_0 <= 131)) ) {
                    alt40=1;
                }


                switch (alt40) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2598);
            	    access_wrapper282=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper282.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2600);
            	    name283=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name283.getTree());

            	    }
            	    break;

            	default :
            	    break loop40;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal284=(Token)match(input,118,FOLLOW_118_in_classical_method_call2605); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal284_tree = 
            (Object)adaptor.create(char_literal284)
            ;
            adaptor.addChild(root_0, char_literal284_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:38: ( classical_method_params_push )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==C_LIT||LA41_0==ID||LA41_0==M_C_LIT||LA41_0==NR_LIT||LA41_0==STR_LIT||LA41_0==S_C_LIT||LA41_0==111||LA41_0==116||LA41_0==118||LA41_0==121||LA41_0==124||(LA41_0 >= 127 && LA41_0 <= 128)||(LA41_0 >= 148 && LA41_0 <= 149)||LA41_0==162||LA41_0==165||LA41_0==170||LA41_0==173||(LA41_0 >= 175 && LA41_0 <= 176)||(LA41_0 >= 179 && LA41_0 <= 180)||LA41_0==193||LA41_0==208||LA41_0==219) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:456:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2607);
                    classical_method_params_push285=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push285.getTree());

                    }
                    break;

            }


            char_literal286=(Token)match(input,120,FOLLOW_120_in_classical_method_call2610); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal286_tree = 
            (Object)adaptor.create(char_literal286)
            ;
            adaptor.addChild(root_0, char_literal286_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal288=null;
        ObjcParser.method_param_push_return method_param_push287 =null;

        ObjcParser.method_param_push_return method_param_push289 =null;


        Object char_literal288_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2625);
            method_param_push287=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push287.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:24: ( ',' method_param_push )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==126) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:25: ',' method_param_push
            	    {
            	    char_literal288=(Token)match(input,126,FOLLOW_126_in_classical_method_params_push2628); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal288);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2630);
            	    method_param_push289=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push289.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 460:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:460:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:1: method_params_push : method_param_push ( ( ( ( ',' )? prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal291=null;
        Token char_literal293=null;
        Token char_literal294=null;
        ObjcParser.method_param_push_return method_param_push290 =null;

        ObjcParser.prefix_return prefix292 =null;

        ObjcParser.method_param_push_return method_param_push295 =null;


        Object char_literal291_tree=null;
        Object char_literal293_tree=null;
        Object char_literal294_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:2: ( method_param_push ( ( ( ( ',' )? prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:4: method_param_push ( ( ( ( ',' )? prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2654);
            method_param_push290=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push290.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:22: ( ( ( ( ',' )? prefix ':' ) | ',' ) method_param_push )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==ID||LA45_0==126) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:23: ( ( ( ',' )? prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:23: ( ( ( ',' )? prefix ':' ) | ',' )
            	    int alt44=2;
            	    int LA44_0 = input.LA(1);

            	    if ( (LA44_0==126) ) {
            	        int LA44_1 = input.LA(2);

            	        if ( (LA44_1==ID) ) {
            	            int LA44_3 = input.LA(3);

            	            if ( (LA44_3==134) ) {
            	                alt44=1;
            	            }
            	            else if ( (LA44_3==ID||LA44_3==M_C_LIT||LA44_3==S_C_LIT||LA44_3==112||(LA44_3 >= 114 && LA44_3 <= 116)||LA44_3==118||LA44_3==121||(LA44_3 >= 123 && LA44_3 <= 132)||(LA44_3 >= 136 && LA44_3 <= 137)||(LA44_3 >= 139 && LA44_3 <= 144)||(LA44_3 >= 146 && LA44_3 <= 147)||LA44_3==176||(LA44_3 >= 178 && LA44_3 <= 179)||LA44_3==215||(LA44_3 >= 217 && LA44_3 <= 218)) ) {
            	                alt44=2;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 44, 3, input);

            	                throw nvae;

            	            }
            	        }
            	        else if ( (LA44_1==C_LIT||LA44_1==M_C_LIT||LA44_1==NR_LIT||LA44_1==STR_LIT||LA44_1==S_C_LIT||LA44_1==111||LA44_1==116||LA44_1==118||LA44_1==121||LA44_1==124||(LA44_1 >= 127 && LA44_1 <= 128)||(LA44_1 >= 148 && LA44_1 <= 149)||LA44_1==162||LA44_1==165||LA44_1==170||LA44_1==173||(LA44_1 >= 175 && LA44_1 <= 176)||(LA44_1 >= 179 && LA44_1 <= 180)||LA44_1==193||LA44_1==208||LA44_1==219) ) {
            	            alt44=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 44, 1, input);

            	            throw nvae;

            	        }
            	    }
            	    else if ( (LA44_0==ID) ) {
            	        alt44=1;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 44, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt44) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:24: ( ( ',' )? prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:24: ( ( ',' )? prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:25: ( ',' )? prefix ':'
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:25: ( ',' )?
            	            int alt43=2;
            	            int LA43_0 = input.LA(1);

            	            if ( (LA43_0==126) ) {
            	                alt43=1;
            	            }
            	            switch (alt43) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:25: ','
            	                    {
            	                    char_literal291=(Token)match(input,126,FOLLOW_126_in_method_params_push2659); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_126.add(char_literal291);


            	                    }
            	                    break;

            	            }


            	            pushFollow(FOLLOW_prefix_in_method_params_push2662);
            	            prefix292=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix292.getTree());

            	            char_literal293=(Token)match(input,134,FOLLOW_134_in_method_params_push2664); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_134.add(char_literal293);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:44: ','
            	            {
            	            char_literal294=(Token)match(input,126,FOLLOW_126_in_method_params_push2669); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_126.add(char_literal294);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2672);
            	    method_param_push295=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push295.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 464:69: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:464:72: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:466:1: method_param_push : ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.comments_return comments296 =null;

        ObjcParser.element_value_return element_value297 =null;

        ObjcParser.comments_return comments298 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:3: ( ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: ( comments )? element_value ( comments )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: ( comments )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==M_C_LIT||LA46_0==S_C_LIT) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2693);
                    comments296=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments296.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_in_method_param_push2696);
            element_value297=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value297.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:29: ( comments )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==M_C_LIT||LA47_0==S_C_LIT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:29: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2698);
                    comments298=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments298.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: comments, comments, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:39: -> ^( METHOD_PARAM ( comments )? element_value ( comments )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:42: ^( METHOD_PARAM ( comments )? element_value ( comments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:57: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:81: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:470:1: method_msg : ( ( '[' element_value ) | '@{' ) method_name ( ':' method_params_push )? ( ']' | '}' ) -> ^( METHOD_MSG ( element_value )? method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal299=null;
        Token string_literal301=null;
        Token char_literal303=null;
        Token char_literal305=null;
        Token char_literal306=null;
        ObjcParser.element_value_return element_value300 =null;

        ObjcParser.method_name_return method_name302 =null;

        ObjcParser.method_params_push_return method_params_push304 =null;


        Object char_literal299_tree=null;
        Object string_literal301_tree=null;
        Object char_literal303_tree=null;
        Object char_literal305_tree=null;
        Object char_literal306_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:3: ( ( ( '[' element_value ) | '@{' ) method_name ( ':' method_params_push )? ( ']' | '}' ) -> ^( METHOD_MSG ( element_value )? method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:5: ( ( '[' element_value ) | '@{' ) method_name ( ':' method_params_push )? ( ']' | '}' )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:5: ( ( '[' element_value ) | '@{' )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==176) ) {
                alt48=1;
            }
            else if ( (LA48_0==170) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }
            switch (alt48) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:6: ( '[' element_value )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:6: ( '[' element_value )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:7: '[' element_value
                    {
                    char_literal299=(Token)match(input,176,FOLLOW_176_in_method_msg2729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(char_literal299);


                    pushFollow(FOLLOW_element_value_in_method_msg2731);
                    element_value300=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value300.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:28: '@{'
                    {
                    string_literal301=(Token)match(input,170,FOLLOW_170_in_method_msg2736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(string_literal301);


                    }
                    break;

            }


            pushFollow(FOLLOW_method_name_in_method_msg2740);
            method_name302=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name302.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:47: ( ':' method_params_push )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==134) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:48: ':' method_params_push
                    {
                    char_literal303=(Token)match(input,134,FOLLOW_134_in_method_msg2743); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal303);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2745);
                    method_params_push304=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push304.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:73: ( ']' | '}' )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==178) ) {
                alt50=1;
            }
            else if ( (LA50_0==218) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;

            }
            switch (alt50) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:74: ']'
                    {
                    char_literal305=(Token)match(input,178,FOLLOW_178_in_method_msg2750); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(char_literal305);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:80: '}'
                    {
                    char_literal306=(Token)match(input,218,FOLLOW_218_in_method_msg2754); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_218.add(char_literal306);


                    }
                    break;

            }


            // AST REWRITE
            // elements: element_value, method_name, method_params_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 471:85: -> ^( METHOD_MSG ( element_value )? method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:87: ^( METHOD_MSG ( element_value )? method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:100: ( element_value )?
                if ( stream_element_value.hasNext() ) {
                    adaptor.addChild(root_1, stream_element_value.nextTree());

                }
                stream_element_value.reset();

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:127: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:1: questionmark_if_stmt : ( ( '?:' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) | ( '?' element_value ( comments )? ':' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) );
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal307=null;
        Token char_literal310=null;
        Token char_literal313=null;
        ObjcParser.comments_return comments308 =null;

        ObjcParser.element_value_return element_value309 =null;

        ObjcParser.element_value_return element_value311 =null;

        ObjcParser.comments_return comments312 =null;

        ObjcParser.comments_return comments314 =null;

        ObjcParser.element_value_return element_value315 =null;


        Object string_literal307_tree=null;
        Object char_literal310_tree=null;
        Object char_literal313_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_146=new RewriteRuleTokenStream(adaptor,"token 146");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:3: ( ( '?:' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) | ( '?' element_value ( comments )? ':' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==147) ) {
                alt54=1;
            }
            else if ( (LA54_0==146) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:5: ( '?:' ( comments )? element_value )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:5: ( '?:' ( comments )? element_value )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:6: '?:' ( comments )? element_value
                    {
                    string_literal307=(Token)match(input,147,FOLLOW_147_in_questionmark_if_stmt2782); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_147.add(string_literal307);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:11: ( comments )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==M_C_LIT||LA51_0==S_C_LIT) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:11: comments
                            {
                            pushFollow(FOLLOW_comments_in_questionmark_if_stmt2784);
                            comments308=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments308.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2787);
                    element_value309=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value309.getTree());

                    }


                    // AST REWRITE
                    // elements: element_value, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 475:36: -> ^( QUESTION_MARK_IF element_value element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:475:39: ^( QUESTION_MARK_IF element_value element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                        , root_1);

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: ( '?' element_value ( comments )? ':' ( comments )? element_value )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: ( '?' element_value ( comments )? ':' ( comments )? element_value )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:6: '?' element_value ( comments )? ':' ( comments )? element_value
                    {
                    char_literal310=(Token)match(input,146,FOLLOW_146_in_questionmark_if_stmt2805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_146.add(char_literal310);


                    pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2807);
                    element_value311=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value311.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:24: ( comments )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==M_C_LIT||LA52_0==S_C_LIT) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:24: comments
                            {
                            pushFollow(FOLLOW_comments_in_questionmark_if_stmt2809);
                            comments312=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments312.getTree());

                            }
                            break;

                    }


                    char_literal313=(Token)match(input,134,FOLLOW_134_in_questionmark_if_stmt2812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal313);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:38: ( comments )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==M_C_LIT||LA53_0==S_C_LIT) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:38: comments
                            {
                            pushFollow(FOLLOW_comments_in_questionmark_if_stmt2814);
                            comments314=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments314.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2817);
                    element_value315=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value315.getTree());

                    }


                    // AST REWRITE
                    // elements: element_value, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 476:63: -> ^( QUESTION_MARK_IF element_value element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:66: ^( QUESTION_MARK_IF element_value element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                        , root_1);

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:1: element_value : ( '@(' simple_expression ')' -> ^( VALUE simple_expression ) | simple_expression -> ^( VALUE simple_expression ) );
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal316=null;
        Token char_literal318=null;
        ObjcParser.simple_expression_return simple_expression317 =null;

        ObjcParser.simple_expression_return simple_expression319 =null;


        Object string_literal316_tree=null;
        Object char_literal318_tree=null;
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:5: ( '@(' simple_expression ')' -> ^( VALUE simple_expression ) | simple_expression -> ^( VALUE simple_expression ) )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==149) ) {
                alt55=1;
            }
            else if ( (LA55_0==C_LIT||LA55_0==ID||LA55_0==NR_LIT||LA55_0==STR_LIT||LA55_0==111||LA55_0==116||LA55_0==118||LA55_0==121||LA55_0==124||(LA55_0 >= 127 && LA55_0 <= 128)||LA55_0==148||LA55_0==162||LA55_0==165||LA55_0==170||LA55_0==173||(LA55_0 >= 175 && LA55_0 <= 176)||(LA55_0 >= 179 && LA55_0 <= 180)||LA55_0==193||LA55_0==208||LA55_0==219) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;

            }
            switch (alt55) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:7: '@(' simple_expression ')'
                    {
                    string_literal316=(Token)match(input,149,FOLLOW_149_in_element_value2845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_149.add(string_literal316);


                    pushFollow(FOLLOW_simple_expression_in_element_value2847);
                    simple_expression317=simple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression317.getTree());

                    char_literal318=(Token)match(input,120,FOLLOW_120_in_element_value2849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal318);


                    // AST REWRITE
                    // elements: simple_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 480:34: -> ^( VALUE simple_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:37: ^( VALUE simple_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUE, "VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_simple_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:7: simple_expression
                    {
                    pushFollow(FOLLOW_simple_expression_in_element_value2866);
                    simple_expression319=simple_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression319.getTree());

                    // AST REWRITE
                    // elements: simple_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 481:25: -> ^( VALUE simple_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:28: ^( VALUE simple_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(VALUE, "VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_simple_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal320=null;
        ObjcParser.element_value_return element_value321 =null;


        Object char_literal320_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:5: ( ';' | element_value )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==135) ) {
                alt56=1;
            }
            else if ( (LA56_0==C_LIT||LA56_0==ID||LA56_0==NR_LIT||LA56_0==STR_LIT||LA56_0==111||LA56_0==116||LA56_0==118||LA56_0==121||LA56_0==124||(LA56_0 >= 127 && LA56_0 <= 128)||(LA56_0 >= 148 && LA56_0 <= 149)||LA56_0==162||LA56_0==165||LA56_0==170||LA56_0==173||(LA56_0 >= 175 && LA56_0 <= 176)||(LA56_0 >= 179 && LA56_0 <= 180)||LA56_0==193||LA56_0==208||LA56_0==219) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:6: ';'
                    {
                    char_literal320=(Token)match(input,135,FOLLOW_135_in_element_value_or_semicolon2892); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal320_tree = 
                    (Object)adaptor.create(char_literal320)
                    ;
                    adaptor.addChild(root_0, char_literal320_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2896);
                    element_value321=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value321.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:1: array_init : ( comments )? element_value_or_array_init ( ',' ( comments )? element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal324=null;
        ObjcParser.comments_return comments322 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init323 =null;

        ObjcParser.comments_return comments325 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init326 =null;


        Object char_literal324_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:3: ( ( comments )? element_value_or_array_init ( ',' ( comments )? element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( comments )? element_value_or_array_init ( ',' ( comments )? element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: ( comments )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==S_C_LIT) ) {
                alt57=1;
            }
            else if ( (LA57_0==M_C_LIT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_array_init2913);
                    comments322=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments322.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2916);
            element_value_or_array_init323=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init323.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:43: ( ',' ( comments )? element_value_or_array_init )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==126) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:44: ',' ( comments )? element_value_or_array_init
            	    {
            	    char_literal324=(Token)match(input,126,FOLLOW_126_in_array_init2919); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal324_tree = 
            	    (Object)adaptor.create(char_literal324)
            	    ;
            	    adaptor.addChild(root_0, char_literal324_tree);
            	    }

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:48: ( comments )?
            	    int alt58=2;
            	    int LA58_0 = input.LA(1);

            	    if ( (LA58_0==S_C_LIT) ) {
            	        alt58=1;
            	    }
            	    else if ( (LA58_0==M_C_LIT) ) {
            	        alt58=1;
            	    }
            	    switch (alt58) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:490:48: comments
            	            {
            	            pushFollow(FOLLOW_comments_in_array_init2921);
            	            comments325=comments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, comments325.getTree());

            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2924);
            	    element_value_or_array_init326=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init326.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:1: element_value_or_array_init : ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( comments )? ( array_init )? ) | ( comments )? element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal327=null;
        Token char_literal329=null;
        ObjcParser.array_init_return array_init328 =null;

        ObjcParser.comments_return comments330 =null;

        ObjcParser.comments_return comments331 =null;

        ObjcParser.element_value_return element_value332 =null;


        Object char_literal327_tree=null;
        Object char_literal329_tree=null;
        RewriteRuleTokenStream stream_214=new RewriteRuleTokenStream(adaptor,"token 214");
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:3: ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( comments )? ( array_init )? ) | ( comments )? element_value )
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==214) ) {
                alt63=1;
            }
            else if ( (LA63_0==C_LIT||LA63_0==ID||LA63_0==M_C_LIT||LA63_0==NR_LIT||LA63_0==STR_LIT||LA63_0==S_C_LIT||LA63_0==111||LA63_0==116||LA63_0==118||LA63_0==121||LA63_0==124||(LA63_0 >= 127 && LA63_0 <= 128)||(LA63_0 >= 148 && LA63_0 <= 149)||LA63_0==162||LA63_0==165||LA63_0==170||LA63_0==173||(LA63_0 >= 175 && LA63_0 <= 176)||(LA63_0 >= 179 && LA63_0 <= 180)||LA63_0==193||LA63_0==208||LA63_0==219) ) {
                alt63=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;

            }
            switch (alt63) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:5: '{' ( array_init )? '}' ( comments )?
                    {
                    char_literal327=(Token)match(input,214,FOLLOW_214_in_element_value_or_array_init2941); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_214.add(char_literal327);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:9: ( array_init )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==C_LIT||LA60_0==ID||LA60_0==M_C_LIT||LA60_0==NR_LIT||LA60_0==STR_LIT||LA60_0==S_C_LIT||LA60_0==111||LA60_0==116||LA60_0==118||LA60_0==121||LA60_0==124||(LA60_0 >= 127 && LA60_0 <= 128)||(LA60_0 >= 148 && LA60_0 <= 149)||LA60_0==162||LA60_0==165||LA60_0==170||LA60_0==173||(LA60_0 >= 175 && LA60_0 <= 176)||(LA60_0 >= 179 && LA60_0 <= 180)||LA60_0==193||LA60_0==208||LA60_0==214||LA60_0==219) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2943);
                            array_init328=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init328.getTree());

                            }
                            break;

                    }


                    char_literal329=(Token)match(input,218,FOLLOW_218_in_element_value_or_array_init2946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_218.add(char_literal329);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:25: ( comments )?
                    int alt61=2;
                    int LA61_0 = input.LA(1);

                    if ( (LA61_0==M_C_LIT||LA61_0==S_C_LIT) ) {
                        alt61=1;
                    }
                    switch (alt61) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:25: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2948);
                            comments330=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments330.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: comments, array_init
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 494:35: -> ^( ARRAY_INIT ( comments )? ( array_init )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:38: ^( ARRAY_INIT ( comments )? ( array_init )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:51: ( comments )?
                        if ( stream_comments.hasNext() ) {
                            adaptor.addChild(root_1, stream_comments.nextTree());

                        }
                        stream_comments.reset();

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:61: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( comments )? element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: ( comments )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==M_C_LIT||LA62_0==S_C_LIT) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:495:5: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2967);
                            comments331=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comments331.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2970);
                    element_value332=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set333=null;

        Object set333_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set333=(Token)input.LT(1);

            if ( input.LA(1)==124||input.LA(1)==128 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set333)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1334 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt335 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression3005);
            cast_unary_expression1334=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1334.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop64:
            do {
                int alt64=2;
                alt64 = dfa64.predict(input);
                switch (alt64) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression3007);
            	    op2_unary_expression_or_questionmark_if_stmt335=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt335.getTree());

            	    }
            	    break;

            	default :
            	    break loop64;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal336=null;
        ObjcParser.cast_expression_return cast_expression337 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression338 =null;


        Object char_literal336_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==127) ) {
                alt65=1;
            }
            else if ( (LA65_0==C_LIT||LA65_0==ID||LA65_0==NR_LIT||LA65_0==STR_LIT||LA65_0==111||LA65_0==116||LA65_0==118||LA65_0==121||LA65_0==124||LA65_0==128||LA65_0==148||LA65_0==162||LA65_0==165||LA65_0==170||LA65_0==173||(LA65_0 >= 175 && LA65_0 <= 176)||(LA65_0 >= 179 && LA65_0 <= 180)||LA65_0==193||LA65_0==208||LA65_0==219) ) {
                alt65=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;

            }
            switch (alt65) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:5: '-' cast_expression
                    {
                    char_literal336=(Token)match(input,127,FOLLOW_127_in_cast_unary_expression13022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(char_literal336);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression13024);
                    cast_expression337=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression337.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 507:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:507:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:508:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression13038);
                    cast_unary_expression338=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression338.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper339 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1340 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt341 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==112||(LA66_0 >= 114 && LA66_0 <= 116)||LA66_0==121||LA66_0==123||LA66_0==127||LA66_0==132||(LA66_0 >= 136 && LA66_0 <= 137)||(LA66_0 >= 139 && LA66_0 <= 144)||LA66_0==179||LA66_0==215||LA66_0==217) ) {
                alt66=1;
            }
            else if ( ((LA66_0 >= 146 && LA66_0 <= 147)) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;

            }
            switch (alt66) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt3052);
                    op2_wrapper339=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper339.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt3054);
                    cast_unary_expression1340=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1340.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:513:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt3061);
                    questionmark_if_stmt341=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt341.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal344=null;
        Token char_literal346=null;
        ObjcParser.cast_expression_return cast_expression342 =null;

        ObjcParser.increment_decrement_return increment_decrement343 =null;

        ObjcParser.cast_expression_return cast_expression345 =null;

        ObjcParser.cast_expression_return cast_expression347 =null;

        ObjcParser.increment_decrement_return increment_decrement348 =null;

        ObjcParser.cast_expression_return cast_expression349 =null;


        Object char_literal344_tree=null;
        Object char_literal346_tree=null;
        RewriteRuleTokenStream stream_111=new RewriteRuleTokenStream(adaptor,"token 111");
        RewriteRuleTokenStream stream_219=new RewriteRuleTokenStream(adaptor,"token 219");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt68=4;
            switch ( input.LA(1) ) {
            case C_LIT:
            case ID:
            case NR_LIT:
            case STR_LIT:
            case 116:
            case 118:
            case 121:
            case 148:
            case 162:
            case 165:
            case 170:
            case 173:
            case 175:
            case 176:
            case 179:
            case 180:
            case 193:
            case 208:
                {
                alt68=1;
                }
                break;
            case 111:
                {
                alt68=2;
                }
                break;
            case 219:
                {
                alt68=3;
                }
                break;
            case 124:
            case 128:
                {
                alt68=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;

            }

            switch (alt68) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3074);
                    cast_expression342=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression342.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:21: ( increment_decrement )?
                    int alt67=2;
                    alt67 = dfa67.predict(input);
                    switch (alt67) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression3076);
                            increment_decrement343=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement343.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:5: '!' cast_expression
                    {
                    char_literal344=(Token)match(input,111,FOLLOW_111_in_cast_unary_expression3083); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_111.add(char_literal344);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3085);
                    cast_expression345=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression345.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 518:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:518:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:5: '~' cast_expression
                    {
                    char_literal346=(Token)match(input,219,FOLLOW_219_in_cast_unary_expression3099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_219.add(char_literal346);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3101);
                    cast_expression347=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression347.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 519:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:519:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression3115);
                    increment_decrement348=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement348.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression3117);
                    cast_expression349=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression349.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal353=null;
        Token char_literal356=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper350 =null;

        ObjcParser.increment_decrement_return increment_decrement351 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access352 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper354 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access355 =null;

        ObjcParser.access_wrapper_return access_wrapper357 =null;

        ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call358 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access359 =null;


        Object char_literal353_tree=null;
        Object char_literal356_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:3: ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access )
            int alt71=3;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression3135);
                    type_cast_wrapper350=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper350.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:45: ( increment_decrement )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==124||LA69_0==128) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:45: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_expression3137);
                            increment_decrement351=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement351.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3140);
                    simple_expression_value_access352=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access352.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal353=(Token)match(input,118,FOLLOW_118_in_cast_expression3159); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal353_tree = 
                    (Object)adaptor.create(char_literal353)
                    ;
                    adaptor.addChild(root_0, char_literal353_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression3161);
                    type_cast_wrapper354=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper354.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3163);
                    simple_expression_value_access355=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access355.getTree());

                    char_literal356=(Token)match(input,120,FOLLOW_120_in_cast_expression3165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal356_tree = 
                    (Object)adaptor.create(char_literal356)
                    ;
                    adaptor.addChild(root_0, char_literal356_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:138: ( access_wrapper simple_name_or_classical_function_call )+
                    int cnt70=0;
                    loop70:
                    do {
                        int alt70=2;
                        alt70 = dfa70.predict(input);
                        switch (alt70) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:139: access_wrapper simple_name_or_classical_function_call
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression3168);
                    	    access_wrapper357=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper357.getTree());

                    	    pushFollow(FOLLOW_simple_name_or_classical_function_call_in_cast_expression3170);
                    	    simple_name_or_classical_function_call358=simple_name_or_classical_function_call();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_name_or_classical_function_call358.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt70 >= 1 ) break loop70;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(70, input);
                                throw eee;
                        }
                        cnt70++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:526:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3178);
                    simple_expression_value_access359=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access359.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_name_or_classical_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_name_or_classical_function_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );
    public final ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call() throws RecognitionException {
        ObjcParser.simple_name_or_classical_function_call_return retval = new ObjcParser.simple_name_or_classical_function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal361=null;
        Token char_literal363=null;
        ObjcParser.name_return name360 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push362 =null;

        ObjcParser.name_return name364 =null;


        Object char_literal361_tree=null;
        Object char_literal363_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:3: ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name )
            int alt73=2;
            alt73 = dfa73.predict(input);
            switch (alt73) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call3199);
                    name360=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name360.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:24: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:25: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal361=(Token)match(input,118,FOLLOW_118_in_simple_name_or_classical_function_call3202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal361_tree = 
                    (Object)adaptor.create(char_literal361)
                    ;
                    adaptor.addChild(root_0, char_literal361_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:29: ( classical_method_params_push )?
                    int alt72=2;
                    int LA72_0 = input.LA(1);

                    if ( (LA72_0==C_LIT||LA72_0==ID||LA72_0==M_C_LIT||LA72_0==NR_LIT||LA72_0==STR_LIT||LA72_0==S_C_LIT||LA72_0==111||LA72_0==116||LA72_0==118||LA72_0==121||LA72_0==124||(LA72_0 >= 127 && LA72_0 <= 128)||(LA72_0 >= 148 && LA72_0 <= 149)||LA72_0==162||LA72_0==165||LA72_0==170||LA72_0==173||(LA72_0 >= 175 && LA72_0 <= 176)||(LA72_0 >= 179 && LA72_0 <= 180)||LA72_0==193||LA72_0==208||LA72_0==219) ) {
                        alt72=1;
                    }
                    switch (alt72) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:29: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call3204);
                            classical_method_params_push362=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push362.getTree());

                            }
                            break;

                    }


                    char_literal363=(Token)match(input,120,FOLLOW_120_in_simple_name_or_classical_function_call3207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal363_tree = 
                    (Object)adaptor.create(char_literal363)
                    ;
                    adaptor.addChild(root_0, char_literal363_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:531:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call3214);
                    name364=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name364.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name_or_classical_function_call"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:1: simple_expression_value_access : ( ( block_call_predicate )=> block_call_wrapper | selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | simple_expression_value_access2 );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal367=null;
        Token char_literal369=null;
        Token char_literal371=null;
        Token char_literal372=null;
        Token string_literal373=null;
        Token char_literal374=null;
        Token char_literal376=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper365 =null;

        ObjcParser.selector_wrapper_return selector_wrapper366 =null;

        ObjcParser.name_return name368 =null;

        ObjcParser.name_return name370 =null;

        ObjcParser.name_return name375 =null;

        ObjcParser.simple_expression_value_access2_return simple_expression_value_access2377 =null;


        Object char_literal367_tree=null;
        Object char_literal369_tree=null;
        Object char_literal371_tree=null;
        Object char_literal372_tree=null;
        Object string_literal373_tree=null;
        Object char_literal374_tree=null;
        Object char_literal376_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:3: ( ( block_call_predicate )=> block_call_wrapper | selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | simple_expression_value_access2 )
            int alt76=4;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==179) && (synpred15_Objc())) {
                alt76=1;
            }
            else if ( (LA76_0==180) && (synpred15_Objc())) {
                alt76=1;
            }
            else if ( (LA76_0==165) ) {
                alt76=2;
            }
            else if ( (LA76_0==162) ) {
                alt76=3;
            }
            else if ( (LA76_0==C_LIT||LA76_0==ID||LA76_0==NR_LIT||LA76_0==STR_LIT||LA76_0==116||LA76_0==118||LA76_0==121||LA76_0==148||LA76_0==170||LA76_0==173||(LA76_0 >= 175 && LA76_0 <= 176)||LA76_0==193||LA76_0==208) ) {
                alt76=4;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;

            }
            switch (alt76) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value_access3235);
                    block_call_wrapper365=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper365.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access3241);
                    selector_wrapper366=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper366.getTree());

                    char_literal367=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access3243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal367_tree = 
                    (Object)adaptor.create(char_literal367)
                    ;
                    adaptor.addChild(root_0, char_literal367_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access3245);
                    name368=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name368.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:31: ( ':' ( name ':' )* )?
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( (LA75_0==134) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:32: ':' ( name ':' )*
                            {
                            char_literal369=(Token)match(input,134,FOLLOW_134_in_simple_expression_value_access3248); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal369_tree = 
                            (Object)adaptor.create(char_literal369)
                            ;
                            adaptor.addChild(root_0, char_literal369_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:36: ( name ':' )*
                            loop74:
                            do {
                                int alt74=2;
                                int LA74_0 = input.LA(1);

                                if ( (LA74_0==ID) ) {
                                    alt74=1;
                                }


                                switch (alt74) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access3251);
                            	    name370=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name370.getTree());

                            	    char_literal371=(Token)match(input,134,FOLLOW_134_in_simple_expression_value_access3253); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal371_tree = 
                            	    (Object)adaptor.create(char_literal371)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal371_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop74;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal372=(Token)match(input,120,FOLLOW_120_in_simple_expression_value_access3259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal372_tree = 
                    (Object)adaptor.create(char_literal372)
                    ;
                    adaptor.addChild(root_0, char_literal372_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:537:5: '@protocol' '(' name ')'
                    {
                    string_literal373=(Token)match(input,162,FOLLOW_162_in_simple_expression_value_access3265); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal373);


                    char_literal374=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access3267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal374);


                    pushFollow(FOLLOW_name_in_simple_expression_value_access3269);
                    name375=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name375.getTree());

                    char_literal376=(Token)match(input,120,FOLLOW_120_in_simple_expression_value_access3271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal376);


                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 537:30: -> ^( DIRECTIVE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:537:34: ^( DIRECTIVE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:538:5: simple_expression_value_access2
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access2_in_simple_expression_value_access3286);
                    simple_expression_value_access2377=simple_expression_value_access2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access2377.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_access2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:1: simple_expression_value_access2 : ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )? );
    public final ObjcParser.simple_expression_value_access2_return simple_expression_value_access2() throws RecognitionException {
        ObjcParser.simple_expression_value_access2_return retval = new ObjcParser.simple_expression_value_access2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal381=null;
        Token char_literal383=null;
        Token set387=null;
        ObjcParser.simple_expression_value_return simple_expression_value378 =null;

        ObjcParser.access_wrapper_return access_wrapper379 =null;

        ObjcParser.name_return name380 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push382 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2384 =null;

        ObjcParser.access_wrapper_return access_wrapper385 =null;

        ObjcParser.simple_expression_value_return simple_expression_value386 =null;

        ObjcParser.simple_expression_value_return simple_expression_value388 =null;


        Object char_literal381_tree=null;
        Object char_literal383_tree=null;
        Object set387_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:3: ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )? )
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access23313);
                    simple_expression_value378=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value378.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:84: ( access_wrapper name )*
                    loop77:
                    do {
                        int alt77=2;
                        int LA77_0 = input.LA(1);

                        if ( ((LA77_0 >= 130 && LA77_0 <= 131)) ) {
                            alt77=1;
                        }


                        switch (alt77) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access23316);
                    	    access_wrapper379=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper379.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access23318);
                    	    name380=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name380.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop77;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal381=(Token)match(input,118,FOLLOW_118_in_simple_expression_value_access23323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal381_tree = 
                    (Object)adaptor.create(char_literal381)
                    ;
                    adaptor.addChild(root_0, char_literal381_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:112: ( classical_method_params_push )?
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( (LA78_0==C_LIT||LA78_0==ID||LA78_0==M_C_LIT||LA78_0==NR_LIT||LA78_0==STR_LIT||LA78_0==S_C_LIT||LA78_0==111||LA78_0==116||LA78_0==118||LA78_0==121||LA78_0==124||(LA78_0 >= 127 && LA78_0 <= 128)||(LA78_0 >= 148 && LA78_0 <= 149)||LA78_0==162||LA78_0==165||LA78_0==170||LA78_0==173||(LA78_0 >= 175 && LA78_0 <= 176)||(LA78_0 >= 179 && LA78_0 <= 180)||LA78_0==193||LA78_0==208||LA78_0==219) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access23325);
                            classical_method_params_push382=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push382.getTree());

                            }
                            break;

                    }


                    char_literal383=(Token)match(input,120,FOLLOW_120_in_simple_expression_value_access23328); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal383_tree = 
                    (Object)adaptor.create(char_literal383)
                    ;
                    adaptor.addChild(root_0, char_literal383_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:5: simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access23335);
                    simple_expression_value2384=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2384.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:30: ( access_wrapper simple_expression_value )*
                    loop79:
                    do {
                        int alt79=2;
                        alt79 = dfa79.predict(input);
                        switch (alt79) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:31: access_wrapper simple_expression_value
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access23338);
                    	    access_wrapper385=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper385.getTree());

                    	    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access23340);
                    	    simple_expression_value386=simple_expression_value();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value386.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop79;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:72: ( ( '+=' | '-=' ) simple_expression_value )?
                    int alt80=2;
                    alt80 = dfa80.predict(input);
                    switch (alt80) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:543:73: ( '+=' | '-=' ) simple_expression_value
                            {
                            set387=(Token)input.LT(1);

                            if ( input.LA(1)==125||input.LA(1)==129 ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                                (Object)adaptor.create(set387)
                                );
                                state.errorRecovery=false;
                                state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access23351);
                            simple_expression_value388=simple_expression_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value388.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access2"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | C_LIT -> ^( CHAR C_LIT ) | NR_LIT -> ^( NUMBER NR_LIT ) | bool -> ^( BOOL bool ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal389=null;
        Token char_literal391=null;
        Token char_literal393=null;
        Token set394=null;
        Token C_LIT398=null;
        Token NR_LIT399=null;
        ObjcParser.name_return name390 =null;

        ObjcParser.element_value_return element_value392 =null;

        ObjcParser.name_return name395 =null;

        ObjcParser.string_return string396 =null;

        ObjcParser.string_objc_return string_objc397 =null;

        ObjcParser.bool_return bool400 =null;

        ObjcParser.name_return name401 =null;


        Object char_literal389_tree=null;
        Object char_literal391_tree=null;
        Object char_literal393_tree=null;
        Object set394_tree=null;
        Object C_LIT398_tree=null;
        Object NR_LIT399_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_NR_LIT=new RewriteRuleTokenStream(adaptor,"token NR_LIT");
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_C_LIT=new RewriteRuleTokenStream(adaptor,"token C_LIT");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_bool=new RewriteRuleSubtreeStream(adaptor,"rule bool");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | C_LIT -> ^( CHAR C_LIT ) | NR_LIT -> ^( NUMBER NR_LIT ) | bool -> ^( BOOL bool ) | name )
            int alt83=8;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:23: ( '&' )?
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==116) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:23: '&'
                            {
                            char_literal389=(Token)match(input,116,FOLLOW_116_in_simple_expression_value3378); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal389);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3381);
                    name390=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name390.getTree());

                    char_literal391=(Token)match(input,176,FOLLOW_176_in_simple_expression_value3383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(char_literal391);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value3385);
                    element_value392=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value392.getTree());

                    char_literal393=(Token)match(input,178,FOLLOW_178_in_simple_expression_value3387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(char_literal393);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 547:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set394=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==121 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set394)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3421);
                    name395=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name395.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:5: string
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_in_simple_expression_value3427);
                    string396=string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string396.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:550:5: string_objc
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_objc_in_simple_expression_value3433);
                    string_objc397=string_objc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_objc397.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:5: C_LIT
                    {
                    C_LIT398=(Token)match(input,C_LIT,FOLLOW_C_LIT_in_simple_expression_value3439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_C_LIT.add(C_LIT398);


                    // AST REWRITE
                    // elements: C_LIT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 551:11: -> ^( CHAR C_LIT )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:14: ^( CHAR C_LIT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_C_LIT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:5: NR_LIT
                    {
                    NR_LIT399=(Token)match(input,NR_LIT,FOLLOW_NR_LIT_in_simple_expression_value3453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NR_LIT.add(NR_LIT399);


                    // AST REWRITE
                    // elements: NR_LIT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 552:12: -> ^( NUMBER NR_LIT )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:15: ^( NUMBER NR_LIT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NR_LIT.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:553:5: bool
                    {
                    pushFollow(FOLLOW_bool_in_simple_expression_value3467);
                    bool400=bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bool.add(bool400.getTree());

                    // AST REWRITE
                    // elements: bool
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 553:10: -> ^( BOOL bool )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:553:13: ^( BOOL bool )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, stream_bool.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:554:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3481);
                    name401=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name401.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:557:1: simple_expression_value2 : ( simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal404=null;
        Token char_literal406=null;
        ObjcParser.simple_expression_value_return simple_expression_value402 =null;

        ObjcParser.method_msg_return method_msg403 =null;

        ObjcParser.element_value_return element_value405 =null;


        Object char_literal404_tree=null;
        Object char_literal406_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:3: ( simple_expression_value | method_msg | '(' element_value ')' )
            int alt84=3;
            switch ( input.LA(1) ) {
            case C_LIT:
            case ID:
            case NR_LIT:
            case STR_LIT:
            case 116:
            case 121:
            case 148:
            case 173:
            case 175:
            case 193:
            case 208:
                {
                alt84=1;
                }
                break;
            case 170:
            case 176:
                {
                alt84=2;
                }
                break;
            case 118:
                {
                alt84=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;

            }

            switch (alt84) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:558:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23494);
                    simple_expression_value402=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value402.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23500);
                    method_msg403=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg403.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:560:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal404=(Token)match(input,118,FOLLOW_118_in_simple_expression_value23506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal404_tree = 
                    (Object)adaptor.create(char_literal404)
                    ;
                    adaptor.addChild(root_0, char_literal404_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23508);
                    element_value405=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value405.getTree());

                    char_literal406=(Token)match(input,120,FOLLOW_120_in_simple_expression_value23510); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal406_tree = 
                    (Object)adaptor.create(char_literal406)
                    ;
                    adaptor.addChild(root_0, char_literal406_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2407 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3524);
            op2407=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2407.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 564:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set408=null;

        Object set408_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set408=(Token)input.LT(1);

            if ( input.LA(1)==112||(input.LA(1) >= 114 && input.LA(1) <= 116)||input.LA(1)==121||input.LA(1)==123||input.LA(1)==127||input.LA(1)==132||(input.LA(1) >= 136 && input.LA(1) <= 137)||(input.LA(1) >= 139 && input.LA(1) <= 144)||input.LA(1)==179||input.LA(1)==215||input.LA(1)==217 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set408)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:569:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign409 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:570:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:570:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3629);
            op_assign409=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign409.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 570:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:570:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set410=null;

        Object set410_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:574:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set410=(Token)input.LT(1);

            if ( input.LA(1)==117||input.LA(1)==122||input.LA(1)==125||input.LA(1)==129||input.LA(1)==133||input.LA(1)==138||input.LA(1)==140||input.LA(1)==145||input.LA(1)==216 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set410)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector411 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3697);
            selector411=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector411.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 578:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal412=null;

        Object string_literal412_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:582:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:582:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal412=(Token)match(input,165,FOLLOW_165_in_selector3720); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal412_tree = 
            (Object)adaptor.create(string_literal412)
            ;
            adaptor.addChild(root_0, string_literal412_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name413 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3735);
            type_cast_name413=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name413.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 586:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:589:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal414=null;
        Token char_literal416=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration415 =null;


        Object char_literal414_tree=null;
        Object char_literal416_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:591:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal414=(Token)match(input,118,FOLLOW_118_in_type_cast_name3758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal414_tree = 
            (Object)adaptor.create(char_literal414)
            ;
            adaptor.addChild(root_0, char_literal414_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3760);
            type_cast_declaration415=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration415.getTree());

            char_literal416=(Token)match(input,120,FOLLOW_120_in_type_cast_name3762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal416_tree = 
            (Object)adaptor.create(char_literal416)
            ;
            adaptor.addChild(root_0, char_literal416_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol417 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration418 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3780);
                    type_declaration_protocol417=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol417.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:596:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3786);
                    classical_type_declaration418=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration418.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:599:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set419=null;

        Object set419_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:600:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set419=(Token)input.LT(1);

            if ( (input.LA(1) >= 130 && input.LA(1) <= 131) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set419)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:603:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access420 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3814);
            access420=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access420.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 604:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:604:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple421 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3833);
            object_access_simple421=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple421.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 608:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name422 =null;

        ObjcParser.access_wrapper_return access_wrapper423 =null;

        ObjcParser.name_return name424 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3854);
            name422=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name422.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:10: ( access_wrapper name )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( ((LA86_0 >= 130 && LA86_0 <= 131)) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3857);
            	    access_wrapper423=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper423.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3859);
            	    name424=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name424.getTree());

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:615:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access425 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3876);
            object_access425=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access425.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 616:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue426 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:4: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:620:6: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3898);
            cast_lvalue426=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue426.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:1: cast_lvalue : ( ( type_cast_name )=> type_cast_wrapper lvalue_access | ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal429=null;
        Token char_literal432=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper427 =null;

        ObjcParser.lvalue_access_return lvalue_access428 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper430 =null;

        ObjcParser.lvalue_access_return lvalue_access431 =null;

        ObjcParser.access_wrapper_return access_wrapper433 =null;

        ObjcParser.name_return name434 =null;

        ObjcParser.lvalue_access_return lvalue_access435 =null;


        Object char_literal429_tree=null;
        Object char_literal432_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:3: ( ( type_cast_name )=> type_cast_wrapper lvalue_access | ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt88=3;
            alt88 = dfa88.predict(input);
            switch (alt88) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: ( type_cast_name )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3918);
                    type_cast_wrapper427=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper427.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3920);
                    lvalue_access428=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access428.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:5: ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal429=(Token)match(input,118,FOLLOW_118_in_cast_lvalue3933); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal429_tree = 
                    (Object)adaptor.create(char_literal429)
                    ;
                    adaptor.addChild(root_0, char_literal429_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3935);
                    type_cast_wrapper430=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper430.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3937);
                    lvalue_access431=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access431.getTree());

                    char_literal432=(Token)match(input,120,FOLLOW_120_in_cast_lvalue3939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal432_tree = 
                    (Object)adaptor.create(char_literal432)
                    ;
                    adaptor.addChild(root_0, char_literal432_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:68: ( access_wrapper name )+
                    int cnt87=0;
                    loop87:
                    do {
                        int alt87=2;
                        int LA87_0 = input.LA(1);

                        if ( ((LA87_0 >= 130 && LA87_0 <= 131)) ) {
                            alt87=1;
                        }


                        switch (alt87) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:69: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3942);
                    	    access_wrapper433=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper433.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3944);
                    	    name434=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name434.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt87 >= 1 ) break loop87;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(87, input);
                                throw eee;
                        }
                        cnt87++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:626:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3952);
                    lvalue_access435=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access435.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:629:1: lvalue_access : ( lvalue ( access_wrapper lvalue )* | '(' lvalue ')' ( access_wrapper lvalue )* );
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal439=null;
        Token char_literal441=null;
        ObjcParser.lvalue_return lvalue436 =null;

        ObjcParser.access_wrapper_return access_wrapper437 =null;

        ObjcParser.lvalue_return lvalue438 =null;

        ObjcParser.lvalue_return lvalue440 =null;

        ObjcParser.access_wrapper_return access_wrapper442 =null;

        ObjcParser.lvalue_return lvalue443 =null;


        Object char_literal439_tree=null;
        Object char_literal441_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:3: ( lvalue ( access_wrapper lvalue )* | '(' lvalue ')' ( access_wrapper lvalue )* )
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==ID||LA91_0==116||LA91_0==121) ) {
                alt91=1;
            }
            else if ( (LA91_0==118) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;

            }
            switch (alt91) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:5: lvalue ( access_wrapper lvalue )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_in_lvalue_access3968);
                    lvalue436=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue436.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:12: ( access_wrapper lvalue )*
                    loop89:
                    do {
                        int alt89=2;
                        int LA89_0 = input.LA(1);

                        if ( ((LA89_0 >= 130 && LA89_0 <= 131)) ) {
                            alt89=1;
                        }


                        switch (alt89) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:630:13: access_wrapper lvalue
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3971);
                    	    access_wrapper437=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper437.getTree());

                    	    pushFollow(FOLLOW_lvalue_in_lvalue_access3973);
                    	    lvalue438=lvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue438.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop89;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:5: '(' lvalue ')' ( access_wrapper lvalue )*
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal439=(Token)match(input,118,FOLLOW_118_in_lvalue_access3981); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal439_tree = 
                    (Object)adaptor.create(char_literal439)
                    ;
                    adaptor.addChild(root_0, char_literal439_tree);
                    }

                    pushFollow(FOLLOW_lvalue_in_lvalue_access3983);
                    lvalue440=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue440.getTree());

                    char_literal441=(Token)match(input,120,FOLLOW_120_in_lvalue_access3985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal441_tree = 
                    (Object)adaptor.create(char_literal441)
                    ;
                    adaptor.addChild(root_0, char_literal441_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:20: ( access_wrapper lvalue )*
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( ((LA90_0 >= 130 && LA90_0 <= 131)) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:631:21: access_wrapper lvalue
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3988);
                    	    access_wrapper442=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper442.getTree());

                    	    pushFollow(FOLLOW_lvalue_in_lvalue_access3990);
                    	    lvalue443=lvalue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue443.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop90;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal444=null;
        Token char_literal446=null;
        Token char_literal448=null;
        Token set449=null;
        ObjcParser.name_return name445 =null;

        ObjcParser.element_value_return element_value447 =null;

        ObjcParser.name_return name450 =null;

        ObjcParser.name_return name451 =null;


        Object char_literal444_tree=null;
        Object char_literal446_tree=null;
        Object char_literal448_tree=null;
        Object set449_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt93=3;
            switch ( input.LA(1) ) {
            case 116:
                {
                int LA93_1 = input.LA(2);

                if ( (LA93_1==ID) ) {
                    int LA93_4 = input.LA(3);

                    if ( (LA93_4==176) && (synpred22_Objc())) {
                        alt93=1;
                    }
                    else if ( (LA93_4==EOF||LA93_4==117||LA93_4==120||LA93_4==122||(LA93_4 >= 124 && LA93_4 <= 125)||(LA93_4 >= 128 && LA93_4 <= 131)||LA93_4==133||LA93_4==138||LA93_4==140||LA93_4==145||LA93_4==216) ) {
                        alt93=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA93_2 = input.LA(2);

                if ( (LA93_2==176) && (synpred22_Objc())) {
                    alt93=1;
                }
                else if ( (LA93_2==EOF||LA93_2==117||LA93_2==120||LA93_2==122||(LA93_2 >= 124 && LA93_2 <= 125)||(LA93_2 >= 128 && LA93_2 <= 131)||LA93_2==133||LA93_2==138||LA93_2==140||LA93_2==145||LA93_2==216) ) {
                    alt93=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 93, 2, input);

                    throw nvae;

                }
                }
                break;
            case 121:
                {
                alt93=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;

            }

            switch (alt93) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:23: ( '&' )?
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==116) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:23: '&'
                            {
                            char_literal444=(Token)match(input,116,FOLLOW_116_in_lvalue4017); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal444);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue4020);
                    name445=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name445.getTree());

                    char_literal446=(Token)match(input,176,FOLLOW_176_in_lvalue4022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(char_literal446);


                    pushFollow(FOLLOW_element_value_in_lvalue4024);
                    element_value447=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value447.getTree());

                    char_literal448=(Token)match(input,178,FOLLOW_178_in_lvalue4026); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(char_literal448);


                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 635:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:636:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set449=(Token)input.LT(1);

                    if ( input.LA(1)==116||input.LA(1)==121 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set449)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue4048);
                    name450=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name450.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:637:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue4054);
                    name451=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name451.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:1: break_stmt : 'break' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal452=null;

        Object string_literal452_tree=null;
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:642:3: ( 'break' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:642:5: 'break'
            {
            string_literal452=(Token)match(input,183,FOLLOW_183_in_break_stmt4070); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal452);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 642:13: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:642:16: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:1: continue_stmt : 'continue' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal453=null;

        Object string_literal453_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:3: ( 'continue' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:5: 'continue'
            {
            string_literal453=(Token)match(input,186,FOLLOW_186_in_continue_stmt4091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal453);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 646:16: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:646:18: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:652:1: extern : ( 'extern' | 'MH_EXPORT' );
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set454=null;

        Object set454_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:5: ( 'extern' | 'MH_EXPORT' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set454=(Token)input.LT(1);

            if ( input.LA(1)==172||input.LA(1)==192 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set454)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration455 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper4142);
            extern_declaration455=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration455.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 657:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:659:1: extern_declaration : extern field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern456 =null;

        ObjcParser.field_declaration_return field_declaration457 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:3: ( extern field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:5: extern field_declaration
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_extern_in_extern_declaration4163);
            extern456=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, extern456.getTree());

            pushFollow(FOLLOW_field_declaration_in_extern_declaration4165);
            field_declaration457=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration457.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:662:1: optional_prefix : ( '@optional' | '@required' );
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set458=null;

        Object set458_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:663:3: ( '@optional' | '@required' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set458=(Token)input.LT(1);

            if ( input.LA(1)==158||input.LA(1)==164 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set458)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:665:1: declarations : ( optional_prefix | method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix459 =null;

        ObjcParser.method_declaration_return method_declaration460 =null;

        ObjcParser.property_prefix_return property_prefix461 =null;

        ObjcParser.optional_prefix_return optional_prefix462 =null;

        ObjcParser.field_declaration_return field_declaration463 =null;

        ObjcParser.comments_return comments464 =null;


        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:3: ( optional_prefix | method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt95=4;
            switch ( input.LA(1) ) {
            case 158:
            case 164:
                {
                alt95=1;
                }
                break;
            case 123:
            case 127:
                {
                alt95=2;
                }
                break;
            case 160:
                {
                alt95=3;
                }
                break;
            case M_C_LIT:
            case S_C_LIT:
                {
                alt95=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:666:5: optional_prefix
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_optional_prefix_in_declarations4191);
                    optional_prefix459=optional_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, optional_prefix459.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:5: method_declaration
                    {
                    pushFollow(FOLLOW_method_declaration_in_declarations4197);
                    method_declaration460=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration460.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 667:24: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:667:27: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations4211);
                    property_prefix461=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix461.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:21: ( optional_prefix )?
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==158||LA94_0==164) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations4213);
                            optional_prefix462=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix462.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations4216);
                    field_declaration463=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration463.getTree());

                    // AST REWRITE
                    // elements: property_prefix, field_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 668:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:668:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:669:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations4232);
                    comments464=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments464.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:672:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration465 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper4247);
            field_declaration465=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration465.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 673:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:675:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal466=null;

        Object string_literal466_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal466=(Token)match(input,174,FOLLOW_174_in_ns_inline4269); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal466_tree = 
            (Object)adaptor.create(string_literal466)
            ;
            adaptor.addChild(root_0, string_literal466_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:678:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal467=null;
        Token char_literal468=null;
        Token char_literal470=null;
        Token char_literal472=null;
        Token char_literal474=null;
        Token char_literal476=null;
        Token char_literal477=null;
        ObjcParser.name_return name469 =null;

        ObjcParser.name_return name471 =null;

        ObjcParser.name_return name473 =null;

        ObjcParser.name_return name475 =null;


        Object string_literal467_tree=null;
        Object char_literal468_tree=null;
        Object char_literal470_tree=null;
        Object char_literal472_tree=null;
        Object char_literal474_tree=null;
        Object char_literal476_tree=null;
        Object char_literal477_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal467=(Token)match(input,160,FOLLOW_160_in_property_prefix4281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal467_tree = 
            (Object)adaptor.create(string_literal467)
            ;
            adaptor.addChild(root_0, string_literal467_tree);
            }

            char_literal468=(Token)match(input,118,FOLLOW_118_in_property_prefix4283); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal468_tree = 
            (Object)adaptor.create(char_literal468)
            ;
            adaptor.addChild(root_0, char_literal468_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix4285);
            name469=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name469.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:26: ( '=' name )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==140) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:27: '=' name
                    {
                    char_literal470=(Token)match(input,140,FOLLOW_140_in_property_prefix4288); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal470_tree = 
                    (Object)adaptor.create(char_literal470)
                    ;
                    adaptor.addChild(root_0, char_literal470_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix4290);
                    name471=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name471.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==126) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal472=(Token)match(input,126,FOLLOW_126_in_property_prefix4295); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal472_tree = 
            	    (Object)adaptor.create(char_literal472)
            	    ;
            	    adaptor.addChild(root_0, char_literal472_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix4297);
            	    name473=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name473.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:48: ( '=' name ( ':' )? )?
            	    int alt98=2;
            	    int LA98_0 = input.LA(1);

            	    if ( (LA98_0==140) ) {
            	        alt98=1;
            	    }
            	    switch (alt98) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:49: '=' name ( ':' )?
            	            {
            	            char_literal474=(Token)match(input,140,FOLLOW_140_in_property_prefix4300); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal474_tree = 
            	            (Object)adaptor.create(char_literal474)
            	            ;
            	            adaptor.addChild(root_0, char_literal474_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix4302);
            	            name475=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name475.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:58: ( ':' )?
            	            int alt97=2;
            	            int LA97_0 = input.LA(1);

            	            if ( (LA97_0==134) ) {
            	                alt97=1;
            	            }
            	            switch (alt97) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:679:58: ':'
            	                    {
            	                    char_literal476=(Token)match(input,134,FOLLOW_134_in_property_prefix4304); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal476_tree = 
            	                    (Object)adaptor.create(char_literal476)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal476_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            char_literal477=(Token)match(input,120,FOLLOW_120_in_property_prefix4311); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal477_tree = 
            (Object)adaptor.create(char_literal477)
            ;
            adaptor.addChild(root_0, char_literal477_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration478 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4324);
            interface_declaration478=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration478.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 690:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:692:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration479 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper4344);
            protocol_declaration479=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration479.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 693:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:695:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal480=null;
        ObjcParser.typedef_declaration_return typedef_declaration481 =null;


        Object string_literal480_tree=null;
        RewriteRuleTokenStream stream_209=new RewriteRuleTokenStream(adaptor,"token 209");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:5: 'typedef' typedef_declaration
            {
            string_literal480=(Token)match(input,209,FOLLOW_209_in_typedef_declaration_wrapper4362); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_209.add(string_literal480);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper4364);
            typedef_declaration481=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration481.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:696:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class type_declaration_struct_enum_union_anonymous_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_enum_union_anonymous"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:1: type_declaration_struct_enum_union_anonymous : ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full );
    public final ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous() throws RecognitionException {
        ObjcParser.type_declaration_struct_enum_union_anonymous_return retval = new ObjcParser.type_declaration_struct_enum_union_anonymous_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full482 =null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full483 =null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full484 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:3: ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full )
            int alt100=3;
            switch ( input.LA(1) ) {
            case 206:
                {
                alt100=1;
                }
                break;
            case 190:
                {
                alt100=2;
                }
                break;
            case 210:
                {
                alt100=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }

            switch (alt100) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:5: type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4385);
                    type_declaration_struct_full482=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full482.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:5: type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4391);
                    type_declaration_enum_full483=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full483.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:5: type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4397);
                    type_declaration_union_full484=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full484.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_enum_union_anonymous"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:1: typedef_declaration : ( ( block_decl_predicate )=> block_decl | typedef_internal typedef_name ( ',' typedef_name )* ';' );
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal488=null;
        Token char_literal490=null;
        ObjcParser.block_decl_return block_decl485 =null;

        ObjcParser.typedef_internal_return typedef_internal486 =null;

        ObjcParser.typedef_name_return typedef_name487 =null;

        ObjcParser.typedef_name_return typedef_name489 =null;


        Object char_literal488_tree=null;
        Object char_literal490_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:3: ( ( block_decl_predicate )=> block_decl | typedef_internal typedef_name ( ',' typedef_name )* ';' )
            int alt102=2;
            alt102 = dfa102.predict(input);
            switch (alt102) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:5: ( block_decl_predicate )=> block_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_decl_in_typedef_declaration4418);
                    block_decl485=block_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_decl485.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_internal_in_typedef_declaration4424);
                    typedef_internal486=typedef_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal486.getTree());

                    pushFollow(FOLLOW_typedef_name_in_typedef_declaration4426);
                    typedef_name487=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name487.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:35: ( ',' typedef_name )*
                    loop101:
                    do {
                        int alt101=2;
                        int LA101_0 = input.LA(1);

                        if ( (LA101_0==126) ) {
                            alt101=1;
                        }


                        switch (alt101) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:707:36: ',' typedef_name
                    	    {
                    	    char_literal488=(Token)match(input,126,FOLLOW_126_in_typedef_declaration4429); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal488_tree = 
                    	    (Object)adaptor.create(char_literal488)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal488_tree);
                    	    }

                    	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration4431);
                    	    typedef_name489=typedef_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name489.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop101;
                        }
                    } while (true);


                    char_literal490=(Token)match(input,135,FOLLOW_135_in_typedef_declaration4435); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal490_tree = 
                    (Object)adaptor.create(char_literal490)
                    ;
                    adaptor.addChild(root_0, char_literal490_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal491=null;
        Token char_literal492=null;
        Token char_literal494=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane493 =null;


        Object char_literal491_tree=null;
        Object char_literal492_tree=null;
        Object char_literal494_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal491=(Token)match(input,118,FOLLOW_118_in_func_pointer_predicate4447); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal491_tree = 
            (Object)adaptor.create(char_literal491)
            ;
            adaptor.addChild(root_0, char_literal491_tree);
            }

            char_literal492=(Token)match(input,121,FOLLOW_121_in_func_pointer_predicate4449); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal492_tree = 
            (Object)adaptor.create(char_literal492)
            ;
            adaptor.addChild(root_0, char_literal492_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate4451);
            type_declaration_plane493=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane493.getTree());

            char_literal494=(Token)match(input,120,FOLLOW_120_in_func_pointer_predicate4453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal494_tree = 
            (Object)adaptor.create(char_literal494)
            ;
            adaptor.addChild(root_0, char_literal494_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal495=null;
        Token char_literal496=null;
        Token char_literal498=null;
        Token char_literal499=null;
        Token char_literal501=null;
        Token char_literal503=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane497 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane500 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane502 =null;


        Object char_literal495_tree=null;
        Object char_literal496_tree=null;
        Object char_literal498_tree=null;
        Object char_literal499_tree=null;
        Object char_literal501_tree=null;
        Object char_literal503_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal495=(Token)match(input,118,FOLLOW_118_in_func_pointer4468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal495);


            char_literal496=(Token)match(input,121,FOLLOW_121_in_func_pointer4470); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal496);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4472);
            type_declaration_plane497=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane497.getTree());

            char_literal498=(Token)match(input,120,FOLLOW_120_in_func_pointer4474); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal498);


            char_literal499=(Token)match(input,118,FOLLOW_118_in_func_pointer4476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal499);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==ID||LA104_0==171||(LA104_0 >= 181 && LA104_0 <= 182)||LA104_0==185||LA104_0==196||(LA104_0 >= 199 && LA104_0 <= 202)||LA104_0==204||(LA104_0 >= 211 && LA104_0 <= 212)) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4479);
                    type_declaration_plane500=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane500.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:68: ( ',' type_declaration_plane )*
                    loop103:
                    do {
                        int alt103=2;
                        int LA103_0 = input.LA(1);

                        if ( (LA103_0==126) ) {
                            alt103=1;
                        }


                        switch (alt103) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:69: ',' type_declaration_plane
                    	    {
                    	    char_literal501=(Token)match(input,126,FOLLOW_126_in_func_pointer4482); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_126.add(char_literal501);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4484);
                    	    type_declaration_plane502=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane502.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop103;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal503=(Token)match(input,120,FOLLOW_120_in_func_pointer4490); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal503);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 714:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:714:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer504 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct505 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum506 =null;

        ObjcParser.type_declaration_union_return type_declaration_union507 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane508 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt105=5;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==118) && (synpred24_Objc())) {
                alt105=1;
            }
            else if ( (LA105_0==206) ) {
                alt105=2;
            }
            else if ( (LA105_0==190) ) {
                alt105=3;
            }
            else if ( (LA105_0==210) ) {
                alt105=4;
            }
            else if ( (LA105_0==ID||LA105_0==171||(LA105_0 >= 181 && LA105_0 <= 182)||LA105_0==185||LA105_0==196||(LA105_0 >= 199 && LA105_0 <= 202)||LA105_0==204||(LA105_0 >= 211 && LA105_0 <= 212)) ) {
                alt105=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);

                throw nvae;

            }
            switch (alt105) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal4519);
                    func_pointer504=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer504.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal4525);
                    type_declaration_struct505=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct505.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal4531);
                    type_declaration_enum506=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum506.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:721:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal4537);
                    type_declaration_union507=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union507.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:722:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal4543);
                    type_declaration_plane508=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane508.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID509=null;

        Object ID509_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:5: ID
            {
            ID509=(Token)match(input,ID,FOLLOW_ID_in_typedef_name4558); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID509);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 726:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:726:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:728:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal510=null;
        Token char_literal512=null;
        Token string_literal513=null;
        Token char_literal515=null;
        Token char_literal517=null;
        Token char_literal519=null;
        Token char_literal521=null;
        ObjcParser.class_name_return class_name511 =null;

        ObjcParser.protocol_name_return protocol_name514 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple516 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple518 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple520 =null;


        Object string_literal510_tree=null;
        Object char_literal512_tree=null;
        Object string_literal513_tree=null;
        Object char_literal515_tree=null;
        Object char_literal517_tree=null;
        Object char_literal519_tree=null;
        Object char_literal521_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_152=new RewriteRuleTokenStream(adaptor,"token 152");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt106=5;
            switch ( input.LA(1) ) {
            case 152:
                {
                alt106=1;
                }
                break;
            case 162:
                {
                alt106=2;
                }
                break;
            case 206:
                {
                alt106=3;
                }
                break;
            case 210:
                {
                alt106=4;
                }
                break;
            case 190:
                {
                alt106=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;

            }

            switch (alt106) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:5: '@class' class_name ';'
                    {
                    string_literal510=(Token)match(input,152,FOLLOW_152_in_forward_class_declaration4576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_152.add(string_literal510);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4578);
                    class_name511=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name511.getTree());

                    char_literal512=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal512);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 729:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:5: '@protocol' protocol_name ';'
                    {
                    string_literal513=(Token)match(input,162,FOLLOW_162_in_forward_class_declaration4593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(string_literal513);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4595);
                    protocol_name514=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name514.getTree());

                    char_literal515=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal515);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 730:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:730:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4610);
                    type_declaration_struct_simple516=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple516.getTree());

                    char_literal517=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal517);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 731:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4625);
                    type_declaration_union_simple518=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple518.getTree());

                    char_literal519=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal519);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 732:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4640);
                    type_declaration_enum_simple520=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple520.getTree());

                    char_literal521=(Token)match(input,135,FOLLOW_135_in_forward_class_declaration4642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal521);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 733:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:733:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID522=null;

        Object ID522_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:5: ID
            {
            ID522=(Token)match(input,ID,FOLLOW_ID_in_class_name4662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID522);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 737:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:737:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal523=null;
        ObjcParser.protocol_name_return protocol_name524 =null;

        ObjcParser.implements_interfaces_return implements_interfaces525 =null;

        ObjcParser.class_protocol_end_return class_protocol_end526 =null;


        Object string_literal523_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal523=(Token)match(input,162,FOLLOW_162_in_protocol_declaration4682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal523_tree = 
            (Object)adaptor.create(string_literal523)
            ;
            adaptor.addChild(root_0, string_literal523_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4684);
            protocol_name524=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name524.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:31: ( implements_interfaces )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==136) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4686);
                    implements_interfaces525=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces525.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4694);
            class_protocol_end526=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end526.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal528=null;
        ObjcParser.declarations_return declarations527 =null;


        Object string_literal528_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:745:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:745:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:745:5: ( declarations )*
            loop108:
            do {
                int alt108=2;
                int LA108_0 = input.LA(1);

                if ( (LA108_0==M_C_LIT||LA108_0==S_C_LIT||LA108_0==123||LA108_0==127||LA108_0==158||LA108_0==160||LA108_0==164) ) {
                    alt108=1;
                }


                switch (alt108) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:745:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4708);
            	    declarations527=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations527.getTree());

            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);


            string_literal528=(Token)match(input,154,FOLLOW_154_in_class_protocol_end4715); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal528_tree = 
            (Object)adaptor.create(string_literal528)
            ;
            adaptor.addChild(root_0, string_literal528_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:749:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal529=null;
        Token char_literal531=null;
        ObjcParser.template_internal_return template_internal530 =null;


        Object char_literal529_tree=null;
        Object char_literal531_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:749:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:749:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal529=(Token)match(input,136,FOLLOW_136_in_template4727); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal529_tree = 
            (Object)adaptor.create(char_literal529)
            ;
            adaptor.addChild(root_0, char_literal529_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4729);
            template_internal530=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal530.getTree());

            char_literal531=(Token)match(input,142,FOLLOW_142_in_template4731); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal531_tree = 
            (Object)adaptor.create(char_literal531)
            ;
            adaptor.addChild(root_0, char_literal531_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols532 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4740);
            implements_protocols532=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols532.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 752:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal533=null;
        Token char_literal535=null;
        Token char_literal537=null;
        ObjcParser.type_dec_internal_return type_dec_internal534 =null;

        ObjcParser.type_dec_internal_return type_dec_internal536 =null;


        Object char_literal533_tree=null;
        Object char_literal535_tree=null;
        Object char_literal537_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal533=(Token)match(input,136,FOLLOW_136_in_implements_protocols4765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal533);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4767);
            type_dec_internal534=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal534.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:27: ( ',' type_dec_internal )*
            loop109:
            do {
                int alt109=2;
                int LA109_0 = input.LA(1);

                if ( (LA109_0==126) ) {
                    alt109=1;
                }


                switch (alt109) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:28: ',' type_dec_internal
            	    {
            	    char_literal535=(Token)match(input,126,FOLLOW_126_in_implements_protocols4770); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal535);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4772);
            	    type_dec_internal536=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal536.getTree());

            	    }
            	    break;

            	default :
            	    break loop109;
                }
            } while (true);


            char_literal537=(Token)match(input,142,FOLLOW_142_in_implements_protocols4776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(char_literal537);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 756:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:759:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal539=null;
        ObjcParser.template_type_return template_type538 =null;

        ObjcParser.template_type_return template_type540 =null;


        Object char_literal539_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4798);
            template_type538=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type538.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:19: ( ',' template_type )*
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( (LA110_0==126) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:760:20: ',' template_type
            	    {
            	    char_literal539=(Token)match(input,126,FOLLOW_126_in_template_internal4801); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal539_tree = 
            	    (Object)adaptor.create(char_literal539)
            	    ;
            	    adaptor.addChild(root_0, char_literal539_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4803);
            	    template_type540=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type540.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal542=null;
        ObjcParser.template_name_return template_name541 =null;

        ObjcParser.template_name_return template_name543 =null;


        Object string_literal542_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:3: ( template_name | 'struct' template_name )
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==ID) ) {
                alt111=1;
            }
            else if ( (LA111_0==206) ) {
                alt111=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 111, 0, input);

                throw nvae;

            }
            switch (alt111) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4817);
                    template_name541=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name541.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal542=(Token)match(input,206,FOLLOW_206_in_template_type4823); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal542_tree = 
                    (Object)adaptor.create(string_literal542)
                    ;
                    adaptor.addChild(root_0, string_literal542_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4825);
                    template_name543=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:767:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID544=null;

        Object ID544_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:5: ID
            {
            ID544=(Token)match(input,ID,FOLLOW_ID_in_template_name4840); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID544);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 768:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:771:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID545=null;

        Object ID545_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:5: ID
            {
            ID545=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID545);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 772:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:772:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal546=null;
        Token string_literal551=null;
        ObjcParser.interface_name_return interface_name547 =null;

        ObjcParser.superclass_name_return superclass_name548 =null;

        ObjcParser.fields_body_return fields_body549 =null;

        ObjcParser.declarations_return declarations550 =null;


        Object string_literal546_tree=null;
        Object string_literal551_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:775:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal546=(Token)match(input,157,FOLLOW_157_in_interface_declaration4887); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal546_tree = 
            (Object)adaptor.create(string_literal546)
            ;
            adaptor.addChild(root_0, string_literal546_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4889);
            interface_name547=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name547.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4891);
            superclass_name548=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name548.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:3: ( fields_body )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( (LA112_0==214) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4895);
                    fields_body549=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body549.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:3: ( declarations )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==M_C_LIT||LA113_0==S_C_LIT||LA113_0==123||LA113_0==127||LA113_0==158||LA113_0==160||LA113_0==164) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4900);
            	    declarations550=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations550.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            string_literal551=(Token)match(input,154,FOLLOW_154_in_interface_declaration4905); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal551_tree = 
            (Object)adaptor.create(string_literal551)
            ;
            adaptor.addChild(root_0, string_literal551_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:781:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal552=null;
        Token char_literal554=null;
        ObjcParser.body_item_return body_item553 =null;


        Object char_literal552_tree=null;
        Object char_literal554_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:782:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal552=(Token)match(input,214,FOLLOW_214_in_fields_body4922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal552_tree = 
            (Object)adaptor.create(char_literal552)
            ;
            adaptor.addChild(root_0, char_literal552_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:5: ( body_item )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( (LA114_0==ID||LA114_0==M_C_LIT||LA114_0==S_C_LIT||LA114_0==118||LA114_0==159||LA114_0==161||LA114_0==163||LA114_0==171||(LA114_0 >= 181 && LA114_0 <= 182)||LA114_0==185||LA114_0==190||LA114_0==196||(LA114_0 >= 199 && LA114_0 <= 202)||LA114_0==204||LA114_0==206||(LA114_0 >= 209 && LA114_0 <= 212)) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4928);
            	    body_item553=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item553.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            char_literal554=(Token)match(input,218,FOLLOW_218_in_fields_body4933); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal554_tree = 
            (Object)adaptor.create(char_literal554)
            ;
            adaptor.addChild(root_0, char_literal554_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper555 =null;

        ObjcParser.field_modifiers_return field_modifiers556 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper557 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper558 =null;

        ObjcParser.comments_return comments559 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==ID||LA118_0==118||LA118_0==159||LA118_0==161||LA118_0==163||LA118_0==171||(LA118_0 >= 181 && LA118_0 <= 182)||LA118_0==185||LA118_0==190||LA118_0==196||(LA118_0 >= 199 && LA118_0 <= 202)||LA118_0==204||LA118_0==206||(LA118_0 >= 209 && LA118_0 <= 212)) ) {
                alt118=1;
            }
            else if ( (LA118_0==M_C_LIT||LA118_0==S_C_LIT) ) {
                alt118=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;

            }
            switch (alt118) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( group_modifier_wrapper )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==159||LA115_0==161||LA115_0==163) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4948);
                            group_modifier_wrapper555=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper555.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:29: ( field_modifiers )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==171) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4951);
                            field_modifiers556=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers556.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==209) ) {
                        alt117=1;
                    }
                    else if ( (LA117_0==ID||LA117_0==118||LA117_0==171||(LA117_0 >= 181 && LA117_0 <= 182)||LA117_0==185||LA117_0==190||LA117_0==196||(LA117_0 >= 199 && LA117_0 <= 202)||LA117_0==204||LA117_0==206||(LA117_0 >= 210 && LA117_0 <= 212)) ) {
                        alt117=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 117, 0, input);

                        throw nvae;

                    }
                    switch (alt117) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4955);
                            typedef_declaration_wrapper557=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper557.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4959);
                            field_declaration_wrapper558=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper558.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:790:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4966);
                    comments559=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments559.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier560 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4979);
            group_modifier560=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier560.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 794:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:794:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set561=null;

        Object set561_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set561=(Token)input.LT(1);

            if ( input.LA(1)==159||input.LA(1)==161||input.LA(1)==163 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set561)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:799:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal562=null;

        Object string_literal562_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal562=(Token)match(input,171,FOLLOW_171_in_field_modifiers5024); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal562_tree = 
            (Object)adaptor.create(string_literal562)
            ;
            adaptor.addChild(root_0, string_literal562_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:803:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID563=null;
        ObjcParser.category_return category564 =null;


        Object ID563_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:5: ID ( category )?
            {
            ID563=(Token)match(input,ID,FOLLOW_ID_in_interface_name5039); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID563);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:8: ( category )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==118) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name5041);
                    category564=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category564.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, category
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 804:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal565=null;
        Token ID566=null;
        Token char_literal567=null;

        Object char_literal565_tree=null;
        Object ID566_tree=null;
        Object char_literal567_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:11: '(' ( ID )? ')'
            {
            char_literal565=(Token)match(input,118,FOLLOW_118_in_category5060); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal565);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:15: ( ID )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==ID) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:15: ID
                    {
                    ID566=(Token)match(input,ID,FOLLOW_ID_in_category5062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID566);


                    }
                    break;

            }


            char_literal567=(Token)match(input,120,FOLLOW_120_in_category5065); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal567);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 806:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:806:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal568=null;
        Token ID569=null;
        ObjcParser.implements_interfaces_return implements_interfaces570 =null;


        Object char_literal568_tree=null;
        Object ID569_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: ( ':' ID )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==134) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:6: ':' ID
                    {
                    char_literal568=(Token)match(input,134,FOLLOW_134_in_superclass_name5085); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal568);


                    ID569=(Token)match(input,ID,FOLLOW_ID_in_superclass_name5087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID569);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:15: ( implements_interfaces )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==136) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name5091);
                    implements_interfaces570=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces570.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: implements_interfaces, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration571 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: ( field_declaration )+
            int cnt123=0;
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==ID||LA123_0==118||LA123_0==171||(LA123_0 >= 181 && LA123_0 <= 182)||LA123_0==185||LA123_0==190||LA123_0==196||(LA123_0 >= 199 && LA123_0 <= 202)||LA123_0==204||LA123_0==206||(LA123_0 >= 210 && LA123_0 <= 212)) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations5120);
            	    field_declaration571=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration571.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt123 >= 1 ) break loop123;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(123, input);
                        throw eee;
                }
                cnt123++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 813:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:1: field_declaration : ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) );
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal575=null;
        Token char_literal578=null;
        Token char_literal582=null;
        Token char_literal583=null;
        ObjcParser.block_decl_return block_decl572 =null;

        ObjcParser.type_declaration_return type_declaration573 =null;

        ObjcParser.field_name_return field_name574 =null;

        ObjcParser.field_name_return field_name576 =null;

        ObjcParser.classical_method_params_return classical_method_params577 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper579 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper580 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init581 =null;


        Object char_literal575_tree=null;
        Object char_literal578_tree=null;
        Object char_literal582_tree=null;
        Object char_literal583_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:3: ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( block_decl_predicate )=> block_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_decl_in_field_declaration5147);
                    block_decl572=block_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_decl572.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:6: ( type_declaration field_name )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:7: type_declaration field_name
                    {
                    pushFollow(FOLLOW_type_declaration_in_field_declaration5155);
                    type_declaration573=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration573.getTree());

                    pushFollow(FOLLOW_field_name_in_field_declaration5157);
                    field_name574=field_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name574.getTree());

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:36: ( ',' field_name )*
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==126) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:37: ',' field_name
                    	    {
                    	    char_literal575=(Token)match(input,126,FOLLOW_126_in_field_declaration5161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal575_tree = 
                    	    (Object)adaptor.create(char_literal575)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal575_tree);
                    	    }

                    	    pushFollow(FOLLOW_field_name_in_field_declaration5163);
                    	    field_name576=field_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name576.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( ((LA127_0 >= 117 && LA127_0 <= 118)||LA127_0==122||LA127_0==125||LA127_0==129||LA127_0==133||LA127_0==138||LA127_0==140||LA127_0==145||LA127_0==216) ) {
                        alt127=1;
                    }
                    else if ( (LA127_0==135) ) {
                        alt127=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 0, input);

                        throw nvae;

                    }
                    switch (alt127) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                            int alt126=2;
                            int LA126_0 = input.LA(1);

                            if ( (LA126_0==118) ) {
                                alt126=1;
                            }
                            else if ( (LA126_0==117||LA126_0==122||LA126_0==125||LA126_0==129||LA126_0==133||LA126_0==138||LA126_0==140||LA126_0==145||LA126_0==216) ) {
                                alt126=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 126, 0, input);

                                throw nvae;

                            }
                            switch (alt126) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                                    {
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:57: classical_method_params ( ';' | block_multiline_wrapper )
                                    {
                                    pushFollow(FOLLOW_classical_method_params_in_field_declaration5170);
                                    classical_method_params577=classical_method_params();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params577.getTree());

                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:81: ( ';' | block_multiline_wrapper )
                                    int alt125=2;
                                    int LA125_0 = input.LA(1);

                                    if ( (LA125_0==135) ) {
                                        alt125=1;
                                    }
                                    else if ( (LA125_0==214) ) {
                                        alt125=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 125, 0, input);

                                        throw nvae;

                                    }
                                    switch (alt125) {
                                        case 1 :
                                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:82: ';'
                                            {
                                            char_literal578=(Token)match(input,135,FOLLOW_135_in_field_declaration5173); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            char_literal578_tree = 
                                            (Object)adaptor.create(char_literal578)
                                            ;
                                            adaptor.addChild(root_0, char_literal578_tree);
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:88: block_multiline_wrapper
                                            {
                                            pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration5177);
                                            block_multiline_wrapper579=block_multiline_wrapper();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper579.getTree());

                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:116: ( op_assign_wrapper element_value_or_array_init ';' )
                                    {
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:116: ( op_assign_wrapper element_value_or_array_init ';' )
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:117: op_assign_wrapper element_value_or_array_init ';'
                                    {
                                    pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration5184);
                                    op_assign_wrapper580=op_assign_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper580.getTree());

                                    pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration5186);
                                    element_value_or_array_init581=element_value_or_array_init();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init581.getTree());

                                    char_literal582=(Token)match(input,135,FOLLOW_135_in_field_declaration5188); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal582_tree = 
                                    (Object)adaptor.create(char_literal582)
                                    ;
                                    adaptor.addChild(root_0, char_literal582_tree);
                                    }

                                    }


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:171: ';'
                            {
                            char_literal583=(Token)match(input,135,FOLLOW_135_in_field_declaration5194); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal583_tree = 
                            (Object)adaptor.create(char_literal583)
                            ;
                            adaptor.addChild(root_0, char_literal583_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:820:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration584 =null;

        ObjcParser.field_name_return field_name585 =null;


        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple5209);
            type_declaration584=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration584.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple5211);
            field_name585=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name585.getTree());

            // AST REWRITE
            // elements: type_declaration, field_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 821:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal586=null;
        Token char_literal588=null;
        Token char_literal590=null;
        ObjcParser.classical_param_return classical_param587 =null;

        ObjcParser.classical_param_return classical_param589 =null;


        Object char_literal586_tree=null;
        Object char_literal588_tree=null;
        Object char_literal590_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal586=(Token)match(input,118,FOLLOW_118_in_classical_method_params5236); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal586);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:9: ( classical_param )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==ID||LA129_0==118||LA129_0==171||(LA129_0 >= 181 && LA129_0 <= 182)||LA129_0==185||LA129_0==190||LA129_0==196||(LA129_0 >= 199 && LA129_0 <= 202)||LA129_0==204||LA129_0==206||(LA129_0 >= 210 && LA129_0 <= 212)) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params5238);
                    classical_param587=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param587.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:26: ( ',' classical_param )*
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);

                if ( (LA130_0==126) ) {
                    alt130=1;
                }


                switch (alt130) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:27: ',' classical_param
            	    {
            	    char_literal588=(Token)match(input,126,FOLLOW_126_in_classical_method_params5242); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_126.add(char_literal588);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params5244);
            	    classical_param589=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param589.getTree());

            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);


            char_literal590=(Token)match(input,120,FOLLOW_120_in_classical_method_params5248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal590);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 825:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration591 =null;

        ObjcParser.param_name_return param_name592 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param5273);
            classical_type_declaration591=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration591.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param5275);
            param_name592=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name592.getTree());

            // AST REWRITE
            // elements: classical_type_declaration, param_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 829:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:829:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal596=null;
        Token string_literal597=null;
        Token char_literal599=null;
        Token string_literal600=null;
        Token char_literal602=null;
        Token string_literal603=null;
        Token char_literal605=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol593 =null;

        ObjcParser.func_pointer_return func_pointer594 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane595 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper598 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper601 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper604 =null;


        Object char_literal596_tree=null;
        Object string_literal597_tree=null;
        Object char_literal599_tree=null;
        Object string_literal600_tree=null;
        Object char_literal602_tree=null;
        Object string_literal603_tree=null;
        Object char_literal605_tree=null;
        RewriteRuleTokenStream stream_210=new RewriteRuleTokenStream(adaptor,"token 210");
        RewriteRuleTokenStream stream_116=new RewriteRuleTokenStream(adaptor,"token 116");
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt135=6;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==182) ) {
                int LA135_1 = input.LA(2);

                if ( (LA135_1==196) ) {
                    int LA135_18 = input.LA(3);

                    if ( (LA135_18==136) ) {
                        int LA135_31 = input.LA(4);

                        if ( (LA135_31==200) && (synpred26_Objc())) {
                            alt135=1;
                        }
                        else if ( (LA135_31==196) ) {
                            int LA135_44 = input.LA(5);

                            if ( (synpred26_Objc()) ) {
                                alt135=1;
                            }
                            else if ( (true) ) {
                                alt135=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 135, 44, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA135_31==201) && (synpred26_Objc())) {
                            alt135=1;
                        }
                        else if ( (LA135_31==204) && (synpred26_Objc())) {
                            alt135=1;
                        }
                        else if ( (LA135_31==ID) ) {
                            int LA135_47 = input.LA(5);

                            if ( (synpred26_Objc()) ) {
                                alt135=1;
                            }
                            else if ( (true) ) {
                                alt135=3;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 135, 47, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA135_31==136) ) {
                            alt135=3;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 135, 31, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA135_18==ID||LA135_18==116||(LA135_18 >= 120 && LA135_18 <= 121)||LA135_18==176) ) {
                        alt135=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 18, input);

                        throw nvae;

                    }
                }
                else if ( (LA135_1==ID||LA135_1==171||(LA135_1 >= 200 && LA135_1 <= 202)||LA135_1==204) ) {
                    alt135=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA135_0==196) ) {
                int LA135_2 = input.LA(2);

                if ( (LA135_2==136) ) {
                    int LA135_25 = input.LA(3);

                    if ( (LA135_25==200) && (synpred26_Objc())) {
                        alt135=1;
                    }
                    else if ( (LA135_25==196) ) {
                        int LA135_38 = input.LA(4);

                        if ( (LA135_38==136) ) {
                            alt135=3;
                        }
                        else if ( (LA135_38==142) && (synpred26_Objc())) {
                            alt135=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 135, 38, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA135_25==201) && (synpred26_Objc())) {
                        alt135=1;
                    }
                    else if ( (LA135_25==204) && (synpred26_Objc())) {
                        alt135=1;
                    }
                    else if ( (LA135_25==ID) ) {
                        int LA135_41 = input.LA(4);

                        if ( (LA135_41==121) ) {
                            alt135=3;
                        }
                        else if ( (LA135_41==142) && (synpred26_Objc())) {
                            alt135=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 135, 41, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA135_25==136) ) {
                        alt135=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 135, 25, input);

                        throw nvae;

                    }
                }
                else if ( (LA135_2==ID||LA135_2==116||(LA135_2 >= 120 && LA135_2 <= 121)||LA135_2==176) ) {
                    alt135=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 135, 2, input);

                    throw nvae;

                }
            }
            else if ( (LA135_0==118) && (synpred27_Objc())) {
                alt135=2;
            }
            else if ( (LA135_0==ID||LA135_0==171||LA135_0==181||LA135_0==185||(LA135_0 >= 199 && LA135_0 <= 202)||LA135_0==204||(LA135_0 >= 211 && LA135_0 <= 212)) ) {
                alt135=3;
            }
            else if ( (LA135_0==206) ) {
                alt135=4;
            }
            else if ( (LA135_0==210) ) {
                alt135=5;
            }
            else if ( (LA135_0==190) ) {
                alt135=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 135, 0, input);

                throw nvae;

            }
            switch (alt135) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration5304);
                    type_declaration_protocol593=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol593.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:834:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration5315);
                    func_pointer594=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer594.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration5321);
                    type_declaration_plane595=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane595.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:28: ( '&' )?
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==116) ) {
                        alt131=1;
                    }
                    switch (alt131) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:28: '&'
                            {
                            char_literal596=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration5323); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal596_tree = 
                            (Object)adaptor.create(char_literal596)
                            ;
                            adaptor.addChild(root_0, char_literal596_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal597=(Token)match(input,206,FOLLOW_206_in_classical_type_declaration5331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_206.add(string_literal597);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5333);
                    type_dec_wrapper598=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper598.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:32: ( '&' )?
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==116) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:32: '&'
                            {
                            char_literal599=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration5335); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal599);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 836:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal600=(Token)match(input,210,FOLLOW_210_in_classical_type_declaration5352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_210.add(string_literal600);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5354);
                    type_dec_wrapper601=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper601.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:31: ( '&' )?
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==116) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:31: '&'
                            {
                            char_literal602=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration5356); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal602);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 837:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:837:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal603=(Token)match(input,190,FOLLOW_190_in_classical_type_declaration5373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(string_literal603);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5375);
                    type_dec_wrapper604=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper604.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:30: ( '&' )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==116) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:30: '&'
                            {
                            char_literal605=(Token)match(input,116,FOLLOW_116_in_classical_type_declaration5377); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_116.add(char_literal605);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 838:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:838:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:841:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal610=null;
        Token char_literal611=null;
        Token char_literal613=null;
        Token char_literal615=null;
        Token char_literal617=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol606 =null;

        ObjcParser.func_pointer_return func_pointer607 =null;

        ObjcParser.block_type_decl_return block_type_decl608 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct609 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum612 =null;

        ObjcParser.type_declaration_union_return type_declaration_union614 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane616 =null;


        Object char_literal610_tree=null;
        Object char_literal611_tree=null;
        Object char_literal613_tree=null;
        Object char_literal615_tree=null;
        Object char_literal617_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt141=7;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration5406);
                    type_declaration_protocol606=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol606.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration5417);
                    func_pointer607=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer607.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:5: ( block_type_decl_predicate )=> block_type_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_type_decl_in_type_declaration5428);
                    block_type_decl608=block_type_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_type_decl608.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:5: type_declaration_struct ( '&' )? ( '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration5434);
                    type_declaration_struct609=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct609.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:29: ( '&' )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==116) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:29: '&'
                            {
                            char_literal610=(Token)match(input,116,FOLLOW_116_in_type_declaration5436); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal610_tree = 
                            (Object)adaptor.create(char_literal610)
                            ;
                            adaptor.addChild(root_0, char_literal610_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:33: ( '*' )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==121) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:845:33: '*'
                            {
                            char_literal611=(Token)match(input,121,FOLLOW_121_in_type_declaration5438); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal611_tree = 
                            (Object)adaptor.create(char_literal611)
                            ;
                            adaptor.addChild(root_0, char_literal611_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration5445);
                    type_declaration_enum612=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum612.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:27: ( '&' )?
                    int alt138=2;
                    int LA138_0 = input.LA(1);

                    if ( (LA138_0==116) ) {
                        alt138=1;
                    }
                    switch (alt138) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:846:27: '&'
                            {
                            char_literal613=(Token)match(input,116,FOLLOW_116_in_type_declaration5447); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal613_tree = 
                            (Object)adaptor.create(char_literal613)
                            ;
                            adaptor.addChild(root_0, char_literal613_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration5454);
                    type_declaration_union614=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union614.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:28: ( '&' )?
                    int alt139=2;
                    int LA139_0 = input.LA(1);

                    if ( (LA139_0==116) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:28: '&'
                            {
                            char_literal615=(Token)match(input,116,FOLLOW_116_in_type_declaration5456); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal615_tree = 
                            (Object)adaptor.create(char_literal615)
                            ;
                            adaptor.addChild(root_0, char_literal615_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration5463);
                    type_declaration_plane616=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane616.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:28: ( '&' )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==116) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:28: '&'
                            {
                            char_literal617=(Token)match(input,116,FOLLOW_116_in_type_declaration5465); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal617_tree = 
                            (Object)adaptor.create(char_literal617)
                            ;
                            adaptor.addChild(root_0, char_literal617_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:1: type_declaration_plane : ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? ( 'inout' )? ( '__weak' )? ( 'nullable' )? type_dec ( '*' 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal618=null;
        Token string_literal619=null;
        Token string_literal620=null;
        Token string_literal621=null;
        Token string_literal622=null;
        Token string_literal623=null;
        Token string_literal624=null;
        Token char_literal626=null;
        Token string_literal627=null;
        Token char_literal628=null;
        ObjcParser.type_dec_return type_dec625 =null;


        Object string_literal618_tree=null;
        Object string_literal619_tree=null;
        Object string_literal620_tree=null;
        Object string_literal621_tree=null;
        Object string_literal622_tree=null;
        Object string_literal623_tree=null;
        Object string_literal624_tree=null;
        Object char_literal626_tree=null;
        Object string_literal627_tree=null;
        Object char_literal628_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:3: ( ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? ( 'inout' )? ( '__weak' )? ( 'nullable' )? type_dec ( '*' 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:5: ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? ( 'inout' )? ( '__weak' )? ( 'nullable' )? type_dec ( '*' 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:5: ( '__block' )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==181) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:5: '__block'
                    {
                    string_literal618=(Token)match(input,181,FOLLOW_181_in_type_declaration_plane5480); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(string_literal618);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:16: ( 'volatile' )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==212) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:16: 'volatile'
                    {
                    string_literal619=(Token)match(input,212,FOLLOW_212_in_type_declaration_plane5483); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_212.add(string_literal619);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:28: ( 'const' )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==185) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:28: 'const'
                    {
                    string_literal620=(Token)match(input,185,FOLLOW_185_in_type_declaration_plane5486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(string_literal620);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:37: ( 'unsigned' )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==211) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:37: 'unsigned'
                    {
                    string_literal621=(Token)match(input,211,FOLLOW_211_in_type_declaration_plane5489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_211.add(string_literal621);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:49: ( 'inout' )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==199) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:49: 'inout'
                    {
                    string_literal622=(Token)match(input,199,FOLLOW_199_in_type_declaration_plane5492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(string_literal622);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:58: ( '__weak' )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==182) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:58: '__weak'
                    {
                    string_literal623=(Token)match(input,182,FOLLOW_182_in_type_declaration_plane5495); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(string_literal623);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:68: ( 'nullable' )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==202) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:68: 'nullable'
                    {
                    string_literal624=(Token)match(input,202,FOLLOW_202_in_type_declaration_plane5498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_202.add(string_literal624);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane5501);
            type_dec625=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec625.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:89: ( '*' 'const' ( '*' )? )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==121) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:90: '*' 'const' ( '*' )?
                    {
                    char_literal626=(Token)match(input,121,FOLLOW_121_in_type_declaration_plane5504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal626);


                    string_literal627=(Token)match(input,185,FOLLOW_185_in_type_declaration_plane5506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(string_literal627);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:102: ( '*' )?
                    int alt149=2;
                    int LA149_0 = input.LA(1);

                    if ( (LA149_0==121) ) {
                        alt149=1;
                    }
                    switch (alt149) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:102: '*'
                            {
                            char_literal628=(Token)match(input,121,FOLLOW_121_in_type_declaration_plane5508); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal628);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: 212, type_dec, 185
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 852:109: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:112: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:125: ( 'volatile' )?
                if ( stream_212.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_212.nextNode()
                    );

                }
                stream_212.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:146: ( 'const' )?
                if ( stream_185.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_185.nextNode()
                    );

                }
                stream_185.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:1: type_decl_protocol_predicate : ( ( '__weak' )? 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal629=null;
        Token string_literal630=null;
        Token char_literal631=null;

        Object string_literal629_tree=null;
        Object string_literal630_tree=null;
        Object char_literal631_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:3: ( ( ( '__weak' )? 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:5: ( ( '__weak' )? 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:5: ( ( '__weak' )? 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:6: ( '__weak' )? 'id' '<'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:6: ( '__weak' )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==182) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:6: '__weak'
                    {
                    string_literal629=(Token)match(input,182,FOLLOW_182_in_type_decl_protocol_predicate5540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal629_tree = 
                    (Object)adaptor.create(string_literal629)
                    ;
                    adaptor.addChild(root_0, string_literal629_tree);
                    }

                    }
                    break;

            }


            string_literal630=(Token)match(input,196,FOLLOW_196_in_type_decl_protocol_predicate5543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal630_tree = 
            (Object)adaptor.create(string_literal630)
            ;
            adaptor.addChild(root_0, string_literal630_tree);
            }

            char_literal631=(Token)match(input,136,FOLLOW_136_in_type_decl_protocol_predicate5545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal631_tree = 
            (Object)adaptor.create(char_literal631)
            ;
            adaptor.addChild(root_0, char_literal631_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:1: type_declaration_protocol : ( '__weak' )? 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal632=null;
        Token string_literal633=null;
        Token char_literal634=null;
        Token char_literal636=null;
        ObjcParser.type_dec_internal_return type_dec_internal635 =null;


        Object string_literal632_tree=null;
        Object string_literal633_tree=null;
        Object char_literal634_tree=null;
        Object char_literal636_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_142=new RewriteRuleTokenStream(adaptor,"token 142");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:3: ( ( '__weak' )? 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:5: ( '__weak' )? 'id' '<' type_dec_internal '>'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:5: ( '__weak' )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==182) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:5: '__weak'
                    {
                    string_literal632=(Token)match(input,182,FOLLOW_182_in_type_declaration_protocol5561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(string_literal632);


                    }
                    break;

            }


            string_literal633=(Token)match(input,196,FOLLOW_196_in_type_declaration_protocol5564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal633);


            char_literal634=(Token)match(input,136,FOLLOW_136_in_type_declaration_protocol5566); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal634);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol5568);
            type_dec_internal635=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal635.getTree());

            char_literal636=(Token)match(input,142,FOLLOW_142_in_type_declaration_protocol5570); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_142.add(char_literal636);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 860:46: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:49: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal637=null;
        ObjcParser.typedef_name_return typedef_name638 =null;


        Object string_literal637_tree=null;
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:5: 'struct' typedef_name
            {
            string_literal637=(Token)match(input,206,FOLLOW_206_in_type_declaration_struct_simple5592); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_206.add(string_literal637);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple5594);
            typedef_name638=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name638.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 864:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal639=null;
        ObjcParser.typedef_name_return typedef_name640 =null;


        Object string_literal639_tree=null;
        RewriteRuleTokenStream stream_210=new RewriteRuleTokenStream(adaptor,"token 210");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:5: 'union' typedef_name
            {
            string_literal639=(Token)match(input,210,FOLLOW_210_in_type_declaration_union_simple5614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_210.add(string_literal639);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5616);
            typedef_name640=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name640.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 868:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:871:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal641=null;
        ObjcParser.typedef_name_return typedef_name642 =null;


        Object string_literal641_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:5: 'enum' typedef_name
            {
            string_literal641=(Token)match(input,190,FOLLOW_190_in_type_declaration_enum_simple5640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal641);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5642);
            typedef_name642=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name642.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 872:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:875:1: type_declaration_struct_full : 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_struct_full_return type_declaration_struct_full() throws RecognitionException {
        ObjcParser.type_declaration_struct_full_return retval = new ObjcParser.type_declaration_struct_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal643=null;
        ObjcParser.typedef_name_return typedef_name644 =null;

        ObjcParser.struct_wrapper_return struct_wrapper645 =null;


        Object string_literal643_tree=null;
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:3: ( 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:5: 'struct' ( typedef_name )? struct_wrapper
            {
            string_literal643=(Token)match(input,206,FOLLOW_206_in_type_declaration_struct_full5662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_206.add(string_literal643);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:14: ( typedef_name )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==ID) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:14: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_full5664);
                    typedef_name644=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name644.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct_full5667);
            struct_wrapper645=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper645.getTree());

            // AST REWRITE
            // elements: struct_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 876:43: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:45: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:876:58: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_full"


    public static class type_declaration_union_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:1: type_declaration_union_full : 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_union_full_return type_declaration_union_full() throws RecognitionException {
        ObjcParser.type_declaration_union_full_return retval = new ObjcParser.type_declaration_union_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal646=null;
        ObjcParser.typedef_name_return typedef_name647 =null;

        ObjcParser.struct_wrapper_return struct_wrapper648 =null;


        Object string_literal646_tree=null;
        RewriteRuleTokenStream stream_210=new RewriteRuleTokenStream(adaptor,"token 210");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:3: ( 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:5: 'union' ( typedef_name )? struct_wrapper
            {
            string_literal646=(Token)match(input,210,FOLLOW_210_in_type_declaration_union_full5691); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_210.add(string_literal646);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:13: ( typedef_name )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==ID) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:13: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_union_full5693);
                    typedef_name647=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name647.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union_full5696);
            struct_wrapper648=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper648.getTree());

            // AST REWRITE
            // elements: struct_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 880:42: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:44: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:880:56: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_full"


    public static class type_declaration_enum_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:1: type_declaration_enum_full : 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) ;
    public final ObjcParser.type_declaration_enum_full_return type_declaration_enum_full() throws RecognitionException {
        ObjcParser.type_declaration_enum_full_return retval = new ObjcParser.type_declaration_enum_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal649=null;
        ObjcParser.typedef_name_return typedef_name650 =null;

        ObjcParser.enum_wrapper_return enum_wrapper651 =null;


        Object string_literal649_tree=null;
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:3: ( 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:5: 'enum' ( typedef_name )? enum_wrapper
            {
            string_literal649=(Token)match(input,190,FOLLOW_190_in_type_declaration_enum_full5720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal649);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:12: ( typedef_name )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==ID) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:12: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_full5722);
                    typedef_name650=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name650.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum_full5725);
            enum_wrapper651=enum_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper651.getTree());

            // AST REWRITE
            // elements: typedef_name, enum_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 884:39: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:41: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:52: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_full"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:887:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full652 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple653 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:3: ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple )
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==206) ) {
                int LA156_1 = input.LA(2);

                if ( (LA156_1==ID) ) {
                    int LA156_2 = input.LA(3);

                    if ( (LA156_2==214) && (synpred31_Objc())) {
                        alt156=1;
                    }
                    else if ( (LA156_2==ID||LA156_2==116||(LA156_2 >= 120 && LA156_2 <= 121)) ) {
                        alt156=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 156, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA156_1==214) && (synpred31_Objc())) {
                    alt156=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 156, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);

                throw nvae;

            }
            switch (alt156) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:5: ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct5760);
                    type_declaration_struct_full652=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full652.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5766);
                    type_declaration_struct_simple653=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple653.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:892:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full654 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple655 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:3: ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple )
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==210) ) {
                int LA157_1 = input.LA(2);

                if ( (LA157_1==ID) ) {
                    int LA157_2 = input.LA(3);

                    if ( (LA157_2==214) && (synpred32_Objc())) {
                        alt157=1;
                    }
                    else if ( (LA157_2==ID||LA157_2==116||LA157_2==120) ) {
                        alt157=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 157, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA157_1==214) && (synpred32_Objc())) {
                    alt157=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 157, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);

                throw nvae;

            }
            switch (alt157) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:5: ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_union5790);
                    type_declaration_union_full654=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full654.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5796);
                    type_declaration_union_simple655=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple655.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full656 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple657 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:3: ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==190) ) {
                int LA158_1 = input.LA(2);

                if ( (LA158_1==ID) ) {
                    int LA158_2 = input.LA(3);

                    if ( (LA158_2==214) && (synpred33_Objc())) {
                        alt158=1;
                    }
                    else if ( (LA158_2==ID||LA158_2==116||LA158_2==120) ) {
                        alt158=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 158, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA158_1==214) && (synpred33_Objc())) {
                    alt158=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;

            }
            switch (alt158) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:5: ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_enum5820);
                    type_declaration_enum_full656=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full656.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:899:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5826);
                    type_declaration_enum_simple657=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple657.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal658=null;
        Token char_literal660=null;
        ObjcParser.enum_element_return enum_element659 =null;


        Object char_literal658_tree=null;
        Object char_literal660_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal658=(Token)match(input,214,FOLLOW_214_in_enum_wrapper5839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal658_tree = 
            (Object)adaptor.create(char_literal658)
            ;
            adaptor.addChild(root_0, char_literal658_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:9: ( enum_element )+
            int cnt159=0;
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==ID||LA159_0==M_C_LIT||LA159_0==S_C_LIT||LA159_0==126) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5849);
            	    enum_element659=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element659.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt159 >= 1 ) break loop159;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(159, input);
                        throw eee;
                }
                cnt159++;
            } while (true);


            char_literal660=(Token)match(input,218,FOLLOW_218_in_enum_wrapper5856); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal660_tree = 
            (Object)adaptor.create(char_literal660)
            ;
            adaptor.addChild(root_0, char_literal660_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:1: enum_element : ( ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal661=null;
        Token char_literal665=null;
        ObjcParser.name_return name662 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper663 =null;

        ObjcParser.element_value_return element_value664 =null;

        ObjcParser.comments_return comments666 =null;


        Object char_literal661_tree=null;
        Object char_literal665_tree=null;
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:3: ( ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==ID||LA163_0==126) ) {
                alt163=1;
            }
            else if ( (LA163_0==M_C_LIT||LA163_0==S_C_LIT) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;

            }
            switch (alt163) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:5: ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:5: ( ',' )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==126) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:5: ','
                            {
                            char_literal661=(Token)match(input,126,FOLLOW_126_in_enum_element5871); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal661);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_enum_element5874);
                    name662=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name662.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:15: ( op_assign_wrapper element_value )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==117||LA161_0==122||LA161_0==125||LA161_0==129||LA161_0==133||LA161_0==138||LA161_0==140||LA161_0==145||LA161_0==216) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:16: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5877);
                            op_assign_wrapper663=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper663.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5879);
                            element_value664=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value664.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:50: ( ',' )?
                    int alt162=2;
                    int LA162_0 = input.LA(1);

                    if ( (LA162_0==126) ) {
                        alt162=1;
                    }
                    switch (alt162) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:50: ','
                            {
                            char_literal665=(Token)match(input,126,FOLLOW_126_in_enum_element5883); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_126.add(char_literal665);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: element_value, name, op_assign_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 909:55: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:57: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:909:75: ( op_assign_wrapper element_value )?
                        if ( stream_element_value.hasNext()||stream_op_assign_wrapper.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_element_value.reset();
                        stream_op_assign_wrapper.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:910:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5904);
                    comments666=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments666.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:913:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct667 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5919);
            struct667=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct667.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 914:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:916:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal668=null;
        Token char_literal670=null;
        ObjcParser.struct_internal_return struct_internal669 =null;


        Object char_literal668_tree=null;
        Object char_literal670_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:917:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:917:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal668=(Token)match(input,214,FOLLOW_214_in_struct5937); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal668_tree = 
            (Object)adaptor.create(char_literal668)
            ;
            adaptor.addChild(root_0, char_literal668_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:7: ( struct_internal )+
            int cnt164=0;
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==ID||LA164_0==M_C_LIT||LA164_0==S_C_LIT||LA164_0==118||LA164_0==171||(LA164_0 >= 181 && LA164_0 <= 182)||LA164_0==185||LA164_0==190||LA164_0==196||(LA164_0 >= 199 && LA164_0 <= 202)||LA164_0==204||LA164_0==206||(LA164_0 >= 210 && LA164_0 <= 212)) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:918:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5946);
            	    struct_internal669=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal669.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt164 >= 1 ) break loop164;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(164, input);
                        throw eee;
                }
                cnt164++;
            } while (true);


            char_literal670=(Token)match(input,218,FOLLOW_218_in_struct5953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal670_tree = 
            (Object)adaptor.create(char_literal670)
            ;
            adaptor.addChild(root_0, char_literal670_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper671 =null;

        ObjcParser.comments_return comments672 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:3: ( field_declaration_wrapper | comments )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==ID||LA165_0==118||LA165_0==171||(LA165_0 >= 181 && LA165_0 <= 182)||LA165_0==185||LA165_0==190||LA165_0==196||(LA165_0 >= 199 && LA165_0 <= 202)||LA165_0==204||LA165_0==206||(LA165_0 >= 210 && LA165_0 <= 212)) ) {
                alt165=1;
            }
            else if ( (LA165_0==M_C_LIT||LA165_0==S_C_LIT) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;

            }
            switch (alt165) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5967);
                    field_declaration_wrapper671=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper671.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:924:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5973);
                    comments672=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments672.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec673 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:928:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:928:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5988);
            type_dec673=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec673.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 928:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:928:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:932:1: type_dec_template : ( ( ( '<' )+ 'id' )=> ( '<' )+ 'id' '<' ID ( '>' )+ | ( ( '<' )+ ID '*' )=> ( '<' )+ ID '*' ( '>' )+ );
    public final ObjcParser.type_dec_template_return type_dec_template() throws RecognitionException {
        ObjcParser.type_dec_template_return retval = new ObjcParser.type_dec_template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal674=null;
        Token string_literal675=null;
        Token char_literal676=null;
        Token ID677=null;
        Token char_literal678=null;
        Token char_literal679=null;
        Token ID680=null;
        Token char_literal681=null;
        Token char_literal682=null;

        Object char_literal674_tree=null;
        Object string_literal675_tree=null;
        Object char_literal676_tree=null;
        Object ID677_tree=null;
        Object char_literal678_tree=null;
        Object char_literal679_tree=null;
        Object ID680_tree=null;
        Object char_literal681_tree=null;
        Object char_literal682_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:3: ( ( ( '<' )+ 'id' )=> ( '<' )+ 'id' '<' ID ( '>' )+ | ( ( '<' )+ ID '*' )=> ( '<' )+ ID '*' ( '>' )+ )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==136) ) {
                int LA170_1 = input.LA(2);

                if ( (LA170_1==196) && (synpred34_Objc())) {
                    alt170=1;
                }
                else if ( (LA170_1==136) ) {
                    int LA170_3 = input.LA(3);

                    if ( (LA170_3==196) && (synpred34_Objc())) {
                        alt170=1;
                    }
                    else if ( (LA170_3==136) ) {
                        int LA170_6 = input.LA(4);

                        if ( (LA170_6==196) && (synpred34_Objc())) {
                            alt170=1;
                        }
                        else if ( (LA170_6==136) ) {
                            int LA170_9 = input.LA(5);

                            if ( (synpred34_Objc()) ) {
                                alt170=1;
                            }
                            else if ( (synpred35_Objc()) ) {
                                alt170=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 170, 9, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA170_6==ID) && (synpred35_Objc())) {
                            alt170=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 170, 6, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA170_3==ID) && (synpred35_Objc())) {
                        alt170=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 170, 3, input);

                        throw nvae;

                    }
                }
                else if ( (LA170_1==ID) && (synpred35_Objc())) {
                    alt170=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;

            }
            switch (alt170) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:5: ( ( '<' )+ 'id' )=> ( '<' )+ 'id' '<' ID ( '>' )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:20: ( '<' )+
                    int cnt166=0;
                    loop166:
                    do {
                        int alt166=2;
                        int LA166_0 = input.LA(1);

                        if ( (LA166_0==136) ) {
                            alt166=1;
                        }


                        switch (alt166) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:20: '<'
                    	    {
                    	    char_literal674=(Token)match(input,136,FOLLOW_136_in_type_dec_template6023); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal674_tree = 
                    	    (Object)adaptor.create(char_literal674)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal674_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt166 >= 1 ) break loop166;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(166, input);
                                throw eee;
                        }
                        cnt166++;
                    } while (true);


                    string_literal675=(Token)match(input,196,FOLLOW_196_in_type_dec_template6026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal675_tree = 
                    (Object)adaptor.create(string_literal675)
                    ;
                    adaptor.addChild(root_0, string_literal675_tree);
                    }

                    char_literal676=(Token)match(input,136,FOLLOW_136_in_type_dec_template6028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal676_tree = 
                    (Object)adaptor.create(char_literal676)
                    ;
                    adaptor.addChild(root_0, char_literal676_tree);
                    }

                    ID677=(Token)match(input,ID,FOLLOW_ID_in_type_dec_template6030); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID677_tree = 
                    (Object)adaptor.create(ID677)
                    ;
                    adaptor.addChild(root_0, ID677_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:37: ( '>' )+
                    int cnt167=0;
                    loop167:
                    do {
                        int alt167=2;
                        int LA167_0 = input.LA(1);

                        if ( (LA167_0==142) ) {
                            alt167=1;
                        }


                        switch (alt167) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:37: '>'
                    	    {
                    	    char_literal678=(Token)match(input,142,FOLLOW_142_in_type_dec_template6032); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal678_tree = 
                    	    (Object)adaptor.create(char_literal678)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal678_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt167 >= 1 ) break loop167;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(167, input);
                                throw eee;
                        }
                        cnt167++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:5: ( ( '<' )+ ID '*' )=> ( '<' )+ ID '*' ( '>' )+
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:22: ( '<' )+
                    int cnt168=0;
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==136) ) {
                            alt168=1;
                        }


                        switch (alt168) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:22: '<'
                    	    {
                    	    char_literal679=(Token)match(input,136,FOLLOW_136_in_type_dec_template6050); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal679_tree = 
                    	    (Object)adaptor.create(char_literal679)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal679_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt168 >= 1 ) break loop168;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(168, input);
                                throw eee;
                        }
                        cnt168++;
                    } while (true);


                    ID680=(Token)match(input,ID,FOLLOW_ID_in_type_dec_template6053); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID680_tree = 
                    (Object)adaptor.create(ID680)
                    ;
                    adaptor.addChild(root_0, ID680_tree);
                    }

                    char_literal681=(Token)match(input,121,FOLLOW_121_in_type_dec_template6055); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal681_tree = 
                    (Object)adaptor.create(char_literal681)
                    ;
                    adaptor.addChild(root_0, char_literal681_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:34: ( '>' )+
                    int cnt169=0;
                    loop169:
                    do {
                        int alt169=2;
                        int LA169_0 = input.LA(1);

                        if ( (LA169_0==142) ) {
                            alt169=1;
                        }


                        switch (alt169) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:34: '>'
                    	    {
                    	    char_literal682=(Token)match(input,142,FOLLOW_142_in_type_dec_template6057); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal682_tree = 
                    	    (Object)adaptor.create(char_literal682)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal682_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt169 >= 1 ) break loop169;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(169, input);
                                throw eee;
                        }
                        cnt169++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_template"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:1: type_dec : ( 'IBOutlet' )? type_dec_internal ( type_dec_template )? ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal683=null;
        Token char_literal686=null;
        ObjcParser.type_dec_internal_return type_dec_internal684 =null;

        ObjcParser.type_dec_template_return type_dec_template685 =null;

        ObjcParser.array_size_return array_size687 =null;


        Object string_literal683_tree=null;
        Object char_literal686_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:9: ( ( 'IBOutlet' )? type_dec_internal ( type_dec_template )? ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:11: ( 'IBOutlet' )? type_dec_internal ( type_dec_template )? ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:11: ( 'IBOutlet' )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==171) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:11: 'IBOutlet'
                    {
                    string_literal683=(Token)match(input,171,FOLLOW_171_in_type_dec6070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal683_tree = 
                    (Object)adaptor.create(string_literal683)
                    ;
                    adaptor.addChild(root_0, string_literal683_tree);
                    }

                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_internal_in_type_dec6073);
            type_dec_internal684=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal684.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:41: ( type_dec_template )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==136) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:41: type_dec_template
                    {
                    pushFollow(FOLLOW_type_dec_template_in_type_dec6075);
                    type_dec_template685=type_dec_template();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_template685.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:60: ( '*' )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==121) ) {
                    int LA173_3 = input.LA(2);

                    if ( (LA173_3==ID||LA173_3==116||(LA173_3 >= 119 && LA173_3 <= 121)||LA173_3==126||LA173_3==176) ) {
                        alt173=1;
                    }


                }


                switch (alt173) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:60: '*'
            	    {
            	    char_literal686=(Token)match(input,121,FOLLOW_121_in_type_dec6078); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal686_tree = 
            	    (Object)adaptor.create(char_literal686)
            	    ;
            	    adaptor.addChild(root_0, char_literal686_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:65: ( array_size )*
            loop174:
            do {
                int alt174=2;
                int LA174_0 = input.LA(1);

                if ( (LA174_0==176) ) {
                    alt174=1;
                }


                switch (alt174) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:66: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec6082);
            	    array_size687=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size687.getTree());

            	    }
            	    break;

            	default :
            	    break loop174;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:940:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID689=null;
        ObjcParser.knownTypes_return knownTypes688 =null;


        Object ID689_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:3: ( knownTypes | ID )
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==196||(LA175_0 >= 200 && LA175_0 <= 201)||LA175_0==204) ) {
                alt175=1;
            }
            else if ( (LA175_0==ID) ) {
                alt175=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 175, 0, input);

                throw nvae;

            }
            switch (alt175) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:941:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal6099);
                    knownTypes688=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes688.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:942:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID689=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal6108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID689_tree = 
                    (Object)adaptor.create(ID689)
                    ;
                    adaptor.addChild(root_0, ID689_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? ( 'const' '*' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal690=null;
        Token string_literal691=null;
        Token string_literal692=null;
        Token string_literal693=null;
        Token string_literal694=null;
        Token char_literal695=null;
        Token string_literal696=null;
        Token string_literal697=null;

        Object string_literal690_tree=null;
        Object string_literal691_tree=null;
        Object string_literal692_tree=null;
        Object string_literal693_tree=null;
        Object string_literal694_tree=null;
        Object char_literal695_tree=null;
        Object string_literal696_tree=null;
        Object string_literal697_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? ( 'const' '*' )? | ( 'short' )+ ( 'int' )? )
            int alt181=4;
            switch ( input.LA(1) ) {
            case 200:
                {
                alt181=1;
                }
                break;
            case 196:
                {
                alt181=2;
                }
                break;
            case 201:
                {
                alt181=3;
                }
                break;
            case 204:
                {
                alt181=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;

            }

            switch (alt181) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal690=(Token)match(input,200,FOLLOW_200_in_knownTypes6121); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal690_tree = 
                    (Object)adaptor.create(string_literal690)
                    ;
                    adaptor.addChild(root_0, string_literal690_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:947:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal691=(Token)match(input,196,FOLLOW_196_in_knownTypes6127); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal691_tree = 
                    (Object)adaptor.create(string_literal691)
                    ;
                    adaptor.addChild(root_0, string_literal691_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: ( 'long' )+ ( 'int' )? ( 'const' '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: ( 'long' )+
                    int cnt176=0;
                    loop176:
                    do {
                        int alt176=2;
                        int LA176_0 = input.LA(1);

                        if ( (LA176_0==201) ) {
                            alt176=1;
                        }


                        switch (alt176) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:5: 'long'
                    	    {
                    	    string_literal692=(Token)match(input,201,FOLLOW_201_in_knownTypes6133); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal692_tree = 
                    	    (Object)adaptor.create(string_literal692)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal692_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt176 >= 1 ) break loop176;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(176, input);
                                throw eee;
                        }
                        cnt176++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:13: ( 'int' )?
                    int alt177=2;
                    int LA177_0 = input.LA(1);

                    if ( (LA177_0==200) ) {
                        alt177=1;
                    }
                    switch (alt177) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:13: 'int'
                            {
                            string_literal693=(Token)match(input,200,FOLLOW_200_in_knownTypes6136); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal693_tree = 
                            (Object)adaptor.create(string_literal693)
                            ;
                            adaptor.addChild(root_0, string_literal693_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:20: ( 'const' '*' )?
                    int alt178=2;
                    int LA178_0 = input.LA(1);

                    if ( (LA178_0==185) ) {
                        alt178=1;
                    }
                    switch (alt178) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:21: 'const' '*'
                            {
                            string_literal694=(Token)match(input,185,FOLLOW_185_in_knownTypes6140); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal694_tree = 
                            (Object)adaptor.create(string_literal694)
                            ;
                            adaptor.addChild(root_0, string_literal694_tree);
                            }

                            char_literal695=(Token)match(input,121,FOLLOW_121_in_knownTypes6142); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal695_tree = 
                            (Object)adaptor.create(char_literal695)
                            ;
                            adaptor.addChild(root_0, char_literal695_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:5: ( 'short' )+
                    int cnt179=0;
                    loop179:
                    do {
                        int alt179=2;
                        int LA179_0 = input.LA(1);

                        if ( (LA179_0==204) ) {
                            alt179=1;
                        }


                        switch (alt179) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:5: 'short'
                    	    {
                    	    string_literal696=(Token)match(input,204,FOLLOW_204_in_knownTypes6150); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal696_tree = 
                    	    (Object)adaptor.create(string_literal696)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal696_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt179 >= 1 ) break loop179;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(179, input);
                                throw eee;
                        }
                        cnt179++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:14: ( 'int' )?
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==200) ) {
                        alt180=1;
                    }
                    switch (alt180) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:14: 'int'
                            {
                            string_literal697=(Token)match(input,200,FOLLOW_200_in_knownTypes6153); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal697_tree = 
                            (Object)adaptor.create(string_literal697)
                            ;
                            adaptor.addChild(root_0, string_literal697_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID698=null;
        ObjcParser.array_size_return array_size699 =null;

        ObjcParser.field_crap_return field_crap700 =null;


        Object ID698_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:5: ID ( array_size )* ( field_crap )?
            {
            ID698=(Token)match(input,ID,FOLLOW_ID_in_field_name6169); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID698);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:8: ( array_size )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==176) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name6171);
            	    array_size699=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size699.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:20: ( field_crap )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==134) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name6175);
                    field_crap700=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap700.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: array_size, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 953:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:953:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:1: array_size : '[' ( NR_LIT | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal701=null;
        Token set702=null;
        Token char_literal703=null;

        Object char_literal701_tree=null;
        Object set702_tree=null;
        Object char_literal703_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:957:3: ( '[' ( NR_LIT | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:957:5: '[' ( NR_LIT | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal701=(Token)match(input,176,FOLLOW_176_in_array_size6206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal701_tree = 
            (Object)adaptor.create(char_literal701)
            ;
            adaptor.addChild(root_0, char_literal701_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:957:9: ( NR_LIT | ID )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==ID||LA184_0==NR_LIT) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set702=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NR_LIT ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set702)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal703=(Token)match(input,178,FOLLOW_178_in_array_size6217); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal703_tree = 
            (Object)adaptor.create(char_literal703)
            ;
            adaptor.addChild(root_0, char_literal703_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:959:1: field_crap : ':' NR_LIT ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal704=null;
        Token NR_LIT705=null;

        Object char_literal704_tree=null;
        Object NR_LIT705_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:3: ( ':' NR_LIT )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:5: ':' NR_LIT
            {
            root_0 = (Object)adaptor.nil();


            char_literal704=(Token)match(input,134,FOLLOW_134_in_field_crap6227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal704_tree = 
            (Object)adaptor.create(char_literal704)
            ;
            adaptor.addChild(root_0, char_literal704_tree);
            }

            NR_LIT705=(Token)match(input,NR_LIT,FOLLOW_NR_LIT_in_field_crap6229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NR_LIT705_tree = 
            (Object)adaptor.create(NR_LIT705)
            ;
            adaptor.addChild(root_0, NR_LIT705_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:962:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper706 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants707 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration6241);
            method_modifier_wrapper706=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper706.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration6243);
            method_declaration_variants707=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants707.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:965:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier708 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:966:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:966:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper6255);
            method_modifier708=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier708.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 966:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:966:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:968:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set709=null;

        Object set709_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:969:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set709=(Token)input.LT(1);

            if ( input.LA(1)==123||input.LA(1)==127 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set709)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:971:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common710 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:972:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:972:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants6292);
            method_declaration_common710=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common710.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal711=null;
        Token char_literal713=null;
        Token char_literal716=null;
        ObjcParser.type_declaration_return type_declaration712 =null;

        ObjcParser.method_name_return method_name714 =null;

        ObjcParser.method_params_return method_params715 =null;


        Object char_literal711_tree=null;
        Object char_literal713_tree=null;
        Object char_literal716_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:975:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:975:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:975:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:975:6: '(' type_declaration ')' method_name
            {
            char_literal711=(Token)match(input,118,FOLLOW_118_in_method_declaration_common6305); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal711_tree = 
            (Object)adaptor.create(char_literal711)
            ;
            adaptor.addChild(root_0, char_literal711_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common6307);
            type_declaration712=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration712.getTree());

            char_literal713=(Token)match(input,120,FOLLOW_120_in_method_declaration_common6309); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal713_tree = 
            (Object)adaptor.create(char_literal713)
            ;
            adaptor.addChild(root_0, char_literal713_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common6311);
            method_name714=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name714.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:975:44: ( method_params )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==ID||LA185_0==134) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:975:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common6314);
                    method_params715=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params715.getTree());

                    }
                    break;

            }


            char_literal716=(Token)match(input,135,FOLLOW_135_in_method_declaration_common6317); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal716_tree = 
            (Object)adaptor.create(char_literal716)
            ;
            adaptor.addChild(root_0, char_literal716_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:977:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal718=null;
        Token char_literal720=null;
        ObjcParser.method_modifier_return method_modifier717 =null;

        ObjcParser.type_declaration_return type_declaration719 =null;

        ObjcParser.method_name_return method_name721 =null;


        Object char_literal718_tree=null;
        Object char_literal720_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate6329);
            method_modifier717=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier717.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:22: '(' type_declaration ')' method_name
            {
            char_literal718=(Token)match(input,118,FOLLOW_118_in_method_declaration_predicate6332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal718_tree = 
            (Object)adaptor.create(char_literal718)
            ;
            adaptor.addChild(root_0, char_literal718_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate6334);
            type_declaration719=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration719.getTree());

            char_literal720=(Token)match(input,120,FOLLOW_120_in_method_declaration_predicate6336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal720_tree = 
            (Object)adaptor.create(char_literal720)
            ;
            adaptor.addChild(root_0, char_literal720_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate6338);
            method_name721=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name721.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:981:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID722=null;

        Object ID722_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:982:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:982:5: ID
            {
            ID722=(Token)match(input,ID,FOLLOW_ID_in_method_name6356); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID722);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 982:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:982:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:985:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param723 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:5: ( method_param )+
            int cnt186=0;
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);

                if ( (LA186_0==ID||LA186_0==134) ) {
                    alt186=1;
                }


                switch (alt186) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params6379);
            	    method_param723=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param723.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt186 >= 1 ) break loop186;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(186, input);
                        throw eee;
                }
                cnt186++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 986:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:988:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal725=null;
        Token char_literal726=null;
        Token char_literal728=null;
        ObjcParser.prefix_return prefix724 =null;

        ObjcParser.type_declaration_return type_declaration727 =null;

        ObjcParser.param_name_return param_name729 =null;


        Object char_literal725_tree=null;
        Object char_literal726_tree=null;
        Object char_literal728_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:5: ( prefix )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ID) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param6399);
                    prefix724=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix724.getTree());

                    }
                    break;

            }


            char_literal725=(Token)match(input,134,FOLLOW_134_in_method_param6402); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal725);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:17: ( '(' type_declaration ')' )?
            int alt188=2;
            int LA188_0 = input.LA(1);

            if ( (LA188_0==118) ) {
                alt188=1;
            }
            switch (alt188) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:18: '(' type_declaration ')'
                    {
                    char_literal726=(Token)match(input,118,FOLLOW_118_in_method_param6405); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_118.add(char_literal726);


                    pushFollow(FOLLOW_type_declaration_in_method_param6407);
                    type_declaration727=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration727.getTree());

                    char_literal728=(Token)match(input,120,FOLLOW_120_in_method_param6409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_120.add(char_literal728);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param6413);
            param_name729=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name729.getTree());

            // AST REWRITE
            // elements: prefix, param_name, 118, 134, type_declaration, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 989:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_134.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_118.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_120.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:991:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID730=null;

        Object ID730_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:992:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:992:5: ID
            {
            ID730=(Token)match(input,ID,FOLLOW_ID_in_param_name6446); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID730);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 992:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:992:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:994:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID731=null;

        Object ID731_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:994:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:994:11: ID
            {
            ID731=(Token)match(input,ID,FOLLOW_ID_in_prefix6465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID731);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 994:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:994:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:997:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line | ( DEFINE_LITERAL classical_method_call_wrapper ) -> ^( DEFINE classical_method_call_wrapper ) | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL734=null;
        Token DEFINE_LITERAL736=null;
        Token DEFINE_LITERAL739=null;
        ObjcParser.define_as_function_return define_as_function732 =null;

        ObjcParser.define_as_line_return define_as_line733 =null;

        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper735 =null;

        ObjcParser.name_return name737 =null;

        ObjcParser.element_value_return element_value738 =null;

        ObjcParser.name_return name740 =null;


        Object DEFINE_LITERAL734_tree=null;
        Object DEFINE_LITERAL736_tree=null;
        Object DEFINE_LITERAL739_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:998:3: ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line | ( DEFINE_LITERAL classical_method_call_wrapper ) -> ^( DEFINE classical_method_call_wrapper ) | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt189=5;
            alt189 = dfa189.predict(input);
            switch (alt189) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:998:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_function_in_define_declaration6494);
                    define_as_function732=define_as_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_function732.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:999:5: ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_line_in_define_declaration6510);
                    define_as_line733=define_as_line();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_line733.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:5: ( DEFINE_LITERAL classical_method_call_wrapper )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:5: ( DEFINE_LITERAL classical_method_call_wrapper )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:6: DEFINE_LITERAL classical_method_call_wrapper
                    {
                    DEFINE_LITERAL734=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL734);


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_define_declaration6519);
                    classical_method_call_wrapper735=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper735.getTree());

                    }


                    // AST REWRITE
                    // elements: classical_method_call_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1000:52: -> ^( DEFINE classical_method_call_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1000:55: ^( DEFINE classical_method_call_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1001:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL736=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL736);


                    pushFollow(FOLLOW_name_in_define_declaration6544);
                    name737=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name737.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration6546);
                    element_value738=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value738.getTree());

                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1001:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1001:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1002:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL739=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL739);


                    pushFollow(FOLLOW_name_in_define_declaration6564);
                    name740=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name740.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 1002:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1002:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"


    public static class define_as_line_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_line"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1005:1: define_as_line : DEFINE_LITERAL classical_method_call_wrapper '(' simple_expression ')' -> ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' ) ;
    public final ObjcParser.define_as_line_return define_as_line() throws RecognitionException {
        ObjcParser.define_as_line_return retval = new ObjcParser.define_as_line_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL741=null;
        Token char_literal743=null;
        Token char_literal745=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper742 =null;

        ObjcParser.simple_expression_return simple_expression744 =null;


        Object DEFINE_LITERAL741_tree=null;
        Object char_literal743_tree=null;
        Object char_literal745_tree=null;
        RewriteRuleTokenStream stream_118=new RewriteRuleTokenStream(adaptor,"token 118");
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1006:3: ( DEFINE_LITERAL classical_method_call_wrapper '(' simple_expression ')' -> ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1006:5: DEFINE_LITERAL classical_method_call_wrapper '(' simple_expression ')'
            {
            DEFINE_LITERAL741=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_line6586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL741);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_line6588);
            classical_method_call_wrapper742=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper742.getTree());

            char_literal743=(Token)match(input,118,FOLLOW_118_in_define_as_line6590); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_118.add(char_literal743);


            pushFollow(FOLLOW_simple_expression_in_define_as_line6592);
            simple_expression744=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression744.getTree());

            char_literal745=(Token)match(input,120,FOLLOW_120_in_define_as_line6594); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(char_literal745);


            // AST REWRITE
            // elements: 118, classical_method_call_wrapper, simple_expression, 120
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1006:76: -> ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1006:79: ^( DEFINE classical_method_call_wrapper '(' simple_expression ')' )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                adaptor.addChild(root_1, 
                stream_118.nextNode()
                );

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_1, 
                stream_120.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_line"


    public static class define_as_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_function"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1009:1: define_as_function : DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) ;
    public final ObjcParser.define_as_function_return define_as_function() throws RecognitionException {
        ObjcParser.define_as_function_return retval = new ObjcParser.define_as_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL746=null;
        Token char_literal748=null;
        Token char_literal749=null;
        Token char_literal751=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper747 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper750 =null;


        Object DEFINE_LITERAL746_tree=null;
        Object char_literal748_tree=null;
        Object char_literal749_tree=null;
        Object char_literal751_tree=null;
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_214=new RewriteRuleTokenStream(adaptor,"token 214");
        RewriteRuleTokenStream stream_218=new RewriteRuleTokenStream(adaptor,"token 218");
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_block_singleline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:3: ( DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:5: DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            {
            DEFINE_LITERAL746=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_function6623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL746);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_function6625);
            classical_method_call_wrapper747=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper747.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:50: ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            int cnt192=0;
            loop192:
            do {
                int alt192=2;
                int LA192_0 = input.LA(1);

                if ( (LA192_0==177) ) {
                    alt192=1;
                }


                switch (alt192) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:51: '\\\\' ( '{' )? block_singleline_wrapper ( '}' )?
            	    {
            	    char_literal748=(Token)match(input,177,FOLLOW_177_in_define_as_function6628); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_177.add(char_literal748);


            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:56: ( '{' )?
            	    int alt190=2;
            	    int LA190_0 = input.LA(1);

            	    if ( (LA190_0==214) ) {
            	        alt190=1;
            	    }
            	    switch (alt190) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:56: '{'
            	            {
            	            char_literal749=(Token)match(input,214,FOLLOW_214_in_define_as_function6630); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_214.add(char_literal749);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_block_singleline_wrapper_in_define_as_function6633);
            	    block_singleline_wrapper750=block_singleline_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block_singleline_wrapper.add(block_singleline_wrapper750.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:86: ( '}' )?
            	    int alt191=2;
            	    int LA191_0 = input.LA(1);

            	    if ( (LA191_0==218) ) {
            	        alt191=1;
            	    }
            	    switch (alt191) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:86: '}'
            	            {
            	            char_literal751=(Token)match(input,218,FOLLOW_218_in_define_as_function6635); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_218.add(char_literal751);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt192 >= 1 ) break loop192;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(192, input);
                        throw eee;
                }
                cnt192++;
            } while (true);


            // AST REWRITE
            // elements: classical_method_call_wrapper, block_singleline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1010:93: -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1010:96: ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                if ( !(stream_block_singleline_wrapper.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_block_singleline_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_singleline_wrapper.nextTree());

                }
                stream_block_singleline_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_function"


    public static class string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1013:1: string : STR_LIT -> ^( STRING STR_LIT ) ;
    public final ObjcParser.string_return string() throws RecognitionException {
        ObjcParser.string_return retval = new ObjcParser.string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STR_LIT752=null;

        Object STR_LIT752_tree=null;
        RewriteRuleTokenStream stream_STR_LIT=new RewriteRuleTokenStream(adaptor,"token STR_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1014:3: ( STR_LIT -> ^( STRING STR_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1014:5: STR_LIT
            {
            STR_LIT752=(Token)match(input,STR_LIT,FOLLOW_STR_LIT_in_string6662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STR_LIT.add(STR_LIT752);


            // AST REWRITE
            // elements: STR_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1014:13: -> ^( STRING STR_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1014:16: ^( STRING STR_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING, "STRING")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STR_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string"


    public static class string_objc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_objc"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1017:1: string_objc : '@' STR_LIT -> ^( STRING_OBJC STR_LIT ) ;
    public final ObjcParser.string_objc_return string_objc() throws RecognitionException {
        ObjcParser.string_objc_return retval = new ObjcParser.string_objc_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal753=null;
        Token STR_LIT754=null;

        Object char_literal753_tree=null;
        Object STR_LIT754_tree=null;
        RewriteRuleTokenStream stream_STR_LIT=new RewriteRuleTokenStream(adaptor,"token STR_LIT");
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1018:3: ( '@' STR_LIT -> ^( STRING_OBJC STR_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1018:5: '@' STR_LIT
            {
            char_literal753=(Token)match(input,148,FOLLOW_148_in_string_objc6685); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(char_literal753);


            STR_LIT754=(Token)match(input,STR_LIT,FOLLOW_STR_LIT_in_string_objc6687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STR_LIT.add(STR_LIT754);


            // AST REWRITE
            // elements: STR_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 1018:17: -> ^( STRING_OBJC STR_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1018:20: ^( STRING_OBJC STR_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING_OBJC, "STRING_OBJC")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STR_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_objc"


    public static class bool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bool"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1021:1: bool : ( 'YES' | 'NO' | 'true' | 'false' ) ;
    public final ObjcParser.bool_return bool() throws RecognitionException {
        ObjcParser.bool_return retval = new ObjcParser.bool_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set755=null;

        Object set755_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1022:3: ( ( 'YES' | 'NO' | 'true' | 'false' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set755=(Token)input.LT(1);

            if ( input.LA(1)==173||input.LA(1)==175||input.LA(1)==193||input.LA(1)==208 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set755)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bool"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:6: type_declaration field_name
        {
        pushFollow(FOLLOW_type_declaration_in_synpred1_Objc507);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_field_name_in_synpred1_Objc509);
        field_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc768);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1349);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1485);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1496);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred5_Objc1498);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred6_Objc1511);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred6_Objc1513);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1780);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,135,FOLLOW_135_in_synpred7_Objc1782); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:333:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred8_Objc1799);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,198,FOLLOW_198_in_synpred8_Objc1801); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:5: ( ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:334:6: ';'
        {
        match(input,135,FOLLOW_135_in_synpred9_Objc1818); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred10_Objc1833);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred10_Objc1835);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred11_Objc2455);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred11_Objc2457);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred12_Objc3131);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,118,FOLLOW_118_in_synpred13_Objc3147); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred13_Objc3149);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred13_Objc3151);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,120,FOLLOW_120_in_synpred13_Objc3153); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred13_Objc3155);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: ( name '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:6: name '('
        {
        pushFollow(FOLLOW_name_in_synpred14_Objc3192);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,118,FOLLOW_118_in_synpred14_Objc3194); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred15_Objc3230);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred16_Objc3300);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:30: ( access_wrapper name )*
        loop193:
        do {
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( ((LA193_0 >= 130 && LA193_0 <= 131)) ) {
                alt193=1;
            }


            switch (alt193) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred16_Objc3303);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred16_Objc3305);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop193;
            }
        } while (true);


        match(input,118,FOLLOW_118_in_synpred16_Objc3309); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:6: ( '&' )?
        int alt194=2;
        int LA194_0 = input.LA(1);

        if ( (LA194_0==116) ) {
            alt194=1;
        }
        switch (alt194) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:547:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred17_Objc3369); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred17_Objc3372);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,176,FOLLOW_176_in_synpred17_Objc3374); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:548:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==116||input.LA(1)==121 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred18_Objc3410);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:595:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred19_Objc3776);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: ( type_cast_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:6: type_cast_name
        {
        pushFollow(FOLLOW_type_cast_name_in_synpred20_Objc3914);
        type_cast_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:5: ( '(' type_cast_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:625:6: '(' type_cast_name
        {
        match(input,118,FOLLOW_118_in_synpred21_Objc3927); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_name_in_synpred21_Objc3929);
        type_cast_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:6: ( '&' )?
        int alt195=2;
        int LA195_0 = input.LA(1);

        if ( (LA195_0==116) ) {
            alt195=1;
        }
        switch (alt195) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:6: '&'
                {
                match(input,116,FOLLOW_116_in_synpred22_Objc4008); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred22_Objc4011);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,176,FOLLOW_176_in_synpred22_Objc4013); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:5: ( block_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:6: block_decl_predicate
        {
        pushFollow(FOLLOW_block_decl_predicate_in_synpred23_Objc4413);
        block_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:718:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred24_Objc4515);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( block_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:6: block_decl_predicate
        {
        pushFollow(FOLLOW_block_decl_predicate_in_synpred25_Objc5143);
        block_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:833:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred26_Objc5300);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:834:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:834:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred27_Objc5311);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:842:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred28_Objc5402);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // $ANTLR start synpred29_Objc
    public final void synpred29_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred29_Objc5413);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Objc

    // $ANTLR start synpred30_Objc
    public final void synpred30_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:5: ( block_type_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:6: block_type_decl_predicate
        {
        pushFollow(FOLLOW_block_type_decl_predicate_in_synpred30_Objc5424);
        block_type_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Objc

    // $ANTLR start synpred31_Objc
    public final void synpred31_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:6: 'struct' ( typedef_name )? '{'
        {
        match(input,206,FOLLOW_206_in_synpred31_Objc5751); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:15: ( typedef_name )?
        int alt196=2;
        int LA196_0 = input.LA(1);

        if ( (LA196_0==ID) ) {
            alt196=1;
        }
        switch (alt196) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred31_Objc5753);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,214,FOLLOW_214_in_synpred31_Objc5756); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_Objc

    // $ANTLR start synpred32_Objc
    public final void synpred32_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:6: 'union' ( typedef_name )? '{'
        {
        match(input,210,FOLLOW_210_in_synpred32_Objc5781); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:14: ( typedef_name )?
        int alt197=2;
        int LA197_0 = input.LA(1);

        if ( (LA197_0==ID) ) {
            alt197=1;
        }
        switch (alt197) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred32_Objc5783);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,214,FOLLOW_214_in_synpred32_Objc5786); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_Objc

    // $ANTLR start synpred33_Objc
    public final void synpred33_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:6: 'enum' ( typedef_name )? '{'
        {
        match(input,190,FOLLOW_190_in_synpred33_Objc5811); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:13: ( typedef_name )?
        int alt198=2;
        int LA198_0 = input.LA(1);

        if ( (LA198_0==ID) ) {
            alt198=1;
        }
        switch (alt198) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred33_Objc5813);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,214,FOLLOW_214_in_synpred33_Objc5816); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_Objc

    // $ANTLR start synpred34_Objc
    public final void synpred34_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:5: ( ( '<' )+ 'id' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:6: ( '<' )+ 'id'
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:6: ( '<' )+
        int cnt199=0;
        loop199:
        do {
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==136) ) {
                alt199=1;
            }


            switch (alt199) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:6: '<'
        	    {
        	    match(input,136,FOLLOW_136_in_synpred34_Objc6015); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt199 >= 1 ) break loop199;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(199, input);
                    throw eee;
            }
            cnt199++;
        } while (true);


        match(input,196,FOLLOW_196_in_synpred34_Objc6018); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred34_Objc

    // $ANTLR start synpred35_Objc
    public final void synpred35_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:5: ( ( '<' )+ ID '*' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:6: ( '<' )+ ID '*'
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:6: ( '<' )+
        int cnt200=0;
        loop200:
        do {
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==136) ) {
                alt200=1;
            }


            switch (alt200) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:6: '<'
        	    {
        	    match(input,136,FOLLOW_136_in_synpred35_Objc6040); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt200 >= 1 ) break loop200;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(200, input);
                    throw eee;
            }
            cnt200++;
        } while (true);


        match(input,ID,FOLLOW_ID_in_synpred35_Objc6043); if (state.failed) return ;

        match(input,121,FOLLOW_121_in_synpred35_Objc6045); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred35_Objc

    // $ANTLR start synpred36_Objc
    public final void synpred36_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:998:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:998:6: DEFINE_LITERAL classical_method_call_wrapper '\\\\'
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred36_Objc6485); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred36_Objc6487);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,177,FOLLOW_177_in_synpred36_Objc6489); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred36_Objc

    // $ANTLR start synpred37_Objc
    public final void synpred37_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:999:5: ( DEFINE_LITERAL classical_method_call_wrapper '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:999:6: DEFINE_LITERAL classical_method_call_wrapper '('
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred37_Objc6501); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred37_Objc6503);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,118,FOLLOW_118_in_synpred37_Objc6505); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred37_Objc

    // $ANTLR start synpred38_Objc
    public final void synpred38_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1001:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:1001:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred38_Objc6535); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred38_Objc6537);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred38_Objc6539);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred38_Objc

    // Delegated rules

    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred34_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred34_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred37_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred37_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA21 dfa21 = new DFA21(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA79 dfa79 = new DFA79(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA88 dfa88 = new DFA88(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA189 dfa189 = new DFA189(this);
    static final String DFA2_eotS =
        "\u01cb\uffff";
    static final String DFA2_eofS =
        "\u01cb\uffff";
    static final String DFA2_minS =
        "\1\26\10\uffff\3\56\10\uffff\1\56\10\uffff\6\56\1\77\1\56\4\uffff"+
        "\7\56\1\171\14\56\3\uffff\5\56\3\uffff\7\56\1\171\13\56\10\uffff"+
        "\u0167\0\1\uffff";
    static final String DFA2_maxS =
        "\1\u00d4\10\uffff\3\u00d6\10\uffff\1\56\10\uffff\1\u00d6\1\u00d4"+
        "\1\u00d6\1\176\1\u00d6\1\u00d4\1\u00a4\1\u00d4\4\uffff\1\u00cc\2"+
        "\u00b0\1\u00c9\1\u00cc\1\u00b0\1\u00cc\1\171\3\u00d6\1\u00d4\2\u00d3"+
        "\3\u00cc\2\u00da\1\176\3\uffff\1\56\3\u00da\1\u00d4\3\uffff\1\u00cc"+
        "\2\u00b0\1\u00c9\1\u00cc\1\u00b0\1\u00cc\1\171\3\u00d6\1\u00d4\2"+
        "\u00d3\3\u00cc\2\u00da\10\uffff\u0167\0\1\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\10\1\3\uffff\6\1\1\2\1\3\1\uffff\1\5\1\6\1\7\1\10\1\11"+
        "\1\13\1\uffff\1\14\10\uffff\3\1\25\uffff\2\1\6\uffff\2\1\25\uffff"+
        "\1\4\u016d\uffff\1\12";
    static final String DFA2_specialS =
        "\1\0\34\uffff\1\1\1\uffff\1\2\1\uffff\1\3\101\uffff\1\4\1\5\1\6"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
        "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1"+
        "\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
        "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
        "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
        "\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
        "\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085"+
        "\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d"+
        "\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095"+
        "\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d"+
        "\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5"+
        "\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad"+
        "\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5"+
        "\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd"+
        "\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5"+
        "\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd"+
        "\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5"+
        "\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00dd"+
        "\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00e5"+
        "\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed"+
        "\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4\1\u00f5"+
        "\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\u00fd"+
        "\1\u00fe\1\u00ff\1\u0100\1\u0101\1\u0102\1\u0103\1\u0104\1\u0105"+
        "\1\u0106\1\u0107\1\u0108\1\u0109\1\u010a\1\u010b\1\u010c\1\u010d"+
        "\1\u010e\1\u010f\1\u0110\1\u0111\1\u0112\1\u0113\1\u0114\1\u0115"+
        "\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a\1\u011b\1\u011c\1\u011d"+
        "\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122\1\u0123\1\u0124\1\u0125"+
        "\1\u0126\1\u0127\1\u0128\1\u0129\1\u012a\1\u012b\1\u012c\1\u012d"+
        "\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135"+
        "\1\u0136\1\u0137\1\u0138\1\u0139\1\u013a\1\u013b\1\u013c\1\u013d"+
        "\1\u013e\1\u013f\1\u0140\1\u0141\1\u0142\1\u0143\1\u0144\1\u0145"+
        "\1\u0146\1\u0147\1\u0148\1\u0149\1\u014a\1\u014b\1\u014c\1\u014d"+
        "\1\u014e\1\u014f\1\u0150\1\u0151\1\u0152\1\u0153\1\u0154\1\u0155"+
        "\1\u0156\1\u0157\1\u0158\1\u0159\1\u015a\1\u015b\1\u015c\1\u015d"+
        "\1\u015e\1\u015f\1\u0160\1\u0161\1\u0162\1\u0163\1\u0164\1\u0165"+
        "\1\u0166\1\u0167\1\u0168\1\u0169\1\u016a\1\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\27\27\uffff\1\6\20\uffff\1\32\35\uffff\1\32\30\uffff\1\10"+
            "\20\uffff\1\34\20\uffff\1\23\3\uffff\1\22\1\25\4\uffff\1\24"+
            "\10\uffff\1\1\1\26\10\uffff\1\14\1\7\2\uffff\1\16\4\uffff\1"+
            "\12\1\uffff\1\26\3\uffff\1\3\2\uffff\1\20\1\2\1\4\1\21\1\uffff"+
            "\1\5\1\31\1\11\2\uffff\1\30\1\13\1\17\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\u00a7\uffff\1\36",
            "\1\37\u00a7\uffff\1\40",
            "\1\41\u00a7\uffff\1\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\47\105\uffff\1\45\4\uffff\1\46\15\uffff\1\23\116\uffff\1"+
            "\44",
            "\1\56\20\uffff\1\73\35\uffff\1\72\30\uffff\1\60\64\uffff\1"+
            "\51\11\uffff\1\64\1\57\2\uffff\1\66\4\uffff\1\62\5\uffff\1\53"+
            "\2\uffff\1\70\1\52\1\54\1\71\1\uffff\1\55\1\uffff\1\61\3\uffff"+
            "\1\63\1\67\1\65",
            "\1\76\105\uffff\1\75\22\uffff\1\23\116\uffff\1\74",
            "\1\101\20\uffff\1\103\35\uffff\1\102\40\uffff\1\100",
            "\1\106\105\uffff\1\105\22\uffff\1\23\116\uffff\1\104",
            "\1\115\20\uffff\1\132\35\uffff\1\131\30\uffff\1\117\64\uffff"+
            "\1\110\11\uffff\1\123\1\116\2\uffff\1\125\4\uffff\1\121\5\uffff"+
            "\1\112\2\uffff\1\127\1\111\1\113\1\130\1\uffff\1\114\1\uffff"+
            "\1\120\3\uffff\1\122\1\126\1\124",
            "\1\134\35\uffff\1\134\35\uffff\1\134\3\uffff\1\134\7\uffff"+
            "\1\23\1\134\21\uffff\1\134\3\uffff\1\134\1\uffff\1\134\3\uffff"+
            "\1\134",
            "\1\150\20\uffff\1\165\35\uffff\1\164\30\uffff\1\152\64\uffff"+
            "\1\143\11\uffff\1\156\1\151\2\uffff\1\160\4\uffff\1\154\5\uffff"+
            "\1\145\2\uffff\1\162\1\144\1\146\1\163\1\uffff\1\147\1\uffff"+
            "\1\153\3\uffff\1\155\1\161\1\157",
            "",
            "",
            "",
            "",
            "\1\172\u0095\uffff\1\167\3\uffff\1\166\1\170\2\uffff\1\171",
            "\1\u0080\105\uffff\1\177\2\uffff\1\176\1\uffff\1\174\16\uffff"+
            "\1\173\47\uffff\1\175",
            "\1\u0086\105\uffff\1\u0085\2\uffff\1\u0084\1\uffff\1\u0082"+
            "\16\uffff\1\u0081\47\uffff\1\u0083",
            "\1\u008f\105\uffff\1\u008e\2\uffff\1\u008c\1\uffff\1\u008a"+
            "\16\uffff\1\u0089\47\uffff\1\u008b\10\uffff\1\u0088\16\uffff"+
            "\1\u0087\1\u008d",
            "\1\u0097\105\uffff\1\u0096\2\uffff\1\u0094\1\uffff\1\u0092"+
            "\16\uffff\1\u0091\47\uffff\1\u0093\27\uffff\1\u0090\3\uffff"+
            "\1\u0095",
            "\1\u009d\105\uffff\1\u009c\2\uffff\1\u009b\1\uffff\1\u0099"+
            "\16\uffff\1\u0098\47\uffff\1\u009a",
            "\1\u00a4\174\uffff\1\u00a0\30\uffff\1\u009e\3\uffff\1\u00a1"+
            "\1\u00a2\1\u009f\1\uffff\1\u00a3",
            "\1\u00a5",
            "\1\u00a6\u00a7\uffff\1\u00a7",
            "\1\u00a8\u00a7\uffff\1\u00a9",
            "\1\u00aa\u00a7\uffff\1\u00ab",
            "\1\u00b7\174\uffff\1\u00b2\12\uffff\1\u00b0\2\uffff\1\u00ad"+
            "\12\uffff\1\u00b4\2\uffff\1\u00af\1\u00b3\1\u00b5\1\u00b1\1"+
            "\uffff\1\u00b6\6\uffff\1\u00ae\1\u00ac",
            "\1\u00c2\174\uffff\1\u00bd\12\uffff\1\u00bb\2\uffff\1\u00b8"+
            "\12\uffff\1\u00bf\2\uffff\1\u00ba\1\u00be\1\u00c0\1\u00bc\1"+
            "\uffff\1\u00c1\6\uffff\1\u00b9",
            "\1\u00cc\174\uffff\1\u00c7\12\uffff\1\u00c5\15\uffff\1\u00c9"+
            "\2\uffff\1\u00c4\1\u00c8\1\u00ca\1\u00c6\1\uffff\1\u00cb\6\uffff"+
            "\1\u00c3",
            "\1\u00d5\174\uffff\1\u00d0\12\uffff\1\u00ce\15\uffff\1\u00d2"+
            "\2\uffff\1\u00cd\1\u00d1\1\u00d3\1\u00cf\1\uffff\1\u00d4",
            "\1\u00dd\174\uffff\1\u00d8\12\uffff\1\u00d6\15\uffff\1\u00da"+
            "\3\uffff\1\u00d9\1\u00db\1\u00d7\1\uffff\1\u00dc",
            "\1\u00e3\174\uffff\1\u00de\30\uffff\1\u00e0\3\uffff\1\u00df"+
            "\1\u00e1\2\uffff\1\u00e2",
            "\1\u00ea\20\uffff\1\u00f7\35\uffff\1\u00f6\30\uffff\1\u00ec"+
            "\64\uffff\1\u00e5\11\uffff\1\u00f0\1\u00eb\2\uffff\1\u00f2\4"+
            "\uffff\1\u00ee\5\uffff\1\u00e7\2\uffff\1\u00f4\1\u00e6\1\u00e8"+
            "\1\u00f5\1\uffff\1\u00e9\1\uffff\1\u00ed\3\uffff\1\u00ef\1\u00f3"+
            "\1\u00f1\5\uffff\1\u00e4",
            "\1\u00fe\20\uffff\1\u010b\35\uffff\1\u010a\30\uffff\1\u0100"+
            "\64\uffff\1\u00f9\11\uffff\1\u0104\1\u00ff\2\uffff\1\u0106\4"+
            "\uffff\1\u0102\5\uffff\1\u00fb\2\uffff\1\u0108\1\u00fa\1\u00fc"+
            "\1\u0109\1\uffff\1\u00fd\1\uffff\1\u0101\3\uffff\1\u0103\1\u0107"+
            "\1\u0105\5\uffff\1\u00f8",
            "\1\u010d\20\uffff\1\u010f\35\uffff\1\u010e\40\uffff\1\u010c",
            "",
            "",
            "",
            "\1\u0110",
            "\1\u0114\20\uffff\1\u0116\35\uffff\1\u0115\27\uffff\1\u0111"+
            "\4\uffff\1\u0111\2\uffff\1\u0111\1\u0112\2\uffff\1\u0111\3\uffff"+
            "\1\u0111\4\uffff\1\u0111\1\uffff\1\u0111\4\uffff\1\u0111\106"+
            "\uffff\1\u0111\1\uffff\1\u0113",
            "\1\u0119\20\uffff\1\u011b\35\uffff\1\u011a\40\uffff\1\u0118"+
            "\133\uffff\1\u0117",
            "\1\u011e\20\uffff\1\u0120\35\uffff\1\u011f\40\uffff\1\u011d"+
            "\133\uffff\1\u011c",
            "\1\u0126\20\uffff\1\u0133\35\uffff\1\u0132\30\uffff\1\u0128"+
            "\64\uffff\1\u0121\11\uffff\1\u012c\1\u0127\2\uffff\1\u012e\4"+
            "\uffff\1\u012a\5\uffff\1\u0123\2\uffff\1\u0130\1\u0122\1\u0124"+
            "\1\u0131\1\uffff\1\u0125\1\uffff\1\u0129\3\uffff\1\u012b\1\u012f"+
            "\1\u012d",
            "",
            "",
            "",
            "\1\u0138\u0095\uffff\1\u0135\3\uffff\1\u0134\1\u0136\2\uffff"+
            "\1\u0137",
            "\1\u013e\105\uffff\1\u013d\2\uffff\1\u013c\1\uffff\1\u013a"+
            "\16\uffff\1\u0139\47\uffff\1\u013b",
            "\1\u0144\105\uffff\1\u0143\2\uffff\1\u0142\1\uffff\1\u0140"+
            "\16\uffff\1\u013f\47\uffff\1\u0141",
            "\1\u014d\105\uffff\1\u014c\2\uffff\1\u014a\1\uffff\1\u0148"+
            "\16\uffff\1\u0147\47\uffff\1\u0149\10\uffff\1\u0146\16\uffff"+
            "\1\u0145\1\u014b",
            "\1\u0155\105\uffff\1\u0154\2\uffff\1\u0152\1\uffff\1\u0150"+
            "\16\uffff\1\u014f\47\uffff\1\u0151\27\uffff\1\u014e\3\uffff"+
            "\1\u0153",
            "\1\u015b\105\uffff\1\u015a\2\uffff\1\u0159\1\uffff\1\u0157"+
            "\16\uffff\1\u0156\47\uffff\1\u0158",
            "\1\u0162\174\uffff\1\u015e\30\uffff\1\u015c\3\uffff\1\u015f"+
            "\1\u0160\1\u015d\1\uffff\1\u0161",
            "\1\u0163",
            "\1\u0164\u00a7\uffff\1\u0165",
            "\1\u0166\u00a7\uffff\1\u0167",
            "\1\u0168\u00a7\uffff\1\u0169",
            "\1\u0175\174\uffff\1\u0170\12\uffff\1\u016e\2\uffff\1\u016b"+
            "\12\uffff\1\u0172\2\uffff\1\u016d\1\u0171\1\u0173\1\u016f\1"+
            "\uffff\1\u0174\6\uffff\1\u016c\1\u016a",
            "\1\u0180\174\uffff\1\u017b\12\uffff\1\u0179\2\uffff\1\u0176"+
            "\12\uffff\1\u017d\2\uffff\1\u0178\1\u017c\1\u017e\1\u017a\1"+
            "\uffff\1\u017f\6\uffff\1\u0177",
            "\1\u018a\174\uffff\1\u0185\12\uffff\1\u0183\15\uffff\1\u0187"+
            "\2\uffff\1\u0182\1\u0186\1\u0188\1\u0184\1\uffff\1\u0189\6\uffff"+
            "\1\u0181",
            "\1\u0193\174\uffff\1\u018e\12\uffff\1\u018c\15\uffff\1\u0190"+
            "\2\uffff\1\u018b\1\u018f\1\u0191\1\u018d\1\uffff\1\u0192",
            "\1\u019b\174\uffff\1\u0196\12\uffff\1\u0194\15\uffff\1\u0198"+
            "\3\uffff\1\u0197\1\u0199\1\u0195\1\uffff\1\u019a",
            "\1\u01a1\174\uffff\1\u019c\30\uffff\1\u019e\3\uffff\1\u019d"+
            "\1\u019f\2\uffff\1\u01a0",
            "\1\u01a8\20\uffff\1\u01b5\35\uffff\1\u01b4\30\uffff\1\u01aa"+
            "\64\uffff\1\u01a3\11\uffff\1\u01ae\1\u01a9\2\uffff\1\u01b0\4"+
            "\uffff\1\u01ac\5\uffff\1\u01a5\2\uffff\1\u01b2\1\u01a4\1\u01a6"+
            "\1\u01b3\1\uffff\1\u01a7\1\uffff\1\u01ab\3\uffff\1\u01ad\1\u01b1"+
            "\1\u01af\5\uffff\1\u01a2",
            "\1\u01bc\20\uffff\1\u01c9\35\uffff\1\u01c8\30\uffff\1\u01be"+
            "\64\uffff\1\u01b7\11\uffff\1\u01c2\1\u01bd\2\uffff\1\u01c4\4"+
            "\uffff\1\u01c0\5\uffff\1\u01b9\2\uffff\1\u01c6\1\u01b8\1\u01ba"+
            "\1\u01c7\1\uffff\1\u01bb\1\uffff\1\u01bf\3\uffff\1\u01c1\1\u01c5"+
            "\1\u01c3\5\uffff\1\u01b6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_0==171) && (synpred1_Objc())) {s = 1;}

                        else if ( (LA2_0==200) && (synpred1_Objc())) {s = 2;}

                        else if ( (LA2_0==196) && (synpred1_Objc())) {s = 3;}

                        else if ( (LA2_0==201) && (synpred1_Objc())) {s = 4;}

                        else if ( (LA2_0==204) && (synpred1_Objc())) {s = 5;}

                        else if ( (LA2_0==ID) && (synpred1_Objc())) {s = 6;}

                        else if ( (LA2_0==182) && (synpred1_Objc())) {s = 7;}

                        else if ( (LA2_0==118) && (synpred1_Objc())) {s = 8;}

                        else if ( (LA2_0==206) ) {s = 9;}

                        else if ( (LA2_0==190) ) {s = 10;}

                        else if ( (LA2_0==210) ) {s = 11;}

                        else if ( (LA2_0==181) && (synpred1_Objc())) {s = 12;}

                        else if ( (LA2_0==212) && (synpred1_Objc())) {s = 13;}

                        else if ( (LA2_0==185) && (synpred1_Objc())) {s = 14;}

                        else if ( (LA2_0==211) && (synpred1_Objc())) {s = 15;}

                        else if ( (LA2_0==199) && (synpred1_Objc())) {s = 16;}

                        else if ( (LA2_0==202) && (synpred1_Objc())) {s = 17;}

                        else if ( (LA2_0==156) ) {s = 18;}

                        else if ( (LA2_0==152) ) {s = 19;}

                        else if ( (LA2_0==162) ) {s = 20;}

                        else if ( (LA2_0==157) ) {s = 21;}

                        else if ( (LA2_0==172||LA2_0==192) ) {s = 22;}

                        else if ( (LA2_0==DEFINE_LITERAL) ) {s = 23;}

                        else if ( (LA2_0==209) ) {s = 24;}

                        else if ( (LA2_0==205) ) {s = 25;}

                        else if ( (LA2_0==M_C_LIT||LA2_0==S_C_LIT) ) {s = 26;}

                        else if ( (LA2_0==135) ) {s = 28;}

                         
                        input.seek(index2_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_29==214) ) {s = 36;}

                        else if ( (LA2_29==116) && (synpred1_Objc())) {s = 37;}

                        else if ( (LA2_29==121) && (synpred1_Objc())) {s = 38;}

                        else if ( (LA2_29==ID) && (synpred1_Objc())) {s = 39;}

                        else if ( (LA2_29==135) ) {s = 19;}

                         
                        input.seek(index2_29);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_31 = input.LA(1);

                         
                        int index2_31 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_31==214) ) {s = 60;}

                        else if ( (LA2_31==116) && (synpred1_Objc())) {s = 61;}

                        else if ( (LA2_31==ID) && (synpred1_Objc())) {s = 62;}

                        else if ( (LA2_31==135) ) {s = 19;}

                         
                        input.seek(index2_31);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_33 = input.LA(1);

                         
                        int index2_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_33==214) ) {s = 68;}

                        else if ( (LA2_33==116) && (synpred1_Objc())) {s = 69;}

                        else if ( (LA2_33==ID) && (synpred1_Objc())) {s = 70;}

                        else if ( (LA2_33==135) ) {s = 19;}

                         
                        input.seek(index2_33);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_99);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_100);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_101);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_102);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_103);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_104);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_105);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_106);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_107);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_108);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_109);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_110);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_111);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_112);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_113);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_114);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_115);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_116);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_117);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_118);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_119);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_120);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_121);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_122);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_123);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_124);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_125);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_126);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_127);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_128);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_129);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_130);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_131);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_132);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_133);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_134);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_135);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_136);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_137);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_138);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_139);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_140);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_141);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_142);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_143);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_144 = input.LA(1);

                         
                        int index2_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_144);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_145 = input.LA(1);

                         
                        int index2_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_145);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_146 = input.LA(1);

                         
                        int index2_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_146);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_147 = input.LA(1);

                         
                        int index2_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_147);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_148 = input.LA(1);

                         
                        int index2_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_148);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_149 = input.LA(1);

                         
                        int index2_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_149);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_150 = input.LA(1);

                         
                        int index2_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_150);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_151 = input.LA(1);

                         
                        int index2_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_151);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_152 = input.LA(1);

                         
                        int index2_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_152);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_153 = input.LA(1);

                         
                        int index2_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_153);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_154 = input.LA(1);

                         
                        int index2_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_154);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_155 = input.LA(1);

                         
                        int index2_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_155);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_156 = input.LA(1);

                         
                        int index2_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_156);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_157 = input.LA(1);

                         
                        int index2_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_157);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_158 = input.LA(1);

                         
                        int index2_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_158);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_159 = input.LA(1);

                         
                        int index2_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_159);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_160 = input.LA(1);

                         
                        int index2_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_160);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_161 = input.LA(1);

                         
                        int index2_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_161);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_162 = input.LA(1);

                         
                        int index2_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_162);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_163 = input.LA(1);

                         
                        int index2_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_163);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_164 = input.LA(1);

                         
                        int index2_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_164);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_165 = input.LA(1);

                         
                        int index2_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_165);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_166 = input.LA(1);

                         
                        int index2_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_166);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_167 = input.LA(1);

                         
                        int index2_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_167);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_168 = input.LA(1);

                         
                        int index2_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_168);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_169 = input.LA(1);

                         
                        int index2_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_169);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_170 = input.LA(1);

                         
                        int index2_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_170);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_171 = input.LA(1);

                         
                        int index2_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_171);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_172 = input.LA(1);

                         
                        int index2_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_172);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_173 = input.LA(1);

                         
                        int index2_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_173);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_174 = input.LA(1);

                         
                        int index2_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_174);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_175 = input.LA(1);

                         
                        int index2_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_175);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_176 = input.LA(1);

                         
                        int index2_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_176);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_177 = input.LA(1);

                         
                        int index2_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_177);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_178 = input.LA(1);

                         
                        int index2_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_178);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_179 = input.LA(1);

                         
                        int index2_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_179);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_180 = input.LA(1);

                         
                        int index2_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_180);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_181 = input.LA(1);

                         
                        int index2_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_181);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_182 = input.LA(1);

                         
                        int index2_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_182);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_183 = input.LA(1);

                         
                        int index2_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_183);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_184 = input.LA(1);

                         
                        int index2_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_184);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_185 = input.LA(1);

                         
                        int index2_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_185);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_186 = input.LA(1);

                         
                        int index2_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_186);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_187 = input.LA(1);

                         
                        int index2_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_187);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_188 = input.LA(1);

                         
                        int index2_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_188);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_189 = input.LA(1);

                         
                        int index2_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_189);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_190 = input.LA(1);

                         
                        int index2_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_190);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_191 = input.LA(1);

                         
                        int index2_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_191);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_192 = input.LA(1);

                         
                        int index2_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_192);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_193 = input.LA(1);

                         
                        int index2_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_193);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_194 = input.LA(1);

                         
                        int index2_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_194);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_195 = input.LA(1);

                         
                        int index2_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_195);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_196 = input.LA(1);

                         
                        int index2_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_196);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_197 = input.LA(1);

                         
                        int index2_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_197);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_198 = input.LA(1);

                         
                        int index2_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_198);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_199 = input.LA(1);

                         
                        int index2_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_199);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_200 = input.LA(1);

                         
                        int index2_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_200);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_201 = input.LA(1);

                         
                        int index2_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_201);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_202 = input.LA(1);

                         
                        int index2_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_202);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_203 = input.LA(1);

                         
                        int index2_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_203);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_204 = input.LA(1);

                         
                        int index2_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_204);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_205 = input.LA(1);

                         
                        int index2_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_205);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_206 = input.LA(1);

                         
                        int index2_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_206);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_207 = input.LA(1);

                         
                        int index2_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_207);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_208 = input.LA(1);

                         
                        int index2_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_208);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_209 = input.LA(1);

                         
                        int index2_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_209);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_210 = input.LA(1);

                         
                        int index2_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_210);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_211 = input.LA(1);

                         
                        int index2_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_211);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_212 = input.LA(1);

                         
                        int index2_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_212);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_213 = input.LA(1);

                         
                        int index2_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_213);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_214 = input.LA(1);

                         
                        int index2_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_214);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_215 = input.LA(1);

                         
                        int index2_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_215);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_216 = input.LA(1);

                         
                        int index2_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_216);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_217 = input.LA(1);

                         
                        int index2_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_217);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_218 = input.LA(1);

                         
                        int index2_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_218);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_219 = input.LA(1);

                         
                        int index2_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_219);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_220 = input.LA(1);

                         
                        int index2_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_220);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_221 = input.LA(1);

                         
                        int index2_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_221);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_222 = input.LA(1);

                         
                        int index2_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_222);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_223 = input.LA(1);

                         
                        int index2_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_223);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_224 = input.LA(1);

                         
                        int index2_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_224);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA2_225 = input.LA(1);

                         
                        int index2_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_225);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA2_226 = input.LA(1);

                         
                        int index2_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_226);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA2_227 = input.LA(1);

                         
                        int index2_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_227);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA2_228 = input.LA(1);

                         
                        int index2_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_228);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA2_229 = input.LA(1);

                         
                        int index2_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_229);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA2_230 = input.LA(1);

                         
                        int index2_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_230);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA2_231 = input.LA(1);

                         
                        int index2_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_231);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA2_232 = input.LA(1);

                         
                        int index2_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_232);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA2_233 = input.LA(1);

                         
                        int index2_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_233);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA2_234 = input.LA(1);

                         
                        int index2_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_234);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA2_235 = input.LA(1);

                         
                        int index2_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_235);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA2_236 = input.LA(1);

                         
                        int index2_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_236);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA2_237 = input.LA(1);

                         
                        int index2_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_237);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA2_238 = input.LA(1);

                         
                        int index2_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_238);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA2_239 = input.LA(1);

                         
                        int index2_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_239);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA2_240 = input.LA(1);

                         
                        int index2_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_240);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA2_241 = input.LA(1);

                         
                        int index2_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_241);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA2_242 = input.LA(1);

                         
                        int index2_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_242);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA2_243 = input.LA(1);

                         
                        int index2_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_243);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA2_244 = input.LA(1);

                         
                        int index2_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_244);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA2_245 = input.LA(1);

                         
                        int index2_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_245);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA2_246 = input.LA(1);

                         
                        int index2_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_246);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA2_247 = input.LA(1);

                         
                        int index2_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_247);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA2_248 = input.LA(1);

                         
                        int index2_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_248);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA2_249 = input.LA(1);

                         
                        int index2_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_249);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA2_250 = input.LA(1);

                         
                        int index2_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_250);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA2_251 = input.LA(1);

                         
                        int index2_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_251);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA2_252 = input.LA(1);

                         
                        int index2_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_252);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA2_253 = input.LA(1);

                         
                        int index2_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_253);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA2_254 = input.LA(1);

                         
                        int index2_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_254);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA2_255 = input.LA(1);

                         
                        int index2_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_255);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA2_256 = input.LA(1);

                         
                        int index2_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_256);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA2_257 = input.LA(1);

                         
                        int index2_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_257);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA2_258 = input.LA(1);

                         
                        int index2_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_258);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA2_259 = input.LA(1);

                         
                        int index2_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_259);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA2_260 = input.LA(1);

                         
                        int index2_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_260);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA2_261 = input.LA(1);

                         
                        int index2_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_261);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA2_262 = input.LA(1);

                         
                        int index2_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_262);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA2_263 = input.LA(1);

                         
                        int index2_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_263);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA2_264 = input.LA(1);

                         
                        int index2_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_264);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA2_265 = input.LA(1);

                         
                        int index2_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_265);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA2_266 = input.LA(1);

                         
                        int index2_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_266);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA2_267 = input.LA(1);

                         
                        int index2_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_267);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA2_268 = input.LA(1);

                         
                        int index2_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_268);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA2_269 = input.LA(1);

                         
                        int index2_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_269);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA2_270 = input.LA(1);

                         
                        int index2_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_270);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA2_271 = input.LA(1);

                         
                        int index2_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_271);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA2_272 = input.LA(1);

                         
                        int index2_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_272);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA2_273 = input.LA(1);

                         
                        int index2_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_273);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA2_274 = input.LA(1);

                         
                        int index2_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_274);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA2_275 = input.LA(1);

                         
                        int index2_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_275);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA2_276 = input.LA(1);

                         
                        int index2_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_276);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA2_277 = input.LA(1);

                         
                        int index2_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_277);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA2_278 = input.LA(1);

                         
                        int index2_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_278);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA2_279 = input.LA(1);

                         
                        int index2_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_279);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA2_280 = input.LA(1);

                         
                        int index2_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_280);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA2_281 = input.LA(1);

                         
                        int index2_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_281);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA2_282 = input.LA(1);

                         
                        int index2_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_282);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA2_283 = input.LA(1);

                         
                        int index2_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_283);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA2_284 = input.LA(1);

                         
                        int index2_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_284);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA2_285 = input.LA(1);

                         
                        int index2_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_285);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA2_286 = input.LA(1);

                         
                        int index2_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_286);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA2_287 = input.LA(1);

                         
                        int index2_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_287);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA2_288 = input.LA(1);

                         
                        int index2_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_288);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA2_289 = input.LA(1);

                         
                        int index2_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_289);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA2_290 = input.LA(1);

                         
                        int index2_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_290);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA2_291 = input.LA(1);

                         
                        int index2_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_291);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA2_292 = input.LA(1);

                         
                        int index2_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_292);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA2_293 = input.LA(1);

                         
                        int index2_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_293);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA2_294 = input.LA(1);

                         
                        int index2_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_294);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA2_295 = input.LA(1);

                         
                        int index2_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_295);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA2_296 = input.LA(1);

                         
                        int index2_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_296);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA2_297 = input.LA(1);

                         
                        int index2_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_297);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA2_298 = input.LA(1);

                         
                        int index2_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_298);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA2_299 = input.LA(1);

                         
                        int index2_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_299);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA2_300 = input.LA(1);

                         
                        int index2_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_300);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA2_301 = input.LA(1);

                         
                        int index2_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_301);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA2_302 = input.LA(1);

                         
                        int index2_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_302);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA2_303 = input.LA(1);

                         
                        int index2_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_303);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA2_304 = input.LA(1);

                         
                        int index2_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_304);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA2_305 = input.LA(1);

                         
                        int index2_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_305);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA2_306 = input.LA(1);

                         
                        int index2_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_306);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA2_307 = input.LA(1);

                         
                        int index2_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_307);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA2_308 = input.LA(1);

                         
                        int index2_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_308);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA2_309 = input.LA(1);

                         
                        int index2_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_309);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA2_310 = input.LA(1);

                         
                        int index2_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_310);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA2_311 = input.LA(1);

                         
                        int index2_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_311);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA2_312 = input.LA(1);

                         
                        int index2_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_312);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA2_313 = input.LA(1);

                         
                        int index2_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_313);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA2_314 = input.LA(1);

                         
                        int index2_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_314);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA2_315 = input.LA(1);

                         
                        int index2_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_315);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA2_316 = input.LA(1);

                         
                        int index2_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_316);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA2_317 = input.LA(1);

                         
                        int index2_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_317);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA2_318 = input.LA(1);

                         
                        int index2_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_318);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA2_319 = input.LA(1);

                         
                        int index2_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_319);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA2_320 = input.LA(1);

                         
                        int index2_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_320);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA2_321 = input.LA(1);

                         
                        int index2_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_321);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA2_322 = input.LA(1);

                         
                        int index2_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_322);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA2_323 = input.LA(1);

                         
                        int index2_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_323);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA2_324 = input.LA(1);

                         
                        int index2_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_324);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA2_325 = input.LA(1);

                         
                        int index2_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_325);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA2_326 = input.LA(1);

                         
                        int index2_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_326);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA2_327 = input.LA(1);

                         
                        int index2_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_327);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA2_328 = input.LA(1);

                         
                        int index2_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_328);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA2_329 = input.LA(1);

                         
                        int index2_329 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_329);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA2_330 = input.LA(1);

                         
                        int index2_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_330);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA2_331 = input.LA(1);

                         
                        int index2_331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_331);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA2_332 = input.LA(1);

                         
                        int index2_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_332);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA2_333 = input.LA(1);

                         
                        int index2_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_333);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA2_334 = input.LA(1);

                         
                        int index2_334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_334);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA2_335 = input.LA(1);

                         
                        int index2_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_335);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA2_336 = input.LA(1);

                         
                        int index2_336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_336);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA2_337 = input.LA(1);

                         
                        int index2_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_337);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA2_338 = input.LA(1);

                         
                        int index2_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_338);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA2_339 = input.LA(1);

                         
                        int index2_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_339);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA2_340 = input.LA(1);

                         
                        int index2_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_340);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA2_341 = input.LA(1);

                         
                        int index2_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_341);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA2_342 = input.LA(1);

                         
                        int index2_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_342);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA2_343 = input.LA(1);

                         
                        int index2_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_343);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA2_344 = input.LA(1);

                         
                        int index2_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_344);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA2_345 = input.LA(1);

                         
                        int index2_345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_345);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA2_346 = input.LA(1);

                         
                        int index2_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_346);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA2_347 = input.LA(1);

                         
                        int index2_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_347);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA2_348 = input.LA(1);

                         
                        int index2_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_348);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA2_349 = input.LA(1);

                         
                        int index2_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_349);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA2_350 = input.LA(1);

                         
                        int index2_350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_350);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA2_351 = input.LA(1);

                         
                        int index2_351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_351);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA2_352 = input.LA(1);

                         
                        int index2_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_352);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA2_353 = input.LA(1);

                         
                        int index2_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_353);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA2_354 = input.LA(1);

                         
                        int index2_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_354);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA2_355 = input.LA(1);

                         
                        int index2_355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_355);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA2_356 = input.LA(1);

                         
                        int index2_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_356);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA2_357 = input.LA(1);

                         
                        int index2_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_357);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA2_358 = input.LA(1);

                         
                        int index2_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_358);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA2_359 = input.LA(1);

                         
                        int index2_359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_359);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA2_360 = input.LA(1);

                         
                        int index2_360 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_360);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA2_361 = input.LA(1);

                         
                        int index2_361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_361);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA2_362 = input.LA(1);

                         
                        int index2_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_362);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA2_363 = input.LA(1);

                         
                        int index2_363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_363);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA2_364 = input.LA(1);

                         
                        int index2_364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_364);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA2_365 = input.LA(1);

                         
                        int index2_365 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_365);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA2_366 = input.LA(1);

                         
                        int index2_366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_366);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA2_367 = input.LA(1);

                         
                        int index2_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_367);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA2_368 = input.LA(1);

                         
                        int index2_368 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_368);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA2_369 = input.LA(1);

                         
                        int index2_369 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_369);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA2_370 = input.LA(1);

                         
                        int index2_370 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_370);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA2_371 = input.LA(1);

                         
                        int index2_371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_371);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA2_372 = input.LA(1);

                         
                        int index2_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_372);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA2_373 = input.LA(1);

                         
                        int index2_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_373);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA2_374 = input.LA(1);

                         
                        int index2_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_374);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA2_375 = input.LA(1);

                         
                        int index2_375 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_375);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA2_376 = input.LA(1);

                         
                        int index2_376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_376);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA2_377 = input.LA(1);

                         
                        int index2_377 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_377);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA2_378 = input.LA(1);

                         
                        int index2_378 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_378);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA2_379 = input.LA(1);

                         
                        int index2_379 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_379);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA2_380 = input.LA(1);

                         
                        int index2_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_380);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA2_381 = input.LA(1);

                         
                        int index2_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_381);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA2_382 = input.LA(1);

                         
                        int index2_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_382);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA2_383 = input.LA(1);

                         
                        int index2_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_383);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA2_384 = input.LA(1);

                         
                        int index2_384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_384);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA2_385 = input.LA(1);

                         
                        int index2_385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_385);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA2_386 = input.LA(1);

                         
                        int index2_386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_386);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA2_387 = input.LA(1);

                         
                        int index2_387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_387);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA2_388 = input.LA(1);

                         
                        int index2_388 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_388);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA2_389 = input.LA(1);

                         
                        int index2_389 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_389);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA2_390 = input.LA(1);

                         
                        int index2_390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_390);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA2_391 = input.LA(1);

                         
                        int index2_391 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_391);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA2_392 = input.LA(1);

                         
                        int index2_392 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_392);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA2_393 = input.LA(1);

                         
                        int index2_393 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_393);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA2_394 = input.LA(1);

                         
                        int index2_394 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_394);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA2_395 = input.LA(1);

                         
                        int index2_395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_395);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA2_396 = input.LA(1);

                         
                        int index2_396 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_396);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA2_397 = input.LA(1);

                         
                        int index2_397 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_397);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA2_398 = input.LA(1);

                         
                        int index2_398 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_398);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA2_399 = input.LA(1);

                         
                        int index2_399 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_399);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA2_400 = input.LA(1);

                         
                        int index2_400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_400);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA2_401 = input.LA(1);

                         
                        int index2_401 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_401);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA2_402 = input.LA(1);

                         
                        int index2_402 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_402);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA2_403 = input.LA(1);

                         
                        int index2_403 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_403);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA2_404 = input.LA(1);

                         
                        int index2_404 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_404);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA2_405 = input.LA(1);

                         
                        int index2_405 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_405);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA2_406 = input.LA(1);

                         
                        int index2_406 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_406);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA2_407 = input.LA(1);

                         
                        int index2_407 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_407);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA2_408 = input.LA(1);

                         
                        int index2_408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_408);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA2_409 = input.LA(1);

                         
                        int index2_409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_409);

                        if ( s>=0 ) return s;
                        break;
                    case 315 : 
                        int LA2_410 = input.LA(1);

                         
                        int index2_410 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_410);

                        if ( s>=0 ) return s;
                        break;
                    case 316 : 
                        int LA2_411 = input.LA(1);

                         
                        int index2_411 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_411);

                        if ( s>=0 ) return s;
                        break;
                    case 317 : 
                        int LA2_412 = input.LA(1);

                         
                        int index2_412 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_412);

                        if ( s>=0 ) return s;
                        break;
                    case 318 : 
                        int LA2_413 = input.LA(1);

                         
                        int index2_413 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_413);

                        if ( s>=0 ) return s;
                        break;
                    case 319 : 
                        int LA2_414 = input.LA(1);

                         
                        int index2_414 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_414);

                        if ( s>=0 ) return s;
                        break;
                    case 320 : 
                        int LA2_415 = input.LA(1);

                         
                        int index2_415 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_415);

                        if ( s>=0 ) return s;
                        break;
                    case 321 : 
                        int LA2_416 = input.LA(1);

                         
                        int index2_416 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_416);

                        if ( s>=0 ) return s;
                        break;
                    case 322 : 
                        int LA2_417 = input.LA(1);

                         
                        int index2_417 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_417);

                        if ( s>=0 ) return s;
                        break;
                    case 323 : 
                        int LA2_418 = input.LA(1);

                         
                        int index2_418 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_418);

                        if ( s>=0 ) return s;
                        break;
                    case 324 : 
                        int LA2_419 = input.LA(1);

                         
                        int index2_419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_419);

                        if ( s>=0 ) return s;
                        break;
                    case 325 : 
                        int LA2_420 = input.LA(1);

                         
                        int index2_420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_420);

                        if ( s>=0 ) return s;
                        break;
                    case 326 : 
                        int LA2_421 = input.LA(1);

                         
                        int index2_421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_421);

                        if ( s>=0 ) return s;
                        break;
                    case 327 : 
                        int LA2_422 = input.LA(1);

                         
                        int index2_422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_422);

                        if ( s>=0 ) return s;
                        break;
                    case 328 : 
                        int LA2_423 = input.LA(1);

                         
                        int index2_423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_423);

                        if ( s>=0 ) return s;
                        break;
                    case 329 : 
                        int LA2_424 = input.LA(1);

                         
                        int index2_424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_424);

                        if ( s>=0 ) return s;
                        break;
                    case 330 : 
                        int LA2_425 = input.LA(1);

                         
                        int index2_425 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_425);

                        if ( s>=0 ) return s;
                        break;
                    case 331 : 
                        int LA2_426 = input.LA(1);

                         
                        int index2_426 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_426);

                        if ( s>=0 ) return s;
                        break;
                    case 332 : 
                        int LA2_427 = input.LA(1);

                         
                        int index2_427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_427);

                        if ( s>=0 ) return s;
                        break;
                    case 333 : 
                        int LA2_428 = input.LA(1);

                         
                        int index2_428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_428);

                        if ( s>=0 ) return s;
                        break;
                    case 334 : 
                        int LA2_429 = input.LA(1);

                         
                        int index2_429 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_429);

                        if ( s>=0 ) return s;
                        break;
                    case 335 : 
                        int LA2_430 = input.LA(1);

                         
                        int index2_430 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_430);

                        if ( s>=0 ) return s;
                        break;
                    case 336 : 
                        int LA2_431 = input.LA(1);

                         
                        int index2_431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_431);

                        if ( s>=0 ) return s;
                        break;
                    case 337 : 
                        int LA2_432 = input.LA(1);

                         
                        int index2_432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_432);

                        if ( s>=0 ) return s;
                        break;
                    case 338 : 
                        int LA2_433 = input.LA(1);

                         
                        int index2_433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_433);

                        if ( s>=0 ) return s;
                        break;
                    case 339 : 
                        int LA2_434 = input.LA(1);

                         
                        int index2_434 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_434);

                        if ( s>=0 ) return s;
                        break;
                    case 340 : 
                        int LA2_435 = input.LA(1);

                         
                        int index2_435 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_435);

                        if ( s>=0 ) return s;
                        break;
                    case 341 : 
                        int LA2_436 = input.LA(1);

                         
                        int index2_436 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_436);

                        if ( s>=0 ) return s;
                        break;
                    case 342 : 
                        int LA2_437 = input.LA(1);

                         
                        int index2_437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_437);

                        if ( s>=0 ) return s;
                        break;
                    case 343 : 
                        int LA2_438 = input.LA(1);

                         
                        int index2_438 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_438);

                        if ( s>=0 ) return s;
                        break;
                    case 344 : 
                        int LA2_439 = input.LA(1);

                         
                        int index2_439 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_439);

                        if ( s>=0 ) return s;
                        break;
                    case 345 : 
                        int LA2_440 = input.LA(1);

                         
                        int index2_440 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_440);

                        if ( s>=0 ) return s;
                        break;
                    case 346 : 
                        int LA2_441 = input.LA(1);

                         
                        int index2_441 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_441);

                        if ( s>=0 ) return s;
                        break;
                    case 347 : 
                        int LA2_442 = input.LA(1);

                         
                        int index2_442 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_442);

                        if ( s>=0 ) return s;
                        break;
                    case 348 : 
                        int LA2_443 = input.LA(1);

                         
                        int index2_443 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_443);

                        if ( s>=0 ) return s;
                        break;
                    case 349 : 
                        int LA2_444 = input.LA(1);

                         
                        int index2_444 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_444);

                        if ( s>=0 ) return s;
                        break;
                    case 350 : 
                        int LA2_445 = input.LA(1);

                         
                        int index2_445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_445);

                        if ( s>=0 ) return s;
                        break;
                    case 351 : 
                        int LA2_446 = input.LA(1);

                         
                        int index2_446 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_446);

                        if ( s>=0 ) return s;
                        break;
                    case 352 : 
                        int LA2_447 = input.LA(1);

                         
                        int index2_447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_447);

                        if ( s>=0 ) return s;
                        break;
                    case 353 : 
                        int LA2_448 = input.LA(1);

                         
                        int index2_448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_448);

                        if ( s>=0 ) return s;
                        break;
                    case 354 : 
                        int LA2_449 = input.LA(1);

                         
                        int index2_449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_449);

                        if ( s>=0 ) return s;
                        break;
                    case 355 : 
                        int LA2_450 = input.LA(1);

                         
                        int index2_450 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_450);

                        if ( s>=0 ) return s;
                        break;
                    case 356 : 
                        int LA2_451 = input.LA(1);

                         
                        int index2_451 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_451);

                        if ( s>=0 ) return s;
                        break;
                    case 357 : 
                        int LA2_452 = input.LA(1);

                         
                        int index2_452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_452);

                        if ( s>=0 ) return s;
                        break;
                    case 358 : 
                        int LA2_453 = input.LA(1);

                         
                        int index2_453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_453);

                        if ( s>=0 ) return s;
                        break;
                    case 359 : 
                        int LA2_454 = input.LA(1);

                         
                        int index2_454 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_454);

                        if ( s>=0 ) return s;
                        break;
                    case 360 : 
                        int LA2_455 = input.LA(1);

                         
                        int index2_455 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_455);

                        if ( s>=0 ) return s;
                        break;
                    case 361 : 
                        int LA2_456 = input.LA(1);

                         
                        int index2_456 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_456);

                        if ( s>=0 ) return s;
                        break;
                    case 362 : 
                        int LA2_457 = input.LA(1);

                         
                        int index2_457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 70;}

                        else if ( (true) ) {s = 458;}

                         
                        input.seek(index2_457);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA21_eotS =
        "\76\uffff";
    static final String DFA21_eofS =
        "\1\3\75\uffff";
    static final String DFA21_minS =
        "\1\26\75\uffff";
    static final String DFA21_maxS =
        "\1\u00da\75\uffff";
    static final String DFA21_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\72\uffff";
    static final String DFA21_specialS =
        "\76\uffff}>";
    static final String[] DFA21_transitionS = {
            "\1\3\27\uffff\1\3\20\uffff\1\3\35\uffff\1\3\26\uffff\1\3\1\1"+
            "\1\3\2\uffff\1\3\1\1\1\3\1\uffff\1\1\1\uffff\1\3\1\uffff\3\1"+
            "\1\uffff\1\1\1\uffff\1\3\2\uffff\1\1\1\uffff\1\1\4\uffff\1\1"+
            "\4\uffff\10\3\4\uffff\1\3\3\uffff\7\3\3\uffff\2\3\3\uffff\14"+
            "\3\1\uffff\4\3\1\uffff\11\3\1\uffff\6\3\1\uffff\1\1\1\uffff"+
            "\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA21_eot = DFA.unpackEncodedString(DFA21_eotS);
    static final short[] DFA21_eof = DFA.unpackEncodedString(DFA21_eofS);
    static final char[] DFA21_min = DFA.unpackEncodedStringToUnsignedChars(DFA21_minS);
    static final char[] DFA21_max = DFA.unpackEncodedStringToUnsignedChars(DFA21_maxS);
    static final short[] DFA21_accept = DFA.unpackEncodedString(DFA21_acceptS);
    static final short[] DFA21_special = DFA.unpackEncodedString(DFA21_specialS);
    static final short[][] DFA21_transition;

    static {
        int numStates = DFA21_transitionS.length;
        DFA21_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA21_transition[i] = DFA.unpackEncodedString(DFA21_transitionS[i]);
        }
    }

    class DFA21 extends DFA {

        public DFA21(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 21;
            this.eot = DFA21_eot;
            this.eof = DFA21_eof;
            this.min = DFA21_min;
            this.max = DFA21_max;
            this.accept = DFA21_accept;
            this.special = DFA21_special;
            this.transition = DFA21_transition;
        }
        public String getDescription() {
            return "275:15: ( ( access_wrapper name )* op_assign element_value )?";
        }
    }
    static final String DFA26_eotS =
        "\u0086\uffff";
    static final String DFA26_eofS =
        "\u0086\uffff";
    static final String DFA26_minS =
        "\3\56\47\uffff\1\56\2\uffff\1\23\6\uffff\1\56\22\uffff\1\165\12"+
        "\uffff\1\160\4\uffff\1\160\23\uffff\1\170\1\uffff\1\0\13\uffff\1"+
        "\0\7\uffff\1\0\3\uffff\1\0";
    static final String DFA26_maxS =
        "\1\u00d6\1\u00d8\1\u00d4\47\uffff\1\171\2\uffff\1\u00db\6\uffff"+
        "\1\u00d4\22\uffff\1\u00d8\12\uffff\1\u00d9\4\uffff\1\u00d9\23\uffff"+
        "\1\u00b0\1\uffff\1\0\13\uffff\1\0\7\uffff\1\0\3\uffff\1\0";
    static final String DFA26_acceptS =
        "\3\uffff\2\3\1\4\16\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\uffff\1\27\1"+
        "\30\2\uffff\1\1\1\2\1\uffff\1\3\6\uffff\22\3\1\uffff\12\3\1\uffff"+
        "\4\3\1\uffff\6\3\16\uffff\1\1\1\uffff\1\2\12\3\1\uffff\7\3\5\uffff";
    static final String DFA26_specialS =
        "\1\0\1\1\1\2\47\uffff\1\3\2\uffff\1\4\31\uffff\1\5\12\uffff\1\6"+
        "\4\uffff\1\7\25\uffff\1\10\13\uffff\1\11\7\uffff\1\12\3\uffff\1"+
        "\13}>";
    static final String[] DFA26_transitionS = {
            "\1\1\20\uffff\1\50\35\uffff\1\50\26\uffff\1\3\1\uffff\1\2\2"+
            "\uffff\1\4\15\uffff\1\40\16\uffff\1\47\17\uffff\1\24\1\uffff"+
            "\1\26\1\25\1\45\1\5\4\uffff\1\45\4\uffff\2\5\1\41\1\uffff\1"+
            "\5\1\42\1\uffff\1\30\1\33\1\5\1\31\2\uffff\1\36\1\43\1\5\1\32"+
            "\1\uffff\4\5\1\35\1\5\1\27\1\5\1\34\2\uffff\3\5\1\37\1\44",
            "\1\5\105\uffff\1\5\1\56\1\53\1\5\1\uffff\1\5\1\56\1\uffff\1"+
            "\54\1\56\2\uffff\1\54\1\56\2\52\1\uffff\1\56\2\uffff\1\5\1\uffff"+
            "\1\56\1\uffff\1\56\4\uffff\1\56\36\uffff\1\55\47\uffff\1\56",
            "\1\102\105\uffff\1\106\1\uffff\1\67\2\uffff\1\64\61\uffff\1"+
            "\76\11\uffff\1\70\1\65\2\uffff\1\72\4\uffff\1\105\5\uffff\1"+
            "\66\2\uffff\1\74\1\77\1\100\1\75\1\uffff\1\101\1\uffff\1\103"+
            "\3\uffff\1\104\1\73\1\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\105\uffff\1\110\4\uffff\1\111",
            "",
            "",
            "\1\126\32\uffff\1\122\22\uffff\1\127\26\uffff\1\124\26\uffff"+
            "\1\133\4\uffff\1\121\1\uffff\1\114\2\uffff\1\123\2\uffff\1\135"+
            "\2\uffff\1\113\1\135\23\uffff\1\125\1\112\14\uffff\1\120\2\uffff"+
            "\1\117\4\uffff\1\132\2\uffff\1\130\1\uffff\1\130\1\131\1\uffff"+
            "\1\5\1\115\1\116\14\uffff\1\130\16\uffff\1\130\12\uffff\1\134",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\153\174\uffff\1\5\11\uffff\2\5\2\uffff\1\5\12\uffff\1\5"+
            "\2\uffff\4\5\1\uffff\1\5\6\uffff\2\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\160\1\154\3\uffff\1\160\1\uffff\1\156\1\160\2\uffff\1\156"+
            "\1\160\2\155\1\uffff\1\160\4\uffff\1\160\1\uffff\1\160\4\uffff"+
            "\1\160\36\uffff\1\157\47\uffff\1\160",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\1\uffff\3\166\1\uffff\1\163\2\uffff\1\166\1\uffff\1"+
            "\166\1\165\1\164\1\uffff\1\166\1\165\1\164\2\162\1\166\3\uffff"+
            "\2\166\1\uffff\6\166\1\uffff\1\170\1\167\34\uffff\1\161\1\uffff"+
            "\1\171\1\166\43\uffff\1\166\1\uffff\1\166",
            "",
            "",
            "",
            "",
            "\1\176\1\uffff\3\176\1\uffff\1\173\2\uffff\1\176\1\uffff\1"+
            "\176\1\175\1\174\1\uffff\1\176\1\175\1\174\2\172\1\176\3\uffff"+
            "\2\176\1\uffff\6\176\1\uffff\1\u0080\1\177\36\uffff\1\u0081"+
            "\1\176\43\uffff\1\176\1\uffff\1\176",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0085\1\5\16\uffff\1\5\47\uffff\1\5",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "284:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | externC_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | autorelease_stmt | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA26_0 = input.LA(1);

                         
                        int index26_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_0==ID) ) {s = 1;}

                        else if ( (LA26_0==118) ) {s = 2;}

                        else if ( (LA26_0==116) && (synpred6_Objc())) {s = 3;}

                        else if ( (LA26_0==121) && (synpred6_Objc())) {s = 4;}

                        else if ( (LA26_0==171||(LA26_0 >= 181 && LA26_0 <= 182)||LA26_0==185||LA26_0==190||LA26_0==196||(LA26_0 >= 199 && LA26_0 <= 202)||LA26_0==204||LA26_0==206||(LA26_0 >= 210 && LA26_0 <= 212)) ) {s = 5;}

                        else if ( (LA26_0==166) ) {s = 20;}

                        else if ( (LA26_0==169) ) {s = 21;}

                        else if ( (LA26_0==168) ) {s = 22;}

                        else if ( (LA26_0==205) ) {s = 23;}

                        else if ( (LA26_0==188) ) {s = 24;}

                        else if ( (LA26_0==191) ) {s = 25;}

                        else if ( (LA26_0==197) ) {s = 26;}

                        else if ( (LA26_0==189) ) {s = 27;}

                        else if ( (LA26_0==207) ) {s = 28;}

                        else if ( (LA26_0==203) ) {s = 29;}

                        else if ( (LA26_0==194) ) {s = 30;}

                        else if ( (LA26_0==213) ) {s = 31;}

                        else if ( (LA26_0==135) ) {s = 32;}

                        else if ( (LA26_0==183) ) {s = 33;}

                        else if ( (LA26_0==186) ) {s = 34;}

                        else if ( (LA26_0==195) ) {s = 35;}

                        else if ( (LA26_0==214) ) {s = 36;}

                        else if ( (LA26_0==170||LA26_0==176) ) {s = 37;}

                        else if ( (LA26_0==150) ) {s = 39;}

                        else if ( (LA26_0==M_C_LIT||LA26_0==S_C_LIT) ) {s = 40;}

                         
                        input.seek(index26_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA26_1 = input.LA(1);

                         
                        int index26_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA26_1 >= 130 && LA26_1 <= 131)) ) {s = 42;}

                        else if ( (LA26_1==118) && (synpred4_Objc())) {s = 43;}

                        else if ( (LA26_1==124||LA26_1==128) && (synpred5_Objc())) {s = 44;}

                        else if ( (LA26_1==176) ) {s = 45;}

                        else if ( (LA26_1==117||LA26_1==122||LA26_1==125||LA26_1==129||LA26_1==133||LA26_1==138||LA26_1==140||LA26_1==145||LA26_1==216) && (synpred6_Objc())) {s = 46;}

                        else if ( (LA26_1==ID||LA26_1==116||LA26_1==119||LA26_1==121||LA26_1==136) ) {s = 5;}

                         
                        input.seek(index26_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA26_2 = input.LA(1);

                         
                        int index26_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_2==121) ) {s = 52;}

                        else if ( (LA26_2==182) && (synpred6_Objc())) {s = 53;}

                        else if ( (LA26_2==196) && (synpred6_Objc())) {s = 54;}

                        else if ( (LA26_2==118) && (synpred6_Objc())) {s = 55;}

                        else if ( (LA26_2==181) && (synpred6_Objc())) {s = 56;}

                        else if ( (LA26_2==212) && (synpred6_Objc())) {s = 57;}

                        else if ( (LA26_2==185) && (synpred6_Objc())) {s = 58;}

                        else if ( (LA26_2==211) && (synpred6_Objc())) {s = 59;}

                        else if ( (LA26_2==199) && (synpred6_Objc())) {s = 60;}

                        else if ( (LA26_2==202) && (synpred6_Objc())) {s = 61;}

                        else if ( (LA26_2==171) && (synpred6_Objc())) {s = 62;}

                        else if ( (LA26_2==200) && (synpred6_Objc())) {s = 63;}

                        else if ( (LA26_2==201) && (synpred6_Objc())) {s = 64;}

                        else if ( (LA26_2==204) && (synpred6_Objc())) {s = 65;}

                        else if ( (LA26_2==ID) && (synpred6_Objc())) {s = 66;}

                        else if ( (LA26_2==206) && (synpred6_Objc())) {s = 67;}

                        else if ( (LA26_2==210) && (synpred6_Objc())) {s = 68;}

                        else if ( (LA26_2==190) && (synpred6_Objc())) {s = 69;}

                        else if ( (LA26_2==116) && (synpred6_Objc())) {s = 70;}

                         
                        input.seek(index26_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA26_42 = input.LA(1);

                         
                        int index26_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_42==ID) ) {s = 71;}

                        else if ( (LA26_42==116) && (synpred6_Objc())) {s = 72;}

                        else if ( (LA26_42==121) && (synpred6_Objc())) {s = 73;}

                         
                        input.seek(index26_42);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA26_45 = input.LA(1);

                         
                        int index26_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_45==149) && (synpred6_Objc())) {s = 74;}

                        else if ( (LA26_45==127) && (synpred6_Objc())) {s = 75;}

                        else if ( (LA26_45==118) && (synpred6_Objc())) {s = 76;}

                        else if ( (LA26_45==179) && (synpred6_Objc())) {s = 77;}

                        else if ( (LA26_45==180) && (synpred6_Objc())) {s = 78;}

                        else if ( (LA26_45==165) && (synpred6_Objc())) {s = 79;}

                        else if ( (LA26_45==162) && (synpred6_Objc())) {s = 80;}

                        else if ( (LA26_45==116) && (synpred6_Objc())) {s = 81;}

                        else if ( (LA26_45==ID) ) {s = 82;}

                        else if ( (LA26_45==121) && (synpred6_Objc())) {s = 83;}

                        else if ( (LA26_45==STR_LIT) && (synpred6_Objc())) {s = 84;}

                        else if ( (LA26_45==148) && (synpred6_Objc())) {s = 85;}

                        else if ( (LA26_45==C_LIT) && (synpred6_Objc())) {s = 86;}

                        else if ( (LA26_45==NR_LIT) ) {s = 87;}

                        else if ( (LA26_45==173||LA26_45==175||LA26_45==193||LA26_45==208) && (synpred6_Objc())) {s = 88;}

                        else if ( (LA26_45==176) && (synpred6_Objc())) {s = 89;}

                        else if ( (LA26_45==170) && (synpred6_Objc())) {s = 90;}

                        else if ( (LA26_45==111) && (synpred6_Objc())) {s = 91;}

                        else if ( (LA26_45==219) && (synpred6_Objc())) {s = 92;}

                        else if ( (LA26_45==124||LA26_45==128) && (synpred6_Objc())) {s = 93;}

                        else if ( (LA26_45==178) ) {s = 5;}

                         
                        input.seek(index26_45);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA26_71 = input.LA(1);

                         
                        int index26_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_71==118) && (synpred4_Objc())) {s = 108;}

                        else if ( ((LA26_71 >= 130 && LA26_71 <= 131)) ) {s = 109;}

                        else if ( (LA26_71==124||LA26_71==128) && (synpred5_Objc())) {s = 110;}

                        else if ( (LA26_71==176) && (synpred6_Objc())) {s = 111;}

                        else if ( (LA26_71==117||LA26_71==122||LA26_71==125||LA26_71==129||LA26_71==133||LA26_71==138||LA26_71==140||LA26_71==145||LA26_71==216) && (synpred6_Objc())) {s = 112;}

                         
                        input.seek(index26_71);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA26_82 = input.LA(1);

                         
                        int index26_82 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA26_82==176) && (synpred6_Objc())) {s = 113;}

                        else if ( ((LA26_82 >= 130 && LA26_82 <= 131)) && (synpred6_Objc())) {s = 114;}

                        else if ( (LA26_82==118) && (synpred6_Objc())) {s = 115;}

                        else if ( (LA26_82==125||LA26_82==129) && (synpred6_Objc())) {s = 116;}

                        else if ( (LA26_82==124||LA26_82==128) && (synpred6_Objc())) {s = 117;}

                        else if ( (LA26_82==112||(LA26_82 >= 114 && LA26_82 <= 116)||LA26_82==121||LA26_82==123||LA26_82==127||LA26_82==132||(LA26_82 >= 136 && LA26_82 <= 137)||(LA26_82 >= 139 && LA26_82 <= 144)||LA26_82==179||LA26_82==215||LA26_82==217) && (synpred6_Objc())) {s = 118;}

                        else if ( (LA26_82==147) && (synpred6_Objc())) {s = 119;}

                        else if ( (LA26_82==146) && (synpred6_Objc())) {s = 120;}

                        else if ( (LA26_82==178) ) {s = 121;}

                         
                        input.seek(index26_82);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA26_87 = input.LA(1);

                         
                        int index26_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA26_87 >= 130 && LA26_87 <= 131)) && (synpred6_Objc())) {s = 122;}

                        else if ( (LA26_87==118) && (synpred6_Objc())) {s = 123;}

                        else if ( (LA26_87==125||LA26_87==129) && (synpred6_Objc())) {s = 124;}

                        else if ( (LA26_87==124||LA26_87==128) && (synpred6_Objc())) {s = 125;}

                        else if ( (LA26_87==112||(LA26_87 >= 114 && LA26_87 <= 116)||LA26_87==121||LA26_87==123||LA26_87==127||LA26_87==132||(LA26_87 >= 136 && LA26_87 <= 137)||(LA26_87 >= 139 && LA26_87 <= 144)||LA26_87==179||LA26_87==215||LA26_87==217) && (synpred6_Objc())) {s = 126;}

                        else if ( (LA26_87==147) && (synpred6_Objc())) {s = 127;}

                        else if ( (LA26_87==146) && (synpred6_Objc())) {s = 128;}

                        else if ( (LA26_87==178) ) {s = 129;}

                         
                        input.seek(index26_87);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA26_109 = input.LA(1);

                         
                        int index26_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 108;}

                        else if ( (synpred5_Objc()) ) {s = 110;}

                        else if ( (synpred6_Objc()) ) {s = 128;}

                         
                        input.seek(index26_109);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA26_121 = input.LA(1);

                         
                        int index26_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_121);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA26_129 = input.LA(1);

                         
                        int index26_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_129);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA26_133 = input.LA(1);

                         
                        int index26_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 128;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index26_133);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 26, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA30_eotS =
        "\151\uffff";
    static final String DFA30_eofS =
        "\151\uffff";
    static final String DFA30_minS =
        "\2\56\1\uffff\1\56\23\uffff\1\23\7\uffff\1\56\32\uffff\1\160\4\uffff"+
        "\1\160\23\uffff\1\170\10\uffff\1\0\7\uffff\1\0\3\uffff\1\0";
    static final String DFA30_maxS =
        "\1\u00d4\1\u00d8\1\uffff\1\u00d4\23\uffff\1\u00db\7\uffff\1\u00d4"+
        "\32\uffff\1\u00d9\4\uffff\1\u00d9\23\uffff\1\u00b0\10\uffff\1\0"+
        "\7\uffff\1\0\3\uffff\1\0";
    static final String DFA30_acceptS =
        "\2\uffff\1\3\1\uffff\2\4\1\5\16\uffff\1\1\1\2\1\uffff\2\4\6\uffff"+
        "\32\4\1\uffff\4\4\1\uffff\6\4\16\uffff\10\4\1\uffff\7\4\5\uffff";
    static final String DFA30_specialS =
        "\1\0\1\1\1\uffff\1\2\23\uffff\1\3\42\uffff\1\4\4\uffff\1\5\34\uffff"+
        "\1\6\7\uffff\1\7\3\uffff\1\10}>";
    static final String[] DFA30_transitionS = {
            "\1\1\105\uffff\1\4\1\uffff\1\3\2\uffff\1\5\15\uffff\1\2\43\uffff"+
            "\1\6\11\uffff\2\6\2\uffff\1\6\4\uffff\1\6\5\uffff\1\6\2\uffff"+
            "\4\6\1\uffff\1\6\1\uffff\1\6\3\uffff\3\6",
            "\1\6\105\uffff\1\6\1\31\1\uffff\1\6\1\uffff\1\6\1\31\2\uffff"+
            "\1\31\3\uffff\1\31\2\30\1\uffff\1\31\1\uffff\1\25\1\6\1\uffff"+
            "\1\31\1\uffff\1\31\4\uffff\1\31\36\uffff\1\27\25\uffff\1\26"+
            "\21\uffff\1\31",
            "",
            "\1\55\105\uffff\1\61\1\uffff\1\42\2\uffff\1\37\61\uffff\1\51"+
            "\11\uffff\1\43\1\40\2\uffff\1\45\4\uffff\1\60\5\uffff\1\41\2"+
            "\uffff\1\47\1\52\1\53\1\50\1\uffff\1\54\1\uffff\1\56\3\uffff"+
            "\1\57\1\46\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\76\32\uffff\1\72\22\uffff\1\77\26\uffff\1\74\26\uffff\1"+
            "\103\4\uffff\1\71\1\uffff\1\64\2\uffff\1\73\2\uffff\1\105\2"+
            "\uffff\1\63\1\105\23\uffff\1\75\1\62\14\uffff\1\70\2\uffff\1"+
            "\67\4\uffff\1\102\2\uffff\1\100\1\uffff\1\100\1\101\1\uffff"+
            "\1\6\1\65\1\66\14\uffff\1\100\16\uffff\1\100\12\uffff\1\104",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\123\174\uffff\1\6\11\uffff\2\6\2\uffff\1\6\12\uffff\1\6"+
            "\2\uffff\4\6\1\uffff\1\6\6\uffff\2\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\131\1\uffff\3\131\1\uffff\1\126\2\uffff\1\131\1\uffff\1"+
            "\131\1\130\1\127\1\uffff\1\131\1\130\1\127\2\125\1\131\3\uffff"+
            "\2\131\1\uffff\6\131\1\uffff\1\133\1\132\34\uffff\1\124\1\uffff"+
            "\1\134\1\131\43\uffff\1\131\1\uffff\1\131",
            "",
            "",
            "",
            "",
            "\1\141\1\uffff\3\141\1\uffff\1\136\2\uffff\1\141\1\uffff\1"+
            "\141\1\140\1\137\1\uffff\1\141\1\140\1\137\2\135\1\141\3\uffff"+
            "\2\141\1\uffff\6\141\1\uffff\1\143\1\142\36\uffff\1\144\1\141"+
            "\43\uffff\1\141\1\uffff\1\141",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\150\1\6\16\uffff\1\6\47\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "331:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( ';' )=> for_classic_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA30_0 = input.LA(1);

                         
                        int index30_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_0==ID) ) {s = 1;}

                        else if ( (LA30_0==135) && (synpred9_Objc())) {s = 2;}

                        else if ( (LA30_0==118) ) {s = 3;}

                        else if ( (LA30_0==116) && (synpred10_Objc())) {s = 4;}

                        else if ( (LA30_0==121) && (synpred10_Objc())) {s = 5;}

                        else if ( (LA30_0==171||(LA30_0 >= 181 && LA30_0 <= 182)||LA30_0==185||LA30_0==190||LA30_0==196||(LA30_0 >= 199 && LA30_0 <= 202)||LA30_0==204||LA30_0==206||(LA30_0 >= 210 && LA30_0 <= 212)) ) {s = 6;}

                         
                        input.seek(index30_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA30_1 = input.LA(1);

                         
                        int index30_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_1==135) && (synpred7_Objc())) {s = 21;}

                        else if ( (LA30_1==198) && (synpred8_Objc())) {s = 22;}

                        else if ( (LA30_1==176) ) {s = 23;}

                        else if ( ((LA30_1 >= 130 && LA30_1 <= 131)) && (synpred10_Objc())) {s = 24;}

                        else if ( (LA30_1==117||LA30_1==122||LA30_1==125||LA30_1==129||LA30_1==133||LA30_1==138||LA30_1==140||LA30_1==145||LA30_1==216) && (synpred10_Objc())) {s = 25;}

                        else if ( (LA30_1==ID||LA30_1==116||LA30_1==119||LA30_1==121||LA30_1==136) ) {s = 6;}

                         
                        input.seek(index30_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA30_3 = input.LA(1);

                         
                        int index30_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_3==121) ) {s = 31;}

                        else if ( (LA30_3==182) && (synpred10_Objc())) {s = 32;}

                        else if ( (LA30_3==196) && (synpred10_Objc())) {s = 33;}

                        else if ( (LA30_3==118) && (synpred10_Objc())) {s = 34;}

                        else if ( (LA30_3==181) && (synpred10_Objc())) {s = 35;}

                        else if ( (LA30_3==212) && (synpred10_Objc())) {s = 36;}

                        else if ( (LA30_3==185) && (synpred10_Objc())) {s = 37;}

                        else if ( (LA30_3==211) && (synpred10_Objc())) {s = 38;}

                        else if ( (LA30_3==199) && (synpred10_Objc())) {s = 39;}

                        else if ( (LA30_3==202) && (synpred10_Objc())) {s = 40;}

                        else if ( (LA30_3==171) && (synpred10_Objc())) {s = 41;}

                        else if ( (LA30_3==200) && (synpred10_Objc())) {s = 42;}

                        else if ( (LA30_3==201) && (synpred10_Objc())) {s = 43;}

                        else if ( (LA30_3==204) && (synpred10_Objc())) {s = 44;}

                        else if ( (LA30_3==ID) && (synpred10_Objc())) {s = 45;}

                        else if ( (LA30_3==206) && (synpred10_Objc())) {s = 46;}

                        else if ( (LA30_3==210) && (synpred10_Objc())) {s = 47;}

                        else if ( (LA30_3==190) && (synpred10_Objc())) {s = 48;}

                        else if ( (LA30_3==116) && (synpred10_Objc())) {s = 49;}

                         
                        input.seek(index30_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA30_23 = input.LA(1);

                         
                        int index30_23 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_23==149) && (synpred10_Objc())) {s = 50;}

                        else if ( (LA30_23==127) && (synpred10_Objc())) {s = 51;}

                        else if ( (LA30_23==118) && (synpred10_Objc())) {s = 52;}

                        else if ( (LA30_23==179) && (synpred10_Objc())) {s = 53;}

                        else if ( (LA30_23==180) && (synpred10_Objc())) {s = 54;}

                        else if ( (LA30_23==165) && (synpred10_Objc())) {s = 55;}

                        else if ( (LA30_23==162) && (synpred10_Objc())) {s = 56;}

                        else if ( (LA30_23==116) && (synpred10_Objc())) {s = 57;}

                        else if ( (LA30_23==ID) ) {s = 58;}

                        else if ( (LA30_23==121) && (synpred10_Objc())) {s = 59;}

                        else if ( (LA30_23==STR_LIT) && (synpred10_Objc())) {s = 60;}

                        else if ( (LA30_23==148) && (synpred10_Objc())) {s = 61;}

                        else if ( (LA30_23==C_LIT) && (synpred10_Objc())) {s = 62;}

                        else if ( (LA30_23==NR_LIT) ) {s = 63;}

                        else if ( (LA30_23==173||LA30_23==175||LA30_23==193||LA30_23==208) && (synpred10_Objc())) {s = 64;}

                        else if ( (LA30_23==176) && (synpred10_Objc())) {s = 65;}

                        else if ( (LA30_23==170) && (synpred10_Objc())) {s = 66;}

                        else if ( (LA30_23==111) && (synpred10_Objc())) {s = 67;}

                        else if ( (LA30_23==219) && (synpred10_Objc())) {s = 68;}

                        else if ( (LA30_23==124||LA30_23==128) && (synpred10_Objc())) {s = 69;}

                        else if ( (LA30_23==178) ) {s = 6;}

                         
                        input.seek(index30_23);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA30_58 = input.LA(1);

                         
                        int index30_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA30_58==176) && (synpred10_Objc())) {s = 84;}

                        else if ( ((LA30_58 >= 130 && LA30_58 <= 131)) && (synpred10_Objc())) {s = 85;}

                        else if ( (LA30_58==118) && (synpred10_Objc())) {s = 86;}

                        else if ( (LA30_58==125||LA30_58==129) && (synpred10_Objc())) {s = 87;}

                        else if ( (LA30_58==124||LA30_58==128) && (synpred10_Objc())) {s = 88;}

                        else if ( (LA30_58==112||(LA30_58 >= 114 && LA30_58 <= 116)||LA30_58==121||LA30_58==123||LA30_58==127||LA30_58==132||(LA30_58 >= 136 && LA30_58 <= 137)||(LA30_58 >= 139 && LA30_58 <= 144)||LA30_58==179||LA30_58==215||LA30_58==217) && (synpred10_Objc())) {s = 89;}

                        else if ( (LA30_58==147) && (synpred10_Objc())) {s = 90;}

                        else if ( (LA30_58==146) && (synpred10_Objc())) {s = 91;}

                        else if ( (LA30_58==178) ) {s = 92;}

                         
                        input.seek(index30_58);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA30_63 = input.LA(1);

                         
                        int index30_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA30_63 >= 130 && LA30_63 <= 131)) && (synpred10_Objc())) {s = 93;}

                        else if ( (LA30_63==118) && (synpred10_Objc())) {s = 94;}

                        else if ( (LA30_63==125||LA30_63==129) && (synpred10_Objc())) {s = 95;}

                        else if ( (LA30_63==124||LA30_63==128) && (synpred10_Objc())) {s = 96;}

                        else if ( (LA30_63==112||(LA30_63 >= 114 && LA30_63 <= 116)||LA30_63==121||LA30_63==123||LA30_63==127||LA30_63==132||(LA30_63 >= 136 && LA30_63 <= 137)||(LA30_63 >= 139 && LA30_63 <= 144)||LA30_63==179||LA30_63==215||LA30_63==217) && (synpred10_Objc())) {s = 97;}

                        else if ( (LA30_63==147) && (synpred10_Objc())) {s = 98;}

                        else if ( (LA30_63==146) && (synpred10_Objc())) {s = 99;}

                        else if ( (LA30_63==178) ) {s = 100;}

                         
                        input.seek(index30_63);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA30_92 = input.LA(1);

                         
                        int index30_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 99;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index30_92);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA30_100 = input.LA(1);

                         
                        int index30_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 99;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index30_100);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA30_104 = input.LA(1);

                         
                        int index30_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred10_Objc()) ) {s = 99;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index30_104);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 30, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA64_eotS =
        "\103\uffff";
    static final String DFA64_eofS =
        "\1\1\102\uffff";
    static final String DFA64_minS =
        "\1\26\102\uffff";
    static final String DFA64_maxS =
        "\1\u00da\102\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\2\3\uffff\2\1\63\uffff\1\1\4\uffff\3\1\1\uffff";
    static final String DFA64_specialS =
        "\103\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\1\27\uffff\1\1\20\uffff\1\1\35\uffff\1\1\22\uffff\1\77\1"+
            "\uffff\2\77\1\5\1\uffff\1\1\1\uffff\1\1\1\6\1\uffff\1\72\2\uffff"+
            "\1\1\1\72\4\uffff\1\77\1\uffff\2\1\2\77\1\uffff\6\77\1\uffff"+
            "\1\101\1\100\2\uffff\10\1\4\uffff\1\1\3\uffff\7\1\3\uffff\3"+
            "\1\1\77\1\uffff\14\1\1\uffff\4\1\1\uffff\11\1\1\uffff\6\1\1"+
            "\77\1\uffff\1\77\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()* loopback of 503:27: ( op2_unary_expression_or_questionmark_if_stmt )*";
        }
    }
    static final String DFA67_eotS =
        "\104\uffff";
    static final String DFA67_eofS =
        "\1\2\103\uffff";
    static final String DFA67_minS =
        "\1\26\103\uffff";
    static final String DFA67_maxS =
        "\1\u00da\103\uffff";
    static final String DFA67_acceptS =
        "\1\uffff\1\1\1\2\101\uffff";
    static final String DFA67_specialS =
        "\104\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\27\uffff\1\2\20\uffff\1\2\35\uffff\1\2\22\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\1\1\uffff\2\2\1\1"+
            "\3\uffff\1\2\1\uffff\4\2\1\uffff\6\2\1\uffff\2\2\2\uffff\10"+
            "\2\4\uffff\1\2\3\uffff\7\2\3\uffff\4\2\1\uffff\14\2\1\uffff"+
            "\4\2\1\uffff\11\2\1\uffff\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "517:21: ( increment_decrement )?";
        }
    }
    static final String DFA71_eotS =
        "\u01ae\uffff";
    static final String DFA71_eofS =
        "\132\uffff\1\2\u0153\uffff";
    static final String DFA71_minS =
        "\2\23\20\uffff\1\23\12\uffff\1\160\25\uffff\2\56\1\164\1\23\7\56"+
        "\3\164\1\160\3\56\21\uffff\5\23\23\uffff\16\0\42\uffff\126\0\7\uffff"+
        "\22\0\2\uffff\1\0\23\uffff\3\0\21\uffff\1\0\11\uffff\1\0\36\uffff"+
        "\2\0\2\uffff\4\0\5\uffff\3\0\76\uffff";
    static final String DFA71_maxS =
        "\1\u00d0\1\u00db\20\uffff\1\u00db\12\uffff\1\u00d9\25\uffff\1\u00d4"+
        "\1\u00cc\1\u00b0\1\u00db\1\u00d4\2\u00d3\4\u00cc\1\u00b0\1\u00c9"+
        "\1\u00cc\1\u00d9\3\u00cc\21\uffff\4\u00db\1\u00da\23\uffff\16\0"+
        "\42\uffff\126\0\7\uffff\22\0\2\uffff\1\0\23\uffff\3\0\21\uffff\1"+
        "\0\11\uffff\1\0\36\uffff\2\0\2\uffff\4\0\5\uffff\3\0\76\uffff";
    static final String DFA71_acceptS =
        "\2\uffff\1\3\15\uffff\2\1\1\uffff\12\1\1\uffff\3\1\101\uffff\14"+
        "\1\u009f\uffff\2\1\23\uffff\1\1\3\uffff\1\1\21\uffff\1\1\23\uffff"+
        "\1\1\25\uffff\2\1\4\uffff\5\1\100\uffff\1\2";
    static final String DFA71_specialS =
        "\1\uffff\1\0\61\uffff\1\1\42\uffff\1\2\1\3\1\4\1\5\1\6\23\uffff"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\24\42\uffff\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
        "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
        "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
        "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
        "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
        "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
        "\1\146\1\147\1\150\1\151\1\152\7\uffff\1\153\1\154\1\155\1\156\1"+
        "\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171"+
        "\1\172\1\173\1\174\2\uffff\1\175\23\uffff\1\176\1\177\1\u0080\21"+
        "\uffff\1\u0081\11\uffff\1\u0082\36\uffff\1\u0083\1\u0084\2\uffff"+
        "\1\u0085\1\u0086\1\u0087\1\u0088\5\uffff\1\u0089\1\u008a\1\u008b"+
        "\76\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\2\32\uffff\1\2\22\uffff\1\2\26\uffff\1\2\33\uffff\1\2\1\uffff"+
            "\1\1\2\uffff\1\2\32\uffff\1\2\15\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\2\2\2\uffff\2\2\14\uffff\1\2\16\uffff"+
            "\1\2",
            "\1\2\32\uffff\1\35\22\uffff\1\2\26\uffff\1\2\26\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\22\2\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\23\uffff\2\2\14\uffff\1\2\2\uffff\1\2\4\uffff\1\2\1\31\1\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\1\23\1\20\2\uffff\1\25\4\uffff"+
            "\1\40\2\uffff\1\2\2\uffff\1\21\2\uffff\1\27\1\32\1\33\1\30\1"+
            "\uffff\1\34\1\uffff\1\36\1\uffff\1\2\1\uffff\1\37\1\26\1\24"+
            "\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\32\uffff\1\101\22\uffff\1\2\26\uffff\1\2\26\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\66\2\uffff\1\63\2\uffff\1\2\2\uffff\2"+
            "\2\23\uffff\2\2\14\uffff\1\2\2\uffff\1\2\4\uffff\1\2\1\75\1"+
            "\uffff\1\2\1\uffff\2\2\2\uffff\2\2\1\67\1\64\2\uffff\1\71\4"+
            "\uffff\1\104\2\uffff\1\2\2\uffff\1\65\2\uffff\1\73\1\76\1\77"+
            "\1\74\1\uffff\1\100\1\uffff\1\102\1\uffff\1\2\1\uffff\1\103"+
            "\1\72\1\70\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\2\2\1\131\1\uffff\1\2\1\uffff\1\132\1\127\1\uffff"+
            "\3\2\1\uffff\6\2\3\uffff\1\126\1\2\1\uffff\6\2\1\uffff\2\2\34"+
            "\uffff\1\130\2\uffff\1\2\43\uffff\1\2\1\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\156\174\uffff\1\151\11\uffff\1\142\1\147\2\uffff\1\144\12"+
            "\uffff\1\153\2\uffff\1\146\1\152\1\154\1\150\1\uffff\1\155\6"+
            "\uffff\1\145\1\143",
            "\1\165\174\uffff\1\161\30\uffff\1\157\3\uffff\1\162\1\163\1"+
            "\160\1\uffff\1\164",
            "\1\171\3\uffff\1\172\1\167\16\uffff\1\166\47\uffff\1\170",
            "\1\2\32\uffff\1\2\22\uffff\1\2\26\uffff\1\2\26\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\173\2\uffff\1\2\2\uffff\2\2"+
            "\23\uffff\2\2\14\uffff\1\2\2\uffff\1\2\4\uffff\2\2\1\uffff\1"+
            "\2\1\uffff\2\2\2\uffff\4\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1"+
            "\2\2\uffff\1\2\2\uffff\4\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1"+
            "\2\1\uffff\3\2\6\uffff\1\2",
            "\1\u00a9\174\uffff\1\u00a4\12\uffff\1\u00a2\2\uffff\1\u009f"+
            "\12\uffff\1\u00a6\2\uffff\1\u00a1\1\u00a5\1\u00a7\1\u00a3\1"+
            "\uffff\1\u00a8\6\uffff\1\u00a0\1\u009e",
            "\1\u00b4\174\uffff\1\u00af\12\uffff\1\u00ad\2\uffff\1\u00aa"+
            "\12\uffff\1\u00b1\2\uffff\1\u00ac\1\u00b0\1\u00b2\1\u00ae\1"+
            "\uffff\1\u00b3\6\uffff\1\u00ab",
            "\1\u00be\174\uffff\1\u00b9\12\uffff\1\u00b7\15\uffff\1\u00bb"+
            "\2\uffff\1\u00b6\1\u00ba\1\u00bc\1\u00b8\1\uffff\1\u00bd\6\uffff"+
            "\1\u00b5",
            "\1\u00c7\174\uffff\1\u00c2\12\uffff\1\u00c0\15\uffff\1\u00c4"+
            "\2\uffff\1\u00bf\1\u00c3\1\u00c5\1\u00c1\1\uffff\1\u00c6",
            "\1\u00cf\174\uffff\1\u00ca\12\uffff\1\u00c8\15\uffff\1\u00cc"+
            "\3\uffff\1\u00cb\1\u00cd\1\u00c9\1\uffff\1\u00ce",
            "\1\u00d5\174\uffff\1\u00d0\30\uffff\1\u00d2\3\uffff\1\u00d1"+
            "\1\u00d3\2\uffff\1\u00d4",
            "\1\u00da\u0095\uffff\1\u00d7\3\uffff\1\u00d6\1\u00d8\2\uffff"+
            "\1\u00d9",
            "\1\u00de\3\uffff\1\u00df\1\u00dc\16\uffff\1\u00db\47\uffff"+
            "\1\u00dd",
            "\1\u00e5\3\uffff\1\u00e6\1\u00e3\16\uffff\1\u00e2\47\uffff"+
            "\1\u00e4\10\uffff\1\u00e1\16\uffff\1\u00e0\1\u00e7",
            "\1\u00ec\3\uffff\1\u00ed\1\u00ea\16\uffff\1\u00e9\47\uffff"+
            "\1\u00eb\27\uffff\1\u00e8\3\uffff\1\u00ee",
            "\1\2\1\uffff\2\2\1\u00f2\1\uffff\1\2\1\uffff\1\u00f3\1\u00f0"+
            "\1\uffff\3\2\1\uffff\6\2\3\uffff\1\u00ef\1\2\1\uffff\6\2\1\uffff"+
            "\2\2\34\uffff\1\u00f1\2\uffff\1\2\43\uffff\1\2\1\uffff\1\2",
            "\1\u0100\174\uffff\1\u00fb\30\uffff\1\u00fd\3\uffff\1\u00fc"+
            "\1\u00fe\2\uffff\1\u00ff",
            "\1\u0106\174\uffff\1\u0101\30\uffff\1\u0103\3\uffff\1\u0102"+
            "\1\u0104\2\uffff\1\u0105",
            "\1\u010c\174\uffff\1\u0107\30\uffff\1\u0109\3\uffff\1\u0108"+
            "\1\u010a\2\uffff\1\u010b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\32\uffff\1\u010f\22\uffff\1\2\26\uffff\1\2\26\uffff\1"+
            "\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\2"+
            "\2\7\uffff\1\u010e\13\uffff\1\2\15\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\2\2\2\uffff\2\2\14\uffff\1\2\2\uffff"+
            "\1\u010d\13\uffff\1\2\12\uffff\1\2",
            "\1\2\32\uffff\1\2\22\uffff\1\2\26\uffff\1\2\26\uffff\1\2\4"+
            "\uffff\1\u0125\1\uffff\1\2\1\uffff\1\u0126\1\u0124\2\uffff\1"+
            "\2\2\uffff\2\2\23\uffff\1\2\15\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\2\2\uffff\1\2\1\uffff\1\2\1\u0123\2\uffff\2\2\4\uffff\1\u0122"+
            "\7\uffff\1\2\16\uffff\1\2\12\uffff\1\2",
            "\1\2\32\uffff\1\u0137\22\uffff\1\u0141\26\uffff\1\2\26\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\23\uffff\2\2\14\uffff\1\2\2\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\1\u0138\2\2\14\uffff\1\2\16\uffff\1"+
            "\2\12\uffff\1\2",
            "\1\2\32\uffff\1\2\22\uffff\1\2\26\uffff\1\2\26\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\1\u014c\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\23\uffff\1\2\15\uffff\1\2\2\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\14\uffff\1\2\16\uffff\1\2\12\uffff"+
            "\1\2",
            "\1\u016a\2\uffff\1\2\27\uffff\1\u0166\20\uffff\1\2\1\uffff"+
            "\1\u016b\26\uffff\1\u0168\4\uffff\1\2\22\uffff\1\2\1\uffff\2"+
            "\2\1\u0165\1\uffff\1\u016f\1\uffff\1\2\1\u0167\1\uffff\1\2\1"+
            "\u0160\3\2\1\u0160\4\2\1\uffff\4\2\1\uffff\6\2\1\uffff\2\2\1"+
            "\u0169\1\uffff\10\2\4\uffff\1\u0164\2\uffff\1\u0163\4\2\1\u016e"+
            "\2\2\1\u016c\1\uffff\1\u016c\1\u016d\2\2\1\u0161\1\u0162\14"+
            "\2\1\u016c\4\2\1\uffff\11\2\1\u016c\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "523:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_1==182) && (synpred12_Objc())) {s = 16;}

                        else if ( (LA71_1==196) && (synpred12_Objc())) {s = 17;}

                        else if ( (LA71_1==118) ) {s = 18;}

                        else if ( (LA71_1==181) && (synpred12_Objc())) {s = 19;}

                        else if ( (LA71_1==212) && (synpred12_Objc())) {s = 20;}

                        else if ( (LA71_1==185) && (synpred12_Objc())) {s = 21;}

                        else if ( (LA71_1==211) && (synpred12_Objc())) {s = 22;}

                        else if ( (LA71_1==199) && (synpred12_Objc())) {s = 23;}

                        else if ( (LA71_1==202) && (synpred12_Objc())) {s = 24;}

                        else if ( (LA71_1==171) && (synpred12_Objc())) {s = 25;}

                        else if ( (LA71_1==200) && (synpred12_Objc())) {s = 26;}

                        else if ( (LA71_1==201) && (synpred12_Objc())) {s = 27;}

                        else if ( (LA71_1==204) && (synpred12_Objc())) {s = 28;}

                        else if ( (LA71_1==ID) ) {s = 29;}

                        else if ( (LA71_1==206) && (synpred12_Objc())) {s = 30;}

                        else if ( (LA71_1==210) && (synpred12_Objc())) {s = 31;}

                        else if ( (LA71_1==190) && (synpred12_Objc())) {s = 32;}

                        else if ( (LA71_1==C_LIT||LA71_1==NR_LIT||LA71_1==STR_LIT||LA71_1==111||LA71_1==116||LA71_1==121||LA71_1==124||(LA71_1 >= 127 && LA71_1 <= 128)||(LA71_1 >= 148 && LA71_1 <= 149)||LA71_1==162||LA71_1==165||LA71_1==170||LA71_1==173||(LA71_1 >= 175 && LA71_1 <= 176)||(LA71_1 >= 179 && LA71_1 <= 180)||LA71_1==193||LA71_1==208||LA71_1==219) ) {s = 2;}

                         
                        input.seek(index71_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA71_51 = input.LA(1);

                         
                        int index71_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_51==181) && (synpred12_Objc())) {s = 98;}

                        else if ( (LA71_51==212) && (synpred12_Objc())) {s = 99;}

                        else if ( (LA71_51==185) && (synpred12_Objc())) {s = 100;}

                        else if ( (LA71_51==211) && (synpred12_Objc())) {s = 101;}

                        else if ( (LA71_51==199) && (synpred12_Objc())) {s = 102;}

                        else if ( (LA71_51==182) && (synpred12_Objc())) {s = 103;}

                        else if ( (LA71_51==202) && (synpred12_Objc())) {s = 104;}

                        else if ( (LA71_51==171) && (synpred12_Objc())) {s = 105;}

                        else if ( (LA71_51==200) && (synpred12_Objc())) {s = 106;}

                        else if ( (LA71_51==196) && (synpred12_Objc())) {s = 107;}

                        else if ( (LA71_51==201) && (synpred12_Objc())) {s = 108;}

                        else if ( (LA71_51==204) && (synpred12_Objc())) {s = 109;}

                        else if ( (LA71_51==ID) ) {s = 110;}

                         
                        input.seek(index71_51);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA71_86 = input.LA(1);

                         
                        int index71_86 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_86==196) && (synpred12_Objc())) {s = 269;}

                        else if ( (LA71_86==136) && (synpred12_Objc())) {s = 270;}

                        else if ( (LA71_86==ID) ) {s = 271;}

                        else if ( (LA71_86==C_LIT||LA71_86==NR_LIT||LA71_86==STR_LIT||LA71_86==111||LA71_86==116||LA71_86==118||LA71_86==121||LA71_86==124||(LA71_86 >= 127 && LA71_86 <= 128)||LA71_86==148||LA71_86==162||LA71_86==165||LA71_86==170||LA71_86==173||(LA71_86 >= 175 && LA71_86 <= 176)||(LA71_86 >= 179 && LA71_86 <= 180)||LA71_86==193||LA71_86==208||LA71_86==219) ) {s = 2;}

                         
                        input.seek(index71_86);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA71_87 = input.LA(1);

                         
                        int index71_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_87==185) && (synpred12_Objc())) {s = 290;}

                        else if ( (LA71_87==176) ) {s = 291;}

                        else if ( (LA71_87==121) ) {s = 292;}

                        else if ( (LA71_87==116) ) {s = 293;}

                        else if ( (LA71_87==120) && (synpred12_Objc())) {s = 294;}

                        else if ( (LA71_87==C_LIT||LA71_87==ID||LA71_87==NR_LIT||LA71_87==STR_LIT||LA71_87==111||LA71_87==118||LA71_87==124||(LA71_87 >= 127 && LA71_87 <= 128)||LA71_87==148||LA71_87==162||LA71_87==165||LA71_87==170||LA71_87==173||LA71_87==175||(LA71_87 >= 179 && LA71_87 <= 180)||LA71_87==193||LA71_87==208||LA71_87==219) ) {s = 2;}

                         
                        input.seek(index71_87);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA71_88 = input.LA(1);

                         
                        int index71_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_88==ID) ) {s = 311;}

                        else if ( (LA71_88==178) && (synpred12_Objc())) {s = 312;}

                        else if ( (LA71_88==C_LIT||LA71_88==STR_LIT||LA71_88==111||LA71_88==116||LA71_88==118||LA71_88==121||LA71_88==124||(LA71_88 >= 127 && LA71_88 <= 128)||(LA71_88 >= 148 && LA71_88 <= 149)||LA71_88==162||LA71_88==165||LA71_88==170||LA71_88==173||(LA71_88 >= 175 && LA71_88 <= 176)||(LA71_88 >= 179 && LA71_88 <= 180)||LA71_88==193||LA71_88==208||LA71_88==219) ) {s = 2;}

                        else if ( (LA71_88==NR_LIT) ) {s = 321;}

                         
                        input.seek(index71_88);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA71_89 = input.LA(1);

                         
                        int index71_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_89==120) && (synpred12_Objc())) {s = 332;}

                        else if ( (LA71_89==C_LIT||LA71_89==ID||LA71_89==NR_LIT||LA71_89==STR_LIT||LA71_89==111||LA71_89==116||LA71_89==118||LA71_89==121||LA71_89==124||(LA71_89 >= 127 && LA71_89 <= 128)||LA71_89==148||LA71_89==162||LA71_89==165||LA71_89==170||LA71_89==173||(LA71_89 >= 175 && LA71_89 <= 176)||(LA71_89 >= 179 && LA71_89 <= 180)||LA71_89==193||LA71_89==208||LA71_89==219) ) {s = 2;}

                         
                        input.seek(index71_89);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA71_90 = input.LA(1);

                         
                        int index71_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA71_90==124||LA71_90==128) ) {s = 352;}

                        else if ( (LA71_90==179) ) {s = 353;}

                        else if ( (LA71_90==180) && (synpred12_Objc())) {s = 354;}

                        else if ( (LA71_90==165) && (synpred12_Objc())) {s = 355;}

                        else if ( (LA71_90==162) ) {s = 356;}

                        else if ( (LA71_90==116) ) {s = 357;}

                        else if ( (LA71_90==ID) ) {s = 358;}

                        else if ( (LA71_90==121) ) {s = 359;}

                        else if ( (LA71_90==STR_LIT) && (synpred12_Objc())) {s = 360;}

                        else if ( (LA71_90==148) && (synpred12_Objc())) {s = 361;}

                        else if ( (LA71_90==C_LIT) && (synpred12_Objc())) {s = 362;}

                        else if ( (LA71_90==NR_LIT) && (synpred12_Objc())) {s = 363;}

                        else if ( (LA71_90==173||LA71_90==175||LA71_90==193||LA71_90==208) && (synpred12_Objc())) {s = 364;}

                        else if ( (LA71_90==176) ) {s = 365;}

                        else if ( (LA71_90==170) ) {s = 366;}

                        else if ( (LA71_90==118) ) {s = 367;}

                        else if ( (LA71_90==EOF||LA71_90==DEFINE_LITERAL||LA71_90==M_C_LIT||LA71_90==S_C_LIT||LA71_90==112||(LA71_90 >= 114 && LA71_90 <= 115)||LA71_90==120||LA71_90==123||(LA71_90 >= 125 && LA71_90 <= 127)||(LA71_90 >= 129 && LA71_90 <= 132)||(LA71_90 >= 134 && LA71_90 <= 137)||(LA71_90 >= 139 && LA71_90 <= 144)||(LA71_90 >= 146 && LA71_90 <= 147)||(LA71_90 >= 150 && LA71_90 <= 157)||(LA71_90 >= 166 && LA71_90 <= 169)||(LA71_90 >= 171 && LA71_90 <= 172)||(LA71_90 >= 177 && LA71_90 <= 178)||(LA71_90 >= 181 && LA71_90 <= 192)||(LA71_90 >= 194 && LA71_90 <= 197)||(LA71_90 >= 199 && LA71_90 <= 207)||(LA71_90 >= 209 && LA71_90 <= 215)||(LA71_90 >= 217 && LA71_90 <= 218)) ) {s = 2;}

                         
                        input.seek(index71_90);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA71_110 = input.LA(1);

                         
                        int index71_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_110);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA71_111 = input.LA(1);

                         
                        int index71_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_111);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA71_112 = input.LA(1);

                         
                        int index71_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_112);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA71_113 = input.LA(1);

                         
                        int index71_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_113);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA71_114 = input.LA(1);

                         
                        int index71_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_114);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA71_115 = input.LA(1);

                         
                        int index71_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_115);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA71_116 = input.LA(1);

                         
                        int index71_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_116);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA71_117 = input.LA(1);

                         
                        int index71_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_117);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA71_118 = input.LA(1);

                         
                        int index71_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_118);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA71_119 = input.LA(1);

                         
                        int index71_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_119);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA71_120 = input.LA(1);

                         
                        int index71_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_120);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA71_121 = input.LA(1);

                         
                        int index71_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_121);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA71_122 = input.LA(1);

                         
                        int index71_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_122);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA71_123 = input.LA(1);

                         
                        int index71_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_123);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA71_158 = input.LA(1);

                         
                        int index71_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_158);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA71_159 = input.LA(1);

                         
                        int index71_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_159);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA71_160 = input.LA(1);

                         
                        int index71_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_160);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA71_161 = input.LA(1);

                         
                        int index71_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_161);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA71_162 = input.LA(1);

                         
                        int index71_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_162);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA71_163 = input.LA(1);

                         
                        int index71_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_163);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA71_164 = input.LA(1);

                         
                        int index71_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_164);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA71_165 = input.LA(1);

                         
                        int index71_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_165);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA71_166 = input.LA(1);

                         
                        int index71_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_166);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA71_167 = input.LA(1);

                         
                        int index71_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_167);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA71_168 = input.LA(1);

                         
                        int index71_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_168);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA71_169 = input.LA(1);

                         
                        int index71_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_169);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA71_170 = input.LA(1);

                         
                        int index71_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_170);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA71_171 = input.LA(1);

                         
                        int index71_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_171);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA71_172 = input.LA(1);

                         
                        int index71_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_172);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA71_173 = input.LA(1);

                         
                        int index71_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_173);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA71_174 = input.LA(1);

                         
                        int index71_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_174);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA71_175 = input.LA(1);

                         
                        int index71_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_175);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA71_176 = input.LA(1);

                         
                        int index71_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_176);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA71_177 = input.LA(1);

                         
                        int index71_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_177);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA71_178 = input.LA(1);

                         
                        int index71_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_178);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA71_179 = input.LA(1);

                         
                        int index71_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_179);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA71_180 = input.LA(1);

                         
                        int index71_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_180);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA71_181 = input.LA(1);

                         
                        int index71_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_181);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA71_182 = input.LA(1);

                         
                        int index71_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_182);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA71_183 = input.LA(1);

                         
                        int index71_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_183);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA71_184 = input.LA(1);

                         
                        int index71_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_184);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA71_185 = input.LA(1);

                         
                        int index71_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_185);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA71_186 = input.LA(1);

                         
                        int index71_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_186);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA71_187 = input.LA(1);

                         
                        int index71_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_187);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA71_188 = input.LA(1);

                         
                        int index71_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_188);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA71_189 = input.LA(1);

                         
                        int index71_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_189);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA71_190 = input.LA(1);

                         
                        int index71_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_190);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA71_191 = input.LA(1);

                         
                        int index71_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_191);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA71_192 = input.LA(1);

                         
                        int index71_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_192);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA71_193 = input.LA(1);

                         
                        int index71_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_193);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA71_194 = input.LA(1);

                         
                        int index71_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_194);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA71_195 = input.LA(1);

                         
                        int index71_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_195);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA71_196 = input.LA(1);

                         
                        int index71_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_196);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA71_197 = input.LA(1);

                         
                        int index71_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_197);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA71_198 = input.LA(1);

                         
                        int index71_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_198);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA71_199 = input.LA(1);

                         
                        int index71_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_199);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA71_200 = input.LA(1);

                         
                        int index71_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_200);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA71_201 = input.LA(1);

                         
                        int index71_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_201);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA71_202 = input.LA(1);

                         
                        int index71_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_202);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA71_203 = input.LA(1);

                         
                        int index71_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_203);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA71_204 = input.LA(1);

                         
                        int index71_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_204);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA71_205 = input.LA(1);

                         
                        int index71_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_205);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA71_206 = input.LA(1);

                         
                        int index71_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_206);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA71_207 = input.LA(1);

                         
                        int index71_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_207);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA71_208 = input.LA(1);

                         
                        int index71_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_208);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA71_209 = input.LA(1);

                         
                        int index71_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_209);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA71_210 = input.LA(1);

                         
                        int index71_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_210);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA71_211 = input.LA(1);

                         
                        int index71_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_211);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA71_212 = input.LA(1);

                         
                        int index71_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_212);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA71_213 = input.LA(1);

                         
                        int index71_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_213);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA71_214 = input.LA(1);

                         
                        int index71_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_214);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA71_215 = input.LA(1);

                         
                        int index71_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_215);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA71_216 = input.LA(1);

                         
                        int index71_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_216);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA71_217 = input.LA(1);

                         
                        int index71_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_217);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA71_218 = input.LA(1);

                         
                        int index71_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_218);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA71_219 = input.LA(1);

                         
                        int index71_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_219);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA71_220 = input.LA(1);

                         
                        int index71_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_220);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA71_221 = input.LA(1);

                         
                        int index71_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_221);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA71_222 = input.LA(1);

                         
                        int index71_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_222);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA71_223 = input.LA(1);

                         
                        int index71_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_223);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA71_224 = input.LA(1);

                         
                        int index71_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_224);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA71_225 = input.LA(1);

                         
                        int index71_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_225);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA71_226 = input.LA(1);

                         
                        int index71_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_226);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA71_227 = input.LA(1);

                         
                        int index71_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_227);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA71_228 = input.LA(1);

                         
                        int index71_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_228);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA71_229 = input.LA(1);

                         
                        int index71_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_229);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA71_230 = input.LA(1);

                         
                        int index71_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_230);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA71_231 = input.LA(1);

                         
                        int index71_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_231);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA71_232 = input.LA(1);

                         
                        int index71_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_232);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA71_233 = input.LA(1);

                         
                        int index71_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_233);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA71_234 = input.LA(1);

                         
                        int index71_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_234);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA71_235 = input.LA(1);

                         
                        int index71_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_235);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA71_236 = input.LA(1);

                         
                        int index71_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_236);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA71_237 = input.LA(1);

                         
                        int index71_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_237);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA71_238 = input.LA(1);

                         
                        int index71_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_238);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA71_239 = input.LA(1);

                         
                        int index71_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_239);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA71_240 = input.LA(1);

                         
                        int index71_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_240);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA71_241 = input.LA(1);

                         
                        int index71_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_241);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA71_242 = input.LA(1);

                         
                        int index71_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_242);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA71_243 = input.LA(1);

                         
                        int index71_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_243);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA71_251 = input.LA(1);

                         
                        int index71_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_251);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA71_252 = input.LA(1);

                         
                        int index71_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_252);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA71_253 = input.LA(1);

                         
                        int index71_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_253);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA71_254 = input.LA(1);

                         
                        int index71_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_254);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA71_255 = input.LA(1);

                         
                        int index71_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_255);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA71_256 = input.LA(1);

                         
                        int index71_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_256);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA71_257 = input.LA(1);

                         
                        int index71_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_257);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA71_258 = input.LA(1);

                         
                        int index71_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_258);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA71_259 = input.LA(1);

                         
                        int index71_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_259);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA71_260 = input.LA(1);

                         
                        int index71_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_260);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA71_261 = input.LA(1);

                         
                        int index71_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_261);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA71_262 = input.LA(1);

                         
                        int index71_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_262);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA71_263 = input.LA(1);

                         
                        int index71_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_263);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA71_264 = input.LA(1);

                         
                        int index71_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_264);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA71_265 = input.LA(1);

                         
                        int index71_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_265);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA71_266 = input.LA(1);

                         
                        int index71_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_266);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA71_267 = input.LA(1);

                         
                        int index71_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_267);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA71_268 = input.LA(1);

                         
                        int index71_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 429;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_268);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA71_271 = input.LA(1);

                         
                        int index71_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_271);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA71_291 = input.LA(1);

                         
                        int index71_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_291);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA71_292 = input.LA(1);

                         
                        int index71_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_292);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA71_293 = input.LA(1);

                         
                        int index71_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_293);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA71_311 = input.LA(1);

                         
                        int index71_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_311);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA71_321 = input.LA(1);

                         
                        int index71_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_321);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA71_352 = input.LA(1);

                         
                        int index71_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_352);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA71_353 = input.LA(1);

                         
                        int index71_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_353);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA71_356 = input.LA(1);

                         
                        int index71_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_356);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA71_357 = input.LA(1);

                         
                        int index71_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_357);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA71_358 = input.LA(1);

                         
                        int index71_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_358);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA71_359 = input.LA(1);

                         
                        int index71_359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_359);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA71_365 = input.LA(1);

                         
                        int index71_365 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_365);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA71_366 = input.LA(1);

                         
                        int index71_366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_366);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA71_367 = input.LA(1);

                         
                        int index71_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 364;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_367);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA70_eotS =
        "\105\uffff";
    static final String DFA70_eofS =
        "\1\1\104\uffff";
    static final String DFA70_minS =
        "\1\26\104\uffff";
    static final String DFA70_maxS =
        "\1\u00da\104\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\2\102\uffff\1\1";
    static final String DFA70_specialS =
        "\105\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\1\27\uffff\1\1\20\uffff\1\1\35\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\2\1\1\uffff\3\1\1\uffff"+
            "\2\104\1\1\1\uffff\4\1\1\uffff\6\1\1\uffff\2\1\2\uffff\10\1"+
            "\4\uffff\1\1\3\uffff\7\1\3\uffff\4\1\1\uffff\14\1\1\uffff\4"+
            "\1\1\uffff\11\1\1\uffff\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()+ loopback of 525:138: ( access_wrapper simple_name_or_classical_function_call )+";
        }
    }
    static final String DFA73_eotS =
        "\u00ac\uffff";
    static final String DFA73_eofS =
        "\1\uffff\1\3\u00aa\uffff";
    static final String DFA73_minS =
        "\1\56\1\26\1\23\103\uffff\1\56\4\uffff\1\23\4\uffff\1\56\1\77\46"+
        "\uffff\23\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff";
    static final String DFA73_maxS =
        "\1\56\1\u00da\1\u00db\103\uffff\1\u00d4\4\uffff\1\u00db\4\uffff"+
        "\1\56\1\u00d9\46\uffff\23\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3\0"+
        "\1\uffff";
    static final String DFA73_acceptS =
        "\3\uffff\1\2\103\uffff\4\1\1\uffff\4\1\2\uffff\13\1\56\uffff\21"+
        "\1\2\uffff\4\1\1\uffff\5\1\3\uffff\1\1";
    static final String DFA73_specialS =
        "\2\uffff\1\0\110\uffff\1\1\5\uffff\1\2\46\uffff\1\3\1\4\1\5\1\6"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
        "\1\24\1\25\21\uffff\1\26\1\27\4\uffff\1\30\5\uffff\1\31\1\32\1\33"+
        "\1\uffff}>";
    static final String[] DFA73_transitionS = {
            "\1\1",
            "\1\3\27\uffff\1\3\20\uffff\1\3\35\uffff\1\3\22\uffff\1\3\1"+
            "\uffff\3\3\1\uffff\1\2\1\uffff\2\3\1\uffff\2\3\1\uffff\3\3\1"+
            "\uffff\3\3\1\uffff\4\3\1\uffff\6\3\1\uffff\2\3\2\uffff\10\3"+
            "\4\uffff\1\3\3\uffff\7\3\3\uffff\4\3\1\uffff\14\3\1\uffff\4"+
            "\3\1\uffff\11\3\1\uffff\7\3\1\uffff\2\3",
            "\1\124\32\uffff\1\121\20\uffff\1\110\1\uffff\1\125\26\uffff"+
            "\1\122\4\uffff\1\107\21\uffff\1\131\4\uffff\1\120\1\uffff\1"+
            "\113\1\uffff\1\134\1\106\2\uffff\1\133\2\uffff\1\112\1\133\23"+
            "\uffff\1\123\1\111\14\uffff\1\117\2\uffff\1\116\4\uffff\1\130"+
            "\1\3\1\uffff\1\126\1\uffff\1\126\1\127\2\uffff\1\114\1\115\2"+
            "\3\2\uffff\1\3\4\uffff\1\3\2\uffff\1\126\2\uffff\1\3\2\uffff"+
            "\4\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\126\1\uffff\3\3\6\uffff"+
            "\1\132",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\170\174\uffff\1\3\11\uffff\2\3\2\uffff\1\3\12\uffff\1\3"+
            "\2\uffff\4\3\1\uffff\1\3\6\uffff\2\3",
            "",
            "",
            "",
            "",
            "\1\u0094\32\uffff\1\u0087\22\uffff\1\u0095\26\uffff\1\u0092"+
            "\26\uffff\1\u0099\4\uffff\1\u0091\1\uffff\1\174\2\uffff\1\171"+
            "\2\uffff\1\u009b\2\uffff\1\u008c\1\u009b\23\uffff\1\u0093\1"+
            "\u008b\14\uffff\1\u0090\2\uffff\1\u008f\4\uffff\1\u0098\1\u0083"+
            "\1\uffff\1\u0096\1\uffff\1\u0096\1\u0097\2\uffff\1\u008d\1\u008e"+
            "\1\175\1\172\2\uffff\1\177\4\uffff\1\u008a\2\uffff\1\u0096\2"+
            "\uffff\1\173\2\uffff\1\u0081\1\u0084\1\u0085\1\u0082\1\uffff"+
            "\1\u0086\1\uffff\1\u0088\1\uffff\1\u0096\1\uffff\1\u0089\1\u0080"+
            "\1\176\6\uffff\1\u009a",
            "",
            "",
            "",
            "",
            "\1\u009c",
            "\1\u00a6\35\uffff\1\u00a5\22\uffff\1\u00ab\1\uffff\2\u00ab"+
            "\1\u00aa\1\uffff\1\u009f\1\uffff\1\u00a8\1\u00a9\1\uffff\1\u00ab"+
            "\1\u00a1\1\u00a0\1\u00a7\1\u00ab\1\u00a1\1\u00a0\2\u009e\1\u00ab"+
            "\3\uffff\1\u00a2\1\u00ab\1\uffff\6\u00ab\1\uffff\1\u00a4\1\u00a3"+
            "\34\uffff\1\u009d\2\uffff\1\u00ab\43\uffff\1\u00ab\1\uffff\1"+
            "\u00ab",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "529:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_2 = input.LA(1);

                         
                        int index73_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA73_2==121) ) {s = 70;}

                        else if ( (LA73_2==S_C_LIT) && (synpred14_Objc())) {s = 71;}

                        else if ( (LA73_2==M_C_LIT) && (synpred14_Objc())) {s = 72;}

                        else if ( (LA73_2==149) && (synpred14_Objc())) {s = 73;}

                        else if ( (LA73_2==127) && (synpred14_Objc())) {s = 74;}

                        else if ( (LA73_2==118) ) {s = 75;}

                        else if ( (LA73_2==179) && (synpred14_Objc())) {s = 76;}

                        else if ( (LA73_2==180) && (synpred14_Objc())) {s = 77;}

                        else if ( (LA73_2==165) && (synpred14_Objc())) {s = 78;}

                        else if ( (LA73_2==162) && (synpred14_Objc())) {s = 79;}

                        else if ( (LA73_2==116) ) {s = 80;}

                        else if ( (LA73_2==ID) ) {s = 81;}

                        else if ( (LA73_2==STR_LIT) && (synpred14_Objc())) {s = 82;}

                        else if ( (LA73_2==148) && (synpred14_Objc())) {s = 83;}

                        else if ( (LA73_2==C_LIT) && (synpred14_Objc())) {s = 84;}

                        else if ( (LA73_2==NR_LIT) && (synpred14_Objc())) {s = 85;}

                        else if ( (LA73_2==173||LA73_2==175||LA73_2==193||LA73_2==208) && (synpred14_Objc())) {s = 86;}

                        else if ( (LA73_2==176) && (synpred14_Objc())) {s = 87;}

                        else if ( (LA73_2==170) && (synpred14_Objc())) {s = 88;}

                        else if ( (LA73_2==111) && (synpred14_Objc())) {s = 89;}

                        else if ( (LA73_2==219) && (synpred14_Objc())) {s = 90;}

                        else if ( (LA73_2==124||LA73_2==128) && (synpred14_Objc())) {s = 91;}

                        else if ( (LA73_2==120) && (synpred14_Objc())) {s = 92;}

                        else if ( (LA73_2==171||(LA73_2 >= 181 && LA73_2 <= 182)||LA73_2==185||LA73_2==190||LA73_2==196||(LA73_2 >= 199 && LA73_2 <= 202)||LA73_2==204||LA73_2==206||(LA73_2 >= 210 && LA73_2 <= 212)) ) {s = 3;}

                         
                        input.seek(index73_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_75 = input.LA(1);

                         
                        int index73_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA73_75==121) ) {s = 121;}

                        else if ( (LA73_75==182) ) {s = 122;}

                        else if ( (LA73_75==196) ) {s = 123;}

                        else if ( (LA73_75==118) ) {s = 124;}

                        else if ( (LA73_75==181) ) {s = 125;}

                        else if ( (LA73_75==212) ) {s = 126;}

                        else if ( (LA73_75==185) ) {s = 127;}

                        else if ( (LA73_75==211) ) {s = 128;}

                        else if ( (LA73_75==199) ) {s = 129;}

                        else if ( (LA73_75==202) ) {s = 130;}

                        else if ( (LA73_75==171) ) {s = 131;}

                        else if ( (LA73_75==200) ) {s = 132;}

                        else if ( (LA73_75==201) ) {s = 133;}

                        else if ( (LA73_75==204) ) {s = 134;}

                        else if ( (LA73_75==ID) ) {s = 135;}

                        else if ( (LA73_75==206) ) {s = 136;}

                        else if ( (LA73_75==210) ) {s = 137;}

                        else if ( (LA73_75==190) ) {s = 138;}

                        else if ( (LA73_75==149) && (synpred14_Objc())) {s = 139;}

                        else if ( (LA73_75==127) && (synpred14_Objc())) {s = 140;}

                        else if ( (LA73_75==179) && (synpred14_Objc())) {s = 141;}

                        else if ( (LA73_75==180) && (synpred14_Objc())) {s = 142;}

                        else if ( (LA73_75==165) && (synpred14_Objc())) {s = 143;}

                        else if ( (LA73_75==162) && (synpred14_Objc())) {s = 144;}

                        else if ( (LA73_75==116) && (synpred14_Objc())) {s = 145;}

                        else if ( (LA73_75==STR_LIT) && (synpred14_Objc())) {s = 146;}

                        else if ( (LA73_75==148) && (synpred14_Objc())) {s = 147;}

                        else if ( (LA73_75==C_LIT) && (synpred14_Objc())) {s = 148;}

                        else if ( (LA73_75==NR_LIT) && (synpred14_Objc())) {s = 149;}

                        else if ( (LA73_75==173||LA73_75==175||LA73_75==193||LA73_75==208) && (synpred14_Objc())) {s = 150;}

                        else if ( (LA73_75==176) && (synpred14_Objc())) {s = 151;}

                        else if ( (LA73_75==170) && (synpred14_Objc())) {s = 152;}

                        else if ( (LA73_75==111) && (synpred14_Objc())) {s = 153;}

                        else if ( (LA73_75==219) && (synpred14_Objc())) {s = 154;}

                        else if ( (LA73_75==124||LA73_75==128) && (synpred14_Objc())) {s = 155;}

                         
                        input.seek(index73_75);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA73_81 = input.LA(1);

                         
                        int index73_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA73_81==176) ) {s = 157;}

                        else if ( ((LA73_81 >= 130 && LA73_81 <= 131)) && (synpred14_Objc())) {s = 158;}

                        else if ( (LA73_81==118) && (synpred14_Objc())) {s = 159;}

                        else if ( (LA73_81==125||LA73_81==129) && (synpred14_Objc())) {s = 160;}

                        else if ( (LA73_81==124||LA73_81==128) && (synpred14_Objc())) {s = 161;}

                        else if ( (LA73_81==136) ) {s = 162;}

                        else if ( (LA73_81==147) && (synpred14_Objc())) {s = 163;}

                        else if ( (LA73_81==146) && (synpred14_Objc())) {s = 164;}

                        else if ( (LA73_81==S_C_LIT) && (synpred14_Objc())) {s = 165;}

                        else if ( (LA73_81==M_C_LIT) && (synpred14_Objc())) {s = 166;}

                        else if ( (LA73_81==126) && (synpred14_Objc())) {s = 167;}

                        else if ( (LA73_81==120) ) {s = 168;}

                        else if ( (LA73_81==121) ) {s = 169;}

                        else if ( (LA73_81==116) ) {s = 170;}

                        else if ( (LA73_81==112||(LA73_81 >= 114 && LA73_81 <= 115)||LA73_81==123||LA73_81==127||LA73_81==132||LA73_81==137||(LA73_81 >= 139 && LA73_81 <= 144)||LA73_81==179||LA73_81==215||LA73_81==217) && (synpred14_Objc())) {s = 171;}

                         
                        input.seek(index73_81);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA73_120 = input.LA(1);

                         
                        int index73_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_120);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA73_121 = input.LA(1);

                         
                        int index73_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_121);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA73_122 = input.LA(1);

                         
                        int index73_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_122);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA73_123 = input.LA(1);

                         
                        int index73_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_123);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA73_124 = input.LA(1);

                         
                        int index73_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_124);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA73_125 = input.LA(1);

                         
                        int index73_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_125);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA73_126 = input.LA(1);

                         
                        int index73_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_126);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA73_127 = input.LA(1);

                         
                        int index73_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_127);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA73_128 = input.LA(1);

                         
                        int index73_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_128);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA73_129 = input.LA(1);

                         
                        int index73_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_129);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA73_130 = input.LA(1);

                         
                        int index73_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_130);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA73_131 = input.LA(1);

                         
                        int index73_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_131);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA73_132 = input.LA(1);

                         
                        int index73_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_132);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA73_133 = input.LA(1);

                         
                        int index73_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_133);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA73_134 = input.LA(1);

                         
                        int index73_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_134);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA73_135 = input.LA(1);

                         
                        int index73_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_135);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA73_136 = input.LA(1);

                         
                        int index73_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_136);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA73_137 = input.LA(1);

                         
                        int index73_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_137);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA73_138 = input.LA(1);

                         
                        int index73_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_138);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA73_156 = input.LA(1);

                         
                        int index73_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_156);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA73_157 = input.LA(1);

                         
                        int index73_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_157);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA73_162 = input.LA(1);

                         
                        int index73_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_162);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA73_168 = input.LA(1);

                         
                        int index73_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_168);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA73_169 = input.LA(1);

                         
                        int index73_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_169);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA73_170 = input.LA(1);

                         
                        int index73_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred14_Objc()) ) {s = 171;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index73_170);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA81_eotS =
        "\u0736\uffff";
    static final String DFA81_eofS =
        "\2\uffff\1\11\1\uffff\1\11\1\uffff\3\11\3\uffff\1\11\105\uffff\1"+
        "\11\105\uffff\1\11\u0128\uffff\1\11\162\uffff\1\11\162\uffff\1\11"+
        "\55\uffff\1\11\55\uffff\1\11\u0432\uffff";
    static final String DFA81_minS =
        "\1\23\1\56\1\26\1\56\1\26\1\130\3\26\3\uffff\1\26\3\23\102\uffff"+
        "\1\26\2\23\103\uffff\1\26\2\23\103\uffff\2\23\103\uffff\2\23\103"+
        "\uffff\3\23\102\uffff\3\23\2\56\2\166\4\56\1\130\3\56\1\23\1\56"+
        "\3\23\1\26\7\uffff\1\56\4\uffff\1\23\4\uffff\1\56\1\77\32\uffff"+
        "\2\23\103\uffff\1\26\7\uffff\1\56\4\uffff\1\23\4\uffff\1\56\1\77"+
        "\32\uffff\2\23\103\uffff\1\26\7\uffff\1\56\4\uffff\1\23\4\uffff"+
        "\1\56\1\77\32\uffff\1\26\7\uffff\1\56\4\uffff\1\23\4\uffff\1\56"+
        "\1\77\32\uffff\1\26\7\uffff\1\56\4\uffff\1\23\4\uffff\1\56\1\77"+
        "\32\uffff\25\0\7\uffff\1\0\4\uffff\1\0\4\uffff\2\0\32\uffff\145"+
        "\0\1\uffff\11\0\1\uffff\11\0\1\uffff\10\0\1\uffff\10\0\1\uffff\104"+
        "\0\117\uffff\23\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\1"+
        "\0\7\uffff\1\0\4\uffff\1\0\4\uffff\2\0\32\uffff\2\0\117\uffff\23"+
        "\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\1\0\7\uffff\1\0"+
        "\4\uffff\1\0\4\uffff\2\0\32\uffff\2\0\117\uffff\23\0\21\uffff\2"+
        "\0\4\uffff\1\0\5\uffff\3\0\1\uffff\2\0\117\uffff\23\0\21\uffff\2"+
        "\0\4\uffff\1\0\5\uffff\3\0\1\uffff\2\0\117\uffff\23\0\21\uffff\2"+
        "\0\4\uffff\1\0\5\uffff\3\0\1\uffff";
    static final String DFA81_maxS =
        "\1\u00d0\1\56\1\u00da\1\56\1\u00da\1\130\3\u00da\3\uffff\1\u00da"+
        "\1\u00db\1\u00d0\1\u00db\102\uffff\1\u00da\1\u00d0\1\u00db\103\uffff"+
        "\1\u00da\1\u00d0\1\u00db\103\uffff\1\u00d0\1\u00db\103\uffff\1\u00d0"+
        "\1\u00db\103\uffff\1\u00db\1\u00d0\1\u00db\102\uffff\1\u00db\1\u00d0"+
        "\1\u00db\1\u00d6\1\u00d4\2\166\1\56\1\u00d9\1\56\1\u00d9\1\130\3"+
        "\u00d9\1\u00db\1\56\3\u00d0\1\u00da\7\uffff\1\u00d4\4\uffff\1\u00db"+
        "\4\uffff\1\56\1\u00d9\32\uffff\1\u00d0\1\u00db\103\uffff\1\u00da"+
        "\7\uffff\1\u00d4\4\uffff\1\u00db\4\uffff\1\56\1\u00d9\32\uffff\1"+
        "\u00d0\1\u00db\103\uffff\1\u00da\7\uffff\1\u00d4\4\uffff\1\u00db"+
        "\4\uffff\1\56\1\u00d9\32\uffff\1\u00da\7\uffff\1\u00d4\4\uffff\1"+
        "\u00db\4\uffff\1\56\1\u00d9\32\uffff\1\u00da\7\uffff\1\u00d4\4\uffff"+
        "\1\u00db\4\uffff\1\56\1\u00d9\32\uffff\25\0\7\uffff\1\0\4\uffff"+
        "\1\0\4\uffff\2\0\32\uffff\145\0\1\uffff\11\0\1\uffff\11\0\1\uffff"+
        "\10\0\1\uffff\10\0\1\uffff\104\0\117\uffff\23\0\21\uffff\2\0\4\uffff"+
        "\1\0\5\uffff\3\0\1\uffff\1\0\7\uffff\1\0\4\uffff\1\0\4\uffff\2\0"+
        "\32\uffff\2\0\117\uffff\23\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3"+
        "\0\1\uffff\1\0\7\uffff\1\0\4\uffff\1\0\4\uffff\2\0\32\uffff\2\0"+
        "\117\uffff\23\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\2\0"+
        "\117\uffff\23\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff\2\0"+
        "\117\uffff\23\0\21\uffff\2\0\4\uffff\1\0\5\uffff\3\0\1\uffff";
    static final String DFA81_acceptS =
        "\11\uffff\1\2\u01c0\uffff\4\1\1\uffff\4\1\2\uffff\13\1\135\uffff"+
        "\4\1\1\uffff\4\1\2\uffff\13\1\135\uffff\4\1\1\uffff\4\1\2\uffff"+
        "\13\1\30\uffff\4\1\1\uffff\4\1\2\uffff\13\1\30\uffff\4\1\1\uffff"+
        "\4\1\2\uffff\13\1\54\uffff\4\1\1\uffff\4\1\2\uffff\13\1\u0141\uffff"+
        "\21\1\2\uffff\4\1\1\uffff\5\1\3\uffff\1\1\11\uffff\4\1\1\uffff\4"+
        "\1\2\uffff\13\1\163\uffff\21\1\2\uffff\4\1\1\uffff\5\1\3\uffff\1"+
        "\1\11\uffff\4\1\1\uffff\4\1\2\uffff\13\1\163\uffff\21\1\2\uffff"+
        "\4\1\1\uffff\5\1\3\uffff\1\1\144\uffff\21\1\2\uffff\4\1\1\uffff"+
        "\5\1\3\uffff\1\1\144\uffff\21\1\2\uffff\4\1\1\uffff\5\1\3\uffff"+
        "\1\1";
    static final String DFA81_specialS =
        "\17\uffff\1\0\104\uffff\1\1\105\uffff\1\2\104\uffff\1\3\104\uffff"+
        "\1\4\105\uffff\1\5\143\uffff\1\6\5\uffff\1\7\33\uffff\1\10\120\uffff"+
        "\1\11\5\uffff\1\12\33\uffff\1\13\120\uffff\1\14\5\uffff\1\15\47"+
        "\uffff\1\16\5\uffff\1\17\47\uffff\1\20\5\uffff\1\21\32\uffff\1\22"+
        "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
        "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\7\uffff\1\47\4\uffff\1\50\4"+
        "\uffff\1\51\1\52\32\uffff\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
        "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
        "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
        "\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125"+
        "\1\126\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
        "\1\141\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153"+
        "\1\154\1\155\1\156\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1\166"+
        "\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176\1\177\1\u0080\1"+
        "\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1\u0087\1\u0088\1"+
        "\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\uffff\1"+
        "\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1\u0097\1"+
        "\u0098\1\uffff\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1"+
        "\u009f\1\u00a0\1\u00a1\1\uffff\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1"+
        "\u00a6\1\u00a7\1\u00a8\1\u00a9\1\uffff\1\u00aa\1\u00ab\1\u00ac\1"+
        "\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\uffff\1\u00b2\1\u00b3\1"+
        "\u00b4\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1"+
        "\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1"+
        "\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1"+
        "\u00cc\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1"+
        "\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\u00db\1"+
        "\u00dc\1\u00dd\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1"+
        "\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00eb\1"+
        "\u00ec\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1"+
        "\u00f4\1\u00f5\117\uffff\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa"+
        "\1\u00fb\1\u00fc\1\u00fd\1\u00fe\1\u00ff\1\u0100\1\u0101\1\u0102"+
        "\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107\1\u0108\21\uffff\1\u0109"+
        "\1\u010a\4\uffff\1\u010b\5\uffff\1\u010c\1\u010d\1\u010e\1\uffff"+
        "\1\u010f\7\uffff\1\u0110\4\uffff\1\u0111\4\uffff\1\u0112\1\u0113"+
        "\32\uffff\1\u0114\1\u0115\117\uffff\1\u0116\1\u0117\1\u0118\1\u0119"+
        "\1\u011a\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0120\1\u0121"+
        "\1\u0122\1\u0123\1\u0124\1\u0125\1\u0126\1\u0127\1\u0128\21\uffff"+
        "\1\u0129\1\u012a\4\uffff\1\u012b\5\uffff\1\u012c\1\u012d\1\u012e"+
        "\1\uffff\1\u012f\7\uffff\1\u0130\4\uffff\1\u0131\4\uffff\1\u0132"+
        "\1\u0133\32\uffff\1\u0134\1\u0135\117\uffff\1\u0136\1\u0137\1\u0138"+
        "\1\u0139\1\u013a\1\u013b\1\u013c\1\u013d\1\u013e\1\u013f\1\u0140"+
        "\1\u0141\1\u0142\1\u0143\1\u0144\1\u0145\1\u0146\1\u0147\1\u0148"+
        "\21\uffff\1\u0149\1\u014a\4\uffff\1\u014b\5\uffff\1\u014c\1\u014d"+
        "\1\u014e\1\uffff\1\u014f\1\u0150\117\uffff\1\u0151\1\u0152\1\u0153"+
        "\1\u0154\1\u0155\1\u0156\1\u0157\1\u0158\1\u0159\1\u015a\1\u015b"+
        "\1\u015c\1\u015d\1\u015e\1\u015f\1\u0160\1\u0161\1\u0162\1\u0163"+
        "\21\uffff\1\u0164\1\u0165\4\uffff\1\u0166\5\uffff\1\u0167\1\u0168"+
        "\1\u0169\1\uffff\1\u016a\1\u016b\117\uffff\1\u016c\1\u016d\1\u016e"+
        "\1\u016f\1\u0170\1\u0171\1\u0172\1\u0173\1\u0174\1\u0175\1\u0176"+
        "\1\u0177\1\u0178\1\u0179\1\u017a\1\u017b\1\u017c\1\u017d\1\u017e"+
        "\21\uffff\1\u017f\1\u0180\4\uffff\1\u0181\5\uffff\1\u0182\1\u0183"+
        "\1\u0184\1\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\6\32\uffff\1\2\22\uffff\1\7\26\uffff\1\4\33\uffff\1\1\1\uffff"+
            "\1\11\2\uffff\1\3\32\uffff\1\5\25\uffff\1\11\2\uffff\1\10\1"+
            "\uffff\1\10\1\11\20\uffff\1\10\16\uffff\1\10",
            "\1\14",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\17\1\uffff\2\11\1\uffff\7\11\2\16"+
            "\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10\11\4"+
            "\uffff\1\11\3\uffff\7\11\3\uffff\1\15\3\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\122",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\124\1\uffff\2\11\1\uffff\7\11\2\123"+
            "\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10\11\4"+
            "\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\u0098",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u009a\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0099\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u00df\1\uffff\2\11\1\uffff\7\11\2"+
            "\u00de\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u0124\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0123\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u016a\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0169\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\1\u0168\3\11\1\uffff\14"+
            "\11\1\uffff\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\u01b9\32\uffff\1\u01b5\22\uffff\1\u01ba\26\uffff\1\u01b7"+
            "\26\uffff\1\u01be\4\uffff\1\u01b4\1\uffff\1\u01af\2\uffff\1"+
            "\u01b6\2\uffff\1\u01c0\2\uffff\1\u01ae\1\u01c0\23\uffff\1\u01b8"+
            "\1\u01ad\14\uffff\1\u01b3\2\uffff\1\u01b2\4\uffff\1\u01bd\2"+
            "\uffff\1\u01bb\1\uffff\1\u01bb\1\u01bc\2\uffff\1\u01b0\1\u01b1"+
            "\14\uffff\1\u01bb\16\uffff\1\u01bb\12\uffff\1\u01bf",
            "\1\11\32\uffff\1\u01c1\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u01d7\32\uffff\1\u01d4\20\uffff\1\u01cb\1\uffff\1\u01d8"+
            "\26\uffff\1\u01d5\4\uffff\1\u01ca\21\uffff\1\u01dc\4\uffff\1"+
            "\u01d3\1\uffff\1\u01ce\1\uffff\1\u01df\1\u01c9\2\uffff\1\u01de"+
            "\2\uffff\1\u01cd\1\u01de\23\uffff\1\u01d6\1\u01cc\14\uffff\1"+
            "\u01d2\2\uffff\1\u01d1\4\uffff\1\u01db\1\11\1\uffff\1\u01d9"+
            "\1\uffff\1\u01d9\1\u01da\2\uffff\1\u01cf\1\u01d0\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u01d9\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u01d9\1\uffff\3\11\6\uffff"+
            "\1\u01dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u01f0\1\uffff\2\11\1\uffff\7\11\2"+
            "\u01ef\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\32\uffff\1\u0234\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u024a\32\uffff\1\u0247\20\uffff\1\u023e\1\uffff\1\u024b"+
            "\26\uffff\1\u0248\4\uffff\1\u023d\21\uffff\1\u024f\4\uffff\1"+
            "\u0246\1\uffff\1\u0241\1\uffff\1\u0252\1\u023c\2\uffff\1\u0251"+
            "\2\uffff\1\u0240\1\u0251\23\uffff\1\u0249\1\u023f\14\uffff\1"+
            "\u0245\2\uffff\1\u0244\4\uffff\1\u024e\1\11\1\uffff\1\u024c"+
            "\1\uffff\1\u024c\1\u024d\2\uffff\1\u0242\1\u0243\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u024c\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u024c\1\uffff\3\11\6\uffff"+
            "\1\u0250",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u0263\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0262\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "\1\11\32\uffff\1\u02a7\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u02bd\32\uffff\1\u02ba\20\uffff\1\u02b1\1\uffff\1\u02be"+
            "\26\uffff\1\u02bb\4\uffff\1\u02b0\21\uffff\1\u02c2\4\uffff\1"+
            "\u02b9\1\uffff\1\u02b4\1\uffff\1\u02c5\1\u02af\2\uffff\1\u02c4"+
            "\2\uffff\1\u02b3\1\u02c4\23\uffff\1\u02bc\1\u02b2\14\uffff\1"+
            "\u02b8\2\uffff\1\u02b7\4\uffff\1\u02c1\1\11\1\uffff\1\u02bf"+
            "\1\uffff\1\u02bf\1\u02c0\2\uffff\1\u02b5\1\u02b6\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u02bf\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u02bf\1\uffff\3\11\6\uffff"+
            "\1\u02c3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\32\uffff\1\u02d5\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u02eb\32\uffff\1\u02e8\20\uffff\1\u02df\1\uffff\1\u02ec"+
            "\26\uffff\1\u02e9\4\uffff\1\u02de\21\uffff\1\u02f0\4\uffff\1"+
            "\u02e7\1\uffff\1\u02e2\1\uffff\1\u02f3\1\u02dd\2\uffff\1\u02f2"+
            "\2\uffff\1\u02e1\1\u02f2\23\uffff\1\u02ea\1\u02e0\14\uffff\1"+
            "\u02e6\2\uffff\1\u02e5\4\uffff\1\u02ef\1\11\1\uffff\1\u02ed"+
            "\1\uffff\1\u02ed\1\u02ee\2\uffff\1\u02e3\1\u02e4\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u02ed\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u02ed\1\uffff\3\11\6\uffff"+
            "\1\u02f1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\32\uffff\1\u0303\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u0319\32\uffff\1\u0316\20\uffff\1\u030d\1\uffff\1\u031a"+
            "\26\uffff\1\u0317\4\uffff\1\u030c\21\uffff\1\u031e\4\uffff\1"+
            "\u0315\1\uffff\1\u0310\1\uffff\1\u0321\1\u030b\2\uffff\1\u0320"+
            "\2\uffff\1\u030f\1\u0320\23\uffff\1\u0318\1\u030e\14\uffff\1"+
            "\u0314\2\uffff\1\u0313\4\uffff\1\u031d\1\11\1\uffff\1\u031b"+
            "\1\uffff\1\u031b\1\u031c\2\uffff\1\u0311\1\u0312\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u031b\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u031b\1\uffff\3\11\6\uffff"+
            "\1\u031f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u033d\32\uffff\1\u0339\22\uffff\1\u033e\26\uffff\1\u033b"+
            "\26\uffff\1\u0342\4\uffff\1\u0338\1\uffff\1\u0333\2\uffff\1"+
            "\u033a\2\uffff\1\u0344\2\uffff\1\u0332\1\u0344\23\uffff\1\u033c"+
            "\1\u0331\14\uffff\1\u0337\2\uffff\1\u0336\4\uffff\1\u0341\2"+
            "\uffff\1\u033f\1\uffff\1\u033f\1\u0340\2\uffff\1\u0334\1\u0335"+
            "\14\uffff\1\u033f\16\uffff\1\u033f\12\uffff\1\u0343",
            "\1\11\32\uffff\1\u0345\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u035b\32\uffff\1\u0358\20\uffff\1\u034f\1\uffff\1\u035c"+
            "\26\uffff\1\u0359\4\uffff\1\u034e\21\uffff\1\u0360\4\uffff\1"+
            "\u0357\1\uffff\1\u0352\1\uffff\1\u0363\1\u034d\2\uffff\1\u0362"+
            "\2\uffff\1\u0351\1\u0362\23\uffff\1\u035a\1\u0350\14\uffff\1"+
            "\u0356\2\uffff\1\u0355\4\uffff\1\u035f\1\11\1\uffff\1\u035d"+
            "\1\uffff\1\u035d\1\u035e\2\uffff\1\u0353\1\u0354\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u035d\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u035d\1\uffff\3\11\6\uffff"+
            "\1\u0361",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u037e\32\uffff\1\u037a\22\uffff\1\u037f\26\uffff\1\u037c"+
            "\26\uffff\1\u0383\4\uffff\1\u0379\1\uffff\1\u0374\2\uffff\1"+
            "\u037b\2\uffff\1\u0385\2\uffff\1\u0373\1\u0385\23\uffff\1\u037d"+
            "\15\uffff\1\u0378\2\uffff\1\u0377\4\uffff\1\u0382\2\uffff\1"+
            "\u0380\1\uffff\1\u0380\1\u0381\2\uffff\1\u0375\1\u0376\14\uffff"+
            "\1\u0380\16\uffff\1\u0380\12\uffff\1\u0384",
            "\1\u0390\32\uffff\1\u038c\22\uffff\1\u0391\26\uffff\1\u038e"+
            "\33\uffff\1\u038b\1\uffff\1\u0386\2\uffff\1\u038d\32\uffff\1"+
            "\u038f\15\uffff\1\u038a\2\uffff\1\u0389\4\uffff\1\u0394\2\uffff"+
            "\1\u0392\1\uffff\1\u0392\1\u0393\2\uffff\1\u0387\1\u0388\14"+
            "\uffff\1\u0392\16\uffff\1\u0392",
            "\1\u03b0\32\uffff\1\u03a2\22\uffff\1\u03b1\26\uffff\1\u03ae"+
            "\26\uffff\1\u03b5\4\uffff\1\u03ac\1\uffff\1\u0397\2\uffff\1"+
            "\u03ad\2\uffff\1\u03b7\2\uffff\1\u03a7\1\u03b7\23\uffff\1\u03af"+
            "\1\u03a6\14\uffff\1\u03ab\2\uffff\1\u03aa\4\uffff\1\u03b4\1"+
            "\u039e\1\uffff\1\u03b2\1\uffff\1\u03b2\1\u03b3\2\uffff\1\u03a8"+
            "\1\u03a9\1\u0398\1\u0395\2\uffff\1\u039a\4\uffff\1\u03a5\2\uffff"+
            "\1\u03b2\2\uffff\1\u0396\2\uffff\1\u039c\1\u039f\1\u03a0\1\u039d"+
            "\1\uffff\1\u03a1\1\uffff\1\u03a3\1\uffff\1\u03b2\1\uffff\1\u03a4"+
            "\1\u039b\1\u0399\6\uffff\1\u03b6",
            "\1\u03b9\u00a7\uffff\1\u03b8",
            "\1\u03c7\107\uffff\1\u03bc\1\uffff\1\u03cb\62\uffff\1\u03c3"+
            "\11\uffff\1\u03bd\1\u03ba\2\uffff\1\u03bf\4\uffff\1\u03ca\5"+
            "\uffff\1\u03bb\2\uffff\1\u03c1\1\u03c4\1\u03c5\1\u03c2\1\uffff"+
            "\1\u03c6\1\uffff\1\u03c8\3\uffff\1\u03c9\1\u03c0\1\u03be",
            "\1\u03cc",
            "\1\u03cd",
            "\1\u03ce",
            "\1\11\101\uffff\1\u03d4\1\uffff\3\u03d4\1\uffff\1\u03d1\2\uffff"+
            "\1\u03d4\1\uffff\1\u03d4\1\u03d3\1\u03d2\1\uffff\1\u03d4\1\u03d3"+
            "\1\u03d2\2\u03d0\1\u03d4\3\uffff\2\u03d4\1\uffff\6\u03d4\1\uffff"+
            "\1\u03d6\1\u03d5\34\uffff\1\u03cf\1\uffff\1\u03d7\1\u03d4\43"+
            "\uffff\1\u03d4\1\uffff\1\u03d4",
            "\1\u03d9",
            "\1\11\101\uffff\1\u03de\1\uffff\3\u03de\1\uffff\1\u03db\2\uffff"+
            "\1\u03de\1\uffff\1\u03de\1\u03dd\1\u03dc\1\uffff\1\u03de\1\u03dd"+
            "\1\u03dc\2\u03da\1\u03de\3\uffff\2\u03de\1\uffff\6\u03de\1\uffff"+
            "\1\u03e0\1\u03df\36\uffff\1\u03e1\1\u03de\43\uffff\1\u03de\1"+
            "\uffff\1\u03de",
            "\1\u03e3",
            "\1\11\101\uffff\1\u03e8\1\uffff\3\u03e8\1\uffff\1\u03e5\2\uffff"+
            "\1\u03e8\1\uffff\1\u03e8\1\u03e7\1\u03e6\1\uffff\1\u03e8\1\u03e7"+
            "\1\u03e6\2\u03e4\1\u03e8\3\uffff\2\u03e8\1\uffff\6\u03e8\1\uffff"+
            "\1\u03ea\1\u03e9\36\uffff\1\u03eb\1\u03e8\43\uffff\1\u03e8\1"+
            "\uffff\1\u03e8",
            "\1\11\101\uffff\1\u03f1\1\uffff\3\u03f1\1\uffff\1\u03ee\2\uffff"+
            "\1\u03f1\1\uffff\1\u03f1\1\u03f0\1\u03ef\1\uffff\1\u03f1\1\u03f0"+
            "\1\u03ef\2\u03ed\1\u03f1\3\uffff\2\u03f1\1\uffff\6\u03f1\1\uffff"+
            "\1\u03f3\1\u03f2\36\uffff\1\u03f4\1\u03f1\43\uffff\1\u03f1\1"+
            "\uffff\1\u03f1",
            "\1\11\101\uffff\1\u03fa\1\uffff\3\u03fa\1\uffff\1\u03f7\2\uffff"+
            "\1\u03fa\1\uffff\1\u03fa\1\u03f9\1\u03f8\1\uffff\1\u03fa\1\u03f9"+
            "\1\u03f8\2\u03f6\1\u03fa\3\uffff\2\u03fa\1\uffff\6\u03fa\1\uffff"+
            "\1\u03fc\1\u03fb\36\uffff\1\u03fd\1\u03fa\43\uffff\1\u03fa\1"+
            "\uffff\1\u03fa",
            "\1\u040b\32\uffff\1\u0407\22\uffff\1\u040c\26\uffff\1\u0409"+
            "\26\uffff\1\u0410\4\uffff\1\u0406\1\uffff\1\u0401\2\uffff\1"+
            "\u0408\2\uffff\1\u0412\2\uffff\1\u0400\1\u0412\23\uffff\1\u040a"+
            "\1\u03ff\14\uffff\1\u0405\2\uffff\1\u0404\4\uffff\1\u040f\2"+
            "\uffff\1\u040d\1\uffff\1\u040d\1\u040e\2\uffff\1\u0402\1\u0403"+
            "\14\uffff\1\u040d\16\uffff\1\u040d\12\uffff\1\u0411",
            "\1\u0413",
            "\1\u041e\32\uffff\1\u041a\22\uffff\1\u041f\26\uffff\1\u041c"+
            "\33\uffff\1\u0419\1\uffff\1\u0414\2\uffff\1\u041b\32\uffff\1"+
            "\u041d\15\uffff\1\u0418\2\uffff\1\u0417\4\uffff\1\u0422\2\uffff"+
            "\1\u0420\1\uffff\1\u0420\1\u0421\2\uffff\1\u0415\1\u0416\14"+
            "\uffff\1\u0420\16\uffff\1\u0420",
            "\1\u042d\32\uffff\1\u0429\22\uffff\1\u042e\26\uffff\1\u042b"+
            "\33\uffff\1\u0428\1\uffff\1\u0423\2\uffff\1\u042a\32\uffff\1"+
            "\u042c\15\uffff\1\u0427\2\uffff\1\u0426\4\uffff\1\u0431\2\uffff"+
            "\1\u042f\1\uffff\1\u042f\1\u0430\2\uffff\1\u0424\1\u0425\14"+
            "\uffff\1\u042f\16\uffff\1\u042f",
            "\1\u043c\32\uffff\1\u0438\22\uffff\1\u043d\26\uffff\1\u043a"+
            "\33\uffff\1\u0437\1\uffff\1\u0432\2\uffff\1\u0439\32\uffff\1"+
            "\u043b\15\uffff\1\u0436\2\uffff\1\u0435\4\uffff\1\u0440\2\uffff"+
            "\1\u043e\1\uffff\1\u043e\1\u043f\2\uffff\1\u0433\1\u0434\14"+
            "\uffff\1\u043e\16\uffff\1\u043e",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u0441\1\uffff\2\11\1\uffff\7\11\2"+
            "\u0442\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0492\174\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "",
            "\1\u04ae\32\uffff\1\u04a1\22\uffff\1\u04af\26\uffff\1\u04ac"+
            "\26\uffff\1\u04b3\4\uffff\1\u04ab\1\uffff\1\u0496\2\uffff\1"+
            "\u0493\2\uffff\1\u04b5\2\uffff\1\u04a6\1\u04b5\23\uffff\1\u04ad"+
            "\1\u04a5\14\uffff\1\u04aa\2\uffff\1\u04a9\4\uffff\1\u04b2\1"+
            "\u049d\1\uffff\1\u04b0\1\uffff\1\u04b0\1\u04b1\2\uffff\1\u04a7"+
            "\1\u04a8\1\u0497\1\u0494\2\uffff\1\u0499\4\uffff\1\u04a4\2\uffff"+
            "\1\u04b0\2\uffff\1\u0495\2\uffff\1\u049b\1\u049e\1\u049f\1\u049c"+
            "\1\uffff\1\u04a0\1\uffff\1\u04a2\1\uffff\1\u04b0\1\uffff\1\u04a3"+
            "\1\u049a\1\u0498\6\uffff\1\u04b4",
            "",
            "",
            "",
            "",
            "\1\u04b6",
            "\1\u04c0\35\uffff\1\u04bf\22\uffff\1\u04c5\1\uffff\2\u04c5"+
            "\1\u04c4\1\uffff\1\u04b9\1\uffff\1\u04c2\1\u04c3\1\uffff\1\u04c5"+
            "\1\u04bb\1\u04ba\1\u04c1\1\u04c5\1\u04bb\1\u04ba\2\u04b8\1\u04c5"+
            "\3\uffff\1\u04bc\1\u04c5\1\uffff\6\u04c5\1\uffff\1\u04be\1\u04bd"+
            "\34\uffff\1\u04b7\2\uffff\1\u04c5\43\uffff\1\u04c5\1\uffff\1"+
            "\u04c5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\32\uffff\1\u04c6\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u04dc\32\uffff\1\u04d9\20\uffff\1\u04d0\1\uffff\1\u04dd"+
            "\26\uffff\1\u04da\4\uffff\1\u04cf\21\uffff\1\u04e1\4\uffff\1"+
            "\u04d8\1\uffff\1\u04d3\1\uffff\1\u04e4\1\u04ce\2\uffff\1\u04e3"+
            "\2\uffff\1\u04d2\1\u04e3\23\uffff\1\u04db\1\u04d1\14\uffff\1"+
            "\u04d7\2\uffff\1\u04d6\4\uffff\1\u04e0\1\11\1\uffff\1\u04de"+
            "\1\uffff\1\u04de\1\u04df\2\uffff\1\u04d4\1\u04d5\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u04de\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u04de\1\uffff\3\11\6\uffff"+
            "\1\u04e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u04f4\1\uffff\2\11\1\uffff\7\11\2"+
            "\u04f5\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0545\174\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "",
            "\1\u0561\32\uffff\1\u0554\22\uffff\1\u0562\26\uffff\1\u055f"+
            "\26\uffff\1\u0566\4\uffff\1\u055e\1\uffff\1\u0549\2\uffff\1"+
            "\u0546\2\uffff\1\u0568\2\uffff\1\u0559\1\u0568\23\uffff\1\u0560"+
            "\1\u0558\14\uffff\1\u055d\2\uffff\1\u055c\4\uffff\1\u0565\1"+
            "\u0550\1\uffff\1\u0563\1\uffff\1\u0563\1\u0564\2\uffff\1\u055a"+
            "\1\u055b\1\u054a\1\u0547\2\uffff\1\u054c\4\uffff\1\u0557\2\uffff"+
            "\1\u0563\2\uffff\1\u0548\2\uffff\1\u054e\1\u0551\1\u0552\1\u054f"+
            "\1\uffff\1\u0553\1\uffff\1\u0555\1\uffff\1\u0563\1\uffff\1\u0556"+
            "\1\u054d\1\u054b\6\uffff\1\u0567",
            "",
            "",
            "",
            "",
            "\1\u0569",
            "\1\u0573\35\uffff\1\u0572\22\uffff\1\u0578\1\uffff\2\u0578"+
            "\1\u0577\1\uffff\1\u056c\1\uffff\1\u0575\1\u0576\1\uffff\1\u0578"+
            "\1\u056e\1\u056d\1\u0574\1\u0578\1\u056e\1\u056d\2\u056b\1\u0578"+
            "\3\uffff\1\u056f\1\u0578\1\uffff\6\u0578\1\uffff\1\u0571\1\u0570"+
            "\34\uffff\1\u056a\2\uffff\1\u0578\43\uffff\1\u0578\1\uffff\1"+
            "\u0578",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\32\uffff\1\u0579\22\uffff\1\11\26\uffff\1\11\33\uffff"+
            "\1\11\4\uffff\1\11\32\uffff\1\11\30\uffff\1\11\1\uffff\1\11"+
            "\21\uffff\1\11\16\uffff\1\11",
            "\1\u058f\32\uffff\1\u058c\20\uffff\1\u0583\1\uffff\1\u0590"+
            "\26\uffff\1\u058d\4\uffff\1\u0582\21\uffff\1\u0594\4\uffff\1"+
            "\u058b\1\uffff\1\u0586\1\uffff\1\u0597\1\u0581\2\uffff\1\u0596"+
            "\2\uffff\1\u0585\1\u0596\23\uffff\1\u058e\1\u0584\14\uffff\1"+
            "\u058a\2\uffff\1\u0589\4\uffff\1\u0593\1\11\1\uffff\1\u0591"+
            "\1\uffff\1\u0591\1\u0592\2\uffff\1\u0587\1\u0588\2\11\2\uffff"+
            "\1\11\4\uffff\1\11\2\uffff\1\u0591\2\uffff\1\11\2\uffff\4\11"+
            "\1\uffff\1\11\1\uffff\1\11\1\uffff\1\u0591\1\uffff\3\11\6\uffff"+
            "\1\u0595",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u05a7\1\uffff\2\11\1\uffff\7\11\2"+
            "\u05a8\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05f8\174\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "",
            "\1\u0614\32\uffff\1\u0607\22\uffff\1\u0615\26\uffff\1\u0612"+
            "\26\uffff\1\u0619\4\uffff\1\u0611\1\uffff\1\u05fc\2\uffff\1"+
            "\u05f9\2\uffff\1\u061b\2\uffff\1\u060c\1\u061b\23\uffff\1\u0613"+
            "\1\u060b\14\uffff\1\u0610\2\uffff\1\u060f\4\uffff\1\u0618\1"+
            "\u0603\1\uffff\1\u0616\1\uffff\1\u0616\1\u0617\2\uffff\1\u060d"+
            "\1\u060e\1\u05fd\1\u05fa\2\uffff\1\u05ff\4\uffff\1\u060a\2\uffff"+
            "\1\u0616\2\uffff\1\u05fb\2\uffff\1\u0601\1\u0604\1\u0605\1\u0602"+
            "\1\uffff\1\u0606\1\uffff\1\u0608\1\uffff\1\u0616\1\uffff\1\u0609"+
            "\1\u0600\1\u05fe\6\uffff\1\u061a",
            "",
            "",
            "",
            "",
            "\1\u061c",
            "\1\u0626\35\uffff\1\u0625\22\uffff\1\u062b\1\uffff\2\u062b"+
            "\1\u062a\1\uffff\1\u061f\1\uffff\1\u0628\1\u0629\1\uffff\1\u062b"+
            "\1\u0621\1\u0620\1\u0627\1\u062b\1\u0621\1\u0620\2\u061e\1\u062b"+
            "\3\uffff\1\u0622\1\u062b\1\uffff\6\u062b\1\uffff\1\u0624\1\u0623"+
            "\34\uffff\1\u061d\2\uffff\1\u062b\43\uffff\1\u062b\1\uffff\1"+
            "\u062b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u062c\1\uffff\2\11\1\uffff\7\11\2"+
            "\u062d\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u067d\174\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "",
            "\1\u0699\32\uffff\1\u068c\22\uffff\1\u069a\26\uffff\1\u0697"+
            "\26\uffff\1\u069e\4\uffff\1\u0696\1\uffff\1\u0681\2\uffff\1"+
            "\u067e\2\uffff\1\u06a0\2\uffff\1\u0691\1\u06a0\23\uffff\1\u0698"+
            "\1\u0690\14\uffff\1\u0695\2\uffff\1\u0694\4\uffff\1\u069d\1"+
            "\u0688\1\uffff\1\u069b\1\uffff\1\u069b\1\u069c\2\uffff\1\u0692"+
            "\1\u0693\1\u0682\1\u067f\2\uffff\1\u0684\4\uffff\1\u068f\2\uffff"+
            "\1\u069b\2\uffff\1\u0680\2\uffff\1\u0686\1\u0689\1\u068a\1\u0687"+
            "\1\uffff\1\u068b\1\uffff\1\u068d\1\uffff\1\u069b\1\uffff\1\u068e"+
            "\1\u0685\1\u0683\6\uffff\1\u069f",
            "",
            "",
            "",
            "",
            "\1\u06a1",
            "\1\u06ab\35\uffff\1\u06aa\22\uffff\1\u06b0\1\uffff\2\u06b0"+
            "\1\u06af\1\uffff\1\u06a4\1\uffff\1\u06ad\1\u06ae\1\uffff\1\u06b0"+
            "\1\u06a6\1\u06a5\1\u06ac\1\u06b0\1\u06a6\1\u06a5\2\u06a3\1\u06b0"+
            "\3\uffff\1\u06a7\1\u06b0\1\uffff\6\u06b0\1\uffff\1\u06a9\1\u06a8"+
            "\34\uffff\1\u06a2\2\uffff\1\u06b0\43\uffff\1\u06b0\1\uffff\1"+
            "\u06b0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\11\27\uffff\1\11\20\uffff\1\11\35\uffff\1\11\22\uffff\1"+
            "\11\1\uffff\3\11\1\uffff\1\u06b1\1\uffff\2\11\1\uffff\7\11\2"+
            "\u06b2\1\11\1\uffff\4\11\1\uffff\6\11\1\uffff\2\11\2\uffff\10"+
            "\11\4\uffff\1\11\3\uffff\7\11\3\uffff\4\11\1\uffff\14\11\1\uffff"+
            "\4\11\1\uffff\11\11\1\uffff\7\11\1\uffff\2\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0702\174\uffff\1\11\11\uffff\2\11\2\uffff\1\11\12\uffff"+
            "\1\11\2\uffff\4\11\1\uffff\1\11\6\uffff\2\11",
            "",
            "",
            "",
            "",
            "\1\u071e\32\uffff\1\u0711\22\uffff\1\u071f\26\uffff\1\u071c"+
            "\26\uffff\1\u0723\4\uffff\1\u071b\1\uffff\1\u0706\2\uffff\1"+
            "\u0703\2\uffff\1\u0725\2\uffff\1\u0716\1\u0725\23\uffff\1\u071d"+
            "\1\u0715\14\uffff\1\u071a\2\uffff\1\u0719\4\uffff\1\u0722\1"+
            "\u070d\1\uffff\1\u0720\1\uffff\1\u0720\1\u0721\2\uffff\1\u0717"+
            "\1\u0718\1\u0707\1\u0704\2\uffff\1\u0709\4\uffff\1\u0714\2\uffff"+
            "\1\u0720\2\uffff\1\u0705\2\uffff\1\u070b\1\u070e\1\u070f\1\u070c"+
            "\1\uffff\1\u0710\1\uffff\1\u0712\1\uffff\1\u0720\1\uffff\1\u0713"+
            "\1\u070a\1\u0708\6\uffff\1\u0724",
            "",
            "",
            "",
            "",
            "\1\u0726",
            "\1\u0730\35\uffff\1\u072f\22\uffff\1\u0735\1\uffff\2\u0735"+
            "\1\u0734\1\uffff\1\u0729\1\uffff\1\u0732\1\u0733\1\uffff\1\u0735"+
            "\1\u072b\1\u072a\1\u0731\1\u0735\1\u072b\1\u072a\2\u0728\1\u0735"+
            "\3\uffff\1\u072c\1\u0735\1\uffff\6\u0735\1\uffff\1\u072e\1\u072d"+
            "\34\uffff\1\u0727\2\uffff\1\u0735\43\uffff\1\u0735\1\uffff\1"+
            "\u0735",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "541:1: simple_expression_value_access2 : ( ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* ( ( '+=' | '-=' ) simple_expression_value )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_15 = input.LA(1);

                         
                        int index81_15 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_15==121) ) {s = 457;}

                        else if ( (LA81_15==S_C_LIT) && (synpred16_Objc())) {s = 458;}

                        else if ( (LA81_15==M_C_LIT) && (synpred16_Objc())) {s = 459;}

                        else if ( (LA81_15==149) && (synpred16_Objc())) {s = 460;}

                        else if ( (LA81_15==127) && (synpred16_Objc())) {s = 461;}

                        else if ( (LA81_15==118) ) {s = 462;}

                        else if ( (LA81_15==179) && (synpred16_Objc())) {s = 463;}

                        else if ( (LA81_15==180) && (synpred16_Objc())) {s = 464;}

                        else if ( (LA81_15==165) && (synpred16_Objc())) {s = 465;}

                        else if ( (LA81_15==162) && (synpred16_Objc())) {s = 466;}

                        else if ( (LA81_15==116) ) {s = 467;}

                        else if ( (LA81_15==ID) ) {s = 468;}

                        else if ( (LA81_15==STR_LIT) && (synpred16_Objc())) {s = 469;}

                        else if ( (LA81_15==148) && (synpred16_Objc())) {s = 470;}

                        else if ( (LA81_15==C_LIT) && (synpred16_Objc())) {s = 471;}

                        else if ( (LA81_15==NR_LIT) && (synpred16_Objc())) {s = 472;}

                        else if ( (LA81_15==173||LA81_15==175||LA81_15==193||LA81_15==208) && (synpred16_Objc())) {s = 473;}

                        else if ( (LA81_15==176) && (synpred16_Objc())) {s = 474;}

                        else if ( (LA81_15==170) && (synpred16_Objc())) {s = 475;}

                        else if ( (LA81_15==111) && (synpred16_Objc())) {s = 476;}

                        else if ( (LA81_15==219) && (synpred16_Objc())) {s = 477;}

                        else if ( (LA81_15==124||LA81_15==128) && (synpred16_Objc())) {s = 478;}

                        else if ( (LA81_15==120) && (synpred16_Objc())) {s = 479;}

                        else if ( (LA81_15==171||(LA81_15 >= 181 && LA81_15 <= 182)||LA81_15==185||LA81_15==190||LA81_15==196||(LA81_15 >= 199 && LA81_15 <= 202)||LA81_15==204||LA81_15==206||(LA81_15 >= 210 && LA81_15 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_15);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA81_84 = input.LA(1);

                         
                        int index81_84 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_84==121) ) {s = 572;}

                        else if ( (LA81_84==S_C_LIT) && (synpred16_Objc())) {s = 573;}

                        else if ( (LA81_84==M_C_LIT) && (synpred16_Objc())) {s = 574;}

                        else if ( (LA81_84==149) && (synpred16_Objc())) {s = 575;}

                        else if ( (LA81_84==127) && (synpred16_Objc())) {s = 576;}

                        else if ( (LA81_84==118) ) {s = 577;}

                        else if ( (LA81_84==179) && (synpred16_Objc())) {s = 578;}

                        else if ( (LA81_84==180) && (synpred16_Objc())) {s = 579;}

                        else if ( (LA81_84==165) && (synpred16_Objc())) {s = 580;}

                        else if ( (LA81_84==162) && (synpred16_Objc())) {s = 581;}

                        else if ( (LA81_84==116) ) {s = 582;}

                        else if ( (LA81_84==ID) ) {s = 583;}

                        else if ( (LA81_84==STR_LIT) && (synpred16_Objc())) {s = 584;}

                        else if ( (LA81_84==148) && (synpred16_Objc())) {s = 585;}

                        else if ( (LA81_84==C_LIT) && (synpred16_Objc())) {s = 586;}

                        else if ( (LA81_84==NR_LIT) && (synpred16_Objc())) {s = 587;}

                        else if ( (LA81_84==173||LA81_84==175||LA81_84==193||LA81_84==208) && (synpred16_Objc())) {s = 588;}

                        else if ( (LA81_84==176) && (synpred16_Objc())) {s = 589;}

                        else if ( (LA81_84==170) && (synpred16_Objc())) {s = 590;}

                        else if ( (LA81_84==111) && (synpred16_Objc())) {s = 591;}

                        else if ( (LA81_84==219) && (synpred16_Objc())) {s = 592;}

                        else if ( (LA81_84==124||LA81_84==128) && (synpred16_Objc())) {s = 593;}

                        else if ( (LA81_84==120) && (synpred16_Objc())) {s = 594;}

                        else if ( (LA81_84==171||(LA81_84 >= 181 && LA81_84 <= 182)||LA81_84==185||LA81_84==190||LA81_84==196||(LA81_84 >= 199 && LA81_84 <= 202)||LA81_84==204||LA81_84==206||(LA81_84 >= 210 && LA81_84 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_84);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA81_154 = input.LA(1);

                         
                        int index81_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_154==121) ) {s = 687;}

                        else if ( (LA81_154==S_C_LIT) && (synpred16_Objc())) {s = 688;}

                        else if ( (LA81_154==M_C_LIT) && (synpred16_Objc())) {s = 689;}

                        else if ( (LA81_154==149) && (synpred16_Objc())) {s = 690;}

                        else if ( (LA81_154==127) && (synpred16_Objc())) {s = 691;}

                        else if ( (LA81_154==118) ) {s = 692;}

                        else if ( (LA81_154==179) && (synpred16_Objc())) {s = 693;}

                        else if ( (LA81_154==180) && (synpred16_Objc())) {s = 694;}

                        else if ( (LA81_154==165) && (synpred16_Objc())) {s = 695;}

                        else if ( (LA81_154==162) && (synpred16_Objc())) {s = 696;}

                        else if ( (LA81_154==116) ) {s = 697;}

                        else if ( (LA81_154==ID) ) {s = 698;}

                        else if ( (LA81_154==STR_LIT) && (synpred16_Objc())) {s = 699;}

                        else if ( (LA81_154==148) && (synpred16_Objc())) {s = 700;}

                        else if ( (LA81_154==C_LIT) && (synpred16_Objc())) {s = 701;}

                        else if ( (LA81_154==NR_LIT) && (synpred16_Objc())) {s = 702;}

                        else if ( (LA81_154==173||LA81_154==175||LA81_154==193||LA81_154==208) && (synpred16_Objc())) {s = 703;}

                        else if ( (LA81_154==176) && (synpred16_Objc())) {s = 704;}

                        else if ( (LA81_154==170) && (synpred16_Objc())) {s = 705;}

                        else if ( (LA81_154==111) && (synpred16_Objc())) {s = 706;}

                        else if ( (LA81_154==219) && (synpred16_Objc())) {s = 707;}

                        else if ( (LA81_154==124||LA81_154==128) && (synpred16_Objc())) {s = 708;}

                        else if ( (LA81_154==120) && (synpred16_Objc())) {s = 709;}

                        else if ( (LA81_154==171||(LA81_154 >= 181 && LA81_154 <= 182)||LA81_154==185||LA81_154==190||LA81_154==196||(LA81_154 >= 199 && LA81_154 <= 202)||LA81_154==204||LA81_154==206||(LA81_154 >= 210 && LA81_154 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_154);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA81_223 = input.LA(1);

                         
                        int index81_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_223==121) ) {s = 733;}

                        else if ( (LA81_223==S_C_LIT) && (synpred16_Objc())) {s = 734;}

                        else if ( (LA81_223==M_C_LIT) && (synpred16_Objc())) {s = 735;}

                        else if ( (LA81_223==149) && (synpred16_Objc())) {s = 736;}

                        else if ( (LA81_223==127) && (synpred16_Objc())) {s = 737;}

                        else if ( (LA81_223==118) ) {s = 738;}

                        else if ( (LA81_223==179) && (synpred16_Objc())) {s = 739;}

                        else if ( (LA81_223==180) && (synpred16_Objc())) {s = 740;}

                        else if ( (LA81_223==165) && (synpred16_Objc())) {s = 741;}

                        else if ( (LA81_223==162) && (synpred16_Objc())) {s = 742;}

                        else if ( (LA81_223==116) ) {s = 743;}

                        else if ( (LA81_223==ID) ) {s = 744;}

                        else if ( (LA81_223==STR_LIT) && (synpred16_Objc())) {s = 745;}

                        else if ( (LA81_223==148) && (synpred16_Objc())) {s = 746;}

                        else if ( (LA81_223==C_LIT) && (synpred16_Objc())) {s = 747;}

                        else if ( (LA81_223==NR_LIT) && (synpred16_Objc())) {s = 748;}

                        else if ( (LA81_223==173||LA81_223==175||LA81_223==193||LA81_223==208) && (synpred16_Objc())) {s = 749;}

                        else if ( (LA81_223==176) && (synpred16_Objc())) {s = 750;}

                        else if ( (LA81_223==170) && (synpred16_Objc())) {s = 751;}

                        else if ( (LA81_223==111) && (synpred16_Objc())) {s = 752;}

                        else if ( (LA81_223==219) && (synpred16_Objc())) {s = 753;}

                        else if ( (LA81_223==124||LA81_223==128) && (synpred16_Objc())) {s = 754;}

                        else if ( (LA81_223==120) && (synpred16_Objc())) {s = 755;}

                        else if ( (LA81_223==171||(LA81_223 >= 181 && LA81_223 <= 182)||LA81_223==185||LA81_223==190||LA81_223==196||(LA81_223 >= 199 && LA81_223 <= 202)||LA81_223==204||LA81_223==206||(LA81_223 >= 210 && LA81_223 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_223);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA81_292 = input.LA(1);

                         
                        int index81_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_292==121) ) {s = 779;}

                        else if ( (LA81_292==S_C_LIT) && (synpred16_Objc())) {s = 780;}

                        else if ( (LA81_292==M_C_LIT) && (synpred16_Objc())) {s = 781;}

                        else if ( (LA81_292==149) && (synpred16_Objc())) {s = 782;}

                        else if ( (LA81_292==127) && (synpred16_Objc())) {s = 783;}

                        else if ( (LA81_292==118) ) {s = 784;}

                        else if ( (LA81_292==179) && (synpred16_Objc())) {s = 785;}

                        else if ( (LA81_292==180) && (synpred16_Objc())) {s = 786;}

                        else if ( (LA81_292==165) && (synpred16_Objc())) {s = 787;}

                        else if ( (LA81_292==162) && (synpred16_Objc())) {s = 788;}

                        else if ( (LA81_292==116) ) {s = 789;}

                        else if ( (LA81_292==ID) ) {s = 790;}

                        else if ( (LA81_292==STR_LIT) && (synpred16_Objc())) {s = 791;}

                        else if ( (LA81_292==148) && (synpred16_Objc())) {s = 792;}

                        else if ( (LA81_292==C_LIT) && (synpred16_Objc())) {s = 793;}

                        else if ( (LA81_292==NR_LIT) && (synpred16_Objc())) {s = 794;}

                        else if ( (LA81_292==173||LA81_292==175||LA81_292==193||LA81_292==208) && (synpred16_Objc())) {s = 795;}

                        else if ( (LA81_292==176) && (synpred16_Objc())) {s = 796;}

                        else if ( (LA81_292==170) && (synpred16_Objc())) {s = 797;}

                        else if ( (LA81_292==111) && (synpred16_Objc())) {s = 798;}

                        else if ( (LA81_292==219) && (synpred16_Objc())) {s = 799;}

                        else if ( (LA81_292==124||LA81_292==128) && (synpred16_Objc())) {s = 800;}

                        else if ( (LA81_292==120) && (synpred16_Objc())) {s = 801;}

                        else if ( (LA81_292==171||(LA81_292 >= 181 && LA81_292 <= 182)||LA81_292==185||LA81_292==190||LA81_292==196||(LA81_292 >= 199 && LA81_292 <= 202)||LA81_292==204||LA81_292==206||(LA81_292 >= 210 && LA81_292 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_292);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA81_362 = input.LA(1);

                         
                        int index81_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_362==121) ) {s = 845;}

                        else if ( (LA81_362==S_C_LIT) && (synpred16_Objc())) {s = 846;}

                        else if ( (LA81_362==M_C_LIT) && (synpred16_Objc())) {s = 847;}

                        else if ( (LA81_362==149) && (synpred16_Objc())) {s = 848;}

                        else if ( (LA81_362==127) && (synpred16_Objc())) {s = 849;}

                        else if ( (LA81_362==118) ) {s = 850;}

                        else if ( (LA81_362==179) && (synpred16_Objc())) {s = 851;}

                        else if ( (LA81_362==180) && (synpred16_Objc())) {s = 852;}

                        else if ( (LA81_362==165) && (synpred16_Objc())) {s = 853;}

                        else if ( (LA81_362==162) && (synpred16_Objc())) {s = 854;}

                        else if ( (LA81_362==116) ) {s = 855;}

                        else if ( (LA81_362==ID) ) {s = 856;}

                        else if ( (LA81_362==STR_LIT) && (synpred16_Objc())) {s = 857;}

                        else if ( (LA81_362==148) && (synpred16_Objc())) {s = 858;}

                        else if ( (LA81_362==C_LIT) && (synpred16_Objc())) {s = 859;}

                        else if ( (LA81_362==NR_LIT) && (synpred16_Objc())) {s = 860;}

                        else if ( (LA81_362==173||LA81_362==175||LA81_362==193||LA81_362==208) && (synpred16_Objc())) {s = 861;}

                        else if ( (LA81_362==176) && (synpred16_Objc())) {s = 862;}

                        else if ( (LA81_362==170) && (synpred16_Objc())) {s = 863;}

                        else if ( (LA81_362==111) && (synpred16_Objc())) {s = 864;}

                        else if ( (LA81_362==219) && (synpred16_Objc())) {s = 865;}

                        else if ( (LA81_362==124||LA81_362==128) && (synpred16_Objc())) {s = 866;}

                        else if ( (LA81_362==120) && (synpred16_Objc())) {s = 867;}

                        else if ( (LA81_362==171||(LA81_362 >= 181 && LA81_362 <= 182)||LA81_362==185||LA81_362==190||LA81_362==196||(LA81_362 >= 199 && LA81_362 <= 202)||LA81_362==204||LA81_362==206||(LA81_362 >= 210 && LA81_362 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_362);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA81_462 = input.LA(1);

                         
                        int index81_462 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_462==121) ) {s = 1171;}

                        else if ( (LA81_462==182) ) {s = 1172;}

                        else if ( (LA81_462==196) ) {s = 1173;}

                        else if ( (LA81_462==118) ) {s = 1174;}

                        else if ( (LA81_462==181) ) {s = 1175;}

                        else if ( (LA81_462==212) ) {s = 1176;}

                        else if ( (LA81_462==185) ) {s = 1177;}

                        else if ( (LA81_462==211) ) {s = 1178;}

                        else if ( (LA81_462==199) ) {s = 1179;}

                        else if ( (LA81_462==202) ) {s = 1180;}

                        else if ( (LA81_462==171) ) {s = 1181;}

                        else if ( (LA81_462==200) ) {s = 1182;}

                        else if ( (LA81_462==201) ) {s = 1183;}

                        else if ( (LA81_462==204) ) {s = 1184;}

                        else if ( (LA81_462==ID) ) {s = 1185;}

                        else if ( (LA81_462==206) ) {s = 1186;}

                        else if ( (LA81_462==210) ) {s = 1187;}

                        else if ( (LA81_462==190) ) {s = 1188;}

                        else if ( (LA81_462==149) && (synpred16_Objc())) {s = 1189;}

                        else if ( (LA81_462==127) && (synpred16_Objc())) {s = 1190;}

                        else if ( (LA81_462==179) && (synpred16_Objc())) {s = 1191;}

                        else if ( (LA81_462==180) && (synpred16_Objc())) {s = 1192;}

                        else if ( (LA81_462==165) && (synpred16_Objc())) {s = 1193;}

                        else if ( (LA81_462==162) && (synpred16_Objc())) {s = 1194;}

                        else if ( (LA81_462==116) && (synpred16_Objc())) {s = 1195;}

                        else if ( (LA81_462==STR_LIT) && (synpred16_Objc())) {s = 1196;}

                        else if ( (LA81_462==148) && (synpred16_Objc())) {s = 1197;}

                        else if ( (LA81_462==C_LIT) && (synpred16_Objc())) {s = 1198;}

                        else if ( (LA81_462==NR_LIT) && (synpred16_Objc())) {s = 1199;}

                        else if ( (LA81_462==173||LA81_462==175||LA81_462==193||LA81_462==208) && (synpred16_Objc())) {s = 1200;}

                        else if ( (LA81_462==176) && (synpred16_Objc())) {s = 1201;}

                        else if ( (LA81_462==170) && (synpred16_Objc())) {s = 1202;}

                        else if ( (LA81_462==111) && (synpred16_Objc())) {s = 1203;}

                        else if ( (LA81_462==219) && (synpred16_Objc())) {s = 1204;}

                        else if ( (LA81_462==124||LA81_462==128) && (synpred16_Objc())) {s = 1205;}

                         
                        input.seek(index81_462);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA81_468 = input.LA(1);

                         
                        int index81_468 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_468==176) ) {s = 1207;}

                        else if ( ((LA81_468 >= 130 && LA81_468 <= 131)) && (synpred16_Objc())) {s = 1208;}

                        else if ( (LA81_468==118) && (synpred16_Objc())) {s = 1209;}

                        else if ( (LA81_468==125||LA81_468==129) && (synpred16_Objc())) {s = 1210;}

                        else if ( (LA81_468==124||LA81_468==128) && (synpred16_Objc())) {s = 1211;}

                        else if ( (LA81_468==136) ) {s = 1212;}

                        else if ( (LA81_468==147) && (synpred16_Objc())) {s = 1213;}

                        else if ( (LA81_468==146) && (synpred16_Objc())) {s = 1214;}

                        else if ( (LA81_468==S_C_LIT) && (synpred16_Objc())) {s = 1215;}

                        else if ( (LA81_468==M_C_LIT) && (synpred16_Objc())) {s = 1216;}

                        else if ( (LA81_468==126) && (synpred16_Objc())) {s = 1217;}

                        else if ( (LA81_468==120) ) {s = 1218;}

                        else if ( (LA81_468==121) ) {s = 1219;}

                        else if ( (LA81_468==116) ) {s = 1220;}

                        else if ( (LA81_468==112||(LA81_468 >= 114 && LA81_468 <= 115)||LA81_468==123||LA81_468==127||LA81_468==132||LA81_468==137||(LA81_468 >= 139 && LA81_468 <= 144)||LA81_468==179||LA81_468==215||LA81_468==217) && (synpred16_Objc())) {s = 1221;}

                         
                        input.seek(index81_468);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA81_496 = input.LA(1);

                         
                        int index81_496 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_496==121) ) {s = 1230;}

                        else if ( (LA81_496==S_C_LIT) && (synpred16_Objc())) {s = 1231;}

                        else if ( (LA81_496==M_C_LIT) && (synpred16_Objc())) {s = 1232;}

                        else if ( (LA81_496==149) && (synpred16_Objc())) {s = 1233;}

                        else if ( (LA81_496==127) && (synpred16_Objc())) {s = 1234;}

                        else if ( (LA81_496==118) ) {s = 1235;}

                        else if ( (LA81_496==179) && (synpred16_Objc())) {s = 1236;}

                        else if ( (LA81_496==180) && (synpred16_Objc())) {s = 1237;}

                        else if ( (LA81_496==165) && (synpred16_Objc())) {s = 1238;}

                        else if ( (LA81_496==162) && (synpred16_Objc())) {s = 1239;}

                        else if ( (LA81_496==116) ) {s = 1240;}

                        else if ( (LA81_496==ID) ) {s = 1241;}

                        else if ( (LA81_496==STR_LIT) && (synpred16_Objc())) {s = 1242;}

                        else if ( (LA81_496==148) && (synpred16_Objc())) {s = 1243;}

                        else if ( (LA81_496==C_LIT) && (synpred16_Objc())) {s = 1244;}

                        else if ( (LA81_496==NR_LIT) && (synpred16_Objc())) {s = 1245;}

                        else if ( (LA81_496==173||LA81_496==175||LA81_496==193||LA81_496==208) && (synpred16_Objc())) {s = 1246;}

                        else if ( (LA81_496==176) && (synpred16_Objc())) {s = 1247;}

                        else if ( (LA81_496==170) && (synpred16_Objc())) {s = 1248;}

                        else if ( (LA81_496==111) && (synpred16_Objc())) {s = 1249;}

                        else if ( (LA81_496==219) && (synpred16_Objc())) {s = 1250;}

                        else if ( (LA81_496==124||LA81_496==128) && (synpred16_Objc())) {s = 1251;}

                        else if ( (LA81_496==120) && (synpred16_Objc())) {s = 1252;}

                        else if ( (LA81_496==171||(LA81_496 >= 181 && LA81_496 <= 182)||LA81_496==185||LA81_496==190||LA81_496==196||(LA81_496 >= 199 && LA81_496 <= 202)||LA81_496==204||LA81_496==206||(LA81_496 >= 210 && LA81_496 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_496);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA81_577 = input.LA(1);

                         
                        int index81_577 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_577==121) ) {s = 1350;}

                        else if ( (LA81_577==182) ) {s = 1351;}

                        else if ( (LA81_577==196) ) {s = 1352;}

                        else if ( (LA81_577==118) ) {s = 1353;}

                        else if ( (LA81_577==181) ) {s = 1354;}

                        else if ( (LA81_577==212) ) {s = 1355;}

                        else if ( (LA81_577==185) ) {s = 1356;}

                        else if ( (LA81_577==211) ) {s = 1357;}

                        else if ( (LA81_577==199) ) {s = 1358;}

                        else if ( (LA81_577==202) ) {s = 1359;}

                        else if ( (LA81_577==171) ) {s = 1360;}

                        else if ( (LA81_577==200) ) {s = 1361;}

                        else if ( (LA81_577==201) ) {s = 1362;}

                        else if ( (LA81_577==204) ) {s = 1363;}

                        else if ( (LA81_577==ID) ) {s = 1364;}

                        else if ( (LA81_577==206) ) {s = 1365;}

                        else if ( (LA81_577==210) ) {s = 1366;}

                        else if ( (LA81_577==190) ) {s = 1367;}

                        else if ( (LA81_577==149) && (synpred16_Objc())) {s = 1368;}

                        else if ( (LA81_577==127) && (synpred16_Objc())) {s = 1369;}

                        else if ( (LA81_577==179) && (synpred16_Objc())) {s = 1370;}

                        else if ( (LA81_577==180) && (synpred16_Objc())) {s = 1371;}

                        else if ( (LA81_577==165) && (synpred16_Objc())) {s = 1372;}

                        else if ( (LA81_577==162) && (synpred16_Objc())) {s = 1373;}

                        else if ( (LA81_577==116) && (synpred16_Objc())) {s = 1374;}

                        else if ( (LA81_577==STR_LIT) && (synpred16_Objc())) {s = 1375;}

                        else if ( (LA81_577==148) && (synpred16_Objc())) {s = 1376;}

                        else if ( (LA81_577==C_LIT) && (synpred16_Objc())) {s = 1377;}

                        else if ( (LA81_577==NR_LIT) && (synpred16_Objc())) {s = 1378;}

                        else if ( (LA81_577==173||LA81_577==175||LA81_577==193||LA81_577==208) && (synpred16_Objc())) {s = 1379;}

                        else if ( (LA81_577==176) && (synpred16_Objc())) {s = 1380;}

                        else if ( (LA81_577==170) && (synpred16_Objc())) {s = 1381;}

                        else if ( (LA81_577==111) && (synpred16_Objc())) {s = 1382;}

                        else if ( (LA81_577==219) && (synpred16_Objc())) {s = 1383;}

                        else if ( (LA81_577==124||LA81_577==128) && (synpred16_Objc())) {s = 1384;}

                         
                        input.seek(index81_577);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA81_583 = input.LA(1);

                         
                        int index81_583 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_583==176) ) {s = 1386;}

                        else if ( ((LA81_583 >= 130 && LA81_583 <= 131)) && (synpred16_Objc())) {s = 1387;}

                        else if ( (LA81_583==118) && (synpred16_Objc())) {s = 1388;}

                        else if ( (LA81_583==125||LA81_583==129) && (synpred16_Objc())) {s = 1389;}

                        else if ( (LA81_583==124||LA81_583==128) && (synpred16_Objc())) {s = 1390;}

                        else if ( (LA81_583==136) ) {s = 1391;}

                        else if ( (LA81_583==147) && (synpred16_Objc())) {s = 1392;}

                        else if ( (LA81_583==146) && (synpred16_Objc())) {s = 1393;}

                        else if ( (LA81_583==S_C_LIT) && (synpred16_Objc())) {s = 1394;}

                        else if ( (LA81_583==M_C_LIT) && (synpred16_Objc())) {s = 1395;}

                        else if ( (LA81_583==126) && (synpred16_Objc())) {s = 1396;}

                        else if ( (LA81_583==120) ) {s = 1397;}

                        else if ( (LA81_583==121) ) {s = 1398;}

                        else if ( (LA81_583==116) ) {s = 1399;}

                        else if ( (LA81_583==112||(LA81_583 >= 114 && LA81_583 <= 115)||LA81_583==123||LA81_583==127||LA81_583==132||LA81_583==137||(LA81_583 >= 139 && LA81_583 <= 144)||LA81_583==179||LA81_583==215||LA81_583==217) && (synpred16_Objc())) {s = 1400;}

                         
                        input.seek(index81_583);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA81_611 = input.LA(1);

                         
                        int index81_611 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_611==121) ) {s = 1409;}

                        else if ( (LA81_611==S_C_LIT) && (synpred16_Objc())) {s = 1410;}

                        else if ( (LA81_611==M_C_LIT) && (synpred16_Objc())) {s = 1411;}

                        else if ( (LA81_611==149) && (synpred16_Objc())) {s = 1412;}

                        else if ( (LA81_611==127) && (synpred16_Objc())) {s = 1413;}

                        else if ( (LA81_611==118) ) {s = 1414;}

                        else if ( (LA81_611==179) && (synpred16_Objc())) {s = 1415;}

                        else if ( (LA81_611==180) && (synpred16_Objc())) {s = 1416;}

                        else if ( (LA81_611==165) && (synpred16_Objc())) {s = 1417;}

                        else if ( (LA81_611==162) && (synpred16_Objc())) {s = 1418;}

                        else if ( (LA81_611==116) ) {s = 1419;}

                        else if ( (LA81_611==ID) ) {s = 1420;}

                        else if ( (LA81_611==STR_LIT) && (synpred16_Objc())) {s = 1421;}

                        else if ( (LA81_611==148) && (synpred16_Objc())) {s = 1422;}

                        else if ( (LA81_611==C_LIT) && (synpred16_Objc())) {s = 1423;}

                        else if ( (LA81_611==NR_LIT) && (synpred16_Objc())) {s = 1424;}

                        else if ( (LA81_611==173||LA81_611==175||LA81_611==193||LA81_611==208) && (synpred16_Objc())) {s = 1425;}

                        else if ( (LA81_611==176) && (synpred16_Objc())) {s = 1426;}

                        else if ( (LA81_611==170) && (synpred16_Objc())) {s = 1427;}

                        else if ( (LA81_611==111) && (synpred16_Objc())) {s = 1428;}

                        else if ( (LA81_611==219) && (synpred16_Objc())) {s = 1429;}

                        else if ( (LA81_611==124||LA81_611==128) && (synpred16_Objc())) {s = 1430;}

                        else if ( (LA81_611==120) && (synpred16_Objc())) {s = 1431;}

                        else if ( (LA81_611==171||(LA81_611 >= 181 && LA81_611 <= 182)||LA81_611==185||LA81_611==190||LA81_611==196||(LA81_611 >= 199 && LA81_611 <= 202)||LA81_611==204||LA81_611==206||(LA81_611 >= 210 && LA81_611 <= 212)) ) {s = 9;}

                         
                        input.seek(index81_611);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA81_692 = input.LA(1);

                         
                        int index81_692 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_692==121) ) {s = 1529;}

                        else if ( (LA81_692==182) ) {s = 1530;}

                        else if ( (LA81_692==196) ) {s = 1531;}

                        else if ( (LA81_692==118) ) {s = 1532;}

                        else if ( (LA81_692==181) ) {s = 1533;}

                        else if ( (LA81_692==212) ) {s = 1534;}

                        else if ( (LA81_692==185) ) {s = 1535;}

                        else if ( (LA81_692==211) ) {s = 1536;}

                        else if ( (LA81_692==199) ) {s = 1537;}

                        else if ( (LA81_692==202) ) {s = 1538;}

                        else if ( (LA81_692==171) ) {s = 1539;}

                        else if ( (LA81_692==200) ) {s = 1540;}

                        else if ( (LA81_692==201) ) {s = 1541;}

                        else if ( (LA81_692==204) ) {s = 1542;}

                        else if ( (LA81_692==ID) ) {s = 1543;}

                        else if ( (LA81_692==206) ) {s = 1544;}

                        else if ( (LA81_692==210) ) {s = 1545;}

                        else if ( (LA81_692==190) ) {s = 1546;}

                        else if ( (LA81_692==149) && (synpred16_Objc())) {s = 1547;}

                        else if ( (LA81_692==127) && (synpred16_Objc())) {s = 1548;}

                        else if ( (LA81_692==179) && (synpred16_Objc())) {s = 1549;}

                        else if ( (LA81_692==180) && (synpred16_Objc())) {s = 1550;}

                        else if ( (LA81_692==165) && (synpred16_Objc())) {s = 1551;}

                        else if ( (LA81_692==162) && (synpred16_Objc())) {s = 1552;}

                        else if ( (LA81_692==116) && (synpred16_Objc())) {s = 1553;}

                        else if ( (LA81_692==STR_LIT) && (synpred16_Objc())) {s = 1554;}

                        else if ( (LA81_692==148) && (synpred16_Objc())) {s = 1555;}

                        else if ( (LA81_692==C_LIT) && (synpred16_Objc())) {s = 1556;}

                        else if ( (LA81_692==NR_LIT) && (synpred16_Objc())) {s = 1557;}

                        else if ( (LA81_692==173||LA81_692==175||LA81_692==193||LA81_692==208) && (synpred16_Objc())) {s = 1558;}

                        else if ( (LA81_692==176) && (synpred16_Objc())) {s = 1559;}

                        else if ( (LA81_692==170) && (synpred16_Objc())) {s = 1560;}

                        else if ( (LA81_692==111) && (synpred16_Objc())) {s = 1561;}

                        else if ( (LA81_692==219) && (synpred16_Objc())) {s = 1562;}

                        else if ( (LA81_692==124||LA81_692==128) && (synpred16_Objc())) {s = 1563;}

                         
                        input.seek(index81_692);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA81_698 = input.LA(1);

                         
                        int index81_698 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_698==176) ) {s = 1565;}

                        else if ( ((LA81_698 >= 130 && LA81_698 <= 131)) && (synpred16_Objc())) {s = 1566;}

                        else if ( (LA81_698==118) && (synpred16_Objc())) {s = 1567;}

                        else if ( (LA81_698==125||LA81_698==129) && (synpred16_Objc())) {s = 1568;}

                        else if ( (LA81_698==124||LA81_698==128) && (synpred16_Objc())) {s = 1569;}

                        else if ( (LA81_698==136) ) {s = 1570;}

                        else if ( (LA81_698==147) && (synpred16_Objc())) {s = 1571;}

                        else if ( (LA81_698==146) && (synpred16_Objc())) {s = 1572;}

                        else if ( (LA81_698==S_C_LIT) && (synpred16_Objc())) {s = 1573;}

                        else if ( (LA81_698==M_C_LIT) && (synpred16_Objc())) {s = 1574;}

                        else if ( (LA81_698==126) && (synpred16_Objc())) {s = 1575;}

                        else if ( (LA81_698==120) ) {s = 1576;}

                        else if ( (LA81_698==121) ) {s = 1577;}

                        else if ( (LA81_698==116) ) {s = 1578;}

                        else if ( (LA81_698==112||(LA81_698 >= 114 && LA81_698 <= 115)||LA81_698==123||LA81_698==127||LA81_698==132||LA81_698==137||(LA81_698 >= 139 && LA81_698 <= 144)||LA81_698==179||LA81_698==215||LA81_698==217) && (synpred16_Objc())) {s = 1579;}

                         
                        input.seek(index81_698);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA81_738 = input.LA(1);

                         
                        int index81_738 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_738==121) ) {s = 1662;}

                        else if ( (LA81_738==182) ) {s = 1663;}

                        else if ( (LA81_738==196) ) {s = 1664;}

                        else if ( (LA81_738==118) ) {s = 1665;}

                        else if ( (LA81_738==181) ) {s = 1666;}

                        else if ( (LA81_738==212) ) {s = 1667;}

                        else if ( (LA81_738==185) ) {s = 1668;}

                        else if ( (LA81_738==211) ) {s = 1669;}

                        else if ( (LA81_738==199) ) {s = 1670;}

                        else if ( (LA81_738==202) ) {s = 1671;}

                        else if ( (LA81_738==171) ) {s = 1672;}

                        else if ( (LA81_738==200) ) {s = 1673;}

                        else if ( (LA81_738==201) ) {s = 1674;}

                        else if ( (LA81_738==204) ) {s = 1675;}

                        else if ( (LA81_738==ID) ) {s = 1676;}

                        else if ( (LA81_738==206) ) {s = 1677;}

                        else if ( (LA81_738==210) ) {s = 1678;}

                        else if ( (LA81_738==190) ) {s = 1679;}

                        else if ( (LA81_738==149) && (synpred16_Objc())) {s = 1680;}

                        else if ( (LA81_738==127) && (synpred16_Objc())) {s = 1681;}

                        else if ( (LA81_738==179) && (synpred16_Objc())) {s = 1682;}

                        else if ( (LA81_738==180) && (synpred16_Objc())) {s = 1683;}

                        else if ( (LA81_738==165) && (synpred16_Objc())) {s = 1684;}

                        else if ( (LA81_738==162) && (synpred16_Objc())) {s = 1685;}

                        else if ( (LA81_738==116) && (synpred16_Objc())) {s = 1686;}

                        else if ( (LA81_738==STR_LIT) && (synpred16_Objc())) {s = 1687;}

                        else if ( (LA81_738==148) && (synpred16_Objc())) {s = 1688;}

                        else if ( (LA81_738==C_LIT) && (synpred16_Objc())) {s = 1689;}

                        else if ( (LA81_738==NR_LIT) && (synpred16_Objc())) {s = 1690;}

                        else if ( (LA81_738==173||LA81_738==175||LA81_738==193||LA81_738==208) && (synpred16_Objc())) {s = 1691;}

                        else if ( (LA81_738==176) && (synpred16_Objc())) {s = 1692;}

                        else if ( (LA81_738==170) && (synpred16_Objc())) {s = 1693;}

                        else if ( (LA81_738==111) && (synpred16_Objc())) {s = 1694;}

                        else if ( (LA81_738==219) && (synpred16_Objc())) {s = 1695;}

                        else if ( (LA81_738==124||LA81_738==128) && (synpred16_Objc())) {s = 1696;}

                         
                        input.seek(index81_738);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA81_744 = input.LA(1);

                         
                        int index81_744 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_744==176) ) {s = 1698;}

                        else if ( ((LA81_744 >= 130 && LA81_744 <= 131)) && (synpred16_Objc())) {s = 1699;}

                        else if ( (LA81_744==118) && (synpred16_Objc())) {s = 1700;}

                        else if ( (LA81_744==125||LA81_744==129) && (synpred16_Objc())) {s = 1701;}

                        else if ( (LA81_744==124||LA81_744==128) && (synpred16_Objc())) {s = 1702;}

                        else if ( (LA81_744==136) ) {s = 1703;}

                        else if ( (LA81_744==147) && (synpred16_Objc())) {s = 1704;}

                        else if ( (LA81_744==146) && (synpred16_Objc())) {s = 1705;}

                        else if ( (LA81_744==S_C_LIT) && (synpred16_Objc())) {s = 1706;}

                        else if ( (LA81_744==M_C_LIT) && (synpred16_Objc())) {s = 1707;}

                        else if ( (LA81_744==126) && (synpred16_Objc())) {s = 1708;}

                        else if ( (LA81_744==120) ) {s = 1709;}

                        else if ( (LA81_744==121) ) {s = 1710;}

                        else if ( (LA81_744==116) ) {s = 1711;}

                        else if ( (LA81_744==112||(LA81_744 >= 114 && LA81_744 <= 115)||LA81_744==123||LA81_744==127||LA81_744==132||LA81_744==137||(LA81_744 >= 139 && LA81_744 <= 144)||LA81_744==179||LA81_744==215||LA81_744==217) && (synpred16_Objc())) {s = 1712;}

                         
                        input.seek(index81_744);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA81_784 = input.LA(1);

                         
                        int index81_784 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_784==121) ) {s = 1795;}

                        else if ( (LA81_784==182) ) {s = 1796;}

                        else if ( (LA81_784==196) ) {s = 1797;}

                        else if ( (LA81_784==118) ) {s = 1798;}

                        else if ( (LA81_784==181) ) {s = 1799;}

                        else if ( (LA81_784==212) ) {s = 1800;}

                        else if ( (LA81_784==185) ) {s = 1801;}

                        else if ( (LA81_784==211) ) {s = 1802;}

                        else if ( (LA81_784==199) ) {s = 1803;}

                        else if ( (LA81_784==202) ) {s = 1804;}

                        else if ( (LA81_784==171) ) {s = 1805;}

                        else if ( (LA81_784==200) ) {s = 1806;}

                        else if ( (LA81_784==201) ) {s = 1807;}

                        else if ( (LA81_784==204) ) {s = 1808;}

                        else if ( (LA81_784==ID) ) {s = 1809;}

                        else if ( (LA81_784==206) ) {s = 1810;}

                        else if ( (LA81_784==210) ) {s = 1811;}

                        else if ( (LA81_784==190) ) {s = 1812;}

                        else if ( (LA81_784==149) && (synpred16_Objc())) {s = 1813;}

                        else if ( (LA81_784==127) && (synpred16_Objc())) {s = 1814;}

                        else if ( (LA81_784==179) && (synpred16_Objc())) {s = 1815;}

                        else if ( (LA81_784==180) && (synpred16_Objc())) {s = 1816;}

                        else if ( (LA81_784==165) && (synpred16_Objc())) {s = 1817;}

                        else if ( (LA81_784==162) && (synpred16_Objc())) {s = 1818;}

                        else if ( (LA81_784==116) && (synpred16_Objc())) {s = 1819;}

                        else if ( (LA81_784==STR_LIT) && (synpred16_Objc())) {s = 1820;}

                        else if ( (LA81_784==148) && (synpred16_Objc())) {s = 1821;}

                        else if ( (LA81_784==C_LIT) && (synpred16_Objc())) {s = 1822;}

                        else if ( (LA81_784==NR_LIT) && (synpred16_Objc())) {s = 1823;}

                        else if ( (LA81_784==173||LA81_784==175||LA81_784==193||LA81_784==208) && (synpred16_Objc())) {s = 1824;}

                        else if ( (LA81_784==176) && (synpred16_Objc())) {s = 1825;}

                        else if ( (LA81_784==170) && (synpred16_Objc())) {s = 1826;}

                        else if ( (LA81_784==111) && (synpred16_Objc())) {s = 1827;}

                        else if ( (LA81_784==219) && (synpred16_Objc())) {s = 1828;}

                        else if ( (LA81_784==124||LA81_784==128) && (synpred16_Objc())) {s = 1829;}

                         
                        input.seek(index81_784);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA81_790 = input.LA(1);

                         
                        int index81_790 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA81_790==176) ) {s = 1831;}

                        else if ( ((LA81_790 >= 130 && LA81_790 <= 131)) && (synpred16_Objc())) {s = 1832;}

                        else if ( (LA81_790==118) && (synpred16_Objc())) {s = 1833;}

                        else if ( (LA81_790==125||LA81_790==129) && (synpred16_Objc())) {s = 1834;}

                        else if ( (LA81_790==124||LA81_790==128) && (synpred16_Objc())) {s = 1835;}

                        else if ( (LA81_790==136) ) {s = 1836;}

                        else if ( (LA81_790==147) && (synpred16_Objc())) {s = 1837;}

                        else if ( (LA81_790==146) && (synpred16_Objc())) {s = 1838;}

                        else if ( (LA81_790==S_C_LIT) && (synpred16_Objc())) {s = 1839;}

                        else if ( (LA81_790==M_C_LIT) && (synpred16_Objc())) {s = 1840;}

                        else if ( (LA81_790==126) && (synpred16_Objc())) {s = 1841;}

                        else if ( (LA81_790==120) ) {s = 1842;}

                        else if ( (LA81_790==121) ) {s = 1843;}

                        else if ( (LA81_790==116) ) {s = 1844;}

                        else if ( (LA81_790==112||(LA81_790 >= 114 && LA81_790 <= 115)||LA81_790==123||LA81_790==127||LA81_790==132||LA81_790==137||(LA81_790 >= 139 && LA81_790 <= 144)||LA81_790==179||LA81_790==215||LA81_790==217) && (synpred16_Objc())) {s = 1845;}

                         
                        input.seek(index81_790);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA81_817 = input.LA(1);

                         
                        int index81_817 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_817);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA81_818 = input.LA(1);

                         
                        int index81_818 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_818);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA81_819 = input.LA(1);

                         
                        int index81_819 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_819);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA81_820 = input.LA(1);

                         
                        int index81_820 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_820);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA81_821 = input.LA(1);

                         
                        int index81_821 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_821);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA81_822 = input.LA(1);

                         
                        int index81_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_822);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA81_823 = input.LA(1);

                         
                        int index81_823 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_823);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA81_824 = input.LA(1);

                         
                        int index81_824 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_824);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA81_825 = input.LA(1);

                         
                        int index81_825 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_825);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA81_826 = input.LA(1);

                         
                        int index81_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_826);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA81_827 = input.LA(1);

                         
                        int index81_827 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_827);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA81_828 = input.LA(1);

                         
                        int index81_828 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_828);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA81_829 = input.LA(1);

                         
                        int index81_829 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_829);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA81_830 = input.LA(1);

                         
                        int index81_830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_830);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA81_831 = input.LA(1);

                         
                        int index81_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_831);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA81_832 = input.LA(1);

                         
                        int index81_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_832);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA81_833 = input.LA(1);

                         
                        int index81_833 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_833);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA81_834 = input.LA(1);

                         
                        int index81_834 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_834);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA81_835 = input.LA(1);

                         
                        int index81_835 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_835);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA81_836 = input.LA(1);

                         
                        int index81_836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_836);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA81_837 = input.LA(1);

                         
                        int index81_837 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_837);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA81_845 = input.LA(1);

                         
                        int index81_845 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_845);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA81_850 = input.LA(1);

                         
                        int index81_850 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_850);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA81_855 = input.LA(1);

                         
                        int index81_855 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_855);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA81_856 = input.LA(1);

                         
                        int index81_856 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_856);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA81_883 = input.LA(1);

                         
                        int index81_883 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_883);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA81_884 = input.LA(1);

                         
                        int index81_884 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_884);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA81_885 = input.LA(1);

                         
                        int index81_885 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_885);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA81_886 = input.LA(1);

                         
                        int index81_886 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_886);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA81_887 = input.LA(1);

                         
                        int index81_887 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_887);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA81_888 = input.LA(1);

                         
                        int index81_888 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_888);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA81_889 = input.LA(1);

                         
                        int index81_889 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_889);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA81_890 = input.LA(1);

                         
                        int index81_890 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_890);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA81_891 = input.LA(1);

                         
                        int index81_891 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_891);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA81_892 = input.LA(1);

                         
                        int index81_892 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_892);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA81_893 = input.LA(1);

                         
                        int index81_893 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_893);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA81_894 = input.LA(1);

                         
                        int index81_894 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_894);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA81_895 = input.LA(1);

                         
                        int index81_895 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_895);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA81_896 = input.LA(1);

                         
                        int index81_896 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_896);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA81_897 = input.LA(1);

                         
                        int index81_897 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_897);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA81_898 = input.LA(1);

                         
                        int index81_898 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_898);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA81_899 = input.LA(1);

                         
                        int index81_899 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_899);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA81_900 = input.LA(1);

                         
                        int index81_900 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_900);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA81_901 = input.LA(1);

                         
                        int index81_901 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_901);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA81_902 = input.LA(1);

                         
                        int index81_902 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_902);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA81_903 = input.LA(1);

                         
                        int index81_903 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_903);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA81_904 = input.LA(1);

                         
                        int index81_904 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_904);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA81_905 = input.LA(1);

                         
                        int index81_905 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_905);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA81_906 = input.LA(1);

                         
                        int index81_906 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_906);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA81_907 = input.LA(1);

                         
                        int index81_907 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_907);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA81_908 = input.LA(1);

                         
                        int index81_908 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_908);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA81_909 = input.LA(1);

                         
                        int index81_909 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_909);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA81_910 = input.LA(1);

                         
                        int index81_910 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_910);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA81_911 = input.LA(1);

                         
                        int index81_911 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_911);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA81_912 = input.LA(1);

                         
                        int index81_912 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_912);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA81_913 = input.LA(1);

                         
                        int index81_913 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_913);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA81_914 = input.LA(1);

                         
                        int index81_914 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_914);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA81_915 = input.LA(1);

                         
                        int index81_915 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_915);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA81_916 = input.LA(1);

                         
                        int index81_916 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_916);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA81_917 = input.LA(1);

                         
                        int index81_917 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_917);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA81_918 = input.LA(1);

                         
                        int index81_918 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_918);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA81_919 = input.LA(1);

                         
                        int index81_919 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_919);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA81_920 = input.LA(1);

                         
                        int index81_920 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_920);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA81_921 = input.LA(1);

                         
                        int index81_921 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_921);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA81_922 = input.LA(1);

                         
                        int index81_922 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_922);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA81_923 = input.LA(1);

                         
                        int index81_923 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_923);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA81_924 = input.LA(1);

                         
                        int index81_924 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_924);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA81_925 = input.LA(1);

                         
                        int index81_925 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_925);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA81_926 = input.LA(1);

                         
                        int index81_926 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_926);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA81_927 = input.LA(1);

                         
                        int index81_927 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_927);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA81_928 = input.LA(1);

                         
                        int index81_928 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_928);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA81_929 = input.LA(1);

                         
                        int index81_929 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_929);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA81_930 = input.LA(1);

                         
                        int index81_930 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_930);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA81_931 = input.LA(1);

                         
                        int index81_931 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_931);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA81_932 = input.LA(1);

                         
                        int index81_932 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_932);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA81_933 = input.LA(1);

                         
                        int index81_933 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_933);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA81_934 = input.LA(1);

                         
                        int index81_934 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_934);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA81_935 = input.LA(1);

                         
                        int index81_935 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_935);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA81_936 = input.LA(1);

                         
                        int index81_936 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_936);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA81_937 = input.LA(1);

                         
                        int index81_937 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_937);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA81_938 = input.LA(1);

                         
                        int index81_938 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_938);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA81_939 = input.LA(1);

                         
                        int index81_939 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_939);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA81_940 = input.LA(1);

                         
                        int index81_940 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_940);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA81_941 = input.LA(1);

                         
                        int index81_941 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_941);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA81_942 = input.LA(1);

                         
                        int index81_942 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_942);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA81_943 = input.LA(1);

                         
                        int index81_943 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_943);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA81_944 = input.LA(1);

                         
                        int index81_944 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_944);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA81_945 = input.LA(1);

                         
                        int index81_945 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_945);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA81_946 = input.LA(1);

                         
                        int index81_946 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_946);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA81_947 = input.LA(1);

                         
                        int index81_947 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_947);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA81_948 = input.LA(1);

                         
                        int index81_948 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_948);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA81_949 = input.LA(1);

                         
                        int index81_949 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_949);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA81_950 = input.LA(1);

                         
                        int index81_950 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_950);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA81_951 = input.LA(1);

                         
                        int index81_951 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_951);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA81_952 = input.LA(1);

                         
                        int index81_952 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_952);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA81_953 = input.LA(1);

                         
                        int index81_953 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_953);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA81_954 = input.LA(1);

                         
                        int index81_954 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_954);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA81_955 = input.LA(1);

                         
                        int index81_955 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_955);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA81_956 = input.LA(1);

                         
                        int index81_956 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_956);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA81_957 = input.LA(1);

                         
                        int index81_957 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_957);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA81_958 = input.LA(1);

                         
                        int index81_958 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_958);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA81_959 = input.LA(1);

                         
                        int index81_959 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_959);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA81_960 = input.LA(1);

                         
                        int index81_960 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_960);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA81_961 = input.LA(1);

                         
                        int index81_961 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_961);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA81_962 = input.LA(1);

                         
                        int index81_962 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_962);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA81_963 = input.LA(1);

                         
                        int index81_963 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_963);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA81_964 = input.LA(1);

                         
                        int index81_964 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_964);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA81_965 = input.LA(1);

                         
                        int index81_965 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_965);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA81_966 = input.LA(1);

                         
                        int index81_966 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_966);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA81_967 = input.LA(1);

                         
                        int index81_967 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_967);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA81_968 = input.LA(1);

                         
                        int index81_968 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_968);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA81_969 = input.LA(1);

                         
                        int index81_969 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_969);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA81_970 = input.LA(1);

                         
                        int index81_970 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_970);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA81_971 = input.LA(1);

                         
                        int index81_971 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_971);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA81_972 = input.LA(1);

                         
                        int index81_972 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_972);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA81_973 = input.LA(1);

                         
                        int index81_973 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_973);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA81_974 = input.LA(1);

                         
                        int index81_974 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_974);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA81_975 = input.LA(1);

                         
                        int index81_975 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_975);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA81_976 = input.LA(1);

                         
                        int index81_976 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_976);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA81_977 = input.LA(1);

                         
                        int index81_977 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_977);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA81_978 = input.LA(1);

                         
                        int index81_978 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_978);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA81_979 = input.LA(1);

                         
                        int index81_979 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_979);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA81_980 = input.LA(1);

                         
                        int index81_980 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_980);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA81_981 = input.LA(1);

                         
                        int index81_981 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_981);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA81_982 = input.LA(1);

                         
                        int index81_982 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_982);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA81_983 = input.LA(1);

                         
                        int index81_983 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_983);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA81_985 = input.LA(1);

                         
                        int index81_985 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_985);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA81_986 = input.LA(1);

                         
                        int index81_986 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_986);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA81_987 = input.LA(1);

                         
                        int index81_987 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_987);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA81_988 = input.LA(1);

                         
                        int index81_988 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_988);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA81_989 = input.LA(1);

                         
                        int index81_989 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_989);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA81_990 = input.LA(1);

                         
                        int index81_990 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_990);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA81_991 = input.LA(1);

                         
                        int index81_991 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_991);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA81_992 = input.LA(1);

                         
                        int index81_992 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_992);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA81_993 = input.LA(1);

                         
                        int index81_993 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_993);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA81_995 = input.LA(1);

                         
                        int index81_995 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_995);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA81_996 = input.LA(1);

                         
                        int index81_996 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_996);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA81_997 = input.LA(1);

                         
                        int index81_997 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_997);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA81_998 = input.LA(1);

                         
                        int index81_998 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_998);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA81_999 = input.LA(1);

                         
                        int index81_999 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_999);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA81_1000 = input.LA(1);

                         
                        int index81_1000 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1000);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA81_1001 = input.LA(1);

                         
                        int index81_1001 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1001);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA81_1002 = input.LA(1);

                         
                        int index81_1002 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1002);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA81_1003 = input.LA(1);

                         
                        int index81_1003 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1003);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA81_1005 = input.LA(1);

                         
                        int index81_1005 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1005);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA81_1006 = input.LA(1);

                         
                        int index81_1006 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1006);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA81_1007 = input.LA(1);

                         
                        int index81_1007 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1007);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA81_1008 = input.LA(1);

                         
                        int index81_1008 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1008);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA81_1009 = input.LA(1);

                         
                        int index81_1009 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1009);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA81_1010 = input.LA(1);

                         
                        int index81_1010 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1010);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA81_1011 = input.LA(1);

                         
                        int index81_1011 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1011);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA81_1012 = input.LA(1);

                         
                        int index81_1012 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1012);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA81_1014 = input.LA(1);

                         
                        int index81_1014 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1014);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA81_1015 = input.LA(1);

                         
                        int index81_1015 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1015);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA81_1016 = input.LA(1);

                         
                        int index81_1016 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1016);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA81_1017 = input.LA(1);

                         
                        int index81_1017 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1017);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA81_1018 = input.LA(1);

                         
                        int index81_1018 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1018);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA81_1019 = input.LA(1);

                         
                        int index81_1019 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1019);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA81_1020 = input.LA(1);

                         
                        int index81_1020 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1020);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA81_1021 = input.LA(1);

                         
                        int index81_1021 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1021);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA81_1023 = input.LA(1);

                         
                        int index81_1023 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1023);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA81_1024 = input.LA(1);

                         
                        int index81_1024 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1024);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA81_1025 = input.LA(1);

                         
                        int index81_1025 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1025);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA81_1026 = input.LA(1);

                         
                        int index81_1026 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1026);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA81_1027 = input.LA(1);

                         
                        int index81_1027 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1027);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA81_1028 = input.LA(1);

                         
                        int index81_1028 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1028);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA81_1029 = input.LA(1);

                         
                        int index81_1029 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1029);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA81_1030 = input.LA(1);

                         
                        int index81_1030 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1030);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA81_1031 = input.LA(1);

                         
                        int index81_1031 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1031);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA81_1032 = input.LA(1);

                         
                        int index81_1032 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1032);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA81_1033 = input.LA(1);

                         
                        int index81_1033 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1033);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA81_1034 = input.LA(1);

                         
                        int index81_1034 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1034);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA81_1035 = input.LA(1);

                         
                        int index81_1035 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1035);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA81_1036 = input.LA(1);

                         
                        int index81_1036 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1036);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA81_1037 = input.LA(1);

                         
                        int index81_1037 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1037);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA81_1038 = input.LA(1);

                         
                        int index81_1038 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1038);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA81_1039 = input.LA(1);

                         
                        int index81_1039 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1039);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA81_1040 = input.LA(1);

                         
                        int index81_1040 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1040);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA81_1041 = input.LA(1);

                         
                        int index81_1041 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1041);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA81_1042 = input.LA(1);

                         
                        int index81_1042 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1042);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA81_1043 = input.LA(1);

                         
                        int index81_1043 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1043);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA81_1044 = input.LA(1);

                         
                        int index81_1044 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1044);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA81_1045 = input.LA(1);

                         
                        int index81_1045 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1045);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA81_1046 = input.LA(1);

                         
                        int index81_1046 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1046);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA81_1047 = input.LA(1);

                         
                        int index81_1047 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1047);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA81_1048 = input.LA(1);

                         
                        int index81_1048 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1048);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA81_1049 = input.LA(1);

                         
                        int index81_1049 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1049);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA81_1050 = input.LA(1);

                         
                        int index81_1050 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1050);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA81_1051 = input.LA(1);

                         
                        int index81_1051 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1051);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA81_1052 = input.LA(1);

                         
                        int index81_1052 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1052);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA81_1053 = input.LA(1);

                         
                        int index81_1053 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1053);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA81_1054 = input.LA(1);

                         
                        int index81_1054 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1054);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA81_1055 = input.LA(1);

                         
                        int index81_1055 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1055);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA81_1056 = input.LA(1);

                         
                        int index81_1056 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1056);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA81_1057 = input.LA(1);

                         
                        int index81_1057 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1057);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA81_1058 = input.LA(1);

                         
                        int index81_1058 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1058);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA81_1059 = input.LA(1);

                         
                        int index81_1059 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1059);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA81_1060 = input.LA(1);

                         
                        int index81_1060 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1060);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA81_1061 = input.LA(1);

                         
                        int index81_1061 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1061);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA81_1062 = input.LA(1);

                         
                        int index81_1062 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1062);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA81_1063 = input.LA(1);

                         
                        int index81_1063 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1063);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA81_1064 = input.LA(1);

                         
                        int index81_1064 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1064);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA81_1065 = input.LA(1);

                         
                        int index81_1065 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1065);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA81_1066 = input.LA(1);

                         
                        int index81_1066 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1066);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA81_1067 = input.LA(1);

                         
                        int index81_1067 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1067);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA81_1068 = input.LA(1);

                         
                        int index81_1068 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1068);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA81_1069 = input.LA(1);

                         
                        int index81_1069 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1069);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA81_1070 = input.LA(1);

                         
                        int index81_1070 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1070);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA81_1071 = input.LA(1);

                         
                        int index81_1071 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1071);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA81_1072 = input.LA(1);

                         
                        int index81_1072 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1072);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA81_1073 = input.LA(1);

                         
                        int index81_1073 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1073);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA81_1074 = input.LA(1);

                         
                        int index81_1074 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1074);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA81_1075 = input.LA(1);

                         
                        int index81_1075 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1075);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA81_1076 = input.LA(1);

                         
                        int index81_1076 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1076);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA81_1077 = input.LA(1);

                         
                        int index81_1077 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1077);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA81_1078 = input.LA(1);

                         
                        int index81_1078 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1078);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA81_1079 = input.LA(1);

                         
                        int index81_1079 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1079);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA81_1080 = input.LA(1);

                         
                        int index81_1080 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1080);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA81_1081 = input.LA(1);

                         
                        int index81_1081 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1081);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA81_1082 = input.LA(1);

                         
                        int index81_1082 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1082);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA81_1083 = input.LA(1);

                         
                        int index81_1083 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1083);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA81_1084 = input.LA(1);

                         
                        int index81_1084 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1084);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA81_1085 = input.LA(1);

                         
                        int index81_1085 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1085);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA81_1086 = input.LA(1);

                         
                        int index81_1086 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1086);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA81_1087 = input.LA(1);

                         
                        int index81_1087 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1087);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA81_1088 = input.LA(1);

                         
                        int index81_1088 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1088);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA81_1089 = input.LA(1);

                         
                        int index81_1089 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1089);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA81_1090 = input.LA(1);

                         
                        int index81_1090 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1090);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA81_1170 = input.LA(1);

                         
                        int index81_1170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1170);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA81_1171 = input.LA(1);

                         
                        int index81_1171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1171);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA81_1172 = input.LA(1);

                         
                        int index81_1172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1172);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA81_1173 = input.LA(1);

                         
                        int index81_1173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1173);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA81_1174 = input.LA(1);

                         
                        int index81_1174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1174);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA81_1175 = input.LA(1);

                         
                        int index81_1175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1175);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA81_1176 = input.LA(1);

                         
                        int index81_1176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1176);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA81_1177 = input.LA(1);

                         
                        int index81_1177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1177);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA81_1178 = input.LA(1);

                         
                        int index81_1178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1178);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA81_1179 = input.LA(1);

                         
                        int index81_1179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1179);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA81_1180 = input.LA(1);

                         
                        int index81_1180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1180);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA81_1181 = input.LA(1);

                         
                        int index81_1181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1181);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA81_1182 = input.LA(1);

                         
                        int index81_1182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1182);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA81_1183 = input.LA(1);

                         
                        int index81_1183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1183);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA81_1184 = input.LA(1);

                         
                        int index81_1184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1184);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA81_1185 = input.LA(1);

                         
                        int index81_1185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1185);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA81_1186 = input.LA(1);

                         
                        int index81_1186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1186);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA81_1187 = input.LA(1);

                         
                        int index81_1187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1187);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA81_1188 = input.LA(1);

                         
                        int index81_1188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1188);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA81_1206 = input.LA(1);

                         
                        int index81_1206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1206);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA81_1207 = input.LA(1);

                         
                        int index81_1207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1207);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA81_1212 = input.LA(1);

                         
                        int index81_1212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1212);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA81_1218 = input.LA(1);

                         
                        int index81_1218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1218);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA81_1219 = input.LA(1);

                         
                        int index81_1219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1219);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA81_1220 = input.LA(1);

                         
                        int index81_1220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1220);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA81_1222 = input.LA(1);

                         
                        int index81_1222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1222);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA81_1230 = input.LA(1);

                         
                        int index81_1230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1230);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA81_1235 = input.LA(1);

                         
                        int index81_1235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1235);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA81_1240 = input.LA(1);

                         
                        int index81_1240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1240);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA81_1241 = input.LA(1);

                         
                        int index81_1241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1241);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA81_1268 = input.LA(1);

                         
                        int index81_1268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1268);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA81_1269 = input.LA(1);

                         
                        int index81_1269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1269);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA81_1349 = input.LA(1);

                         
                        int index81_1349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1349);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA81_1350 = input.LA(1);

                         
                        int index81_1350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1350);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA81_1351 = input.LA(1);

                         
                        int index81_1351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1351);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA81_1352 = input.LA(1);

                         
                        int index81_1352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1352);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA81_1353 = input.LA(1);

                         
                        int index81_1353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1353);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA81_1354 = input.LA(1);

                         
                        int index81_1354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1354);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA81_1355 = input.LA(1);

                         
                        int index81_1355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1355);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA81_1356 = input.LA(1);

                         
                        int index81_1356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1356);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA81_1357 = input.LA(1);

                         
                        int index81_1357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1357);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA81_1358 = input.LA(1);

                         
                        int index81_1358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1358);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA81_1359 = input.LA(1);

                         
                        int index81_1359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1359);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA81_1360 = input.LA(1);

                         
                        int index81_1360 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1360);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA81_1361 = input.LA(1);

                         
                        int index81_1361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1361);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA81_1362 = input.LA(1);

                         
                        int index81_1362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1362);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA81_1363 = input.LA(1);

                         
                        int index81_1363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1363);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA81_1364 = input.LA(1);

                         
                        int index81_1364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1364);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA81_1365 = input.LA(1);

                         
                        int index81_1365 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1365);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA81_1366 = input.LA(1);

                         
                        int index81_1366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1366);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA81_1367 = input.LA(1);

                         
                        int index81_1367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1367);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA81_1385 = input.LA(1);

                         
                        int index81_1385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1385);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA81_1386 = input.LA(1);

                         
                        int index81_1386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1386);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA81_1391 = input.LA(1);

                         
                        int index81_1391 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1391);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA81_1397 = input.LA(1);

                         
                        int index81_1397 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1397);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA81_1398 = input.LA(1);

                         
                        int index81_1398 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1398);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA81_1399 = input.LA(1);

                         
                        int index81_1399 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1399);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA81_1401 = input.LA(1);

                         
                        int index81_1401 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1401);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA81_1409 = input.LA(1);

                         
                        int index81_1409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1409);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA81_1414 = input.LA(1);

                         
                        int index81_1414 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1414);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA81_1419 = input.LA(1);

                         
                        int index81_1419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1419);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA81_1420 = input.LA(1);

                         
                        int index81_1420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1420);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA81_1447 = input.LA(1);

                         
                        int index81_1447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1447);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA81_1448 = input.LA(1);

                         
                        int index81_1448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1448);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA81_1528 = input.LA(1);

                         
                        int index81_1528 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1528);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA81_1529 = input.LA(1);

                         
                        int index81_1529 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1529);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA81_1530 = input.LA(1);

                         
                        int index81_1530 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1530);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA81_1531 = input.LA(1);

                         
                        int index81_1531 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1531);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA81_1532 = input.LA(1);

                         
                        int index81_1532 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1532);

                        if ( s>=0 ) return s;
                        break;
                    case 315 : 
                        int LA81_1533 = input.LA(1);

                         
                        int index81_1533 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1533);

                        if ( s>=0 ) return s;
                        break;
                    case 316 : 
                        int LA81_1534 = input.LA(1);

                         
                        int index81_1534 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1534);

                        if ( s>=0 ) return s;
                        break;
                    case 317 : 
                        int LA81_1535 = input.LA(1);

                         
                        int index81_1535 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1535);

                        if ( s>=0 ) return s;
                        break;
                    case 318 : 
                        int LA81_1536 = input.LA(1);

                         
                        int index81_1536 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1536);

                        if ( s>=0 ) return s;
                        break;
                    case 319 : 
                        int LA81_1537 = input.LA(1);

                         
                        int index81_1537 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1537);

                        if ( s>=0 ) return s;
                        break;
                    case 320 : 
                        int LA81_1538 = input.LA(1);

                         
                        int index81_1538 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1538);

                        if ( s>=0 ) return s;
                        break;
                    case 321 : 
                        int LA81_1539 = input.LA(1);

                         
                        int index81_1539 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1539);

                        if ( s>=0 ) return s;
                        break;
                    case 322 : 
                        int LA81_1540 = input.LA(1);

                         
                        int index81_1540 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1540);

                        if ( s>=0 ) return s;
                        break;
                    case 323 : 
                        int LA81_1541 = input.LA(1);

                         
                        int index81_1541 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1541);

                        if ( s>=0 ) return s;
                        break;
                    case 324 : 
                        int LA81_1542 = input.LA(1);

                         
                        int index81_1542 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1542);

                        if ( s>=0 ) return s;
                        break;
                    case 325 : 
                        int LA81_1543 = input.LA(1);

                         
                        int index81_1543 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1543);

                        if ( s>=0 ) return s;
                        break;
                    case 326 : 
                        int LA81_1544 = input.LA(1);

                         
                        int index81_1544 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1544);

                        if ( s>=0 ) return s;
                        break;
                    case 327 : 
                        int LA81_1545 = input.LA(1);

                         
                        int index81_1545 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1545);

                        if ( s>=0 ) return s;
                        break;
                    case 328 : 
                        int LA81_1546 = input.LA(1);

                         
                        int index81_1546 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1546);

                        if ( s>=0 ) return s;
                        break;
                    case 329 : 
                        int LA81_1564 = input.LA(1);

                         
                        int index81_1564 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1564);

                        if ( s>=0 ) return s;
                        break;
                    case 330 : 
                        int LA81_1565 = input.LA(1);

                         
                        int index81_1565 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1565);

                        if ( s>=0 ) return s;
                        break;
                    case 331 : 
                        int LA81_1570 = input.LA(1);

                         
                        int index81_1570 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1570);

                        if ( s>=0 ) return s;
                        break;
                    case 332 : 
                        int LA81_1576 = input.LA(1);

                         
                        int index81_1576 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1576);

                        if ( s>=0 ) return s;
                        break;
                    case 333 : 
                        int LA81_1577 = input.LA(1);

                         
                        int index81_1577 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1577);

                        if ( s>=0 ) return s;
                        break;
                    case 334 : 
                        int LA81_1578 = input.LA(1);

                         
                        int index81_1578 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1578);

                        if ( s>=0 ) return s;
                        break;
                    case 335 : 
                        int LA81_1580 = input.LA(1);

                         
                        int index81_1580 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1580);

                        if ( s>=0 ) return s;
                        break;
                    case 336 : 
                        int LA81_1581 = input.LA(1);

                         
                        int index81_1581 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1581);

                        if ( s>=0 ) return s;
                        break;
                    case 337 : 
                        int LA81_1661 = input.LA(1);

                         
                        int index81_1661 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1661);

                        if ( s>=0 ) return s;
                        break;
                    case 338 : 
                        int LA81_1662 = input.LA(1);

                         
                        int index81_1662 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1662);

                        if ( s>=0 ) return s;
                        break;
                    case 339 : 
                        int LA81_1663 = input.LA(1);

                         
                        int index81_1663 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1663);

                        if ( s>=0 ) return s;
                        break;
                    case 340 : 
                        int LA81_1664 = input.LA(1);

                         
                        int index81_1664 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1664);

                        if ( s>=0 ) return s;
                        break;
                    case 341 : 
                        int LA81_1665 = input.LA(1);

                         
                        int index81_1665 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1665);

                        if ( s>=0 ) return s;
                        break;
                    case 342 : 
                        int LA81_1666 = input.LA(1);

                         
                        int index81_1666 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1666);

                        if ( s>=0 ) return s;
                        break;
                    case 343 : 
                        int LA81_1667 = input.LA(1);

                         
                        int index81_1667 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1667);

                        if ( s>=0 ) return s;
                        break;
                    case 344 : 
                        int LA81_1668 = input.LA(1);

                         
                        int index81_1668 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1668);

                        if ( s>=0 ) return s;
                        break;
                    case 345 : 
                        int LA81_1669 = input.LA(1);

                         
                        int index81_1669 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1669);

                        if ( s>=0 ) return s;
                        break;
                    case 346 : 
                        int LA81_1670 = input.LA(1);

                         
                        int index81_1670 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1670);

                        if ( s>=0 ) return s;
                        break;
                    case 347 : 
                        int LA81_1671 = input.LA(1);

                         
                        int index81_1671 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1671);

                        if ( s>=0 ) return s;
                        break;
                    case 348 : 
                        int LA81_1672 = input.LA(1);

                         
                        int index81_1672 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1672);

                        if ( s>=0 ) return s;
                        break;
                    case 349 : 
                        int LA81_1673 = input.LA(1);

                         
                        int index81_1673 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1673);

                        if ( s>=0 ) return s;
                        break;
                    case 350 : 
                        int LA81_1674 = input.LA(1);

                         
                        int index81_1674 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1674);

                        if ( s>=0 ) return s;
                        break;
                    case 351 : 
                        int LA81_1675 = input.LA(1);

                         
                        int index81_1675 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1675);

                        if ( s>=0 ) return s;
                        break;
                    case 352 : 
                        int LA81_1676 = input.LA(1);

                         
                        int index81_1676 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1676);

                        if ( s>=0 ) return s;
                        break;
                    case 353 : 
                        int LA81_1677 = input.LA(1);

                         
                        int index81_1677 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1677);

                        if ( s>=0 ) return s;
                        break;
                    case 354 : 
                        int LA81_1678 = input.LA(1);

                         
                        int index81_1678 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1678);

                        if ( s>=0 ) return s;
                        break;
                    case 355 : 
                        int LA81_1679 = input.LA(1);

                         
                        int index81_1679 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1679);

                        if ( s>=0 ) return s;
                        break;
                    case 356 : 
                        int LA81_1697 = input.LA(1);

                         
                        int index81_1697 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1697);

                        if ( s>=0 ) return s;
                        break;
                    case 357 : 
                        int LA81_1698 = input.LA(1);

                         
                        int index81_1698 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1698);

                        if ( s>=0 ) return s;
                        break;
                    case 358 : 
                        int LA81_1703 = input.LA(1);

                         
                        int index81_1703 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1703);

                        if ( s>=0 ) return s;
                        break;
                    case 359 : 
                        int LA81_1709 = input.LA(1);

                         
                        int index81_1709 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1709);

                        if ( s>=0 ) return s;
                        break;
                    case 360 : 
                        int LA81_1710 = input.LA(1);

                         
                        int index81_1710 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1710);

                        if ( s>=0 ) return s;
                        break;
                    case 361 : 
                        int LA81_1711 = input.LA(1);

                         
                        int index81_1711 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1711);

                        if ( s>=0 ) return s;
                        break;
                    case 362 : 
                        int LA81_1713 = input.LA(1);

                         
                        int index81_1713 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1713);

                        if ( s>=0 ) return s;
                        break;
                    case 363 : 
                        int LA81_1714 = input.LA(1);

                         
                        int index81_1714 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1714);

                        if ( s>=0 ) return s;
                        break;
                    case 364 : 
                        int LA81_1794 = input.LA(1);

                         
                        int index81_1794 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1794);

                        if ( s>=0 ) return s;
                        break;
                    case 365 : 
                        int LA81_1795 = input.LA(1);

                         
                        int index81_1795 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1795);

                        if ( s>=0 ) return s;
                        break;
                    case 366 : 
                        int LA81_1796 = input.LA(1);

                         
                        int index81_1796 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1796);

                        if ( s>=0 ) return s;
                        break;
                    case 367 : 
                        int LA81_1797 = input.LA(1);

                         
                        int index81_1797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1797);

                        if ( s>=0 ) return s;
                        break;
                    case 368 : 
                        int LA81_1798 = input.LA(1);

                         
                        int index81_1798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1798);

                        if ( s>=0 ) return s;
                        break;
                    case 369 : 
                        int LA81_1799 = input.LA(1);

                         
                        int index81_1799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1799);

                        if ( s>=0 ) return s;
                        break;
                    case 370 : 
                        int LA81_1800 = input.LA(1);

                         
                        int index81_1800 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1800);

                        if ( s>=0 ) return s;
                        break;
                    case 371 : 
                        int LA81_1801 = input.LA(1);

                         
                        int index81_1801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1801);

                        if ( s>=0 ) return s;
                        break;
                    case 372 : 
                        int LA81_1802 = input.LA(1);

                         
                        int index81_1802 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1802);

                        if ( s>=0 ) return s;
                        break;
                    case 373 : 
                        int LA81_1803 = input.LA(1);

                         
                        int index81_1803 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1803);

                        if ( s>=0 ) return s;
                        break;
                    case 374 : 
                        int LA81_1804 = input.LA(1);

                         
                        int index81_1804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1804);

                        if ( s>=0 ) return s;
                        break;
                    case 375 : 
                        int LA81_1805 = input.LA(1);

                         
                        int index81_1805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1805);

                        if ( s>=0 ) return s;
                        break;
                    case 376 : 
                        int LA81_1806 = input.LA(1);

                         
                        int index81_1806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1806);

                        if ( s>=0 ) return s;
                        break;
                    case 377 : 
                        int LA81_1807 = input.LA(1);

                         
                        int index81_1807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1807);

                        if ( s>=0 ) return s;
                        break;
                    case 378 : 
                        int LA81_1808 = input.LA(1);

                         
                        int index81_1808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1808);

                        if ( s>=0 ) return s;
                        break;
                    case 379 : 
                        int LA81_1809 = input.LA(1);

                         
                        int index81_1809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1809);

                        if ( s>=0 ) return s;
                        break;
                    case 380 : 
                        int LA81_1810 = input.LA(1);

                         
                        int index81_1810 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1810);

                        if ( s>=0 ) return s;
                        break;
                    case 381 : 
                        int LA81_1811 = input.LA(1);

                         
                        int index81_1811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1811);

                        if ( s>=0 ) return s;
                        break;
                    case 382 : 
                        int LA81_1812 = input.LA(1);

                         
                        int index81_1812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1812);

                        if ( s>=0 ) return s;
                        break;
                    case 383 : 
                        int LA81_1830 = input.LA(1);

                         
                        int index81_1830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1830);

                        if ( s>=0 ) return s;
                        break;
                    case 384 : 
                        int LA81_1831 = input.LA(1);

                         
                        int index81_1831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1831);

                        if ( s>=0 ) return s;
                        break;
                    case 385 : 
                        int LA81_1836 = input.LA(1);

                         
                        int index81_1836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1836);

                        if ( s>=0 ) return s;
                        break;
                    case 386 : 
                        int LA81_1842 = input.LA(1);

                         
                        int index81_1842 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1842);

                        if ( s>=0 ) return s;
                        break;
                    case 387 : 
                        int LA81_1843 = input.LA(1);

                         
                        int index81_1843 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1843);

                        if ( s>=0 ) return s;
                        break;
                    case 388 : 
                        int LA81_1844 = input.LA(1);

                         
                        int index81_1844 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 1845;}

                        else if ( (true) ) {s = 9;}

                         
                        input.seek(index81_1844);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA79_eotS =
        "\106\uffff";
    static final String DFA79_eofS =
        "\1\1\105\uffff";
    static final String DFA79_minS =
        "\1\26\105\uffff";
    static final String DFA79_maxS =
        "\1\u00da\105\uffff";
    static final String DFA79_acceptS =
        "\1\uffff\1\2\103\uffff\1\1";
    static final String DFA79_specialS =
        "\106\uffff}>";
    static final String[] DFA79_transitionS = {
            "\1\1\27\uffff\1\1\20\uffff\1\1\35\uffff\1\1\22\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\7\1\2\105\1\1\1\uffff\4"+
            "\1\1\uffff\6\1\1\uffff\2\1\2\uffff\10\1\4\uffff\1\1\3\uffff"+
            "\7\1\3\uffff\4\1\1\uffff\14\1\1\uffff\4\1\1\uffff\11\1\1\uffff"+
            "\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA79_eot = DFA.unpackEncodedString(DFA79_eotS);
    static final short[] DFA79_eof = DFA.unpackEncodedString(DFA79_eofS);
    static final char[] DFA79_min = DFA.unpackEncodedStringToUnsignedChars(DFA79_minS);
    static final char[] DFA79_max = DFA.unpackEncodedStringToUnsignedChars(DFA79_maxS);
    static final short[] DFA79_accept = DFA.unpackEncodedString(DFA79_acceptS);
    static final short[] DFA79_special = DFA.unpackEncodedString(DFA79_specialS);
    static final short[][] DFA79_transition;

    static {
        int numStates = DFA79_transitionS.length;
        DFA79_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA79_transition[i] = DFA.unpackEncodedString(DFA79_transitionS[i]);
        }
    }

    class DFA79 extends DFA {

        public DFA79(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 79;
            this.eot = DFA79_eot;
            this.eof = DFA79_eof;
            this.min = DFA79_min;
            this.max = DFA79_max;
            this.accept = DFA79_accept;
            this.special = DFA79_special;
            this.transition = DFA79_transition;
        }
        public String getDescription() {
            return "()* loopback of 543:30: ( access_wrapper simple_expression_value )*";
        }
    }
    static final String DFA80_eotS =
        "\105\uffff";
    static final String DFA80_eofS =
        "\1\2\104\uffff";
    static final String DFA80_minS =
        "\1\26\104\uffff";
    static final String DFA80_maxS =
        "\1\u00da\104\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\1\2\102\uffff";
    static final String DFA80_specialS =
        "\105\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\2\27\uffff\1\2\20\uffff\1\2\35\uffff\1\2\22\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\1\1\3\2\1\1\2\uffff"+
            "\1\2\1\uffff\4\2\1\uffff\6\2\1\uffff\2\2\2\uffff\10\2\4\uffff"+
            "\1\2\3\uffff\7\2\3\uffff\4\2\1\uffff\14\2\1\uffff\4\2\1\uffff"+
            "\11\2\1\uffff\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "543:72: ( ( '+=' | '-=' ) simple_expression_value )?";
        }
    }
    static final String DFA83_eotS =
        "\u018a\uffff";
    static final String DFA83_eofS =
        "\2\uffff\1\13\6\uffff\1\u0084\u0180\uffff";
    static final String DFA83_minS =
        "\1\23\1\56\1\26\6\uffff\1\26\1\23\104\uffff\1\23\104\uffff\3\23"+
        "\2\56\2\166\4\56\1\130\3\56\1\23\1\56\3\23\170\0\2\uffff\10\0\2"+
        "\uffff\10\0\2\uffff\7\0\2\uffff\7\0\2\uffff\102\0";
    static final String DFA83_maxS =
        "\1\u00d0\1\56\1\u00da\6\uffff\1\u00da\1\u00db\104\uffff\1\u00db"+
        "\104\uffff\1\u00db\1\u00d0\1\u00db\1\u00d6\1\u00d4\2\166\1\56\1"+
        "\u00d9\1\56\1\u00d9\1\130\3\u00d9\1\u00db\1\56\3\u00d0\170\0\2\uffff"+
        "\10\0\2\uffff\10\0\2\uffff\7\0\2\uffff\7\0\2\uffff\102\0";
    static final String DFA83_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\104\uffff\104\2\u008c"+
        "\uffff\1\1\11\uffff\1\1\11\uffff\1\1\10\uffff\1\1\10\uffff\1\1\103"+
        "\uffff";
    static final String DFA83_specialS =
        "\1\0\10\uffff\1\1\u0092\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1"+
        "\6\5\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
        "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
        "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
        "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
        "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
        "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
        "\1\133\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145"+
        "\1\146\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160"+
        "\1\161\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173"+
        "\1\174\1\175\1\176\2\uffff\1\177\1\u0080\1\u0081\1\u0082\1\u0083"+
        "\1\u0084\1\u0085\1\u0086\2\uffff\1\u0087\1\u0088\1\u0089\1\u008a"+
        "\1\u008b\1\u008c\1\u008d\1\u008e\2\uffff\1\u008f\1\u0090\1\u0091"+
        "\1\u0092\1\u0093\1\u0094\1\u0095\2\uffff\1\u0096\1\u0097\1\u0098"+
        "\1\u0099\1\u009a\1\u009b\1\u009c\2\uffff\1\u009d\1\u009e\1\u009f"+
        "\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af"+
        "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7"+
        "\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd\1\u00be\1\u00bf"+
        "\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7"+
        "\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd\1\u00ce\1\u00cf"+
        "\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5\1\u00d6\1\u00d7"+
        "\1\u00d8\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00dd\1\u00de}>";
    static final String[] DFA83_transitionS = {
            "\1\6\32\uffff\1\2\22\uffff\1\7\26\uffff\1\4\33\uffff\1\1\4\uffff"+
            "\1\3\32\uffff\1\5\30\uffff\1\10\1\uffff\1\10\21\uffff\1\10\16"+
            "\uffff\1\10",
            "\1\11",
            "\1\13\27\uffff\1\13\20\uffff\1\13\35\uffff\1\13\22\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\12\13\1\uffff"+
            "\4\13\1\uffff\6\13\1\uffff\2\13\2\uffff\10\13\4\uffff\1\13\3"+
            "\uffff\7\13\3\uffff\1\12\3\13\1\uffff\14\13\1\uffff\4\13\1\uffff"+
            "\11\13\1\uffff\7\13\1\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u008a\27\uffff\1\130\20\uffff\1\176\35\uffff\1\175\22\uffff"+
            "\1\u008d\1\uffff\2\u008d\1\123\1\uffff\1\121\1\uffff\1\126\1"+
            "\131\1\uffff\1\132\1\u0093\1\122\1\u0090\1\132\1\u0093\1\122"+
            "\2\120\1\u008d\1\uffff\1\u0092\1\166\2\u008d\1\uffff\6\u008d"+
            "\1\uffff\1\125\1\124\2\uffff\1\174\1\u0080\1\u0086\1\u008f\1"+
            "\u008c\1\u0081\1\u0085\1\u0088\4\uffff\1\u0087\3\uffff\1\152"+
            "\1\u008e\1\154\1\153\1\173\1\133\1\u0089\3\uffff\1\117\1\177"+
            "\1\u0091\1\u008d\1\uffff\1\144\1\140\1\167\1\u0082\1\146\1\170"+
            "\1\u0083\1\156\1\161\1\142\1\157\1\u0089\1\uffff\1\164\1\171"+
            "\1\135\1\160\1\uffff\1\150\1\134\1\136\1\151\1\163\1\137\1\155"+
            "\1\141\1\162\1\uffff\1\u008b\1\143\1\147\1\145\1\165\1\172\1"+
            "\u008d\1\uffff\1\u008d\1\127",
            "\1\u00a0\32\uffff\1\u009c\22\uffff\1\u00a1\26\uffff\1\u009e"+
            "\26\uffff\1\u00a5\4\uffff\1\u009b\1\uffff\1\u0096\2\uffff\1"+
            "\u009d\2\uffff\1\u00a7\2\uffff\1\u0095\1\u00a7\23\uffff\1\u009f"+
            "\1\u0094\14\uffff\1\u009a\2\uffff\1\u0099\4\uffff\1\u00a4\2"+
            "\uffff\1\u00a2\1\uffff\1\u00a2\1\u00a3\2\uffff\1\u0097\1\u0098"+
            "\14\uffff\1\u00a2\16\uffff\1\u00a2\12\uffff\1\u00a6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b4\32\uffff\1\u00b0\22\uffff\1\u00b5\26\uffff\1\u00b2"+
            "\26\uffff\1\u00b9\4\uffff\1\u00af\1\uffff\1\u00aa\2\uffff\1"+
            "\u00b1\2\uffff\1\u00bb\2\uffff\1\u00a9\1\u00bb\23\uffff\1\u00b3"+
            "\1\u00a8\14\uffff\1\u00ae\2\uffff\1\u00ad\4\uffff\1\u00b8\2"+
            "\uffff\1\u00b6\1\uffff\1\u00b6\1\u00b7\2\uffff\1\u00ab\1\u00ac"+
            "\14\uffff\1\u00b6\16\uffff\1\u00b6\12\uffff\1\u00ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00c7\32\uffff\1\u00c3\22\uffff\1\u00c8\26\uffff\1\u00c5"+
            "\26\uffff\1\u00cc\4\uffff\1\u00c2\1\uffff\1\u00bd\2\uffff\1"+
            "\u00c4\2\uffff\1\u00ce\2\uffff\1\u00bc\1\u00ce\23\uffff\1\u00c6"+
            "\15\uffff\1\u00c1\2\uffff\1\u00c0\4\uffff\1\u00cb\2\uffff\1"+
            "\u00c9\1\uffff\1\u00c9\1\u00ca\2\uffff\1\u00be\1\u00bf\14\uffff"+
            "\1\u00c9\16\uffff\1\u00c9\12\uffff\1\u00cd",
            "\1\u00d9\32\uffff\1\u00d5\22\uffff\1\u00da\26\uffff\1\u00d7"+
            "\33\uffff\1\u00d4\1\uffff\1\u00cf\2\uffff\1\u00d6\32\uffff\1"+
            "\u00d8\15\uffff\1\u00d3\2\uffff\1\u00d2\4\uffff\1\u00dd\2\uffff"+
            "\1\u00db\1\uffff\1\u00db\1\u00dc\2\uffff\1\u00d0\1\u00d1\14"+
            "\uffff\1\u00db\16\uffff\1\u00db",
            "\1\u00f9\32\uffff\1\u00eb\22\uffff\1\u00fa\26\uffff\1\u00f7"+
            "\26\uffff\1\u00fe\4\uffff\1\u00f5\1\uffff\1\u00e0\2\uffff\1"+
            "\u00f6\2\uffff\1\u0100\2\uffff\1\u00f0\1\u0100\23\uffff\1\u00f8"+
            "\1\u00ef\14\uffff\1\u00f4\2\uffff\1\u00f3\4\uffff\1\u00fd\1"+
            "\u00e7\1\uffff\1\u00fb\1\uffff\1\u00fb\1\u00fc\2\uffff\1\u00f1"+
            "\1\u00f2\1\u00e1\1\u00de\2\uffff\1\u00e3\4\uffff\1\u00ee\2\uffff"+
            "\1\u00fb\2\uffff\1\u00df\2\uffff\1\u00e5\1\u00e8\1\u00e9\1\u00e6"+
            "\1\uffff\1\u00ea\1\uffff\1\u00ec\1\uffff\1\u00fb\1\uffff\1\u00ed"+
            "\1\u00e4\1\u00e2\6\uffff\1\u00ff",
            "\1\u0102\u00a7\uffff\1\u0101",
            "\1\u0110\107\uffff\1\u0105\1\uffff\1\u0114\62\uffff\1\u010c"+
            "\11\uffff\1\u0106\1\u0103\2\uffff\1\u0108\4\uffff\1\u0113\5"+
            "\uffff\1\u0104\2\uffff\1\u010a\1\u010d\1\u010e\1\u010b\1\uffff"+
            "\1\u010f\1\uffff\1\u0111\3\uffff\1\u0112\1\u0109\1\u0107",
            "\1\u0115",
            "\1\u0116",
            "\1\u0117",
            "\1\13\101\uffff\1\u011d\1\uffff\3\u011d\1\uffff\1\u011a\2\uffff"+
            "\1\u011d\1\uffff\1\u011d\1\u011c\1\u011b\1\uffff\1\u011d\1\u011c"+
            "\1\u011b\2\u0119\1\u011d\3\uffff\2\u011d\1\uffff\6\u011d\1\uffff"+
            "\1\u011f\1\u011e\34\uffff\1\u0118\1\uffff\1\u0120\1\u011d\43"+
            "\uffff\1\u011d\1\uffff\1\u011d",
            "\1\u0122",
            "\1\13\101\uffff\1\u0127\1\uffff\3\u0127\1\uffff\1\u0124\2\uffff"+
            "\1\u0127\1\uffff\1\u0127\1\u0126\1\u0125\1\uffff\1\u0127\1\u0126"+
            "\1\u0125\2\u0123\1\u0127\3\uffff\2\u0127\1\uffff\6\u0127\1\uffff"+
            "\1\u0129\1\u0128\36\uffff\1\u012a\1\u0127\43\uffff\1\u0127\1"+
            "\uffff\1\u0127",
            "\1\u012c",
            "\1\13\101\uffff\1\u0131\1\uffff\3\u0131\1\uffff\1\u012e\2\uffff"+
            "\1\u0131\1\uffff\1\u0131\1\u0130\1\u012f\1\uffff\1\u0131\1\u0130"+
            "\1\u012f\2\u012d\1\u0131\3\uffff\2\u0131\1\uffff\6\u0131\1\uffff"+
            "\1\u0133\1\u0132\36\uffff\1\u0134\1\u0131\43\uffff\1\u0131\1"+
            "\uffff\1\u0131",
            "\1\13\101\uffff\1\u013a\1\uffff\3\u013a\1\uffff\1\u0137\2\uffff"+
            "\1\u013a\1\uffff\1\u013a\1\u0139\1\u0138\1\uffff\1\u013a\1\u0139"+
            "\1\u0138\2\u0136\1\u013a\3\uffff\2\u013a\1\uffff\6\u013a\1\uffff"+
            "\1\u013c\1\u013b\36\uffff\1\u013d\1\u013a\43\uffff\1\u013a\1"+
            "\uffff\1\u013a",
            "\1\13\101\uffff\1\u0143\1\uffff\3\u0143\1\uffff\1\u0140\2\uffff"+
            "\1\u0143\1\uffff\1\u0143\1\u0142\1\u0141\1\uffff\1\u0143\1\u0142"+
            "\1\u0141\2\u013f\1\u0143\3\uffff\2\u0143\1\uffff\6\u0143\1\uffff"+
            "\1\u0145\1\u0144\36\uffff\1\u0146\1\u0143\43\uffff\1\u0143\1"+
            "\uffff\1\u0143",
            "\1\u0154\32\uffff\1\u0150\22\uffff\1\u0155\26\uffff\1\u0152"+
            "\26\uffff\1\u0159\4\uffff\1\u014f\1\uffff\1\u014a\2\uffff\1"+
            "\u0151\2\uffff\1\u015b\2\uffff\1\u0149\1\u015b\23\uffff\1\u0153"+
            "\1\u0148\14\uffff\1\u014e\2\uffff\1\u014d\4\uffff\1\u0158\2"+
            "\uffff\1\u0156\1\uffff\1\u0156\1\u0157\2\uffff\1\u014b\1\u014c"+
            "\14\uffff\1\u0156\16\uffff\1\u0156\12\uffff\1\u015a",
            "\1\u015c",
            "\1\u0167\32\uffff\1\u0163\22\uffff\1\u0168\26\uffff\1\u0165"+
            "\33\uffff\1\u0162\1\uffff\1\u015d\2\uffff\1\u0164\32\uffff\1"+
            "\u0166\15\uffff\1\u0161\2\uffff\1\u0160\4\uffff\1\u016b\2\uffff"+
            "\1\u0169\1\uffff\1\u0169\1\u016a\2\uffff\1\u015e\1\u015f\14"+
            "\uffff\1\u0169\16\uffff\1\u0169",
            "\1\u0176\32\uffff\1\u0172\22\uffff\1\u0177\26\uffff\1\u0174"+
            "\33\uffff\1\u0171\1\uffff\1\u016c\2\uffff\1\u0173\32\uffff\1"+
            "\u0175\15\uffff\1\u0170\2\uffff\1\u016f\4\uffff\1\u017a\2\uffff"+
            "\1\u0178\1\uffff\1\u0178\1\u0179\2\uffff\1\u016d\1\u016e\14"+
            "\uffff\1\u0178\16\uffff\1\u0178",
            "\1\u0185\32\uffff\1\u0181\22\uffff\1\u0186\26\uffff\1\u0183"+
            "\33\uffff\1\u0180\1\uffff\1\u017b\2\uffff\1\u0182\32\uffff\1"+
            "\u0184\15\uffff\1\u017f\2\uffff\1\u017e\4\uffff\1\u0189\2\uffff"+
            "\1\u0187\1\uffff\1\u0187\1\u0188\2\uffff\1\u017c\1\u017d\14"+
            "\uffff\1\u0187\16\uffff\1\u0187",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "546:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | C_LIT -> ^( CHAR C_LIT ) | NR_LIT -> ^( NUMBER NR_LIT ) | bool -> ^( BOOL bool ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA83_0 = input.LA(1);

                         
                        int index83_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA83_0==116) ) {s = 1;}

                        else if ( (LA83_0==ID) ) {s = 2;}

                        else if ( (LA83_0==121) && (synpred18_Objc())) {s = 3;}

                        else if ( (LA83_0==STR_LIT) ) {s = 4;}

                        else if ( (LA83_0==148) ) {s = 5;}

                        else if ( (LA83_0==C_LIT) ) {s = 6;}

                        else if ( (LA83_0==NR_LIT) ) {s = 7;}

                        else if ( (LA83_0==173||LA83_0==175||LA83_0==193||LA83_0==208) ) {s = 8;}

                         
                        input.seek(index83_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA83_9 = input.LA(1);

                         
                        int index83_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA83_9==176) ) {s = 79;}

                        else if ( ((LA83_9 >= 130 && LA83_9 <= 131)) && (synpred18_Objc())) {s = 80;}

                        else if ( (LA83_9==118) && (synpred18_Objc())) {s = 81;}

                        else if ( (LA83_9==125||LA83_9==129) && (synpred18_Objc())) {s = 82;}

                        else if ( (LA83_9==116) && (synpred18_Objc())) {s = 83;}

                        else if ( (LA83_9==147) && (synpred18_Objc())) {s = 84;}

                        else if ( (LA83_9==146) && (synpred18_Objc())) {s = 85;}

                        else if ( (LA83_9==120) && (synpred18_Objc())) {s = 86;}

                        else if ( (LA83_9==218) && (synpred18_Objc())) {s = 87;}

                        else if ( (LA83_9==ID) && (synpred18_Objc())) {s = 88;}

                        else if ( (LA83_9==121) && (synpred18_Objc())) {s = 89;}

                        else if ( (LA83_9==123||LA83_9==127) && (synpred18_Objc())) {s = 90;}

                        else if ( (LA83_9==171) && (synpred18_Objc())) {s = 91;}

                        else if ( (LA83_9==200) && (synpred18_Objc())) {s = 92;}

                        else if ( (LA83_9==196) && (synpred18_Objc())) {s = 93;}

                        else if ( (LA83_9==201) && (synpred18_Objc())) {s = 94;}

                        else if ( (LA83_9==204) && (synpred18_Objc())) {s = 95;}

                        else if ( (LA83_9==182) && (synpred18_Objc())) {s = 96;}

                        else if ( (LA83_9==206) && (synpred18_Objc())) {s = 97;}

                        else if ( (LA83_9==190) && (synpred18_Objc())) {s = 98;}

                        else if ( (LA83_9==210) && (synpred18_Objc())) {s = 99;}

                        else if ( (LA83_9==181) && (synpred18_Objc())) {s = 100;}

                        else if ( (LA83_9==212) && (synpred18_Objc())) {s = 101;}

                        else if ( (LA83_9==185) && (synpred18_Objc())) {s = 102;}

                        else if ( (LA83_9==211) && (synpred18_Objc())) {s = 103;}

                        else if ( (LA83_9==199) && (synpred18_Objc())) {s = 104;}

                        else if ( (LA83_9==202) && (synpred18_Objc())) {s = 105;}

                        else if ( (LA83_9==166) && (synpred18_Objc())) {s = 106;}

                        else if ( (LA83_9==169) && (synpred18_Objc())) {s = 107;}

                        else if ( (LA83_9==168) && (synpred18_Objc())) {s = 108;}

                        else if ( (LA83_9==205) && (synpred18_Objc())) {s = 109;}

                        else if ( (LA83_9==188) && (synpred18_Objc())) {s = 110;}

                        else if ( (LA83_9==191) && (synpred18_Objc())) {s = 111;}

                        else if ( (LA83_9==197) && (synpred18_Objc())) {s = 112;}

                        else if ( (LA83_9==189) && (synpred18_Objc())) {s = 113;}

                        else if ( (LA83_9==207) && (synpred18_Objc())) {s = 114;}

                        else if ( (LA83_9==203) && (synpred18_Objc())) {s = 115;}

                        else if ( (LA83_9==194) && (synpred18_Objc())) {s = 116;}

                        else if ( (LA83_9==213) && (synpred18_Objc())) {s = 117;}

                        else if ( (LA83_9==135) && (synpred18_Objc())) {s = 118;}

                        else if ( (LA83_9==183) && (synpred18_Objc())) {s = 119;}

                        else if ( (LA83_9==186) && (synpred18_Objc())) {s = 120;}

                        else if ( (LA83_9==195) && (synpred18_Objc())) {s = 121;}

                        else if ( (LA83_9==214) && (synpred18_Objc())) {s = 122;}

                        else if ( (LA83_9==170) && (synpred18_Objc())) {s = 123;}

                        else if ( (LA83_9==150) && (synpred18_Objc())) {s = 124;}

                        else if ( (LA83_9==S_C_LIT) && (synpred18_Objc())) {s = 125;}

                        else if ( (LA83_9==M_C_LIT) && (synpred18_Objc())) {s = 126;}

                        else if ( (LA83_9==177) && (synpred18_Objc())) {s = 127;}

                        else if ( (LA83_9==151) && (synpred18_Objc())) {s = 128;}

                        else if ( (LA83_9==155) && (synpred18_Objc())) {s = 129;}

                        else if ( (LA83_9==184) && (synpred18_Objc())) {s = 130;}

                        else if ( (LA83_9==187) && (synpred18_Objc())) {s = 131;}

                        else if ( (LA83_9==EOF) && (synpred18_Objc())) {s = 132;}

                        else if ( (LA83_9==156) && (synpred18_Objc())) {s = 133;}

                        else if ( (LA83_9==152) && (synpred18_Objc())) {s = 134;}

                        else if ( (LA83_9==162) && (synpred18_Objc())) {s = 135;}

                        else if ( (LA83_9==157) && (synpred18_Objc())) {s = 136;}

                        else if ( (LA83_9==172||LA83_9==192) && (synpred18_Objc())) {s = 137;}

                        else if ( (LA83_9==DEFINE_LITERAL) && (synpred18_Objc())) {s = 138;}

                        else if ( (LA83_9==209) && (synpred18_Objc())) {s = 139;}

                        else if ( (LA83_9==154) && (synpred18_Objc())) {s = 140;}

                        else if ( (LA83_9==112||(LA83_9 >= 114 && LA83_9 <= 115)||LA83_9==132||(LA83_9 >= 136 && LA83_9 <= 137)||(LA83_9 >= 139 && LA83_9 <= 144)||LA83_9==179||LA83_9==215||LA83_9==217) && (synpred18_Objc())) {s = 141;}

                        else if ( (LA83_9==167) && (synpred18_Objc())) {s = 142;}

                        else if ( (LA83_9==153) && (synpred18_Objc())) {s = 143;}

                        else if ( (LA83_9==126) && (synpred18_Objc())) {s = 144;}

                        else if ( (LA83_9==178) && (synpred18_Objc())) {s = 145;}

                        else if ( (LA83_9==134) && (synpred18_Objc())) {s = 146;}

                        else if ( (LA83_9==124||LA83_9==128) && (synpred18_Objc())) {s = 147;}

                         
                        input.seek(index83_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA83_156 = input.LA(1);

                         
                        int index83_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA83_156==176) ) {s = 280;}

                        else if ( ((LA83_156 >= 130 && LA83_156 <= 131)) ) {s = 281;}

                        else if ( (LA83_156==118) ) {s = 282;}

                        else if ( (LA83_156==125||LA83_156==129) ) {s = 283;}

                        else if ( (LA83_156==124||LA83_156==128) ) {s = 284;}

                        else if ( (LA83_156==112||(LA83_156 >= 114 && LA83_156 <= 116)||LA83_156==121||LA83_156==123||LA83_156==127||LA83_156==132||(LA83_156 >= 136 && LA83_156 <= 137)||(LA83_156 >= 139 && LA83_156 <= 144)||LA83_156==179||LA83_156==215||LA83_156==217) ) {s = 285;}

                        else if ( (LA83_156==147) ) {s = 286;}

                        else if ( (LA83_156==146) ) {s = 287;}

                        else if ( (LA83_156==178) && (synpred17_Objc())) {s = 288;}

                        else if ( (LA83_156==ID) ) {s = 11;}

                         
                        input.seek(index83_156);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA83_158 = input.LA(1);

                         
                        int index83_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA83_158 >= 130 && LA83_158 <= 131)) ) {s = 291;}

                        else if ( (LA83_158==118) ) {s = 292;}

                        else if ( (LA83_158==125||LA83_158==129) ) {s = 293;}

                        else if ( (LA83_158==124||LA83_158==128) ) {s = 294;}

                        else if ( (LA83_158==112||(LA83_158 >= 114 && LA83_158 <= 116)||LA83_158==121||LA83_158==123||LA83_158==127||LA83_158==132||(LA83_158 >= 136 && LA83_158 <= 137)||(LA83_158 >= 139 && LA83_158 <= 144)||LA83_158==179||LA83_158==215||LA83_158==217) ) {s = 295;}

                        else if ( (LA83_158==147) ) {s = 296;}

                        else if ( (LA83_158==146) ) {s = 297;}

                        else if ( (LA83_158==178) && (synpred17_Objc())) {s = 298;}

                        else if ( (LA83_158==ID) ) {s = 11;}

                         
                        input.seek(index83_158);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA83_160 = input.LA(1);

                         
                        int index83_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA83_160 >= 130 && LA83_160 <= 131)) ) {s = 301;}

                        else if ( (LA83_160==118) ) {s = 302;}

                        else if ( (LA83_160==125||LA83_160==129) ) {s = 303;}

                        else if ( (LA83_160==124||LA83_160==128) ) {s = 304;}

                        else if ( (LA83_160==112||(LA83_160 >= 114 && LA83_160 <= 116)||LA83_160==121||LA83_160==123||LA83_160==127||LA83_160==132||(LA83_160 >= 136 && LA83_160 <= 137)||(LA83_160 >= 139 && LA83_160 <= 144)||LA83_160==179||LA83_160==215||LA83_160==217) ) {s = 305;}

                        else if ( (LA83_160==147) ) {s = 306;}

                        else if ( (LA83_160==146) ) {s = 307;}

                        else if ( (LA83_160==178) && (synpred17_Objc())) {s = 308;}

                        else if ( (LA83_160==ID) ) {s = 11;}

                         
                        input.seek(index83_160);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA83_161 = input.LA(1);

                         
                        int index83_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA83_161 >= 130 && LA83_161 <= 131)) ) {s = 310;}

                        else if ( (LA83_161==118) ) {s = 311;}

                        else if ( (LA83_161==125||LA83_161==129) ) {s = 312;}

                        else if ( (LA83_161==124||LA83_161==128) ) {s = 313;}

                        else if ( (LA83_161==112||(LA83_161 >= 114 && LA83_161 <= 116)||LA83_161==121||LA83_161==123||LA83_161==127||LA83_161==132||(LA83_161 >= 136 && LA83_161 <= 137)||(LA83_161 >= 139 && LA83_161 <= 144)||LA83_161==179||LA83_161==215||LA83_161==217) ) {s = 314;}

                        else if ( (LA83_161==147) ) {s = 315;}

                        else if ( (LA83_161==146) ) {s = 316;}

                        else if ( (LA83_161==178) && (synpred17_Objc())) {s = 317;}

                        else if ( (LA83_161==ID) ) {s = 11;}

                         
                        input.seek(index83_161);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA83_162 = input.LA(1);

                         
                        int index83_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA83_162 >= 130 && LA83_162 <= 131)) ) {s = 319;}

                        else if ( (LA83_162==118) ) {s = 320;}

                        else if ( (LA83_162==125||LA83_162==129) ) {s = 321;}

                        else if ( (LA83_162==124||LA83_162==128) ) {s = 322;}

                        else if ( (LA83_162==112||(LA83_162 >= 114 && LA83_162 <= 116)||LA83_162==121||LA83_162==123||LA83_162==127||LA83_162==132||(LA83_162 >= 136 && LA83_162 <= 137)||(LA83_162 >= 139 && LA83_162 <= 144)||LA83_162==179||LA83_162==215||LA83_162==217) ) {s = 323;}

                        else if ( (LA83_162==147) ) {s = 324;}

                        else if ( (LA83_162==146) ) {s = 325;}

                        else if ( (LA83_162==178) && (synpred17_Objc())) {s = 326;}

                        else if ( (LA83_162==ID) ) {s = 11;}

                         
                        input.seek(index83_162);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA83_168 = input.LA(1);

                         
                        int index83_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_168);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA83_169 = input.LA(1);

                         
                        int index83_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_169);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA83_170 = input.LA(1);

                         
                        int index83_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_170);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA83_171 = input.LA(1);

                         
                        int index83_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_171);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA83_172 = input.LA(1);

                         
                        int index83_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_172);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA83_173 = input.LA(1);

                         
                        int index83_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_173);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA83_174 = input.LA(1);

                         
                        int index83_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_174);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA83_175 = input.LA(1);

                         
                        int index83_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_175);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA83_176 = input.LA(1);

                         
                        int index83_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_176);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA83_177 = input.LA(1);

                         
                        int index83_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_177);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA83_178 = input.LA(1);

                         
                        int index83_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_178);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA83_179 = input.LA(1);

                         
                        int index83_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_179);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA83_180 = input.LA(1);

                         
                        int index83_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_180);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA83_181 = input.LA(1);

                         
                        int index83_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_181);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA83_182 = input.LA(1);

                         
                        int index83_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_182);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA83_183 = input.LA(1);

                         
                        int index83_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_183);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA83_184 = input.LA(1);

                         
                        int index83_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_184);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA83_185 = input.LA(1);

                         
                        int index83_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_185);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA83_186 = input.LA(1);

                         
                        int index83_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_186);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA83_187 = input.LA(1);

                         
                        int index83_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (synpred18_Objc()) ) {s = 147;}

                         
                        input.seek(index83_187);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA83_188 = input.LA(1);

                         
                        int index83_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_188);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA83_189 = input.LA(1);

                         
                        int index83_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_189);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA83_190 = input.LA(1);

                         
                        int index83_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_190);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA83_191 = input.LA(1);

                         
                        int index83_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_191);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA83_192 = input.LA(1);

                         
                        int index83_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_192);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA83_193 = input.LA(1);

                         
                        int index83_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_193);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA83_194 = input.LA(1);

                         
                        int index83_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_194);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA83_195 = input.LA(1);

                         
                        int index83_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_195);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA83_196 = input.LA(1);

                         
                        int index83_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_196);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA83_197 = input.LA(1);

                         
                        int index83_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_197);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA83_198 = input.LA(1);

                         
                        int index83_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_198);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA83_199 = input.LA(1);

                         
                        int index83_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_199);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA83_200 = input.LA(1);

                         
                        int index83_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_200);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA83_201 = input.LA(1);

                         
                        int index83_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_201);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA83_202 = input.LA(1);

                         
                        int index83_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_202);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA83_203 = input.LA(1);

                         
                        int index83_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_203);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA83_204 = input.LA(1);

                         
                        int index83_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_204);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA83_205 = input.LA(1);

                         
                        int index83_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_205);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA83_206 = input.LA(1);

                         
                        int index83_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_206);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA83_207 = input.LA(1);

                         
                        int index83_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_207);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA83_208 = input.LA(1);

                         
                        int index83_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_208);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA83_209 = input.LA(1);

                         
                        int index83_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_209);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA83_210 = input.LA(1);

                         
                        int index83_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_210);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA83_211 = input.LA(1);

                         
                        int index83_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_211);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA83_212 = input.LA(1);

                         
                        int index83_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_212);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA83_213 = input.LA(1);

                         
                        int index83_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_213);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA83_214 = input.LA(1);

                         
                        int index83_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_214);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA83_215 = input.LA(1);

                         
                        int index83_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_215);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA83_216 = input.LA(1);

                         
                        int index83_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_216);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA83_217 = input.LA(1);

                         
                        int index83_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_217);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA83_218 = input.LA(1);

                         
                        int index83_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_218);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA83_219 = input.LA(1);

                         
                        int index83_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_219);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA83_220 = input.LA(1);

                         
                        int index83_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_220);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA83_221 = input.LA(1);

                         
                        int index83_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_221);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA83_222 = input.LA(1);

                         
                        int index83_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_222);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA83_223 = input.LA(1);

                         
                        int index83_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_223);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA83_224 = input.LA(1);

                         
                        int index83_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_224);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA83_225 = input.LA(1);

                         
                        int index83_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_225);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA83_226 = input.LA(1);

                         
                        int index83_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_226);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA83_227 = input.LA(1);

                         
                        int index83_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_227);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA83_228 = input.LA(1);

                         
                        int index83_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_228);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA83_229 = input.LA(1);

                         
                        int index83_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_229);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA83_230 = input.LA(1);

                         
                        int index83_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_230);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA83_231 = input.LA(1);

                         
                        int index83_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_231);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA83_232 = input.LA(1);

                         
                        int index83_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_232);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA83_233 = input.LA(1);

                         
                        int index83_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_233);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA83_234 = input.LA(1);

                         
                        int index83_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_234);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA83_235 = input.LA(1);

                         
                        int index83_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_235);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA83_236 = input.LA(1);

                         
                        int index83_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_236);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA83_237 = input.LA(1);

                         
                        int index83_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_237);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA83_238 = input.LA(1);

                         
                        int index83_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_238);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA83_239 = input.LA(1);

                         
                        int index83_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_239);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA83_240 = input.LA(1);

                         
                        int index83_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_240);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA83_241 = input.LA(1);

                         
                        int index83_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_241);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA83_242 = input.LA(1);

                         
                        int index83_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_242);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA83_243 = input.LA(1);

                         
                        int index83_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_243);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA83_244 = input.LA(1);

                         
                        int index83_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_244);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA83_245 = input.LA(1);

                         
                        int index83_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_245);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA83_246 = input.LA(1);

                         
                        int index83_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_246);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA83_247 = input.LA(1);

                         
                        int index83_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_247);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA83_248 = input.LA(1);

                         
                        int index83_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_248);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA83_249 = input.LA(1);

                         
                        int index83_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_249);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA83_250 = input.LA(1);

                         
                        int index83_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_250);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA83_251 = input.LA(1);

                         
                        int index83_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_251);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA83_252 = input.LA(1);

                         
                        int index83_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_252);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA83_253 = input.LA(1);

                         
                        int index83_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_253);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA83_254 = input.LA(1);

                         
                        int index83_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_254);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA83_255 = input.LA(1);

                         
                        int index83_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_255);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA83_256 = input.LA(1);

                         
                        int index83_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_256);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA83_257 = input.LA(1);

                         
                        int index83_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_257);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA83_258 = input.LA(1);

                         
                        int index83_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_258);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA83_259 = input.LA(1);

                         
                        int index83_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_259);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA83_260 = input.LA(1);

                         
                        int index83_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_260);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA83_261 = input.LA(1);

                         
                        int index83_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_261);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA83_262 = input.LA(1);

                         
                        int index83_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_262);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA83_263 = input.LA(1);

                         
                        int index83_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_263);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA83_264 = input.LA(1);

                         
                        int index83_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_264);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA83_265 = input.LA(1);

                         
                        int index83_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_265);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA83_266 = input.LA(1);

                         
                        int index83_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_266);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA83_267 = input.LA(1);

                         
                        int index83_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_267);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA83_268 = input.LA(1);

                         
                        int index83_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_268);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA83_269 = input.LA(1);

                         
                        int index83_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_269);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA83_270 = input.LA(1);

                         
                        int index83_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_270);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA83_271 = input.LA(1);

                         
                        int index83_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_271);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA83_272 = input.LA(1);

                         
                        int index83_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_272);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA83_273 = input.LA(1);

                         
                        int index83_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_273);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA83_274 = input.LA(1);

                         
                        int index83_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_274);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA83_275 = input.LA(1);

                         
                        int index83_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_275);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA83_276 = input.LA(1);

                         
                        int index83_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_276);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA83_277 = input.LA(1);

                         
                        int index83_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_277);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA83_278 = input.LA(1);

                         
                        int index83_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_278);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA83_279 = input.LA(1);

                         
                        int index83_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_279);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA83_280 = input.LA(1);

                         
                        int index83_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_280);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA83_281 = input.LA(1);

                         
                        int index83_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_281);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA83_282 = input.LA(1);

                         
                        int index83_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_282);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA83_283 = input.LA(1);

                         
                        int index83_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_283);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA83_284 = input.LA(1);

                         
                        int index83_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_284);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA83_285 = input.LA(1);

                         
                        int index83_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_285);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA83_286 = input.LA(1);

                         
                        int index83_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_286);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA83_287 = input.LA(1);

                         
                        int index83_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_287);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA83_290 = input.LA(1);

                         
                        int index83_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_290);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA83_291 = input.LA(1);

                         
                        int index83_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_291);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA83_292 = input.LA(1);

                         
                        int index83_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_292);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA83_293 = input.LA(1);

                         
                        int index83_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_293);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA83_294 = input.LA(1);

                         
                        int index83_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_294);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA83_295 = input.LA(1);

                         
                        int index83_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_295);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA83_296 = input.LA(1);

                         
                        int index83_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_296);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA83_297 = input.LA(1);

                         
                        int index83_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_297);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA83_300 = input.LA(1);

                         
                        int index83_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_300);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA83_301 = input.LA(1);

                         
                        int index83_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_301);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA83_302 = input.LA(1);

                         
                        int index83_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_302);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA83_303 = input.LA(1);

                         
                        int index83_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_303);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA83_304 = input.LA(1);

                         
                        int index83_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_304);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA83_305 = input.LA(1);

                         
                        int index83_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_305);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA83_306 = input.LA(1);

                         
                        int index83_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_306);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA83_307 = input.LA(1);

                         
                        int index83_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_307);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA83_310 = input.LA(1);

                         
                        int index83_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_310);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA83_311 = input.LA(1);

                         
                        int index83_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_311);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA83_312 = input.LA(1);

                         
                        int index83_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_312);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA83_313 = input.LA(1);

                         
                        int index83_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_313);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA83_314 = input.LA(1);

                         
                        int index83_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_314);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA83_315 = input.LA(1);

                         
                        int index83_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_315);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA83_316 = input.LA(1);

                         
                        int index83_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_316);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA83_319 = input.LA(1);

                         
                        int index83_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_319);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA83_320 = input.LA(1);

                         
                        int index83_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_320);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA83_321 = input.LA(1);

                         
                        int index83_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_321);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA83_322 = input.LA(1);

                         
                        int index83_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_322);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA83_323 = input.LA(1);

                         
                        int index83_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_323);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA83_324 = input.LA(1);

                         
                        int index83_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_324);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA83_325 = input.LA(1);

                         
                        int index83_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_325);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA83_328 = input.LA(1);

                         
                        int index83_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_328);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA83_329 = input.LA(1);

                         
                        int index83_329 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_329);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA83_330 = input.LA(1);

                         
                        int index83_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_330);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA83_331 = input.LA(1);

                         
                        int index83_331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_331);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA83_332 = input.LA(1);

                         
                        int index83_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_332);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA83_333 = input.LA(1);

                         
                        int index83_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_333);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA83_334 = input.LA(1);

                         
                        int index83_334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_334);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA83_335 = input.LA(1);

                         
                        int index83_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_335);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA83_336 = input.LA(1);

                         
                        int index83_336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_336);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA83_337 = input.LA(1);

                         
                        int index83_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_337);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA83_338 = input.LA(1);

                         
                        int index83_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_338);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA83_339 = input.LA(1);

                         
                        int index83_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_339);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA83_340 = input.LA(1);

                         
                        int index83_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_340);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA83_341 = input.LA(1);

                         
                        int index83_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_341);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA83_342 = input.LA(1);

                         
                        int index83_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_342);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA83_343 = input.LA(1);

                         
                        int index83_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_343);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA83_344 = input.LA(1);

                         
                        int index83_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_344);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA83_345 = input.LA(1);

                         
                        int index83_345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_345);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA83_346 = input.LA(1);

                         
                        int index83_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_346);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA83_347 = input.LA(1);

                         
                        int index83_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_347);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA83_348 = input.LA(1);

                         
                        int index83_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_348);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA83_349 = input.LA(1);

                         
                        int index83_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_349);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA83_350 = input.LA(1);

                         
                        int index83_350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_350);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA83_351 = input.LA(1);

                         
                        int index83_351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_351);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA83_352 = input.LA(1);

                         
                        int index83_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_352);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA83_353 = input.LA(1);

                         
                        int index83_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_353);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA83_354 = input.LA(1);

                         
                        int index83_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_354);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA83_355 = input.LA(1);

                         
                        int index83_355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_355);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA83_356 = input.LA(1);

                         
                        int index83_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_356);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA83_357 = input.LA(1);

                         
                        int index83_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_357);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA83_358 = input.LA(1);

                         
                        int index83_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_358);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA83_359 = input.LA(1);

                         
                        int index83_359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_359);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA83_360 = input.LA(1);

                         
                        int index83_360 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_360);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA83_361 = input.LA(1);

                         
                        int index83_361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_361);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA83_362 = input.LA(1);

                         
                        int index83_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_362);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA83_363 = input.LA(1);

                         
                        int index83_363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_363);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA83_364 = input.LA(1);

                         
                        int index83_364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_364);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA83_365 = input.LA(1);

                         
                        int index83_365 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_365);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA83_366 = input.LA(1);

                         
                        int index83_366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_366);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA83_367 = input.LA(1);

                         
                        int index83_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_367);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA83_368 = input.LA(1);

                         
                        int index83_368 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_368);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA83_369 = input.LA(1);

                         
                        int index83_369 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_369);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA83_370 = input.LA(1);

                         
                        int index83_370 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_370);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA83_371 = input.LA(1);

                         
                        int index83_371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_371);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA83_372 = input.LA(1);

                         
                        int index83_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_372);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA83_373 = input.LA(1);

                         
                        int index83_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_373);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA83_374 = input.LA(1);

                         
                        int index83_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_374);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA83_375 = input.LA(1);

                         
                        int index83_375 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_375);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA83_376 = input.LA(1);

                         
                        int index83_376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_376);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA83_377 = input.LA(1);

                         
                        int index83_377 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_377);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA83_378 = input.LA(1);

                         
                        int index83_378 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_378);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA83_379 = input.LA(1);

                         
                        int index83_379 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_379);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA83_380 = input.LA(1);

                         
                        int index83_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_380);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA83_381 = input.LA(1);

                         
                        int index83_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_381);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA83_382 = input.LA(1);

                         
                        int index83_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_382);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA83_383 = input.LA(1);

                         
                        int index83_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_383);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA83_384 = input.LA(1);

                         
                        int index83_384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_384);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA83_385 = input.LA(1);

                         
                        int index83_385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_385);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA83_386 = input.LA(1);

                         
                        int index83_386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_386);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA83_387 = input.LA(1);

                         
                        int index83_387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_387);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA83_388 = input.LA(1);

                         
                        int index83_388 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_388);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA83_389 = input.LA(1);

                         
                        int index83_389 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_389);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA83_390 = input.LA(1);

                         
                        int index83_390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_390);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA83_391 = input.LA(1);

                         
                        int index83_391 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_391);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA83_392 = input.LA(1);

                         
                        int index83_392 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_392);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA83_393 = input.LA(1);

                         
                        int index83_393 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred17_Objc()) ) {s = 326;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index83_393);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 83, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA85_eotS =
        "\74\uffff";
    static final String DFA85_eofS =
        "\74\uffff";
    static final String DFA85_minS =
        "\2\56\1\164\17\uffff\1\164\6\uffff\1\56\4\uffff\1\56\4\uffff\1\u008e"+
        "\1\u0088\2\u008e\1\171\1\uffff\5\0\1\uffff\1\0\1\uffff\10\0\1\uffff"+
        "\1\0\1\uffff";
    static final String DFA85_maxS =
        "\1\u00d4\1\u00cc\1\u00b0\17\uffff\1\u00b0\6\uffff\1\u00cc\4\uffff"+
        "\1\u00cc\4\uffff\2\u008e\1\u00c9\1\u00cc\1\u008e\1\uffff\5\0\1\uffff"+
        "\1\0\1\uffff\10\0\1\uffff\1\0\1\uffff";
    static final String DFA85_acceptS =
        "\3\uffff\1\2\67\uffff\1\1";
    static final String DFA85_specialS =
        "\51\uffff\1\0\1\1\1\2\1\3\1\4\1\uffff\1\5\1\uffff\1\6\1\7\1\10\1"+
        "\11\1\12\1\13\1\14\1\15\1\uffff\1\16\1\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\3\107\uffff\1\3\64\uffff\1\3\11\uffff\1\3\1\1\2\uffff\1\3"+
            "\4\uffff\1\3\5\uffff\1\2\2\uffff\4\3\1\uffff\1\3\1\uffff\1\3"+
            "\3\uffff\3\3",
            "\1\3\174\uffff\1\3\30\uffff\1\22\3\uffff\3\3\1\uffff\1\3",
            "\1\3\3\uffff\2\3\16\uffff\1\31\47\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\3\3\uffff\2\3\16\uffff\1\36\47\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\47\131\uffff\1\3\73\uffff\1\44\3\uffff\1\43\1\45\2\uffff"+
            "\1\46",
            "",
            "",
            "",
            "",
            "\1\55\131\uffff\1\3\73\uffff\1\52\3\uffff\1\51\1\53\2\uffff"+
            "\1\54",
            "",
            "",
            "",
            "",
            "\1\57",
            "\1\3\5\uffff\1\61",
            "\1\64\52\uffff\1\63\16\uffff\1\62\1\65",
            "\1\67\71\uffff\1\66\3\uffff\1\70",
            "\1\3\24\uffff\1\72",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "594:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_41 = input.LA(1);

                         
                        int index85_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_41);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA85_42 = input.LA(1);

                         
                        int index85_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_42);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA85_43 = input.LA(1);

                         
                        int index85_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_43);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA85_44 = input.LA(1);

                         
                        int index85_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_44);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA85_45 = input.LA(1);

                         
                        int index85_45 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_45);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA85_47 = input.LA(1);

                         
                        int index85_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_47);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA85_49 = input.LA(1);

                         
                        int index85_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_49);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA85_50 = input.LA(1);

                         
                        int index85_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_50);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA85_51 = input.LA(1);

                         
                        int index85_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_51);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA85_52 = input.LA(1);

                         
                        int index85_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_52);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA85_53 = input.LA(1);

                         
                        int index85_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_53);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA85_54 = input.LA(1);

                         
                        int index85_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_54);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA85_55 = input.LA(1);

                         
                        int index85_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_55);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA85_56 = input.LA(1);

                         
                        int index85_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_56);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA85_58 = input.LA(1);

                         
                        int index85_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 59;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index85_58);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA88_eotS =
        "\114\uffff";
    static final String DFA88_eofS =
        "\56\uffff\1\2\35\uffff";
    static final String DFA88_minS =
        "\2\56\5\uffff\1\56\12\uffff\1\164\31\uffff\1\23\1\uffff\1\56\1\0"+
        "\11\uffff\1\0\22\uffff";
    static final String DFA88_maxS =
        "\1\171\1\u00d4\5\uffff\1\u00d4\12\uffff\1\u00b0\31\uffff\1\u00db"+
        "\1\uffff\1\u00d8\1\0\11\uffff\1\0\22\uffff";
    static final String DFA88_acceptS =
        "\2\uffff\1\3\2\uffff\2\1\1\uffff\12\1\1\uffff\3\1\2\uffff\1\1\21"+
        "\2\2\1\1\uffff\1\1\2\uffff\1\1\23\uffff\4\1\4\uffff";
    static final String DFA88_specialS =
        "\1\uffff\1\0\5\uffff\1\1\12\uffff\1\2\31\uffff\1\3\1\uffff\1\4\1"+
        "\5\11\uffff\1\6\22\uffff}>";
    static final String[] DFA88_transitionS = {
            "\1\2\105\uffff\1\2\1\uffff\1\1\2\uffff\1\2",
            "\1\22\105\uffff\1\2\1\uffff\1\7\2\uffff\1\2\61\uffff\1\16\11"+
            "\uffff\1\10\1\5\2\uffff\1\12\4\uffff\1\25\5\uffff\1\6\2\uffff"+
            "\1\14\1\17\1\20\1\15\1\uffff\1\21\1\uffff\1\23\3\uffff\1\24"+
            "\1\13\1\11",
            "",
            "",
            "",
            "",
            "",
            "\1\46\107\uffff\1\33\2\uffff\1\30\61\uffff\1\42\11\uffff\1"+
            "\34\1\31\2\uffff\1\36\4\uffff\1\51\5\uffff\1\32\2\uffff\1\40"+
            "\1\43\1\44\1\41\1\uffff\1\45\1\uffff\1\47\3\uffff\1\50\1\37"+
            "\1\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\55\3\uffff\1\56\1\53\16\uffff\1\52\47\uffff\1\54",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\32\uffff\1\57\22\uffff\1\71\26\uffff\1\2\26\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\23\uffff\2\2\14\uffff\1\2\2\uffff\1\2\4\uffff\1\2\2\uffff\1"+
            "\2\1\uffff\2\2\1\uffff\1\60\2\2\14\uffff\1\2\16\uffff\1\2\12"+
            "\uffff\1\2",
            "",
            "\1\105\105\uffff\1\104\1\2\1\107\2\uffff\1\106\1\2\1\uffff"+
            "\2\2\2\uffff\4\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff"+
            "\1\2\106\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA88_eot = DFA.unpackEncodedString(DFA88_eotS);
    static final short[] DFA88_eof = DFA.unpackEncodedString(DFA88_eofS);
    static final char[] DFA88_min = DFA.unpackEncodedStringToUnsignedChars(DFA88_minS);
    static final char[] DFA88_max = DFA.unpackEncodedStringToUnsignedChars(DFA88_maxS);
    static final short[] DFA88_accept = DFA.unpackEncodedString(DFA88_acceptS);
    static final short[] DFA88_special = DFA.unpackEncodedString(DFA88_specialS);
    static final short[][] DFA88_transition;

    static {
        int numStates = DFA88_transitionS.length;
        DFA88_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA88_transition[i] = DFA.unpackEncodedString(DFA88_transitionS[i]);
        }
    }

    class DFA88 extends DFA {

        public DFA88(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 88;
            this.eot = DFA88_eot;
            this.eof = DFA88_eof;
            this.min = DFA88_min;
            this.max = DFA88_max;
            this.accept = DFA88_accept;
            this.special = DFA88_special;
            this.transition = DFA88_transition;
        }
        public String getDescription() {
            return "623:1: cast_lvalue : ( ( type_cast_name )=> type_cast_wrapper lvalue_access | ( '(' type_cast_name )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA88_1 = input.LA(1);

                         
                        int index88_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA88_1==182) && (synpred20_Objc())) {s = 5;}

                        else if ( (LA88_1==196) && (synpred20_Objc())) {s = 6;}

                        else if ( (LA88_1==118) ) {s = 7;}

                        else if ( (LA88_1==181) && (synpred20_Objc())) {s = 8;}

                        else if ( (LA88_1==212) && (synpred20_Objc())) {s = 9;}

                        else if ( (LA88_1==185) && (synpred20_Objc())) {s = 10;}

                        else if ( (LA88_1==211) && (synpred20_Objc())) {s = 11;}

                        else if ( (LA88_1==199) && (synpred20_Objc())) {s = 12;}

                        else if ( (LA88_1==202) && (synpred20_Objc())) {s = 13;}

                        else if ( (LA88_1==171) && (synpred20_Objc())) {s = 14;}

                        else if ( (LA88_1==200) && (synpred20_Objc())) {s = 15;}

                        else if ( (LA88_1==201) && (synpred20_Objc())) {s = 16;}

                        else if ( (LA88_1==204) && (synpred20_Objc())) {s = 17;}

                        else if ( (LA88_1==ID) ) {s = 18;}

                        else if ( (LA88_1==206) && (synpred20_Objc())) {s = 19;}

                        else if ( (LA88_1==210) && (synpred20_Objc())) {s = 20;}

                        else if ( (LA88_1==190) && (synpred20_Objc())) {s = 21;}

                        else if ( (LA88_1==116||LA88_1==121) ) {s = 2;}

                         
                        input.seek(index88_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA88_7 = input.LA(1);

                         
                        int index88_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA88_7==121) && (synpred20_Objc())) {s = 24;}

                        else if ( (LA88_7==182) && (synpred21_Objc())) {s = 25;}

                        else if ( (LA88_7==196) && (synpred21_Objc())) {s = 26;}

                        else if ( (LA88_7==118) && (synpred21_Objc())) {s = 27;}

                        else if ( (LA88_7==181) && (synpred21_Objc())) {s = 28;}

                        else if ( (LA88_7==212) && (synpred21_Objc())) {s = 29;}

                        else if ( (LA88_7==185) && (synpred21_Objc())) {s = 30;}

                        else if ( (LA88_7==211) && (synpred21_Objc())) {s = 31;}

                        else if ( (LA88_7==199) && (synpred21_Objc())) {s = 32;}

                        else if ( (LA88_7==202) && (synpred21_Objc())) {s = 33;}

                        else if ( (LA88_7==171) && (synpred21_Objc())) {s = 34;}

                        else if ( (LA88_7==200) && (synpred21_Objc())) {s = 35;}

                        else if ( (LA88_7==201) && (synpred21_Objc())) {s = 36;}

                        else if ( (LA88_7==204) && (synpred21_Objc())) {s = 37;}

                        else if ( (LA88_7==ID) && (synpred21_Objc())) {s = 38;}

                        else if ( (LA88_7==206) && (synpred21_Objc())) {s = 39;}

                        else if ( (LA88_7==210) && (synpred21_Objc())) {s = 40;}

                        else if ( (LA88_7==190) && (synpred21_Objc())) {s = 41;}

                         
                        input.seek(index88_7);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA88_18 = input.LA(1);

                         
                        int index88_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA88_18==136) && (synpred20_Objc())) {s = 42;}

                        else if ( (LA88_18==121) && (synpred20_Objc())) {s = 43;}

                        else if ( (LA88_18==176) ) {s = 44;}

                        else if ( (LA88_18==116) && (synpred20_Objc())) {s = 45;}

                        else if ( (LA88_18==120) ) {s = 46;}

                         
                        input.seek(index88_18);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA88_44 = input.LA(1);

                         
                        int index88_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA88_44==ID) ) {s = 47;}

                        else if ( (LA88_44==178) && (synpred20_Objc())) {s = 48;}

                        else if ( (LA88_44==C_LIT||LA88_44==STR_LIT||LA88_44==111||LA88_44==116||LA88_44==118||LA88_44==121||LA88_44==124||(LA88_44 >= 127 && LA88_44 <= 128)||(LA88_44 >= 148 && LA88_44 <= 149)||LA88_44==162||LA88_44==165||LA88_44==170||LA88_44==173||(LA88_44 >= 175 && LA88_44 <= 176)||(LA88_44 >= 179 && LA88_44 <= 180)||LA88_44==193||LA88_44==208||LA88_44==219) ) {s = 2;}

                        else if ( (LA88_44==NR_LIT) ) {s = 57;}

                         
                        input.seek(index88_44);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA88_46 = input.LA(1);

                         
                        int index88_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA88_46==116) && (synpred20_Objc())) {s = 68;}

                        else if ( (LA88_46==ID) && (synpred20_Objc())) {s = 69;}

                        else if ( (LA88_46==121) && (synpred20_Objc())) {s = 70;}

                        else if ( (LA88_46==118) && (synpred20_Objc())) {s = 71;}

                        else if ( (LA88_46==EOF||LA88_46==117||LA88_46==122||(LA88_46 >= 124 && LA88_46 <= 125)||(LA88_46 >= 128 && LA88_46 <= 131)||LA88_46==133||LA88_46==138||LA88_46==140||LA88_46==145||LA88_46==216) ) {s = 2;}

                         
                        input.seek(index88_46);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA88_47 = input.LA(1);

                         
                        int index88_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred20_Objc()) ) {s = 71;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index88_47);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA88_57 = input.LA(1);

                         
                        int index88_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred20_Objc()) ) {s = 71;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index88_57);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 88, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA102_eotS =
        "\u018b\uffff";
    static final String DFA102_eofS =
        "\u018b\uffff";
    static final String DFA102_minS =
        "\7\56\13\uffff\10\56\2\uffff\3\56\2\uffff\1\56\1\171\3\56\1\uffff"+
        "\1\56\1\uffff\4\56\1\uffff\1\56\1\uffff\3\56\2\uffff\3\56\2\uffff"+
        "\3\56\2\uffff\1\56\1\171\3\56\1\uffff\1\56\1\uffff\4\56\1\uffff"+
        "\1\56\1\uffff\3\56\2\uffff\1\u0088\1\56\1\171\1\uffff\1\56\1\uffff"+
        "\1\56\1\uffff\1\u00b2\1\56\1\u0088\1\56\1\171\1\uffff\1\56\1\uffff"+
        "\1\56\1\uffff\1\u00b2\1\56\1\171\3\56\2\uffff\1\56\1\u0088\1\56"+
        "\1\171\1\uffff\1\56\1\uffff\1\56\1\uffff\1\u00b2\2\56\1\171\3\56"+
        "\1\uffff\1\56\1\uffff\3\56\2\uffff\1\u0088\1\56\1\171\1\uffff\1"+
        "\56\1\uffff\1\56\1\uffff\1\u00b2\5\56\1\uffff\1\56\1\uffff\1\u0088"+
        "\1\56\1\171\1\uffff\1\56\1\uffff\1\56\1\uffff\1\u00b2\1\56\3\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\6\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff\7\0\1\uffff\1\0"+
        "\1\uffff\3\0\2\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff"+
        "\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11\0\1\uffff\1"+
        "\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\7\0\1\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\4\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\5\0\2\uffff\7\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\1\0\2\uffff\4\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\7\0\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11"+
        "\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\3\0\2"+
        "\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff\1\0\1\uffff"+
        "\7\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff";
    static final String DFA102_maxS =
        "\1\u00d4\1\u00cc\2\u00b0\1\u00c9\1\u00cc\1\u00b0\13\uffff\2\u00b0"+
        "\1\u00c9\1\u00cc\1\u00b0\1\u00c4\1\u00b9\1\u00b2\2\uffff\1\u00c4"+
        "\1\u00b9\1\u00b2\2\uffff\1\u00b9\1\171\1\u00c4\1\u00b9\1\u00b2\1"+
        "\uffff\1\u00c9\1\uffff\1\u00b0\1\u00c4\1\u00b9\1\u00b2\1\uffff\1"+
        "\u00cc\1\uffff\1\u00c4\1\u00b9\1\u00b2\2\uffff\1\u00c4\1\u00b9\1"+
        "\u00b2\2\uffff\1\u00c4\1\u00b9\1\u00b2\2\uffff\1\u00b9\1\171\1\u00c4"+
        "\1\u00b9\1\u00b2\1\uffff\1\u00c9\1\uffff\1\u00b0\1\u00c4\1\u00b9"+
        "\1\u00b2\1\uffff\1\u00cc\1\uffff\1\u00c4\1\u00b9\1\u00b2\2\uffff"+
        "\1\u0088\1\u00c4\1\171\1\uffff\1\u00b2\1\uffff\1\u00b9\1\uffff\1"+
        "\u00b2\1\u00b0\1\u0088\1\u00c4\1\171\1\uffff\1\u00b2\1\uffff\1\u00b9"+
        "\1\uffff\1\u00b2\1\u00b0\1\171\1\u00c4\1\u00b9\1\u00b2\2\uffff\1"+
        "\u00b0\1\u0088\1\u00c4\1\171\1\uffff\1\u00b2\1\uffff\1\u00b9\1\uffff"+
        "\1\u00b2\1\u00b0\1\u00b9\1\171\1\u00c4\1\u00b9\1\u00b2\1\uffff\1"+
        "\u00c9\1\uffff\1\u00c4\1\u00b9\1\u00b2\2\uffff\1\u0088\1\u00c4\1"+
        "\171\1\uffff\1\u00b2\1\uffff\1\u00b9\1\uffff\1\u00b2\2\u00b0\1\u00c4"+
        "\1\u00b9\1\u00b2\1\uffff\1\u00cc\1\uffff\1\u0088\1\u00c4\1\171\1"+
        "\uffff\1\u00b2\1\uffff\1\u00b9\1\uffff\1\u00b2\1\u00b0\3\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0"+
        "\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff\7\0\1\uffff\1\0\1\uffff"+
        "\3\0\2\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff\1\0"+
        "\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11\0\1\uffff\1\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\7\0\1\uffff\1\0\1\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0"+
        "\1\uffff\5\0\2\uffff\7\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\1\0\2\uffff\4\0\2\uffff\4\0\1\uffff\1\0\1\uffff\1\0\1\uffff\7\0"+
        "\1\uffff\1\0\1\uffff\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\11\0\1"+
        "\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff\3\0\2\uffff"+
        "\3\0\1\uffff\1\0\1\uffff\1\0\1\uffff\6\0\1\uffff\1\0\1\uffff\7\0"+
        "\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\1\0\2\uffff";
    static final String DFA102_acceptS =
        "\7\uffff\1\2\22\uffff\1\1\4\uffff\1\1\6\uffff\1\1\6\uffff\1\1\5"+
        "\uffff\1\1\4\uffff\1\1\4\uffff\1\1\6\uffff\1\1\6\uffff\1\1\5\uffff"+
        "\1\1\6\uffff\1\1\11\uffff\1\1\10\uffff\1\1\7\uffff\1\1\11\uffff"+
        "\1\1\5\uffff\1\1\6\uffff\1\1\10\uffff\1\1\7\uffff\1\1\11\uffff\1"+
        "\1\11\uffff\1\1\10\uffff\1\1\7\uffff\1\1\11\uffff\1\1\5\uffff\1"+
        "\1\6\uffff\1\1\10\uffff\1\1\7\uffff\1\1\15\uffff\1\1\3\uffff\1\1"+
        "\14\uffff\1\1\3\uffff\1\1\11\uffff\1\1\7\uffff\1\1\12\uffff\1\1"+
        "\3\uffff\1\1\7\uffff\1\1\7\uffff\1\1\11\uffff\1\1\7\uffff\1\1\15"+
        "\uffff\1\1\3\uffff\1\1\6\uffff\1\1\6\uffff\1\1\10\uffff\1\1\13\uffff"+
        "\1\1\3\uffff\1\1\3\uffff";
    static final String DFA102_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\13\uffff\1\5\1\6\1\7\1\10\1\11\1\uffff"+
        "\1\12\4\uffff\1\13\3\uffff\1\14\2\uffff\1\15\2\uffff\1\16\1\uffff"+
        "\1\17\1\uffff\1\20\2\uffff\1\21\2\uffff\1\22\4\uffff\1\23\4\uffff"+
        "\1\24\3\uffff\1\25\2\uffff\1\26\2\uffff\1\27\1\uffff\1\30\1\uffff"+
        "\1\31\2\uffff\1\32\2\uffff\1\33\11\uffff\1\34\2\uffff\1\35\6\uffff"+
        "\1\36\2\uffff\1\37\2\uffff\1\40\3\uffff\1\41\6\uffff\1\42\2\uffff"+
        "\1\43\1\44\2\uffff\1\45\2\uffff\1\46\2\uffff\1\47\11\uffff\1\50"+
        "\2\uffff\1\51\1\52\1\uffff\1\53\2\uffff\1\54\7\uffff\1\55\2\uffff"+
        "\1\56\1\57\1\60\1\61\1\uffff\1\62\1\uffff\1\63\1\uffff\1\64\1\65"+
        "\1\66\1\67\1\70\1\uffff\1\71\1\uffff\1\72\1\uffff\1\73\1\74\1\75"+
        "\1\76\1\77\1\100\2\uffff\1\101\1\102\1\103\1\104\1\uffff\1\105\1"+
        "\uffff\1\106\1\uffff\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1"+
        "\uffff\1\116\1\uffff\1\117\1\120\1\121\2\uffff\1\122\1\123\1\124"+
        "\1\uffff\1\125\1\uffff\1\126\1\uffff\1\127\1\130\1\131\1\132\1\133"+
        "\1\134\1\uffff\1\135\1\uffff\1\136\1\137\1\140\1\uffff\1\141\1\uffff"+
        "\1\142\1\uffff\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1"+
        "\153\1\uffff\1\154\1\uffff\1\155\1\uffff\1\156\1\uffff\1\157\2\uffff"+
        "\1\160\1\161\1\162\1\163\1\164\1\165\1\166\1\uffff\1\167\1\uffff"+
        "\1\170\1\uffff\1\171\1\uffff\1\172\2\uffff\1\173\1\174\1\175\1\176"+
        "\1\uffff\1\177\1\uffff\1\u0080\1\uffff\1\u0081\1\u0082\1\u0083\1"+
        "\u0084\1\u0085\2\uffff\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1"+
        "\u008b\1\u008c\1\uffff\1\u008d\1\uffff\1\u008e\1\uffff\1\u008f\1"+
        "\uffff\1\u0090\2\uffff\1\u0091\1\u0092\1\u0093\1\u0094\2\uffff\1"+
        "\u0095\1\u0096\1\u0097\1\u0098\1\uffff\1\u0099\1\uffff\1\u009a\1"+
        "\uffff\1\u009b\1\u009c\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1"+
        "\uffff\1\u00a2\1\uffff\1\u00a3\1\u00a4\1\u00a5\1\uffff\1\u00a6\1"+
        "\uffff\1\u00a7\1\uffff\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1"+
        "\u00ad\1\u00ae\1\u00af\1\u00b0\1\uffff\1\u00b1\1\uffff\1\u00b2\1"+
        "\uffff\1\u00b3\1\uffff\1\u00b4\2\uffff\1\u00b5\1\u00b6\1\u00b7\2"+
        "\uffff\1\u00b8\1\u00b9\1\u00ba\1\uffff\1\u00bb\1\uffff\1\u00bc\1"+
        "\uffff\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\uffff\1"+
        "\u00c3\1\uffff\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1"+
        "\u00ca\1\uffff\1\u00cb\1\uffff\1\u00cc\1\uffff\1\u00cd\1\uffff\1"+
        "\u00ce\2\uffff}>";
    static final String[] DFA102_transitionS = {
            "\1\6\107\uffff\1\7\64\uffff\1\1\11\uffff\2\7\2\uffff\1\7\4\uffff"+
            "\1\7\5\uffff\1\3\2\uffff\1\7\1\2\1\4\1\7\1\uffff\1\5\1\uffff"+
            "\1\7\3\uffff\3\7",
            "\1\26\u0095\uffff\1\23\3\uffff\1\22\1\24\2\uffff\1\25",
            "\1\7\110\uffff\1\32\1\uffff\1\30\16\uffff\1\27\47\uffff\1\31",
            "\1\7\110\uffff\1\37\1\uffff\1\35\16\uffff\1\34\47\uffff\1\36",
            "\1\7\110\uffff\1\46\1\uffff\1\44\16\uffff\1\43\47\uffff\1\45"+
            "\10\uffff\1\42\16\uffff\1\41\1\47",
            "\1\7\110\uffff\1\55\1\uffff\1\53\16\uffff\1\52\47\uffff\1\54"+
            "\27\uffff\1\51\3\uffff\1\56",
            "\1\7\110\uffff\1\63\1\uffff\1\61\16\uffff\1\60\47\uffff\1\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\7\110\uffff\1\70\1\uffff\1\66\16\uffff\1\65\47\uffff\1\67",
            "\1\7\110\uffff\1\75\1\uffff\1\73\16\uffff\1\72\47\uffff\1\74",
            "\1\7\110\uffff\1\104\1\uffff\1\102\16\uffff\1\101\47\uffff"+
            "\1\103\10\uffff\1\100\16\uffff\1\77\1\105",
            "\1\7\110\uffff\1\113\1\uffff\1\111\16\uffff\1\110\47\uffff"+
            "\1\112\27\uffff\1\107\3\uffff\1\114",
            "\1\7\110\uffff\1\121\1\uffff\1\117\16\uffff\1\116\47\uffff"+
            "\1\120",
            "\1\125\131\uffff\1\124\73\uffff\1\123",
            "\1\7\110\uffff\1\130\1\uffff\1\131\66\uffff\1\127\10\uffff"+
            "\1\7",
            "\1\133\22\uffff\1\133\160\uffff\1\134",
            "",
            "",
            "\1\137\131\uffff\1\136\73\uffff\1\135",
            "\1\7\110\uffff\1\142\1\uffff\1\143\66\uffff\1\141\10\uffff"+
            "\1\7",
            "\1\145\22\uffff\1\145\160\uffff\1\146",
            "",
            "",
            "\1\7\110\uffff\1\153\1\uffff\1\151\16\uffff\1\150\47\uffff"+
            "\1\152\10\uffff\1\147",
            "\1\155",
            "\1\160\131\uffff\1\157\73\uffff\1\156",
            "\1\7\110\uffff\1\163\1\uffff\1\164\66\uffff\1\162\10\uffff"+
            "\1\7",
            "\1\166\22\uffff\1\166\160\uffff\1\167",
            "",
            "\1\7\110\uffff\1\175\1\uffff\1\173\16\uffff\1\172\47\uffff"+
            "\1\174\10\uffff\1\171\16\uffff\1\170\1\176",
            "",
            "\1\7\110\uffff\1\u0083\1\uffff\1\u0081\16\uffff\1\u0080\47"+
            "\uffff\1\u0082",
            "\1\u0087\131\uffff\1\u0086\73\uffff\1\u0085",
            "\1\7\110\uffff\1\u008a\1\uffff\1\u008b\66\uffff\1\u0089\10"+
            "\uffff\1\7",
            "\1\u008d\22\uffff\1\u008d\160\uffff\1\u008e",
            "",
            "\1\7\110\uffff\1\u0093\1\uffff\1\u0091\16\uffff\1\u0090\47"+
            "\uffff\1\u0092\27\uffff\1\u008f\3\uffff\1\u0094",
            "",
            "\1\u0098\131\uffff\1\u0097\73\uffff\1\u0096",
            "\1\7\110\uffff\1\u009b\1\uffff\1\u009c\66\uffff\1\u009a\10"+
            "\uffff\1\7",
            "\1\u009e\22\uffff\1\u009e\160\uffff\1\u009f",
            "",
            "",
            "\1\u00a2\131\uffff\1\u00a1\73\uffff\1\u00a0",
            "\1\7\110\uffff\1\u00a5\1\uffff\1\u00a6\66\uffff\1\u00a4\10"+
            "\uffff\1\7",
            "\1\u00a8\22\uffff\1\u00a8\160\uffff\1\u00a9",
            "",
            "",
            "\1\u00ac\131\uffff\1\u00ab\73\uffff\1\u00aa",
            "\1\7\110\uffff\1\u00af\1\uffff\1\u00b0\66\uffff\1\u00ae\10"+
            "\uffff\1\7",
            "\1\u00b2\22\uffff\1\u00b2\160\uffff\1\u00b3",
            "",
            "",
            "\1\7\110\uffff\1\u00b8\1\uffff\1\u00b6\16\uffff\1\u00b5\47"+
            "\uffff\1\u00b7\10\uffff\1\u00b4",
            "\1\u00ba",
            "\1\u00bd\131\uffff\1\u00bc\73\uffff\1\u00bb",
            "\1\7\110\uffff\1\u00c0\1\uffff\1\u00c1\66\uffff\1\u00bf\10"+
            "\uffff\1\7",
            "\1\u00c3\22\uffff\1\u00c3\160\uffff\1\u00c4",
            "",
            "\1\7\110\uffff\1\u00ca\1\uffff\1\u00c8\16\uffff\1\u00c7\47"+
            "\uffff\1\u00c9\10\uffff\1\u00c6\16\uffff\1\u00c5\1\u00cb",
            "",
            "\1\7\110\uffff\1\u00d0\1\uffff\1\u00ce\16\uffff\1\u00cd\47"+
            "\uffff\1\u00cf",
            "\1\u00d4\131\uffff\1\u00d3\73\uffff\1\u00d2",
            "\1\7\110\uffff\1\u00d7\1\uffff\1\u00d8\66\uffff\1\u00d6\10"+
            "\uffff\1\7",
            "\1\u00da\22\uffff\1\u00da\160\uffff\1\u00db",
            "",
            "\1\7\110\uffff\1\u00e0\1\uffff\1\u00de\16\uffff\1\u00dd\47"+
            "\uffff\1\u00df\27\uffff\1\u00dc\3\uffff\1\u00e1",
            "",
            "\1\u00e5\131\uffff\1\u00e4\73\uffff\1\u00e3",
            "\1\7\110\uffff\1\u00e8\1\uffff\1\u00e9\66\uffff\1\u00e7\10"+
            "\uffff\1\7",
            "\1\u00eb\22\uffff\1\u00eb\160\uffff\1\u00ec",
            "",
            "",
            "\1\u00ed",
            "\1\u00f0\131\uffff\1\u00ef\73\uffff\1\u00ee",
            "\1\u00f1",
            "",
            "\1\u00f2\22\uffff\1\u00f2\160\uffff\1\u00f3",
            "",
            "\1\7\110\uffff\1\u00f6\1\uffff\1\u00f7\66\uffff\1\u00f5\10"+
            "\uffff\1\7",
            "",
            "\1\u00f9",
            "\1\7\110\uffff\1\u00fa\1\uffff\1\7\66\uffff\1\u00fb",
            "\1\u00fe",
            "\1\u0101\131\uffff\1\u0100\73\uffff\1\u00ff",
            "\1\u0102",
            "",
            "\1\u0103\22\uffff\1\u0103\160\uffff\1\u0104",
            "",
            "\1\7\110\uffff\1\u0107\1\uffff\1\u0108\66\uffff\1\u0106\10"+
            "\uffff\1\7",
            "",
            "\1\u010a",
            "\1\7\110\uffff\1\u010b\1\uffff\1\7\66\uffff\1\u010c",
            "\1\u010f",
            "\1\u0112\131\uffff\1\u0111\73\uffff\1\u0110",
            "\1\7\110\uffff\1\u0115\1\uffff\1\u0116\66\uffff\1\u0114\10"+
            "\uffff\1\7",
            "\1\u0118\22\uffff\1\u0118\160\uffff\1\u0119",
            "",
            "",
            "\1\7\110\uffff\1\u011d\1\uffff\1\u011b\16\uffff\1\u011a\47"+
            "\uffff\1\u011c",
            "\1\u011f",
            "\1\u0122\131\uffff\1\u0121\73\uffff\1\u0120",
            "\1\u0123",
            "",
            "\1\u0124\22\uffff\1\u0124\160\uffff\1\u0125",
            "",
            "\1\7\110\uffff\1\u0128\1\uffff\1\u0129\66\uffff\1\u0127\10"+
            "\uffff\1\7",
            "",
            "\1\u012b",
            "\1\7\110\uffff\1\u012c\1\uffff\1\7\66\uffff\1\u012d",
            "\1\7\110\uffff\1\u0134\1\uffff\1\u0132\16\uffff\1\u0131\47"+
            "\uffff\1\u0133\10\uffff\1\u0130",
            "\1\u0136",
            "\1\u0139\131\uffff\1\u0138\73\uffff\1\u0137",
            "\1\7\110\uffff\1\u013c\1\uffff\1\u013d\66\uffff\1\u013b\10"+
            "\uffff\1\7",
            "\1\u013f\22\uffff\1\u013f\160\uffff\1\u0140",
            "",
            "\1\7\110\uffff\1\u0146\1\uffff\1\u0144\16\uffff\1\u0143\47"+
            "\uffff\1\u0145\10\uffff\1\u0142\16\uffff\1\u0141\1\u0147",
            "",
            "\1\u014b\131\uffff\1\u014a\73\uffff\1\u0149",
            "\1\7\110\uffff\1\u014e\1\uffff\1\u014f\66\uffff\1\u014d\10"+
            "\uffff\1\7",
            "\1\u0151\22\uffff\1\u0151\160\uffff\1\u0152",
            "",
            "",
            "\1\u0153",
            "\1\u0156\131\uffff\1\u0155\73\uffff\1\u0154",
            "\1\u0157",
            "",
            "\1\u0158\22\uffff\1\u0158\160\uffff\1\u0159",
            "",
            "\1\7\110\uffff\1\u015c\1\uffff\1\u015d\66\uffff\1\u015b\10"+
            "\uffff\1\7",
            "",
            "\1\u015f",
            "\1\7\110\uffff\1\u0160\1\uffff\1\7\66\uffff\1\u0161",
            "\1\7\110\uffff\1\u0167\1\uffff\1\u0165\16\uffff\1\u0164\47"+
            "\uffff\1\u0166",
            "\1\u016b\131\uffff\1\u016a\73\uffff\1\u0169",
            "\1\7\110\uffff\1\u016e\1\uffff\1\u016f\66\uffff\1\u016d\10"+
            "\uffff\1\7",
            "\1\u0171\22\uffff\1\u0171\160\uffff\1\u0172",
            "",
            "\1\7\110\uffff\1\u0177\1\uffff\1\u0175\16\uffff\1\u0174\47"+
            "\uffff\1\u0176\27\uffff\1\u0173\3\uffff\1\u0178",
            "",
            "\1\u017a",
            "\1\u017d\131\uffff\1\u017c\73\uffff\1\u017b",
            "\1\u017e",
            "",
            "\1\u017f\22\uffff\1\u017f\160\uffff\1\u0180",
            "",
            "\1\7\110\uffff\1\u0183\1\uffff\1\u0184\66\uffff\1\u0182\10"+
            "\uffff\1\7",
            "",
            "\1\u0186",
            "\1\7\110\uffff\1\u0187\1\uffff\1\7\66\uffff\1\u0188",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "705:1: typedef_declaration : ( ( block_decl_predicate )=> block_decl | typedef_internal typedef_name ( ',' typedef_name )* ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA102_2 = input.LA(1);

                         
                        int index102_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_2==136) ) {s = 23;}

                        else if ( (LA102_2==121) ) {s = 24;}

                        else if ( (LA102_2==176) ) {s = 25;}

                        else if ( (LA102_2==119) && (synpred23_Objc())) {s = 26;}

                        else if ( (LA102_2==ID) ) {s = 7;}

                         
                        input.seek(index102_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA102_3 = input.LA(1);

                         
                        int index102_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_3==136) ) {s = 28;}

                        else if ( (LA102_3==121) ) {s = 29;}

                        else if ( (LA102_3==176) ) {s = 30;}

                        else if ( (LA102_3==119) && (synpred23_Objc())) {s = 31;}

                        else if ( (LA102_3==ID) ) {s = 7;}

                         
                        input.seek(index102_3);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA102_4 = input.LA(1);

                         
                        int index102_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_4==200) ) {s = 33;}

                        else if ( (LA102_4==185) ) {s = 34;}

                        else if ( (LA102_4==136) ) {s = 35;}

                        else if ( (LA102_4==121) ) {s = 36;}

                        else if ( (LA102_4==176) ) {s = 37;}

                        else if ( (LA102_4==119) && (synpred23_Objc())) {s = 38;}

                        else if ( (LA102_4==201) ) {s = 39;}

                        else if ( (LA102_4==ID) ) {s = 7;}

                         
                        input.seek(index102_4);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA102_5 = input.LA(1);

                         
                        int index102_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_5==200) ) {s = 41;}

                        else if ( (LA102_5==136) ) {s = 42;}

                        else if ( (LA102_5==121) ) {s = 43;}

                        else if ( (LA102_5==176) ) {s = 44;}

                        else if ( (LA102_5==119) && (synpred23_Objc())) {s = 45;}

                        else if ( (LA102_5==204) ) {s = 46;}

                        else if ( (LA102_5==ID) ) {s = 7;}

                         
                        input.seek(index102_5);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA102_6 = input.LA(1);

                         
                        int index102_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_6==136) ) {s = 48;}

                        else if ( (LA102_6==121) ) {s = 49;}

                        else if ( (LA102_6==176) ) {s = 50;}

                        else if ( (LA102_6==119) && (synpred23_Objc())) {s = 51;}

                        else if ( (LA102_6==ID) ) {s = 7;}

                         
                        input.seek(index102_6);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA102_18 = input.LA(1);

                         
                        int index102_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_18==136) ) {s = 53;}

                        else if ( (LA102_18==121) ) {s = 54;}

                        else if ( (LA102_18==176) ) {s = 55;}

                        else if ( (LA102_18==119) && (synpred23_Objc())) {s = 56;}

                        else if ( (LA102_18==ID) ) {s = 7;}

                         
                        input.seek(index102_18);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA102_19 = input.LA(1);

                         
                        int index102_19 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_19==136) ) {s = 58;}

                        else if ( (LA102_19==121) ) {s = 59;}

                        else if ( (LA102_19==176) ) {s = 60;}

                        else if ( (LA102_19==119) && (synpred23_Objc())) {s = 61;}

                        else if ( (LA102_19==ID) ) {s = 7;}

                         
                        input.seek(index102_19);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA102_20 = input.LA(1);

                         
                        int index102_20 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_20==200) ) {s = 63;}

                        else if ( (LA102_20==185) ) {s = 64;}

                        else if ( (LA102_20==136) ) {s = 65;}

                        else if ( (LA102_20==121) ) {s = 66;}

                        else if ( (LA102_20==176) ) {s = 67;}

                        else if ( (LA102_20==119) && (synpred23_Objc())) {s = 68;}

                        else if ( (LA102_20==201) ) {s = 69;}

                        else if ( (LA102_20==ID) ) {s = 7;}

                         
                        input.seek(index102_20);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA102_21 = input.LA(1);

                         
                        int index102_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_21==200) ) {s = 71;}

                        else if ( (LA102_21==136) ) {s = 72;}

                        else if ( (LA102_21==121) ) {s = 73;}

                        else if ( (LA102_21==176) ) {s = 74;}

                        else if ( (LA102_21==119) && (synpred23_Objc())) {s = 75;}

                        else if ( (LA102_21==204) ) {s = 76;}

                        else if ( (LA102_21==ID) ) {s = 7;}

                         
                        input.seek(index102_21);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA102_22 = input.LA(1);

                         
                        int index102_22 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_22==136) ) {s = 78;}

                        else if ( (LA102_22==121) ) {s = 79;}

                        else if ( (LA102_22==176) ) {s = 80;}

                        else if ( (LA102_22==119) && (synpred23_Objc())) {s = 81;}

                        else if ( (LA102_22==ID) ) {s = 7;}

                         
                        input.seek(index102_22);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA102_24 = input.LA(1);

                         
                        int index102_24 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_24==ID||LA102_24==185) ) {s = 7;}

                        else if ( (LA102_24==176) ) {s = 87;}

                        else if ( (LA102_24==119) && (synpred23_Objc())) {s = 88;}

                        else if ( (LA102_24==121) ) {s = 89;}

                         
                        input.seek(index102_24);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA102_29 = input.LA(1);

                         
                        int index102_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_29==ID||LA102_29==185) ) {s = 7;}

                        else if ( (LA102_29==176) ) {s = 97;}

                        else if ( (LA102_29==119) && (synpred23_Objc())) {s = 98;}

                        else if ( (LA102_29==121) ) {s = 99;}

                         
                        input.seek(index102_29);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA102_33 = input.LA(1);

                         
                        int index102_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_33==185) ) {s = 103;}

                        else if ( (LA102_33==136) ) {s = 104;}

                        else if ( (LA102_33==121) ) {s = 105;}

                        else if ( (LA102_33==176) ) {s = 106;}

                        else if ( (LA102_33==119) && (synpred23_Objc())) {s = 107;}

                        else if ( (LA102_33==ID) ) {s = 7;}

                         
                        input.seek(index102_33);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA102_36 = input.LA(1);

                         
                        int index102_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_36==ID||LA102_36==185) ) {s = 7;}

                        else if ( (LA102_36==176) ) {s = 114;}

                        else if ( (LA102_36==119) && (synpred23_Objc())) {s = 115;}

                        else if ( (LA102_36==121) ) {s = 116;}

                         
                        input.seek(index102_36);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA102_39 = input.LA(1);

                         
                        int index102_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_39==200) ) {s = 120;}

                        else if ( (LA102_39==185) ) {s = 121;}

                        else if ( (LA102_39==136) ) {s = 122;}

                        else if ( (LA102_39==121) ) {s = 123;}

                        else if ( (LA102_39==176) ) {s = 124;}

                        else if ( (LA102_39==119) && (synpred23_Objc())) {s = 125;}

                        else if ( (LA102_39==201) ) {s = 126;}

                        else if ( (LA102_39==ID) ) {s = 7;}

                         
                        input.seek(index102_39);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA102_41 = input.LA(1);

                         
                        int index102_41 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_41==136) ) {s = 128;}

                        else if ( (LA102_41==121) ) {s = 129;}

                        else if ( (LA102_41==176) ) {s = 130;}

                        else if ( (LA102_41==119) && (synpred23_Objc())) {s = 131;}

                        else if ( (LA102_41==ID) ) {s = 7;}

                         
                        input.seek(index102_41);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA102_43 = input.LA(1);

                         
                        int index102_43 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_43==ID||LA102_43==185) ) {s = 7;}

                        else if ( (LA102_43==176) ) {s = 137;}

                        else if ( (LA102_43==119) && (synpred23_Objc())) {s = 138;}

                        else if ( (LA102_43==121) ) {s = 139;}

                         
                        input.seek(index102_43);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA102_46 = input.LA(1);

                         
                        int index102_46 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_46==200) ) {s = 143;}

                        else if ( (LA102_46==136) ) {s = 144;}

                        else if ( (LA102_46==121) ) {s = 145;}

                        else if ( (LA102_46==176) ) {s = 146;}

                        else if ( (LA102_46==119) && (synpred23_Objc())) {s = 147;}

                        else if ( (LA102_46==204) ) {s = 148;}

                        else if ( (LA102_46==ID) ) {s = 7;}

                         
                        input.seek(index102_46);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA102_49 = input.LA(1);

                         
                        int index102_49 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_49==ID||LA102_49==185) ) {s = 7;}

                        else if ( (LA102_49==176) ) {s = 154;}

                        else if ( (LA102_49==119) && (synpred23_Objc())) {s = 155;}

                        else if ( (LA102_49==121) ) {s = 156;}

                         
                        input.seek(index102_49);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA102_54 = input.LA(1);

                         
                        int index102_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_54==ID||LA102_54==185) ) {s = 7;}

                        else if ( (LA102_54==176) ) {s = 164;}

                        else if ( (LA102_54==119) && (synpred23_Objc())) {s = 165;}

                        else if ( (LA102_54==121) ) {s = 166;}

                         
                        input.seek(index102_54);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA102_59 = input.LA(1);

                         
                        int index102_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_59==ID||LA102_59==185) ) {s = 7;}

                        else if ( (LA102_59==176) ) {s = 174;}

                        else if ( (LA102_59==119) && (synpred23_Objc())) {s = 175;}

                        else if ( (LA102_59==121) ) {s = 176;}

                         
                        input.seek(index102_59);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA102_63 = input.LA(1);

                         
                        int index102_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_63==185) ) {s = 180;}

                        else if ( (LA102_63==136) ) {s = 181;}

                        else if ( (LA102_63==121) ) {s = 182;}

                        else if ( (LA102_63==176) ) {s = 183;}

                        else if ( (LA102_63==119) && (synpred23_Objc())) {s = 184;}

                        else if ( (LA102_63==ID) ) {s = 7;}

                         
                        input.seek(index102_63);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA102_66 = input.LA(1);

                         
                        int index102_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_66==ID||LA102_66==185) ) {s = 7;}

                        else if ( (LA102_66==176) ) {s = 191;}

                        else if ( (LA102_66==119) && (synpred23_Objc())) {s = 192;}

                        else if ( (LA102_66==121) ) {s = 193;}

                         
                        input.seek(index102_66);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA102_69 = input.LA(1);

                         
                        int index102_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_69==200) ) {s = 197;}

                        else if ( (LA102_69==185) ) {s = 198;}

                        else if ( (LA102_69==136) ) {s = 199;}

                        else if ( (LA102_69==121) ) {s = 200;}

                        else if ( (LA102_69==176) ) {s = 201;}

                        else if ( (LA102_69==119) && (synpred23_Objc())) {s = 202;}

                        else if ( (LA102_69==201) ) {s = 203;}

                        else if ( (LA102_69==ID) ) {s = 7;}

                         
                        input.seek(index102_69);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA102_71 = input.LA(1);

                         
                        int index102_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_71==136) ) {s = 205;}

                        else if ( (LA102_71==121) ) {s = 206;}

                        else if ( (LA102_71==176) ) {s = 207;}

                        else if ( (LA102_71==119) && (synpred23_Objc())) {s = 208;}

                        else if ( (LA102_71==ID) ) {s = 7;}

                         
                        input.seek(index102_71);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA102_73 = input.LA(1);

                         
                        int index102_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_73==ID||LA102_73==185) ) {s = 7;}

                        else if ( (LA102_73==176) ) {s = 214;}

                        else if ( (LA102_73==119) && (synpred23_Objc())) {s = 215;}

                        else if ( (LA102_73==121) ) {s = 216;}

                         
                        input.seek(index102_73);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA102_76 = input.LA(1);

                         
                        int index102_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_76==200) ) {s = 220;}

                        else if ( (LA102_76==136) ) {s = 221;}

                        else if ( (LA102_76==121) ) {s = 222;}

                        else if ( (LA102_76==176) ) {s = 223;}

                        else if ( (LA102_76==119) && (synpred23_Objc())) {s = 224;}

                        else if ( (LA102_76==204) ) {s = 225;}

                        else if ( (LA102_76==ID) ) {s = 7;}

                         
                        input.seek(index102_76);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA102_79 = input.LA(1);

                         
                        int index102_79 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_79==ID||LA102_79==185) ) {s = 7;}

                        else if ( (LA102_79==176) ) {s = 231;}

                        else if ( (LA102_79==119) && (synpred23_Objc())) {s = 232;}

                        else if ( (LA102_79==121) ) {s = 233;}

                         
                        input.seek(index102_79);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA102_89 = input.LA(1);

                         
                        int index102_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_89==ID||LA102_89==185) ) {s = 7;}

                        else if ( (LA102_89==176) ) {s = 245;}

                        else if ( (LA102_89==119) && (synpred23_Objc())) {s = 246;}

                        else if ( (LA102_89==121) ) {s = 247;}

                         
                        input.seek(index102_89);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA102_92 = input.LA(1);

                         
                        int index102_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_92==119) && (synpred23_Objc())) {s = 250;}

                        else if ( (LA102_92==176) ) {s = 251;}

                        else if ( (LA102_92==ID||LA102_92==121) ) {s = 7;}

                         
                        input.seek(index102_92);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA102_99 = input.LA(1);

                         
                        int index102_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_99==ID||LA102_99==185) ) {s = 7;}

                        else if ( (LA102_99==176) ) {s = 262;}

                        else if ( (LA102_99==119) && (synpred23_Objc())) {s = 263;}

                        else if ( (LA102_99==121) ) {s = 264;}

                         
                        input.seek(index102_99);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA102_102 = input.LA(1);

                         
                        int index102_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_102==119) && (synpred23_Objc())) {s = 267;}

                        else if ( (LA102_102==176) ) {s = 268;}

                        else if ( (LA102_102==ID||LA102_102==121) ) {s = 7;}

                         
                        input.seek(index102_102);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA102_105 = input.LA(1);

                         
                        int index102_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_105==ID||LA102_105==185) ) {s = 7;}

                        else if ( (LA102_105==176) ) {s = 276;}

                        else if ( (LA102_105==119) && (synpred23_Objc())) {s = 277;}

                        else if ( (LA102_105==121) ) {s = 278;}

                         
                        input.seek(index102_105);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA102_109 = input.LA(1);

                         
                        int index102_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_109==136) ) {s = 282;}

                        else if ( (LA102_109==121) ) {s = 283;}

                        else if ( (LA102_109==176) ) {s = 284;}

                        else if ( (LA102_109==119) && (synpred23_Objc())) {s = 285;}

                        else if ( (LA102_109==ID) ) {s = 7;}

                         
                        input.seek(index102_109);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA102_116 = input.LA(1);

                         
                        int index102_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_116==ID||LA102_116==185) ) {s = 7;}

                        else if ( (LA102_116==176) ) {s = 295;}

                        else if ( (LA102_116==119) && (synpred23_Objc())) {s = 296;}

                        else if ( (LA102_116==121) ) {s = 297;}

                         
                        input.seek(index102_116);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA102_119 = input.LA(1);

                         
                        int index102_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_119==119) && (synpred23_Objc())) {s = 300;}

                        else if ( (LA102_119==176) ) {s = 301;}

                        else if ( (LA102_119==ID||LA102_119==121) ) {s = 7;}

                         
                        input.seek(index102_119);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA102_120 = input.LA(1);

                         
                        int index102_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_120==185) ) {s = 304;}

                        else if ( (LA102_120==136) ) {s = 305;}

                        else if ( (LA102_120==121) ) {s = 306;}

                        else if ( (LA102_120==176) ) {s = 307;}

                        else if ( (LA102_120==119) && (synpred23_Objc())) {s = 308;}

                        else if ( (LA102_120==ID) ) {s = 7;}

                         
                        input.seek(index102_120);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA102_123 = input.LA(1);

                         
                        int index102_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_123==ID||LA102_123==185) ) {s = 7;}

                        else if ( (LA102_123==176) ) {s = 315;}

                        else if ( (LA102_123==119) && (synpred23_Objc())) {s = 316;}

                        else if ( (LA102_123==121) ) {s = 317;}

                         
                        input.seek(index102_123);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA102_126 = input.LA(1);

                         
                        int index102_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_126==200) ) {s = 321;}

                        else if ( (LA102_126==185) ) {s = 322;}

                        else if ( (LA102_126==136) ) {s = 323;}

                        else if ( (LA102_126==121) ) {s = 324;}

                        else if ( (LA102_126==176) ) {s = 325;}

                        else if ( (LA102_126==119) && (synpred23_Objc())) {s = 326;}

                        else if ( (LA102_126==201) ) {s = 327;}

                        else if ( (LA102_126==ID) ) {s = 7;}

                         
                        input.seek(index102_126);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA102_129 = input.LA(1);

                         
                        int index102_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_129==ID||LA102_129==185) ) {s = 7;}

                        else if ( (LA102_129==176) ) {s = 333;}

                        else if ( (LA102_129==119) && (synpred23_Objc())) {s = 334;}

                        else if ( (LA102_129==121) ) {s = 335;}

                         
                        input.seek(index102_129);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA102_139 = input.LA(1);

                         
                        int index102_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_139==ID||LA102_139==185) ) {s = 7;}

                        else if ( (LA102_139==176) ) {s = 347;}

                        else if ( (LA102_139==119) && (synpred23_Objc())) {s = 348;}

                        else if ( (LA102_139==121) ) {s = 349;}

                         
                        input.seek(index102_139);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA102_142 = input.LA(1);

                         
                        int index102_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_142==119) && (synpred23_Objc())) {s = 352;}

                        else if ( (LA102_142==176) ) {s = 353;}

                        else if ( (LA102_142==ID||LA102_142==121) ) {s = 7;}

                         
                        input.seek(index102_142);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA102_143 = input.LA(1);

                         
                        int index102_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_143==136) ) {s = 356;}

                        else if ( (LA102_143==121) ) {s = 357;}

                        else if ( (LA102_143==176) ) {s = 358;}

                        else if ( (LA102_143==119) && (synpred23_Objc())) {s = 359;}

                        else if ( (LA102_143==ID) ) {s = 7;}

                         
                        input.seek(index102_143);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA102_145 = input.LA(1);

                         
                        int index102_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_145==ID||LA102_145==185) ) {s = 7;}

                        else if ( (LA102_145==176) ) {s = 365;}

                        else if ( (LA102_145==119) && (synpred23_Objc())) {s = 366;}

                        else if ( (LA102_145==121) ) {s = 367;}

                         
                        input.seek(index102_145);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA102_148 = input.LA(1);

                         
                        int index102_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_148==200) ) {s = 371;}

                        else if ( (LA102_148==136) ) {s = 372;}

                        else if ( (LA102_148==121) ) {s = 373;}

                        else if ( (LA102_148==176) ) {s = 374;}

                        else if ( (LA102_148==119) && (synpred23_Objc())) {s = 375;}

                        else if ( (LA102_148==204) ) {s = 376;}

                        else if ( (LA102_148==ID) ) {s = 7;}

                         
                        input.seek(index102_148);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA102_156 = input.LA(1);

                         
                        int index102_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_156==ID||LA102_156==185) ) {s = 7;}

                        else if ( (LA102_156==176) ) {s = 386;}

                        else if ( (LA102_156==119) && (synpred23_Objc())) {s = 387;}

                        else if ( (LA102_156==121) ) {s = 388;}

                         
                        input.seek(index102_156);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA102_159 = input.LA(1);

                         
                        int index102_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA102_159==119) && (synpred23_Objc())) {s = 391;}

                        else if ( (LA102_159==176) ) {s = 392;}

                        else if ( (LA102_159==ID||LA102_159==121) ) {s = 7;}

                         
                        input.seek(index102_159);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA102_160 = input.LA(1);

                         
                        int index102_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_160);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA102_161 = input.LA(1);

                         
                        int index102_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_161);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA102_162 = input.LA(1);

                         
                        int index102_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_162);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA102_164 = input.LA(1);

                         
                        int index102_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_164);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA102_166 = input.LA(1);

                         
                        int index102_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_166);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA102_168 = input.LA(1);

                         
                        int index102_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_168);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA102_169 = input.LA(1);

                         
                        int index102_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_169);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA102_170 = input.LA(1);

                         
                        int index102_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_170);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA102_171 = input.LA(1);

                         
                        int index102_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_171);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA102_172 = input.LA(1);

                         
                        int index102_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_172);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA102_174 = input.LA(1);

                         
                        int index102_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_174);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA102_176 = input.LA(1);

                         
                        int index102_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_176);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA102_178 = input.LA(1);

                         
                        int index102_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_178);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA102_179 = input.LA(1);

                         
                        int index102_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_179);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA102_180 = input.LA(1);

                         
                        int index102_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_180);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA102_181 = input.LA(1);

                         
                        int index102_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_181);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA102_182 = input.LA(1);

                         
                        int index102_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_182);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA102_183 = input.LA(1);

                         
                        int index102_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_183);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA102_186 = input.LA(1);

                         
                        int index102_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_186);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA102_187 = input.LA(1);

                         
                        int index102_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_187);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA102_188 = input.LA(1);

                         
                        int index102_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_188);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA102_189 = input.LA(1);

                         
                        int index102_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_189);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA102_191 = input.LA(1);

                         
                        int index102_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_191);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA102_193 = input.LA(1);

                         
                        int index102_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_193);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA102_195 = input.LA(1);

                         
                        int index102_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_195);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA102_196 = input.LA(1);

                         
                        int index102_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_196);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA102_197 = input.LA(1);

                         
                        int index102_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_197);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA102_198 = input.LA(1);

                         
                        int index102_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_198);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA102_199 = input.LA(1);

                         
                        int index102_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_199);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA102_200 = input.LA(1);

                         
                        int index102_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_200);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA102_201 = input.LA(1);

                         
                        int index102_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_201);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA102_203 = input.LA(1);

                         
                        int index102_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_203);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA102_205 = input.LA(1);

                         
                        int index102_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_205);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA102_206 = input.LA(1);

                         
                        int index102_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_206);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA102_207 = input.LA(1);

                         
                        int index102_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_207);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA102_210 = input.LA(1);

                         
                        int index102_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_210);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA102_211 = input.LA(1);

                         
                        int index102_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_211);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA102_212 = input.LA(1);

                         
                        int index102_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_212);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA102_214 = input.LA(1);

                         
                        int index102_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_214);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA102_216 = input.LA(1);

                         
                        int index102_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_216);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA102_218 = input.LA(1);

                         
                        int index102_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_218);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA102_219 = input.LA(1);

                         
                        int index102_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_219);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA102_220 = input.LA(1);

                         
                        int index102_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_220);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA102_221 = input.LA(1);

                         
                        int index102_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_221);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA102_222 = input.LA(1);

                         
                        int index102_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_222);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA102_223 = input.LA(1);

                         
                        int index102_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_223);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA102_225 = input.LA(1);

                         
                        int index102_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_225);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA102_227 = input.LA(1);

                         
                        int index102_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_227);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA102_228 = input.LA(1);

                         
                        int index102_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_228);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA102_229 = input.LA(1);

                         
                        int index102_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_229);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA102_231 = input.LA(1);

                         
                        int index102_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_231);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA102_233 = input.LA(1);

                         
                        int index102_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_233);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA102_235 = input.LA(1);

                         
                        int index102_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_235);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA102_236 = input.LA(1);

                         
                        int index102_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_236);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA102_237 = input.LA(1);

                         
                        int index102_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_237);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA102_238 = input.LA(1);

                         
                        int index102_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_238);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA102_239 = input.LA(1);

                         
                        int index102_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_239);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA102_240 = input.LA(1);

                         
                        int index102_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_240);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA102_241 = input.LA(1);

                         
                        int index102_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_241);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA102_242 = input.LA(1);

                         
                        int index102_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_242);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA102_243 = input.LA(1);

                         
                        int index102_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_243);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA102_245 = input.LA(1);

                         
                        int index102_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_245);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA102_247 = input.LA(1);

                         
                        int index102_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_247);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA102_249 = input.LA(1);

                         
                        int index102_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_249);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA102_251 = input.LA(1);

                         
                        int index102_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_251);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA102_254 = input.LA(1);

                         
                        int index102_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_254);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA102_255 = input.LA(1);

                         
                        int index102_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_255);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA102_256 = input.LA(1);

                         
                        int index102_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_256);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA102_257 = input.LA(1);

                         
                        int index102_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_257);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA102_258 = input.LA(1);

                         
                        int index102_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_258);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA102_259 = input.LA(1);

                         
                        int index102_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_259);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA102_260 = input.LA(1);

                         
                        int index102_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_260);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA102_262 = input.LA(1);

                         
                        int index102_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_262);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA102_264 = input.LA(1);

                         
                        int index102_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_264);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA102_266 = input.LA(1);

                         
                        int index102_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_266);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA102_268 = input.LA(1);

                         
                        int index102_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_268);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA102_271 = input.LA(1);

                         
                        int index102_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_271);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA102_272 = input.LA(1);

                         
                        int index102_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_272);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA102_273 = input.LA(1);

                         
                        int index102_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_273);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA102_274 = input.LA(1);

                         
                        int index102_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_274);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA102_276 = input.LA(1);

                         
                        int index102_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_276);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA102_278 = input.LA(1);

                         
                        int index102_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_278);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA102_280 = input.LA(1);

                         
                        int index102_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_280);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA102_281 = input.LA(1);

                         
                        int index102_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_281);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA102_282 = input.LA(1);

                         
                        int index102_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_282);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA102_283 = input.LA(1);

                         
                        int index102_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_283);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA102_284 = input.LA(1);

                         
                        int index102_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_284);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA102_287 = input.LA(1);

                         
                        int index102_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_287);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA102_288 = input.LA(1);

                         
                        int index102_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_288);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA102_289 = input.LA(1);

                         
                        int index102_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_289);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA102_290 = input.LA(1);

                         
                        int index102_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_290);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA102_291 = input.LA(1);

                         
                        int index102_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_291);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA102_292 = input.LA(1);

                         
                        int index102_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_292);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA102_293 = input.LA(1);

                         
                        int index102_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_293);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA102_295 = input.LA(1);

                         
                        int index102_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_295);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA102_297 = input.LA(1);

                         
                        int index102_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_297);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA102_299 = input.LA(1);

                         
                        int index102_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_299);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA102_301 = input.LA(1);

                         
                        int index102_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_301);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA102_304 = input.LA(1);

                         
                        int index102_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_304);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA102_305 = input.LA(1);

                         
                        int index102_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_305);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA102_306 = input.LA(1);

                         
                        int index102_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_306);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA102_307 = input.LA(1);

                         
                        int index102_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_307);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA102_310 = input.LA(1);

                         
                        int index102_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_310);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA102_311 = input.LA(1);

                         
                        int index102_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_311);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA102_312 = input.LA(1);

                         
                        int index102_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_312);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA102_313 = input.LA(1);

                         
                        int index102_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_313);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA102_315 = input.LA(1);

                         
                        int index102_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_315);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA102_317 = input.LA(1);

                         
                        int index102_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_317);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA102_319 = input.LA(1);

                         
                        int index102_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_319);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA102_320 = input.LA(1);

                         
                        int index102_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_320);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA102_321 = input.LA(1);

                         
                        int index102_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_321);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA102_322 = input.LA(1);

                         
                        int index102_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_322);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA102_323 = input.LA(1);

                         
                        int index102_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_323);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA102_324 = input.LA(1);

                         
                        int index102_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_324);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA102_325 = input.LA(1);

                         
                        int index102_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_325);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA102_327 = input.LA(1);

                         
                        int index102_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_327);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA102_329 = input.LA(1);

                         
                        int index102_329 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_329);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA102_330 = input.LA(1);

                         
                        int index102_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_330);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA102_331 = input.LA(1);

                         
                        int index102_331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_331);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA102_333 = input.LA(1);

                         
                        int index102_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_333);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA102_335 = input.LA(1);

                         
                        int index102_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_335);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA102_337 = input.LA(1);

                         
                        int index102_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_337);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA102_338 = input.LA(1);

                         
                        int index102_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_338);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA102_339 = input.LA(1);

                         
                        int index102_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_339);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA102_340 = input.LA(1);

                         
                        int index102_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_340);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA102_341 = input.LA(1);

                         
                        int index102_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_341);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA102_342 = input.LA(1);

                         
                        int index102_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_342);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA102_343 = input.LA(1);

                         
                        int index102_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_343);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA102_344 = input.LA(1);

                         
                        int index102_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_344);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA102_345 = input.LA(1);

                         
                        int index102_345 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_345);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA102_347 = input.LA(1);

                         
                        int index102_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_347);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA102_349 = input.LA(1);

                         
                        int index102_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_349);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA102_351 = input.LA(1);

                         
                        int index102_351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_351);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA102_353 = input.LA(1);

                         
                        int index102_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_353);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA102_356 = input.LA(1);

                         
                        int index102_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_356);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA102_357 = input.LA(1);

                         
                        int index102_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_357);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA102_358 = input.LA(1);

                         
                        int index102_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_358);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA102_361 = input.LA(1);

                         
                        int index102_361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_361);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA102_362 = input.LA(1);

                         
                        int index102_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_362);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA102_363 = input.LA(1);

                         
                        int index102_363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_363);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA102_365 = input.LA(1);

                         
                        int index102_365 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_365);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA102_367 = input.LA(1);

                         
                        int index102_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_367);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA102_369 = input.LA(1);

                         
                        int index102_369 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_369);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA102_370 = input.LA(1);

                         
                        int index102_370 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_370);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA102_371 = input.LA(1);

                         
                        int index102_371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_371);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA102_372 = input.LA(1);

                         
                        int index102_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_372);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA102_373 = input.LA(1);

                         
                        int index102_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_373);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA102_374 = input.LA(1);

                         
                        int index102_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_374);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA102_376 = input.LA(1);

                         
                        int index102_376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_376);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA102_378 = input.LA(1);

                         
                        int index102_378 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_378);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA102_379 = input.LA(1);

                         
                        int index102_379 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_379);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA102_380 = input.LA(1);

                         
                        int index102_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_380);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA102_381 = input.LA(1);

                         
                        int index102_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_381);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA102_382 = input.LA(1);

                         
                        int index102_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_382);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA102_383 = input.LA(1);

                         
                        int index102_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_383);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA102_384 = input.LA(1);

                         
                        int index102_384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_384);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA102_386 = input.LA(1);

                         
                        int index102_386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_386);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA102_388 = input.LA(1);

                         
                        int index102_388 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_388);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA102_390 = input.LA(1);

                         
                        int index102_390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_390);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA102_392 = input.LA(1);

                         
                        int index102_392 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 391;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index102_392);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 102, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA128_eotS =
        "\u01e5\uffff";
    static final String DFA128_eofS =
        "\u01e5\uffff";
    static final String DFA128_minS =
        "\7\56\13\uffff\11\56\2\uffff\4\56\2\uffff\1\56\1\171\5\56\2\uffff"+
        "\6\56\2\uffff\4\56\2\uffff\4\56\2\uffff\4\56\2\uffff\1\56\1\171"+
        "\5\56\2\uffff\6\56\2\uffff\4\56\2\uffff\1\u0088\1\56\1\171\1\uffff"+
        "\3\56\2\uffff\1\u00b2\1\56\3\uffff\1\u0088\2\uffff\1\171\1\56\1"+
        "\uffff\3\56\2\uffff\1\u00b2\1\56\2\uffff\1\171\4\56\2\uffff\1\56"+
        "\1\u0088\1\56\1\171\1\uffff\3\56\2\uffff\1\u00b2\1\56\2\uffff\1"+
        "\56\1\171\5\56\2\uffff\4\56\2\uffff\1\u0088\1\56\1\171\1\uffff\3"+
        "\56\2\uffff\1\u00b2\1\56\2\uffff\6\56\2\uffff\1\u0088\1\56\1\171"+
        "\1\uffff\3\56\2\uffff\1\u00b2\1\56\2\uffff\3\0\1\uffff\3\0\2\uffff"+
        "\2\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\5\0\2\uffff\4\0"+
        "\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\2\uffff\4\0\2\uffff\3\0\1\uffff"+
        "\3\0\2\uffff\2\0\2\uffff\6\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0"+
        "\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff\1\0\1\uffff\1\0\1\uffff"+
        "\5\0\3\uffff\3\0\2\uffff\3\0\3\uffff\4\0\1\uffff\3\0\2\uffff\2\0"+
        "\2\uffff\4\0\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff\5\0\2\uffff"+
        "\4\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\2\uffff\3\0\1\uffff\3\0"+
        "\2\uffff\2\0\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff\4\0\2\uffff"+
        "\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\6\0\2\uffff\7\0\3\uffff\3\0"+
        "\2\uffff\3\0\3\uffff";
    static final String DFA128_maxS =
        "\1\u00d4\1\u00cc\2\u00b0\1\u00c9\1\u00cc\1\u00b0\13\uffff\2\u00b0"+
        "\1\u00c9\1\u00cc\1\u00b0\1\u00c4\1\u00b9\1\u00b2\1\170\2\uffff\1"+
        "\u00cc\1\u00b9\1\u00b2\1\170\2\uffff\1\u00b9\1\171\1\u00c4\1\u00b9"+
        "\1\u00b2\1\170\1\u00c9\2\uffff\1\u00b0\1\u00c4\1\u00b9\1\u00b2\1"+
        "\170\1\u00cc\2\uffff\1\u00c4\1\u00b9\1\u00b2\1\170\2\uffff\1\u00c4"+
        "\1\u00b9\1\u00b2\1\170\2\uffff\1\u00c4\1\u00b9\1\u00b2\1\170\2\uffff"+
        "\1\u00b9\1\171\1\u00c4\1\u00b9\1\u00b2\1\170\1\u00c9\2\uffff\1\u00b0"+
        "\1\u00c4\1\u00b9\1\u00b2\1\170\1\u00cc\2\uffff\1\u00c4\1\u00b9\1"+
        "\u00b2\1\170\2\uffff\1\u0088\1\u00c4\1\171\1\uffff\1\u00b2\1\170"+
        "\1\u00b9\2\uffff\1\u00b2\1\u00b0\3\uffff\1\u008e\2\uffff\1\u008e"+
        "\1\u00c4\1\uffff\1\u00b2\1\170\1\u00b9\2\uffff\1\u00b2\1\u00b0\2"+
        "\uffff\1\171\1\u00c4\1\u00b9\1\u00b2\1\170\2\uffff\1\u00b0\1\u0088"+
        "\1\u00c4\1\171\1\uffff\1\u00b2\1\170\1\u00b9\2\uffff\1\u00b2\1\u00b0"+
        "\2\uffff\1\u00b9\1\171\1\u00c4\1\u00b9\1\u00b2\1\170\1\u00c9\2\uffff"+
        "\1\u00c4\1\u00b9\1\u00b2\1\170\2\uffff\1\u0088\1\u00c4\1\171\1\uffff"+
        "\1\u00b2\1\170\1\u00b9\2\uffff\1\u00b2\1\u00b0\2\uffff\1\u00b0\1"+
        "\u00c4\1\u00b9\1\u00b2\1\170\1\u00cc\2\uffff\1\u0088\1\u00c4\1\171"+
        "\1\uffff\1\u00b2\1\170\1\u00b9\2\uffff\1\u00b2\1\u00b0\2\uffff\3"+
        "\0\1\uffff\3\0\2\uffff\2\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2"+
        "\uffff\5\0\2\uffff\4\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\2\uffff"+
        "\4\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\6\0\2\uffff\3\0"+
        "\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\5\0\3\uffff\3\0\2\uffff\3\0\3\uffff\4\0"+
        "\1\uffff\3\0\2\uffff\2\0\2\uffff\4\0\2\uffff\7\0\3\uffff\3\0\2\uffff"+
        "\3\0\3\uffff\5\0\2\uffff\4\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0"+
        "\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\7\0\3\uffff\3\0\2\uffff"+
        "\3\0\3\uffff\4\0\2\uffff\3\0\1\uffff\3\0\2\uffff\2\0\2\uffff\6\0"+
        "\2\uffff\7\0\3\uffff\3\0\2\uffff\3\0\3\uffff";
    static final String DFA128_acceptS =
        "\7\uffff\1\2\141\uffff\1\1\17\uffff\1\1\24\uffff\1\1\33\uffff\1"+
        "\1\24\uffff\1\1\14\uffff\1\1\14\uffff\1\1\24\uffff\1\1\33\uffff"+
        "\1\1\24\uffff\1\1\10\uffff\1\1\26\uffff\1\1\31\uffff\1\1\16\uffff"+
        "\1\1\40\uffff\1\1\25\uffff\1\1\10\uffff\1\1\36\uffff\1\1\20\uffff"+
        "\1\1\14\uffff";
    static final String DFA128_specialS =
        "\32\uffff\1\0\5\uffff\1\1\7\uffff\1\2\7\uffff\1\3\6\uffff\1\4\5"+
        "\uffff\1\5\5\uffff\1\6\7\uffff\1\7\7\uffff\1\10\6\uffff\1\11\7\uffff"+
        "\1\12\17\uffff\1\13\13\uffff\1\14\10\uffff\1\15\14\uffff\1\16\6"+
        "\uffff\1\17\7\uffff\1\20\13\uffff\1\21\10\uffff\1\22\7\uffff\1\23"+
        "\1\24\1\25\1\uffff\1\26\1\27\1\30\2\uffff\1\31\1\32\2\uffff\1\33"+
        "\1\34\1\35\1\uffff\1\36\1\37\1\40\2\uffff\1\41\1\42\2\uffff\1\43"+
        "\1\44\1\45\1\46\1\47\2\uffff\1\50\1\51\1\52\1\53\1\uffff\1\54\1"+
        "\55\1\56\2\uffff\1\57\1\60\2\uffff\1\61\1\62\1\63\1\64\1\65\1\66"+
        "\1\67\2\uffff\1\70\1\71\1\72\1\73\2\uffff\1\74\1\75\1\76\1\uffff"+
        "\1\77\1\100\1\101\2\uffff\1\102\1\103\2\uffff\1\104\1\105\1\106"+
        "\1\107\1\110\1\111\2\uffff\1\112\1\113\1\114\1\uffff\1\115\1\116"+
        "\1\117\2\uffff\1\120\1\121\2\uffff\1\122\1\123\1\124\1\125\1\126"+
        "\1\127\1\130\3\uffff\1\131\1\132\1\133\2\uffff\1\134\1\135\1\136"+
        "\3\uffff\1\137\1\uffff\1\140\1\uffff\1\141\1\142\1\143\1\144\1\145"+
        "\3\uffff\1\146\1\147\1\150\2\uffff\1\151\1\152\1\153\3\uffff\1\154"+
        "\1\155\1\156\1\157\1\uffff\1\160\1\161\1\162\2\uffff\1\163\1\164"+
        "\2\uffff\1\165\1\166\1\167\1\170\2\uffff\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\3\uffff\1\u0080\1\u0081\1\u0082\2\uffff\1\u0083"+
        "\1\u0084\1\u0085\3\uffff\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a"+
        "\2\uffff\1\u008b\1\u008c\1\u008d\1\u008e\1\uffff\1\u008f\1\u0090"+
        "\1\u0091\2\uffff\1\u0092\1\u0093\2\uffff\1\u0094\1\u0095\1\u0096"+
        "\1\u0097\1\u0098\1\u0099\1\u009a\2\uffff\1\u009b\1\u009c\1\u009d"+
        "\1\uffff\1\u009e\1\u009f\1\u00a0\2\uffff\1\u00a1\1\u00a2\2\uffff"+
        "\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\3\uffff"+
        "\1\u00aa\1\u00ab\1\u00ac\2\uffff\1\u00ad\1\u00ae\1\u00af\3\uffff"+
        "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\2\uffff\1\u00b4\1\u00b5\1\u00b6"+
        "\1\uffff\1\u00b7\1\u00b8\1\u00b9\2\uffff\1\u00ba\1\u00bb\2\uffff"+
        "\1\u00bc\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\2\uffff\1\u00c2"+
        "\1\u00c3\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\3\uffff\1\u00c9"+
        "\1\u00ca\1\u00cb\2\uffff\1\u00cc\1\u00cd\1\u00ce\3\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\6\107\uffff\1\7\64\uffff\1\1\11\uffff\2\7\2\uffff\1\7\4\uffff"+
            "\1\7\5\uffff\1\3\2\uffff\1\7\1\2\1\4\1\7\1\uffff\1\5\1\uffff"+
            "\1\7\3\uffff\3\7",
            "\1\26\u0095\uffff\1\23\3\uffff\1\22\1\24\2\uffff\1\25",
            "\1\7\105\uffff\1\7\2\uffff\1\32\1\uffff\1\30\16\uffff\1\27"+
            "\47\uffff\1\31",
            "\1\7\105\uffff\1\7\2\uffff\1\40\1\uffff\1\36\16\uffff\1\35"+
            "\47\uffff\1\37",
            "\1\7\105\uffff\1\7\2\uffff\1\50\1\uffff\1\46\16\uffff\1\45"+
            "\47\uffff\1\47\10\uffff\1\44\16\uffff\1\43\1\51",
            "\1\7\105\uffff\1\7\2\uffff\1\60\1\uffff\1\56\16\uffff\1\55"+
            "\47\uffff\1\57\27\uffff\1\54\3\uffff\1\61",
            "\1\7\105\uffff\1\7\2\uffff\1\67\1\uffff\1\65\16\uffff\1\64"+
            "\47\uffff\1\66",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\75\1\uffff\1\73\16\uffff\1\72"+
            "\47\uffff\1\74",
            "\1\7\105\uffff\1\7\2\uffff\1\103\1\uffff\1\101\16\uffff\1\100"+
            "\47\uffff\1\102",
            "\1\7\105\uffff\1\7\2\uffff\1\113\1\uffff\1\111\16\uffff\1\110"+
            "\47\uffff\1\112\10\uffff\1\107\16\uffff\1\106\1\114",
            "\1\7\105\uffff\1\7\2\uffff\1\123\1\uffff\1\121\16\uffff\1\120"+
            "\47\uffff\1\122\27\uffff\1\117\3\uffff\1\124",
            "\1\7\105\uffff\1\7\2\uffff\1\132\1\uffff\1\130\16\uffff\1\127"+
            "\47\uffff\1\131",
            "\1\137\131\uffff\1\136\73\uffff\1\135",
            "\1\7\105\uffff\1\7\2\uffff\1\142\1\uffff\1\143\66\uffff\1\141"+
            "\10\uffff\1\7",
            "\1\146\22\uffff\1\146\160\uffff\1\147",
            "\1\151\111\uffff\1\7",
            "",
            "",
            "\1\156\131\uffff\1\157\73\uffff\1\153\3\uffff\2\7\2\uffff\1"+
            "\7",
            "\1\7\105\uffff\1\7\2\uffff\1\162\1\uffff\1\163\66\uffff\1\161"+
            "\10\uffff\1\7",
            "\1\166\22\uffff\1\166\160\uffff\1\167",
            "\1\171\111\uffff\1\7",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\176\1\uffff\1\174\16\uffff\1\173"+
            "\47\uffff\1\175\10\uffff\1\172",
            "\1\u0081",
            "\1\u0084\131\uffff\1\u0083\73\uffff\1\u0082",
            "\1\7\105\uffff\1\7\2\uffff\1\u0087\1\uffff\1\u0088\66\uffff"+
            "\1\u0086\10\uffff\1\7",
            "\1\u008b\22\uffff\1\u008b\160\uffff\1\u008c",
            "\1\u008e\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u0094\1\uffff\1\u0092\16\uffff"+
            "\1\u0091\47\uffff\1\u0093\10\uffff\1\u0090\16\uffff\1\u008f"+
            "\1\u0095",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\u009b\1\uffff\1\u0099\16\uffff"+
            "\1\u0098\47\uffff\1\u009a",
            "\1\u00a0\131\uffff\1\u009f\73\uffff\1\u009e",
            "\1\7\105\uffff\1\7\2\uffff\1\u00a3\1\uffff\1\u00a4\66\uffff"+
            "\1\u00a2\10\uffff\1\7",
            "\1\u00a7\22\uffff\1\u00a7\160\uffff\1\u00a8",
            "\1\u00aa\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u00af\1\uffff\1\u00ad\16\uffff"+
            "\1\u00ac\47\uffff\1\u00ae\27\uffff\1\u00ab\3\uffff\1\u00b0",
            "",
            "",
            "\1\u00b5\131\uffff\1\u00b4\73\uffff\1\u00b3",
            "\1\7\105\uffff\1\7\2\uffff\1\u00b8\1\uffff\1\u00b9\66\uffff"+
            "\1\u00b7\10\uffff\1\7",
            "\1\u00bc\22\uffff\1\u00bc\160\uffff\1\u00bd",
            "\1\u00bf\111\uffff\1\7",
            "",
            "",
            "\1\u00c2\131\uffff\1\u00c1\73\uffff\1\u00c0",
            "\1\7\105\uffff\1\7\2\uffff\1\u00c5\1\uffff\1\u00c6\66\uffff"+
            "\1\u00c4\10\uffff\1\7",
            "\1\u00c9\22\uffff\1\u00c9\160\uffff\1\u00ca",
            "\1\u00cc\111\uffff\1\7",
            "",
            "",
            "\1\u00cf\131\uffff\1\u00ce\73\uffff\1\u00cd",
            "\1\7\105\uffff\1\7\2\uffff\1\u00d2\1\uffff\1\u00d3\66\uffff"+
            "\1\u00d1\10\uffff\1\7",
            "\1\u00d6\22\uffff\1\u00d6\160\uffff\1\u00d7",
            "\1\u00d9\111\uffff\1\7",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\u00de\1\uffff\1\u00dc\16\uffff"+
            "\1\u00db\47\uffff\1\u00dd\10\uffff\1\u00da",
            "\1\u00e1",
            "\1\u00e4\131\uffff\1\u00e3\73\uffff\1\u00e2",
            "\1\7\105\uffff\1\7\2\uffff\1\u00e7\1\uffff\1\u00e8\66\uffff"+
            "\1\u00e6\10\uffff\1\7",
            "\1\u00eb\22\uffff\1\u00eb\160\uffff\1\u00ec",
            "\1\u00ee\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u00f4\1\uffff\1\u00f2\16\uffff"+
            "\1\u00f1\47\uffff\1\u00f3\10\uffff\1\u00f0\16\uffff\1\u00ef"+
            "\1\u00f5",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\u00fb\1\uffff\1\u00f9\16\uffff"+
            "\1\u00f8\47\uffff\1\u00fa",
            "\1\u0100\131\uffff\1\u00ff\73\uffff\1\u00fe",
            "\1\7\105\uffff\1\7\2\uffff\1\u0103\1\uffff\1\u0104\66\uffff"+
            "\1\u0102\10\uffff\1\7",
            "\1\u0107\22\uffff\1\u0107\160\uffff\1\u0108",
            "\1\u010a\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u010f\1\uffff\1\u010d\16\uffff"+
            "\1\u010c\47\uffff\1\u010e\27\uffff\1\u010b\3\uffff\1\u0110",
            "",
            "",
            "\1\u0115\131\uffff\1\u0114\73\uffff\1\u0113",
            "\1\7\105\uffff\1\7\2\uffff\1\u0118\1\uffff\1\u0119\66\uffff"+
            "\1\u0117\10\uffff\1\7",
            "\1\u011c\22\uffff\1\u011c\160\uffff\1\u011d",
            "\1\u011f\111\uffff\1\7",
            "",
            "",
            "\1\u0120",
            "\1\u0123\131\uffff\1\u0122\73\uffff\1\u0121",
            "\1\u0124",
            "",
            "\1\u0125\22\uffff\1\u0125\160\uffff\1\u0126",
            "\1\u0128\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u012b\1\uffff\1\u012c\66\uffff"+
            "\1\u012a\10\uffff\1\7",
            "",
            "",
            "\1\u012f",
            "\1\7\105\uffff\1\7\2\uffff\1\u0130\1\uffff\1\7\66\uffff\1\u0131",
            "",
            "",
            "",
            "\1\u0135\5\uffff\1\7",
            "",
            "",
            "\1\u0137\24\uffff\1\7",
            "\1\u013b\131\uffff\1\u013a\73\uffff\1\u0139",
            "",
            "\1\u013c\22\uffff\1\u013c\160\uffff\1\u013d",
            "\1\u013f\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u0142\1\uffff\1\u0143\66\uffff"+
            "\1\u0141\10\uffff\1\7",
            "",
            "",
            "\1\u0146",
            "\1\7\105\uffff\1\7\2\uffff\1\u0147\1\uffff\1\7\66\uffff\1\u0148",
            "",
            "",
            "\1\u014c",
            "\1\u014f\131\uffff\1\u014e\73\uffff\1\u014d",
            "\1\7\105\uffff\1\7\2\uffff\1\u0152\1\uffff\1\u0153\66\uffff"+
            "\1\u0151\10\uffff\1\7",
            "\1\u0156\22\uffff\1\u0156\160\uffff\1\u0157",
            "\1\u0159\111\uffff\1\7",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\u015d\1\uffff\1\u015b\16\uffff"+
            "\1\u015a\47\uffff\1\u015c",
            "\1\u0160",
            "\1\u0163\131\uffff\1\u0162\73\uffff\1\u0161",
            "\1\u0164",
            "",
            "\1\u0165\22\uffff\1\u0165\160\uffff\1\u0166",
            "\1\u0168\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u016b\1\uffff\1\u016c\66\uffff"+
            "\1\u016a\10\uffff\1\7",
            "",
            "",
            "\1\u016f",
            "\1\7\105\uffff\1\7\2\uffff\1\u0170\1\uffff\1\7\66\uffff\1\u0171",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\u0179\1\uffff\1\u0177\16\uffff"+
            "\1\u0176\47\uffff\1\u0178\10\uffff\1\u0175",
            "\1\u017c",
            "\1\u017f\131\uffff\1\u017e\73\uffff\1\u017d",
            "\1\7\105\uffff\1\7\2\uffff\1\u0182\1\uffff\1\u0183\66\uffff"+
            "\1\u0181\10\uffff\1\7",
            "\1\u0186\22\uffff\1\u0186\160\uffff\1\u0187",
            "\1\u0189\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u018f\1\uffff\1\u018d\16\uffff"+
            "\1\u018c\47\uffff\1\u018e\10\uffff\1\u018b\16\uffff\1\u018a"+
            "\1\u0190",
            "",
            "",
            "\1\u0195\131\uffff\1\u0194\73\uffff\1\u0193",
            "\1\7\105\uffff\1\7\2\uffff\1\u0198\1\uffff\1\u0199\66\uffff"+
            "\1\u0197\10\uffff\1\7",
            "\1\u019c\22\uffff\1\u019c\160\uffff\1\u019d",
            "\1\u019f\111\uffff\1\7",
            "",
            "",
            "\1\u01a0",
            "\1\u01a3\131\uffff\1\u01a2\73\uffff\1\u01a1",
            "\1\u01a4",
            "",
            "\1\u01a5\22\uffff\1\u01a5\160\uffff\1\u01a6",
            "\1\u01a8\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u01ab\1\uffff\1\u01ac\66\uffff"+
            "\1\u01aa\10\uffff\1\7",
            "",
            "",
            "\1\u01af",
            "\1\7\105\uffff\1\7\2\uffff\1\u01b0\1\uffff\1\7\66\uffff\1\u01b1",
            "",
            "",
            "\1\7\105\uffff\1\7\2\uffff\1\u01b8\1\uffff\1\u01b6\16\uffff"+
            "\1\u01b5\47\uffff\1\u01b7",
            "\1\u01bd\131\uffff\1\u01bc\73\uffff\1\u01bb",
            "\1\7\105\uffff\1\7\2\uffff\1\u01c0\1\uffff\1\u01c1\66\uffff"+
            "\1\u01bf\10\uffff\1\7",
            "\1\u01c4\22\uffff\1\u01c4\160\uffff\1\u01c5",
            "\1\u01c7\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u01cc\1\uffff\1\u01ca\16\uffff"+
            "\1\u01c9\47\uffff\1\u01cb\27\uffff\1\u01c8\3\uffff\1\u01cd",
            "",
            "",
            "\1\u01d0",
            "\1\u01d3\131\uffff\1\u01d2\73\uffff\1\u01d1",
            "\1\u01d4",
            "",
            "\1\u01d5\22\uffff\1\u01d5\160\uffff\1\u01d6",
            "\1\u01d8\111\uffff\1\7",
            "\1\7\105\uffff\1\7\2\uffff\1\u01db\1\uffff\1\u01dc\66\uffff"+
            "\1\u01da\10\uffff\1\7",
            "",
            "",
            "\1\u01df",
            "\1\7\105\uffff\1\7\2\uffff\1\u01e0\1\uffff\1\7\66\uffff\1\u01e1",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "815:1: field_declaration : ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA128_26 = input.LA(1);

                         
                        int index128_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_26==120) ) {s = 7;}

                        else if ( (LA128_26==ID) && (synpred25_Objc())) {s = 105;}

                         
                        input.seek(index128_26);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA128_32 = input.LA(1);

                         
                        int index128_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_32==120) ) {s = 7;}

                        else if ( (LA128_32==ID) && (synpred25_Objc())) {s = 121;}

                         
                        input.seek(index128_32);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA128_40 = input.LA(1);

                         
                        int index128_40 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_40==120) ) {s = 7;}

                        else if ( (LA128_40==ID) && (synpred25_Objc())) {s = 142;}

                         
                        input.seek(index128_40);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA128_48 = input.LA(1);

                         
                        int index128_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_48==120) ) {s = 7;}

                        else if ( (LA128_48==ID) && (synpred25_Objc())) {s = 170;}

                         
                        input.seek(index128_48);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA128_55 = input.LA(1);

                         
                        int index128_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_55==120) ) {s = 7;}

                        else if ( (LA128_55==ID) && (synpred25_Objc())) {s = 191;}

                         
                        input.seek(index128_55);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA128_61 = input.LA(1);

                         
                        int index128_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_61==120) ) {s = 7;}

                        else if ( (LA128_61==ID) && (synpred25_Objc())) {s = 204;}

                         
                        input.seek(index128_61);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA128_67 = input.LA(1);

                         
                        int index128_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_67==120) ) {s = 7;}

                        else if ( (LA128_67==ID) && (synpred25_Objc())) {s = 217;}

                         
                        input.seek(index128_67);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA128_75 = input.LA(1);

                         
                        int index128_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_75==120) ) {s = 7;}

                        else if ( (LA128_75==ID) && (synpred25_Objc())) {s = 238;}

                         
                        input.seek(index128_75);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA128_83 = input.LA(1);

                         
                        int index128_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_83==120) ) {s = 7;}

                        else if ( (LA128_83==ID) && (synpred25_Objc())) {s = 266;}

                         
                        input.seek(index128_83);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA128_90 = input.LA(1);

                         
                        int index128_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_90==120) ) {s = 7;}

                        else if ( (LA128_90==ID) && (synpred25_Objc())) {s = 287;}

                         
                        input.seek(index128_90);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA128_98 = input.LA(1);

                         
                        int index128_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_98==120) ) {s = 7;}

                        else if ( (LA128_98==ID) && (synpred25_Objc())) {s = 296;}

                         
                        input.seek(index128_98);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA128_114 = input.LA(1);

                         
                        int index128_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_114==120) ) {s = 7;}

                        else if ( (LA128_114==ID) && (synpred25_Objc())) {s = 319;}

                         
                        input.seek(index128_114);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA128_126 = input.LA(1);

                         
                        int index128_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_126==120) ) {s = 7;}

                        else if ( (LA128_126==ID) && (synpred25_Objc())) {s = 345;}

                         
                        input.seek(index128_126);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA128_135 = input.LA(1);

                         
                        int index128_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_135==120) ) {s = 7;}

                        else if ( (LA128_135==ID) && (synpred25_Objc())) {s = 360;}

                         
                        input.seek(index128_135);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA128_148 = input.LA(1);

                         
                        int index128_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_148==120) ) {s = 7;}

                        else if ( (LA128_148==ID) && (synpred25_Objc())) {s = 393;}

                         
                        input.seek(index128_148);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA128_155 = input.LA(1);

                         
                        int index128_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_155==120) ) {s = 7;}

                        else if ( (LA128_155==ID) && (synpred25_Objc())) {s = 415;}

                         
                        input.seek(index128_155);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA128_163 = input.LA(1);

                         
                        int index128_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_163==120) ) {s = 7;}

                        else if ( (LA128_163==ID) && (synpred25_Objc())) {s = 424;}

                         
                        input.seek(index128_163);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA128_175 = input.LA(1);

                         
                        int index128_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_175==120) ) {s = 7;}

                        else if ( (LA128_175==ID) && (synpred25_Objc())) {s = 455;}

                         
                        input.seek(index128_175);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA128_184 = input.LA(1);

                         
                        int index128_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA128_184==120) ) {s = 7;}

                        else if ( (LA128_184==ID) && (synpred25_Objc())) {s = 472;}

                         
                        input.seek(index128_184);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA128_192 = input.LA(1);

                         
                        int index128_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_192);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA128_193 = input.LA(1);

                         
                        int index128_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_193);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA128_194 = input.LA(1);

                         
                        int index128_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_194);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA128_196 = input.LA(1);

                         
                        int index128_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_196);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA128_197 = input.LA(1);

                         
                        int index128_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_197);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA128_198 = input.LA(1);

                         
                        int index128_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_198);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA128_201 = input.LA(1);

                         
                        int index128_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_201);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA128_202 = input.LA(1);

                         
                        int index128_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_202);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA128_205 = input.LA(1);

                         
                        int index128_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_205);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA128_206 = input.LA(1);

                         
                        int index128_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_206);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA128_207 = input.LA(1);

                         
                        int index128_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_207);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA128_209 = input.LA(1);

                         
                        int index128_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_209);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA128_210 = input.LA(1);

                         
                        int index128_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_210);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA128_211 = input.LA(1);

                         
                        int index128_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_211);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA128_214 = input.LA(1);

                         
                        int index128_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_214);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA128_215 = input.LA(1);

                         
                        int index128_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_215);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA128_218 = input.LA(1);

                         
                        int index128_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_218);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA128_219 = input.LA(1);

                         
                        int index128_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_219);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA128_220 = input.LA(1);

                         
                        int index128_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_220);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA128_221 = input.LA(1);

                         
                        int index128_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_221);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA128_222 = input.LA(1);

                         
                        int index128_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_222);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA128_225 = input.LA(1);

                         
                        int index128_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_225);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA128_226 = input.LA(1);

                         
                        int index128_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_226);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA128_227 = input.LA(1);

                         
                        int index128_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_227);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA128_228 = input.LA(1);

                         
                        int index128_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_228);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA128_230 = input.LA(1);

                         
                        int index128_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_230);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA128_231 = input.LA(1);

                         
                        int index128_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_231);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA128_232 = input.LA(1);

                         
                        int index128_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_232);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA128_235 = input.LA(1);

                         
                        int index128_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_235);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA128_236 = input.LA(1);

                         
                        int index128_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_236);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA128_239 = input.LA(1);

                         
                        int index128_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_239);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA128_240 = input.LA(1);

                         
                        int index128_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_240);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA128_241 = input.LA(1);

                         
                        int index128_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_241);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA128_242 = input.LA(1);

                         
                        int index128_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_242);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA128_243 = input.LA(1);

                         
                        int index128_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_243);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA128_244 = input.LA(1);

                         
                        int index128_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_244);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA128_245 = input.LA(1);

                         
                        int index128_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_245);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA128_248 = input.LA(1);

                         
                        int index128_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_248);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA128_249 = input.LA(1);

                         
                        int index128_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_249);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA128_250 = input.LA(1);

                         
                        int index128_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_250);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA128_251 = input.LA(1);

                         
                        int index128_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_251);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA128_254 = input.LA(1);

                         
                        int index128_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_254);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA128_255 = input.LA(1);

                         
                        int index128_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_255);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA128_256 = input.LA(1);

                         
                        int index128_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_256);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA128_258 = input.LA(1);

                         
                        int index128_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_258);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA128_259 = input.LA(1);

                         
                        int index128_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_259);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA128_260 = input.LA(1);

                         
                        int index128_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_260);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA128_263 = input.LA(1);

                         
                        int index128_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_263);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA128_264 = input.LA(1);

                         
                        int index128_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_264);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA128_267 = input.LA(1);

                         
                        int index128_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_267);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA128_268 = input.LA(1);

                         
                        int index128_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_268);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA128_269 = input.LA(1);

                         
                        int index128_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_269);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA128_270 = input.LA(1);

                         
                        int index128_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_270);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA128_271 = input.LA(1);

                         
                        int index128_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_271);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA128_272 = input.LA(1);

                         
                        int index128_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_272);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA128_275 = input.LA(1);

                         
                        int index128_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_275);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA128_276 = input.LA(1);

                         
                        int index128_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_276);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA128_277 = input.LA(1);

                         
                        int index128_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_277);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA128_279 = input.LA(1);

                         
                        int index128_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_279);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA128_280 = input.LA(1);

                         
                        int index128_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_280);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA128_281 = input.LA(1);

                         
                        int index128_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_281);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA128_284 = input.LA(1);

                         
                        int index128_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_284);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA128_285 = input.LA(1);

                         
                        int index128_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_285);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA128_288 = input.LA(1);

                         
                        int index128_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_288);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA128_289 = input.LA(1);

                         
                        int index128_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_289);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA128_290 = input.LA(1);

                         
                        int index128_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_290);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA128_291 = input.LA(1);

                         
                        int index128_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_291);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA128_292 = input.LA(1);

                         
                        int index128_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_292);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA128_293 = input.LA(1);

                         
                        int index128_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_293);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA128_294 = input.LA(1);

                         
                        int index128_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_294);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA128_298 = input.LA(1);

                         
                        int index128_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_298);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA128_299 = input.LA(1);

                         
                        int index128_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_299);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA128_300 = input.LA(1);

                         
                        int index128_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_300);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA128_303 = input.LA(1);

                         
                        int index128_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_303);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA128_304 = input.LA(1);

                         
                        int index128_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_304);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA128_305 = input.LA(1);

                         
                        int index128_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_305);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA128_309 = input.LA(1);

                         
                        int index128_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_309);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA128_311 = input.LA(1);

                         
                        int index128_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_311);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA128_313 = input.LA(1);

                         
                        int index128_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_313);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA128_314 = input.LA(1);

                         
                        int index128_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_314);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA128_315 = input.LA(1);

                         
                        int index128_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_315);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA128_316 = input.LA(1);

                         
                        int index128_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_316);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA128_317 = input.LA(1);

                         
                        int index128_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_317);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA128_321 = input.LA(1);

                         
                        int index128_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_321);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA128_322 = input.LA(1);

                         
                        int index128_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_322);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA128_323 = input.LA(1);

                         
                        int index128_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_323);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA128_326 = input.LA(1);

                         
                        int index128_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_326);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA128_327 = input.LA(1);

                         
                        int index128_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_327);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA128_328 = input.LA(1);

                         
                        int index128_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_328);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA128_332 = input.LA(1);

                         
                        int index128_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_332);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA128_333 = input.LA(1);

                         
                        int index128_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_333);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA128_334 = input.LA(1);

                         
                        int index128_334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_334);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA128_335 = input.LA(1);

                         
                        int index128_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_335);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA128_337 = input.LA(1);

                         
                        int index128_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_337);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA128_338 = input.LA(1);

                         
                        int index128_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_338);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA128_339 = input.LA(1);

                         
                        int index128_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_339);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA128_342 = input.LA(1);

                         
                        int index128_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_342);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA128_343 = input.LA(1);

                         
                        int index128_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_343);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA128_346 = input.LA(1);

                         
                        int index128_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_346);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA128_347 = input.LA(1);

                         
                        int index128_347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_347);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA128_348 = input.LA(1);

                         
                        int index128_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_348);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA128_349 = input.LA(1);

                         
                        int index128_349 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_349);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA128_352 = input.LA(1);

                         
                        int index128_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_352);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA128_353 = input.LA(1);

                         
                        int index128_353 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_353);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA128_354 = input.LA(1);

                         
                        int index128_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_354);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA128_355 = input.LA(1);

                         
                        int index128_355 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_355);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA128_356 = input.LA(1);

                         
                        int index128_356 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_356);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA128_357 = input.LA(1);

                         
                        int index128_357 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_357);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA128_358 = input.LA(1);

                         
                        int index128_358 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_358);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA128_362 = input.LA(1);

                         
                        int index128_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_362);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA128_363 = input.LA(1);

                         
                        int index128_363 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_363);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA128_364 = input.LA(1);

                         
                        int index128_364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_364);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA128_367 = input.LA(1);

                         
                        int index128_367 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_367);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA128_368 = input.LA(1);

                         
                        int index128_368 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_368);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA128_369 = input.LA(1);

                         
                        int index128_369 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_369);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA128_373 = input.LA(1);

                         
                        int index128_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_373);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA128_374 = input.LA(1);

                         
                        int index128_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_374);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA128_375 = input.LA(1);

                         
                        int index128_375 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_375);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA128_376 = input.LA(1);

                         
                        int index128_376 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_376);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA128_377 = input.LA(1);

                         
                        int index128_377 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_377);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA128_380 = input.LA(1);

                         
                        int index128_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_380);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA128_381 = input.LA(1);

                         
                        int index128_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_381);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA128_382 = input.LA(1);

                         
                        int index128_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_382);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA128_383 = input.LA(1);

                         
                        int index128_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_383);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA128_385 = input.LA(1);

                         
                        int index128_385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_385);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA128_386 = input.LA(1);

                         
                        int index128_386 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_386);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA128_387 = input.LA(1);

                         
                        int index128_387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_387);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA128_390 = input.LA(1);

                         
                        int index128_390 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_390);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA128_391 = input.LA(1);

                         
                        int index128_391 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_391);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA128_394 = input.LA(1);

                         
                        int index128_394 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_394);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA128_395 = input.LA(1);

                         
                        int index128_395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_395);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA128_396 = input.LA(1);

                         
                        int index128_396 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_396);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA128_397 = input.LA(1);

                         
                        int index128_397 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_397);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA128_398 = input.LA(1);

                         
                        int index128_398 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_398);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA128_399 = input.LA(1);

                         
                        int index128_399 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_399);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA128_400 = input.LA(1);

                         
                        int index128_400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_400);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA128_403 = input.LA(1);

                         
                        int index128_403 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_403);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA128_404 = input.LA(1);

                         
                        int index128_404 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_404);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA128_405 = input.LA(1);

                         
                        int index128_405 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_405);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA128_407 = input.LA(1);

                         
                        int index128_407 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_407);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA128_408 = input.LA(1);

                         
                        int index128_408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_408);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA128_409 = input.LA(1);

                         
                        int index128_409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_409);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA128_412 = input.LA(1);

                         
                        int index128_412 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_412);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA128_413 = input.LA(1);

                         
                        int index128_413 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_413);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA128_416 = input.LA(1);

                         
                        int index128_416 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_416);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA128_417 = input.LA(1);

                         
                        int index128_417 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_417);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA128_418 = input.LA(1);

                         
                        int index128_418 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_418);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA128_419 = input.LA(1);

                         
                        int index128_419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_419);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA128_420 = input.LA(1);

                         
                        int index128_420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_420);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA128_421 = input.LA(1);

                         
                        int index128_421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_421);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA128_422 = input.LA(1);

                         
                        int index128_422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_422);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA128_426 = input.LA(1);

                         
                        int index128_426 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_426);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA128_427 = input.LA(1);

                         
                        int index128_427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_427);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA128_428 = input.LA(1);

                         
                        int index128_428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_428);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA128_431 = input.LA(1);

                         
                        int index128_431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_431);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA128_432 = input.LA(1);

                         
                        int index128_432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_432);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA128_433 = input.LA(1);

                         
                        int index128_433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_433);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA128_437 = input.LA(1);

                         
                        int index128_437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_437);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA128_438 = input.LA(1);

                         
                        int index128_438 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_438);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA128_439 = input.LA(1);

                         
                        int index128_439 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_439);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA128_440 = input.LA(1);

                         
                        int index128_440 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_440);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA128_443 = input.LA(1);

                         
                        int index128_443 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_443);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA128_444 = input.LA(1);

                         
                        int index128_444 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_444);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA128_445 = input.LA(1);

                         
                        int index128_445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_445);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA128_447 = input.LA(1);

                         
                        int index128_447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_447);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA128_448 = input.LA(1);

                         
                        int index128_448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_448);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA128_449 = input.LA(1);

                         
                        int index128_449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_449);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA128_452 = input.LA(1);

                         
                        int index128_452 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_452);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA128_453 = input.LA(1);

                         
                        int index128_453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_453);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA128_456 = input.LA(1);

                         
                        int index128_456 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_456);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA128_457 = input.LA(1);

                         
                        int index128_457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_457);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA128_458 = input.LA(1);

                         
                        int index128_458 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_458);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA128_459 = input.LA(1);

                         
                        int index128_459 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_459);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA128_460 = input.LA(1);

                         
                        int index128_460 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_460);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA128_461 = input.LA(1);

                         
                        int index128_461 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_461);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA128_464 = input.LA(1);

                         
                        int index128_464 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_464);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA128_465 = input.LA(1);

                         
                        int index128_465 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_465);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA128_466 = input.LA(1);

                         
                        int index128_466 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_466);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA128_467 = input.LA(1);

                         
                        int index128_467 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_467);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA128_468 = input.LA(1);

                         
                        int index128_468 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_468);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA128_469 = input.LA(1);

                         
                        int index128_469 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_469);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA128_470 = input.LA(1);

                         
                        int index128_470 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_470);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA128_474 = input.LA(1);

                         
                        int index128_474 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_474);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA128_475 = input.LA(1);

                         
                        int index128_475 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_475);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA128_476 = input.LA(1);

                         
                        int index128_476 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_476);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA128_479 = input.LA(1);

                         
                        int index128_479 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_479);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA128_480 = input.LA(1);

                         
                        int index128_480 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_480);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA128_481 = input.LA(1);

                         
                        int index128_481 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred25_Objc()) ) {s = 472;}

                        else if ( (true) ) {s = 7;}

                         
                        input.seek(index128_481);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 128, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA141_eotS =
        "\u0201\uffff";
    static final String DFA141_eofS =
        "\u0201\uffff";
    static final String DFA141_minS =
        "\3\56\1\uffff\5\56\11\uffff\1\56\6\uffff\3\56\4\uffff\10\56\4\uffff"+
        "\1\56\1\171\3\56\1\uffff\1\56\3\uffff\4\56\1\uffff\1\56\3\uffff"+
        "\3\56\4\uffff\1\56\6\uffff\1\u0088\2\uffff\1\171\1\56\1\uffff\1"+
        "\56\1\uffff\1\56\3\uffff\1\u00b2\4\56\4\uffff\3\56\4\uffff\1\56"+
        "\1\171\3\56\1\uffff\1\56\3\uffff\4\56\1\uffff\1\56\3\uffff\3\56"+
        "\4\uffff\1\u0088\1\56\1\171\1\uffff\1\56\1\uffff\1\56\3\uffff\1"+
        "\u00b2\1\56\1\171\3\56\4\uffff\1\56\1\u0088\1\56\1\171\1\uffff\1"+
        "\56\1\uffff\1\56\3\uffff\1\u00b2\2\56\1\171\3\56\1\uffff\1\56\3"+
        "\uffff\3\56\4\uffff\1\u0088\1\56\1\171\1\uffff\1\56\1\uffff\1\56"+
        "\3\uffff\1\u00b2\5\56\1\uffff\1\56\3\uffff\1\u0088\1\56\1\171\1"+
        "\uffff\1\56\1\uffff\1\56\3\uffff\1\u00b2\1\56\1\uffff\1\0\2\uffff"+
        "\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0\1\uffff\1\0"+
        "\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff"+
        "\5\0\1\uffff\1\0\1\uffff\1\0\3\uffff\6\0\4\uffff\4\0\1\uffff\1\0"+
        "\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\3\uffff\3\0\4\uffff\3\0\1\uffff"+
        "\1\0\1\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\3\0\1\uffff\1\0"+
        "\1\uffff\1\0\3\uffff\11\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\1"+
        "\uffff\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff\5\0\4\uffff"+
        "\7\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff\4\0"+
        "\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\3\uffff"+
        "\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff\11\0\1\uffff\1\0\1\uffff\1"+
        "\0\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\4\uffff\3\0\1\uffff\1\0\1"+
        "\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\1\uffff"+
        "\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff";
    static final String DFA141_maxS =
        "\1\u00d4\1\u00cc\1\u00b0\1\uffff\1\u00cc\1\u00b0\1\u00c9\1\u00cc"+
        "\1\u00b0\11\uffff\1\u00b0\6\uffff\1\u00cc\1\u00b9\1\u00b2\4\uffff"+
        "\2\u00b0\1\u00c9\1\u00cc\1\u00b0\1\u00c4\1\u00b9\1\u00b2\4\uffff"+
        "\1\u00b9\1\171\1\u00c4\1\u00b9\1\u00b2\1\uffff\1\u00c9\3\uffff\1"+
        "\u00b0\1\u00c4\1\u00b9\1\u00b2\1\uffff\1\u00cc\3\uffff\1\u00c4\1"+
        "\u00b9\1\u00b2\4\uffff\1\u00cc\6\uffff\1\u008e\2\uffff\1\u008e\1"+
        "\u00c4\1\uffff\1\u00b2\1\uffff\1\u00b9\3\uffff\1\u00b2\1\u00b0\1"+
        "\u00c4\1\u00b9\1\u00b2\4\uffff\1\u00c4\1\u00b9\1\u00b2\4\uffff\1"+
        "\u00b9\1\171\1\u00c4\1\u00b9\1\u00b2\1\uffff\1\u00c9\3\uffff\1\u00b0"+
        "\1\u00c4\1\u00b9\1\u00b2\1\uffff\1\u00cc\3\uffff\1\u00c4\1\u00b9"+
        "\1\u00b2\4\uffff\1\u0088\1\u00c4\1\171\1\uffff\1\u00b2\1\uffff\1"+
        "\u00b9\3\uffff\1\u00b2\1\u00b0\1\171\1\u00c4\1\u00b9\1\u00b2\4\uffff"+
        "\1\u00b0\1\u0088\1\u00c4\1\171\1\uffff\1\u00b2\1\uffff\1\u00b9\3"+
        "\uffff\1\u00b2\1\u00b0\1\u00b9\1\171\1\u00c4\1\u00b9\1\u00b2\1\uffff"+
        "\1\u00c9\3\uffff\1\u00c4\1\u00b9\1\u00b2\4\uffff\1\u0088\1\u00c4"+
        "\1\171\1\uffff\1\u00b2\1\uffff\1\u00b9\3\uffff\1\u00b2\2\u00b0\1"+
        "\u00c4\1\u00b9\1\u00b2\1\uffff\1\u00cc\3\uffff\1\u0088\1\u00c4\1"+
        "\171\1\uffff\1\u00b2\1\uffff\1\u00b9\3\uffff\1\u00b2\1\u00b0\1\uffff"+
        "\1\0\2\uffff\1\0\1\uffff\1\0\1\uffff\1\0\1\uffff\5\0\1\uffff\1\0"+
        "\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\1\uffff\1\0\1\uffff"+
        "\1\0\3\uffff\5\0\1\uffff\1\0\1\uffff\1\0\3\uffff\6\0\4\uffff\4\0"+
        "\1\uffff\1\0\1\uffff\1\0\3\uffff\7\0\1\uffff\1\0\3\uffff\3\0\4\uffff"+
        "\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\3\0"+
        "\1\uffff\1\0\1\uffff\1\0\3\uffff\11\0\1\uffff\1\0\1\uffff\1\0\3"+
        "\uffff\1\0\1\uffff\1\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff"+
        "\5\0\4\uffff\7\0\1\uffff\1\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0"+
        "\4\uffff\4\0\4\uffff\4\0\1\uffff\1\0\1\uffff\1\0\3\uffff\7\0\1\uffff"+
        "\1\0\3\uffff\3\0\1\uffff\1\0\1\uffff\1\0\3\uffff\11\0\1\uffff\1"+
        "\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff\3\0\4\uffff\3\0\1"+
        "\uffff\1\0\1\uffff\1\0\3\uffff\6\0\1\uffff\1\0\3\uffff\7\0\1\uffff"+
        "\1\0\1\uffff\1\0\3\uffff\1\0\1\uffff\1\0\4\uffff";
    static final String DFA141_acceptS =
        "\3\uffff\1\2\5\uffff\1\4\1\5\1\6\1\7\17\uffff\1\3\13\uffff\1\3\10"+
        "\uffff\1\3\10\uffff\1\3\7\uffff\1\3\11\uffff\1\1\1\uffff\2\1\4\uffff"+
        "\1\3\11\uffff\1\3\6\uffff\1\3\10\uffff\1\3\10\uffff\1\3\7\uffff"+
        "\1\3\10\uffff\1\3\12\uffff\1\3\11\uffff\1\3\13\uffff\1\3\7\uffff"+
        "\1\3\10\uffff\1\3\12\uffff\1\3\11\uffff\1\3\6\uffff\1\1\1\uffff"+
        "\2\1\3\uffff\1\1\1\uffff\1\1\7\uffff\1\3\5\uffff\1\3\12\uffff\1"+
        "\3\13\uffff\1\3\12\uffff\1\3\11\uffff\1\3\13\uffff\1\3\7\uffff\1"+
        "\3\10\uffff\1\3\12\uffff\1\3\11\uffff\1\3\17\uffff\1\3\5\uffff\1"+
        "\3\13\uffff\1\3\11\uffff\1\3\14\uffff\1\3\5\uffff\1\3\11\uffff\1"+
        "\3\11\uffff\1\3\13\uffff\1\3\11\uffff\1\3\17\uffff\1\3\5\uffff\1"+
        "\3\10\uffff\1\3\10\uffff\1\3\12\uffff\1\3\15\uffff\1\3\5\uffff\1"+
        "\3\5\uffff";
    static final String DFA141_specialS =
        "\1\0\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\20\uffff\1\6\1\7\5\uffff"+
        "\1\10\1\11\1\12\1\13\1\14\1\uffff\1\15\5\uffff\1\16\2\uffff\1\17"+
        "\2\uffff\1\20\3\uffff\1\21\1\uffff\1\22\2\uffff\1\23\4\uffff\1\24"+
        "\5\uffff\1\25\6\uffff\1\26\2\uffff\1\27\4\uffff\1\30\4\uffff\1\31"+
        "\1\uffff\1\32\6\uffff\1\33\5\uffff\1\34\2\uffff\1\35\2\uffff\1\36"+
        "\3\uffff\1\37\1\uffff\1\40\2\uffff\1\41\4\uffff\1\42\13\uffff\1"+
        "\43\4\uffff\1\44\2\uffff\1\45\5\uffff\1\46\6\uffff\1\47\4\uffff"+
        "\1\50\1\51\2\uffff\1\52\2\uffff\1\53\4\uffff\1\54\13\uffff\1\55"+
        "\4\uffff\1\56\1\57\1\uffff\1\60\2\uffff\1\61\11\uffff\1\62\4\uffff"+
        "\1\63\1\uffff\1\64\2\uffff\1\65\1\uffff\1\66\1\uffff\1\67\1\uffff"+
        "\1\70\1\71\1\72\1\73\1\74\1\uffff\1\75\1\uffff\1\76\3\uffff\1\77"+
        "\1\uffff\1\100\4\uffff\1\101\1\102\1\103\1\uffff\1\104\1\uffff\1"+
        "\105\3\uffff\1\106\1\107\1\110\1\111\1\112\1\uffff\1\113\1\uffff"+
        "\1\114\3\uffff\1\115\1\116\1\117\1\120\1\121\1\122\4\uffff\1\123"+
        "\1\124\1\125\1\126\1\uffff\1\127\1\uffff\1\130\3\uffff\1\131\1\132"+
        "\1\133\1\134\1\135\1\136\1\137\1\uffff\1\140\3\uffff\1\141\1\142"+
        "\1\143\4\uffff\1\144\1\145\1\146\1\uffff\1\147\1\uffff\1\150\3\uffff"+
        "\1\151\1\152\1\153\1\154\1\155\1\156\1\uffff\1\157\3\uffff\1\160"+
        "\1\161\1\162\1\uffff\1\163\1\uffff\1\164\3\uffff\1\165\1\166\1\167"+
        "\1\170\1\171\1\172\1\173\1\174\1\175\1\uffff\1\176\1\uffff\1\177"+
        "\3\uffff\1\u0080\1\uffff\1\u0081\4\uffff\1\u0082\1\u0083\1\u0084"+
        "\1\u0085\1\uffff\1\u0086\1\uffff\1\u0087\3\uffff\1\u0088\1\u0089"+
        "\1\u008a\1\u008b\1\u008c\4\uffff\1\u008d\1\u008e\1\u008f\1\u0090"+
        "\1\u0091\1\u0092\1\u0093\1\uffff\1\u0094\1\uffff\1\u0095\3\uffff"+
        "\1\u0096\1\uffff\1\u0097\4\uffff\1\u0098\1\u0099\1\u009a\1\u009b"+
        "\4\uffff\1\u009c\1\u009d\1\u009e\1\u009f\1\uffff\1\u00a0\1\uffff"+
        "\1\u00a1\3\uffff\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1\u00a7"+
        "\1\u00a8\1\uffff\1\u00a9\3\uffff\1\u00aa\1\u00ab\1\u00ac\1\uffff"+
        "\1\u00ad\1\uffff\1\u00ae\3\uffff\1\u00af\1\u00b0\1\u00b1\1\u00b2"+
        "\1\u00b3\1\u00b4\1\u00b5\1\u00b6\1\u00b7\1\uffff\1\u00b8\1\uffff"+
        "\1\u00b9\3\uffff\1\u00ba\1\uffff\1\u00bb\4\uffff\1\u00bc\1\u00bd"+
        "\1\u00be\4\uffff\1\u00bf\1\u00c0\1\u00c1\1\uffff\1\u00c2\1\uffff"+
        "\1\u00c3\3\uffff\1\u00c4\1\u00c5\1\u00c6\1\u00c7\1\u00c8\1\u00c9"+
        "\1\uffff\1\u00ca\3\uffff\1\u00cb\1\u00cc\1\u00cd\1\u00ce\1\u00cf"+
        "\1\u00d0\1\u00d1\1\uffff\1\u00d2\1\uffff\1\u00d3\3\uffff\1\u00d4"+
        "\1\uffff\1\u00d5\4\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\10\107\uffff\1\3\64\uffff\1\4\11\uffff\1\14\1\1\2\uffff\1"+
            "\14\4\uffff\1\12\5\uffff\1\2\2\uffff\1\14\1\5\1\6\1\14\1\uffff"+
            "\1\7\1\uffff\1\11\3\uffff\1\13\2\14",
            "\1\14\174\uffff\1\14\30\uffff\1\22\3\uffff\3\14\1\uffff\1\14",
            "\1\14\105\uffff\1\14\2\uffff\1\34\1\14\1\32\16\uffff\1\31\47"+
            "\uffff\1\33",
            "",
            "\1\44\u0095\uffff\1\41\3\uffff\1\40\1\42\2\uffff\1\43",
            "\1\14\105\uffff\1\14\2\uffff\1\50\1\14\1\46\16\uffff\1\45\47"+
            "\uffff\1\47",
            "\1\14\105\uffff\1\14\2\uffff\1\61\1\14\1\57\16\uffff\1\56\47"+
            "\uffff\1\60\10\uffff\1\55\16\uffff\1\54\1\62",
            "\1\14\105\uffff\1\14\2\uffff\1\72\1\14\1\70\16\uffff\1\67\47"+
            "\uffff\1\71\27\uffff\1\66\3\uffff\1\73",
            "\1\14\105\uffff\1\14\2\uffff\1\102\1\14\1\100\16\uffff\1\77"+
            "\47\uffff\1\101",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\105\uffff\1\14\3\uffff\2\14\16\uffff\1\106\47\uffff\1"+
            "\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\120\131\uffff\1\121\73\uffff\1\115\3\uffff\1\114\1\116\2"+
            "\uffff\1\117",
            "\1\14\105\uffff\1\14\2\uffff\1\124\1\14\1\125\66\uffff\1\123"+
            "\10\uffff\1\14",
            "\1\131\22\uffff\1\131\160\uffff\1\132",
            "",
            "",
            "",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\136\1\14\1\134\16\uffff\1\133"+
            "\47\uffff\1\135",
            "\1\14\105\uffff\1\14\2\uffff\1\145\1\14\1\143\16\uffff\1\142"+
            "\47\uffff\1\144",
            "\1\14\105\uffff\1\14\2\uffff\1\156\1\14\1\154\16\uffff\1\153"+
            "\47\uffff\1\155\10\uffff\1\152\16\uffff\1\151\1\157",
            "\1\14\105\uffff\1\14\2\uffff\1\167\1\14\1\165\16\uffff\1\164"+
            "\47\uffff\1\166\27\uffff\1\163\3\uffff\1\170",
            "\1\14\105\uffff\1\14\2\uffff\1\177\1\14\1\175\16\uffff\1\174"+
            "\47\uffff\1\176",
            "\1\u0085\131\uffff\1\u0084\73\uffff\1\u0083",
            "\1\14\105\uffff\1\14\2\uffff\1\u0088\1\14\1\u0089\66\uffff"+
            "\1\u0087\10\uffff\1\14",
            "\1\u008d\22\uffff\1\u008d\160\uffff\1\u008e",
            "",
            "",
            "",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u0093\1\14\1\u0091\16\uffff"+
            "\1\u0090\47\uffff\1\u0092\10\uffff\1\u008f",
            "\1\u0097",
            "\1\u009a\131\uffff\1\u0099\73\uffff\1\u0098",
            "\1\14\105\uffff\1\14\2\uffff\1\u009d\1\14\1\u009e\66\uffff"+
            "\1\u009c\10\uffff\1\14",
            "\1\u00a2\22\uffff\1\u00a2\160\uffff\1\u00a3",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u00a9\1\14\1\u00a7\16\uffff"+
            "\1\u00a6\47\uffff\1\u00a8\10\uffff\1\u00a5\16\uffff\1\u00a4"+
            "\1\u00aa",
            "",
            "",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u00b1\1\14\1\u00af\16\uffff"+
            "\1\u00ae\47\uffff\1\u00b0",
            "\1\u00b7\131\uffff\1\u00b6\73\uffff\1\u00b5",
            "\1\14\105\uffff\1\14\2\uffff\1\u00ba\1\14\1\u00bb\66\uffff"+
            "\1\u00b9\10\uffff\1\14",
            "\1\u00bf\22\uffff\1\u00bf\160\uffff\1\u00c0",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u00c5\1\14\1\u00c3\16\uffff"+
            "\1\u00c2\47\uffff\1\u00c4\27\uffff\1\u00c1\3\uffff\1\u00c6",
            "",
            "",
            "",
            "\1\u00cc\131\uffff\1\u00cb\73\uffff\1\u00ca",
            "\1\14\105\uffff\1\14\2\uffff\1\u00cf\1\14\1\u00d0\66\uffff"+
            "\1\u00ce\10\uffff\1\14",
            "\1\u00d4\22\uffff\1\u00d4\160\uffff\1\u00d5",
            "",
            "",
            "",
            "",
            "\1\u00da\131\uffff\1\14\73\uffff\1\u00d7\3\uffff\1\u00d6\1"+
            "\u00d8\2\uffff\1\u00d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00dc\5\uffff\1\u00dd",
            "",
            "",
            "\1\u00de\24\uffff\1\u00df",
            "\1\u00e2\131\uffff\1\u00e1\73\uffff\1\u00e0",
            "",
            "\1\u00e3\22\uffff\1\u00e3\160\uffff\1\u00e4",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u00e7\1\14\1\u00e8\66\uffff"+
            "\1\u00e6\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u00ec",
            "\1\14\105\uffff\1\14\2\uffff\1\u00ed\2\14\66\uffff\1\u00ee",
            "\1\u00f5\131\uffff\1\u00f4\73\uffff\1\u00f3",
            "\1\14\105\uffff\1\14\2\uffff\1\u00f8\1\14\1\u00f9\66\uffff"+
            "\1\u00f7\10\uffff\1\14",
            "\1\u00fd\22\uffff\1\u00fd\160\uffff\1\u00fe",
            "",
            "",
            "",
            "",
            "\1\u0101\131\uffff\1\u0100\73\uffff\1\u00ff",
            "\1\14\105\uffff\1\14\2\uffff\1\u0104\1\14\1\u0105\66\uffff"+
            "\1\u0103\10\uffff\1\14",
            "\1\u0109\22\uffff\1\u0109\160\uffff\1\u010a",
            "",
            "",
            "",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u010f\1\14\1\u010d\16\uffff"+
            "\1\u010c\47\uffff\1\u010e\10\uffff\1\u010b",
            "\1\u0113",
            "\1\u0116\131\uffff\1\u0115\73\uffff\1\u0114",
            "\1\14\105\uffff\1\14\2\uffff\1\u0119\1\14\1\u011a\66\uffff"+
            "\1\u0118\10\uffff\1\14",
            "\1\u011e\22\uffff\1\u011e\160\uffff\1\u011f",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u0125\1\14\1\u0123\16\uffff"+
            "\1\u0122\47\uffff\1\u0124\10\uffff\1\u0121\16\uffff\1\u0120"+
            "\1\u0126",
            "",
            "",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u012d\1\14\1\u012b\16\uffff"+
            "\1\u012a\47\uffff\1\u012c",
            "\1\u0133\131\uffff\1\u0132\73\uffff\1\u0131",
            "\1\14\105\uffff\1\14\2\uffff\1\u0136\1\14\1\u0137\66\uffff"+
            "\1\u0135\10\uffff\1\14",
            "\1\u013b\22\uffff\1\u013b\160\uffff\1\u013c",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u0141\1\14\1\u013f\16\uffff"+
            "\1\u013e\47\uffff\1\u0140\27\uffff\1\u013d\3\uffff\1\u0142",
            "",
            "",
            "",
            "\1\u0148\131\uffff\1\u0147\73\uffff\1\u0146",
            "\1\14\105\uffff\1\14\2\uffff\1\u014b\1\14\1\u014c\66\uffff"+
            "\1\u014a\10\uffff\1\14",
            "\1\u0150\22\uffff\1\u0150\160\uffff\1\u0151",
            "",
            "",
            "",
            "",
            "\1\u0152",
            "\1\u0155\131\uffff\1\u0154\73\uffff\1\u0153",
            "\1\u0156",
            "",
            "\1\u0157\22\uffff\1\u0157\160\uffff\1\u0158",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u015b\1\14\1\u015c\66\uffff"+
            "\1\u015a\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u0160",
            "\1\14\105\uffff\1\14\2\uffff\1\u0161\2\14\66\uffff\1\u0162",
            "\1\u0167",
            "\1\u016a\131\uffff\1\u0169\73\uffff\1\u0168",
            "\1\14\105\uffff\1\14\2\uffff\1\u016d\1\14\1\u016e\66\uffff"+
            "\1\u016c\10\uffff\1\14",
            "\1\u0172\22\uffff\1\u0172\160\uffff\1\u0173",
            "",
            "",
            "",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u0177\1\14\1\u0175\16\uffff"+
            "\1\u0174\47\uffff\1\u0176",
            "\1\u017b",
            "\1\u017e\131\uffff\1\u017d\73\uffff\1\u017c",
            "\1\u017f",
            "",
            "\1\u0180\22\uffff\1\u0180\160\uffff\1\u0181",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u0184\1\14\1\u0185\66\uffff"+
            "\1\u0183\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u0189",
            "\1\14\105\uffff\1\14\2\uffff\1\u018a\2\14\66\uffff\1\u018b",
            "\1\14\105\uffff\1\14\2\uffff\1\u0194\1\14\1\u0192\16\uffff"+
            "\1\u0191\47\uffff\1\u0193\10\uffff\1\u0190",
            "\1\u0198",
            "\1\u019b\131\uffff\1\u019a\73\uffff\1\u0199",
            "\1\14\105\uffff\1\14\2\uffff\1\u019e\1\14\1\u019f\66\uffff"+
            "\1\u019d\10\uffff\1\14",
            "\1\u01a3\22\uffff\1\u01a3\160\uffff\1\u01a4",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u01aa\1\14\1\u01a8\16\uffff"+
            "\1\u01a7\47\uffff\1\u01a9\10\uffff\1\u01a6\16\uffff\1\u01a5"+
            "\1\u01ab",
            "",
            "",
            "",
            "\1\u01b1\131\uffff\1\u01b0\73\uffff\1\u01af",
            "\1\14\105\uffff\1\14\2\uffff\1\u01b4\1\14\1\u01b5\66\uffff"+
            "\1\u01b3\10\uffff\1\14",
            "\1\u01b9\22\uffff\1\u01b9\160\uffff\1\u01ba",
            "",
            "",
            "",
            "",
            "\1\u01bb",
            "\1\u01be\131\uffff\1\u01bd\73\uffff\1\u01bc",
            "\1\u01bf",
            "",
            "\1\u01c0\22\uffff\1\u01c0\160\uffff\1\u01c1",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u01c4\1\14\1\u01c5\66\uffff"+
            "\1\u01c3\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u01c9",
            "\1\14\105\uffff\1\14\2\uffff\1\u01ca\2\14\66\uffff\1\u01cb",
            "\1\14\105\uffff\1\14\2\uffff\1\u01d3\1\14\1\u01d1\16\uffff"+
            "\1\u01d0\47\uffff\1\u01d2",
            "\1\u01d9\131\uffff\1\u01d8\73\uffff\1\u01d7",
            "\1\14\105\uffff\1\14\2\uffff\1\u01dc\1\14\1\u01dd\66\uffff"+
            "\1\u01db\10\uffff\1\14",
            "\1\u01e1\22\uffff\1\u01e1\160\uffff\1\u01e2",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u01e7\1\14\1\u01e5\16\uffff"+
            "\1\u01e4\47\uffff\1\u01e6\27\uffff\1\u01e3\3\uffff\1\u01e8",
            "",
            "",
            "",
            "\1\u01ec",
            "\1\u01ef\131\uffff\1\u01ee\73\uffff\1\u01ed",
            "\1\u01f0",
            "",
            "\1\u01f1\22\uffff\1\u01f1\160\uffff\1\u01f2",
            "",
            "\1\14\105\uffff\1\14\2\uffff\1\u01f5\1\14\1\u01f6\66\uffff"+
            "\1\u01f4\10\uffff\1\14",
            "",
            "",
            "",
            "\1\u01fa",
            "\1\14\105\uffff\1\14\2\uffff\1\u01fb\2\14\66\uffff\1\u01fc",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "841:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_0 = input.LA(1);

                         
                        int index141_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_0==182) ) {s = 1;}

                        else if ( (LA141_0==196) ) {s = 2;}

                        else if ( (LA141_0==118) && (synpred29_Objc())) {s = 3;}

                        else if ( (LA141_0==171) ) {s = 4;}

                        else if ( (LA141_0==200) ) {s = 5;}

                        else if ( (LA141_0==201) ) {s = 6;}

                        else if ( (LA141_0==204) ) {s = 7;}

                        else if ( (LA141_0==ID) ) {s = 8;}

                        else if ( (LA141_0==206) ) {s = 9;}

                        else if ( (LA141_0==190) ) {s = 10;}

                        else if ( (LA141_0==210) ) {s = 11;}

                        else if ( (LA141_0==181||LA141_0==185||LA141_0==199||LA141_0==202||(LA141_0 >= 211 && LA141_0 <= 212)) ) {s = 12;}

                         
                        input.seek(index141_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA141_2 = input.LA(1);

                         
                        int index141_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_2==136) ) {s = 25;}

                        else if ( (LA141_2==121) ) {s = 26;}

                        else if ( (LA141_2==176) ) {s = 27;}

                        else if ( (LA141_2==119) && (synpred30_Objc())) {s = 28;}

                        else if ( (LA141_2==ID||LA141_2==116||LA141_2==120) ) {s = 12;}

                         
                        input.seek(index141_2);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA141_5 = input.LA(1);

                         
                        int index141_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_5==136) ) {s = 37;}

                        else if ( (LA141_5==121) ) {s = 38;}

                        else if ( (LA141_5==176) ) {s = 39;}

                        else if ( (LA141_5==119) && (synpred30_Objc())) {s = 40;}

                        else if ( (LA141_5==ID||LA141_5==116||LA141_5==120) ) {s = 12;}

                         
                        input.seek(index141_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA141_6 = input.LA(1);

                         
                        int index141_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_6==200) ) {s = 44;}

                        else if ( (LA141_6==185) ) {s = 45;}

                        else if ( (LA141_6==136) ) {s = 46;}

                        else if ( (LA141_6==121) ) {s = 47;}

                        else if ( (LA141_6==176) ) {s = 48;}

                        else if ( (LA141_6==119) && (synpred30_Objc())) {s = 49;}

                        else if ( (LA141_6==201) ) {s = 50;}

                        else if ( (LA141_6==ID||LA141_6==116||LA141_6==120) ) {s = 12;}

                         
                        input.seek(index141_6);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA141_7 = input.LA(1);

                         
                        int index141_7 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_7==200) ) {s = 54;}

                        else if ( (LA141_7==136) ) {s = 55;}

                        else if ( (LA141_7==121) ) {s = 56;}

                        else if ( (LA141_7==176) ) {s = 57;}

                        else if ( (LA141_7==119) && (synpred30_Objc())) {s = 58;}

                        else if ( (LA141_7==204) ) {s = 59;}

                        else if ( (LA141_7==ID||LA141_7==116||LA141_7==120) ) {s = 12;}

                         
                        input.seek(index141_7);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA141_8 = input.LA(1);

                         
                        int index141_8 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_8==136) ) {s = 63;}

                        else if ( (LA141_8==121) ) {s = 64;}

                        else if ( (LA141_8==176) ) {s = 65;}

                        else if ( (LA141_8==119) && (synpred30_Objc())) {s = 66;}

                        else if ( (LA141_8==ID||LA141_8==116||LA141_8==120) ) {s = 12;}

                         
                        input.seek(index141_8);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA141_25 = input.LA(1);

                         
                        int index141_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_25==200) && (synpred28_Objc())) {s = 76;}

                        else if ( (LA141_25==196) ) {s = 77;}

                        else if ( (LA141_25==201) && (synpred28_Objc())) {s = 78;}

                        else if ( (LA141_25==204) && (synpred28_Objc())) {s = 79;}

                        else if ( (LA141_25==ID) ) {s = 80;}

                        else if ( (LA141_25==136) ) {s = 81;}

                         
                        input.seek(index141_25);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA141_26 = input.LA(1);

                         
                        int index141_26 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_26==ID||LA141_26==116||LA141_26==120||LA141_26==185) ) {s = 12;}

                        else if ( (LA141_26==176) ) {s = 83;}

                        else if ( (LA141_26==119) && (synpred30_Objc())) {s = 84;}

                        else if ( (LA141_26==121) ) {s = 85;}

                         
                        input.seek(index141_26);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA141_32 = input.LA(1);

                         
                        int index141_32 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_32==136) ) {s = 91;}

                        else if ( (LA141_32==121) ) {s = 92;}

                        else if ( (LA141_32==176) ) {s = 93;}

                        else if ( (LA141_32==119) && (synpred30_Objc())) {s = 94;}

                        else if ( (LA141_32==ID||LA141_32==116||LA141_32==120) ) {s = 12;}

                         
                        input.seek(index141_32);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA141_33 = input.LA(1);

                         
                        int index141_33 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_33==136) ) {s = 98;}

                        else if ( (LA141_33==121) ) {s = 99;}

                        else if ( (LA141_33==176) ) {s = 100;}

                        else if ( (LA141_33==119) && (synpred30_Objc())) {s = 101;}

                        else if ( (LA141_33==ID||LA141_33==116||LA141_33==120) ) {s = 12;}

                         
                        input.seek(index141_33);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA141_34 = input.LA(1);

                         
                        int index141_34 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_34==200) ) {s = 105;}

                        else if ( (LA141_34==185) ) {s = 106;}

                        else if ( (LA141_34==136) ) {s = 107;}

                        else if ( (LA141_34==121) ) {s = 108;}

                        else if ( (LA141_34==176) ) {s = 109;}

                        else if ( (LA141_34==119) && (synpred30_Objc())) {s = 110;}

                        else if ( (LA141_34==201) ) {s = 111;}

                        else if ( (LA141_34==ID||LA141_34==116||LA141_34==120) ) {s = 12;}

                         
                        input.seek(index141_34);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA141_35 = input.LA(1);

                         
                        int index141_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_35==200) ) {s = 115;}

                        else if ( (LA141_35==136) ) {s = 116;}

                        else if ( (LA141_35==121) ) {s = 117;}

                        else if ( (LA141_35==176) ) {s = 118;}

                        else if ( (LA141_35==119) && (synpred30_Objc())) {s = 119;}

                        else if ( (LA141_35==204) ) {s = 120;}

                        else if ( (LA141_35==ID||LA141_35==116||LA141_35==120) ) {s = 12;}

                         
                        input.seek(index141_35);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA141_36 = input.LA(1);

                         
                        int index141_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_36==136) ) {s = 124;}

                        else if ( (LA141_36==121) ) {s = 125;}

                        else if ( (LA141_36==176) ) {s = 126;}

                        else if ( (LA141_36==119) && (synpred30_Objc())) {s = 127;}

                        else if ( (LA141_36==ID||LA141_36==116||LA141_36==120) ) {s = 12;}

                         
                        input.seek(index141_36);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA141_38 = input.LA(1);

                         
                        int index141_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_38==ID||LA141_38==116||LA141_38==120||LA141_38==185) ) {s = 12;}

                        else if ( (LA141_38==176) ) {s = 135;}

                        else if ( (LA141_38==119) && (synpred30_Objc())) {s = 136;}

                        else if ( (LA141_38==121) ) {s = 137;}

                         
                        input.seek(index141_38);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA141_44 = input.LA(1);

                         
                        int index141_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_44==185) ) {s = 143;}

                        else if ( (LA141_44==136) ) {s = 144;}

                        else if ( (LA141_44==121) ) {s = 145;}

                        else if ( (LA141_44==176) ) {s = 146;}

                        else if ( (LA141_44==119) && (synpred30_Objc())) {s = 147;}

                        else if ( (LA141_44==ID||LA141_44==116||LA141_44==120) ) {s = 12;}

                         
                        input.seek(index141_44);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA141_47 = input.LA(1);

                         
                        int index141_47 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_47==ID||LA141_47==116||LA141_47==120||LA141_47==185) ) {s = 12;}

                        else if ( (LA141_47==176) ) {s = 156;}

                        else if ( (LA141_47==119) && (synpred30_Objc())) {s = 157;}

                        else if ( (LA141_47==121) ) {s = 158;}

                         
                        input.seek(index141_47);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA141_50 = input.LA(1);

                         
                        int index141_50 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_50==200) ) {s = 164;}

                        else if ( (LA141_50==185) ) {s = 165;}

                        else if ( (LA141_50==136) ) {s = 166;}

                        else if ( (LA141_50==121) ) {s = 167;}

                        else if ( (LA141_50==176) ) {s = 168;}

                        else if ( (LA141_50==119) && (synpred30_Objc())) {s = 169;}

                        else if ( (LA141_50==201) ) {s = 170;}

                        else if ( (LA141_50==ID||LA141_50==116||LA141_50==120) ) {s = 12;}

                         
                        input.seek(index141_50);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA141_54 = input.LA(1);

                         
                        int index141_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_54==136) ) {s = 174;}

                        else if ( (LA141_54==121) ) {s = 175;}

                        else if ( (LA141_54==176) ) {s = 176;}

                        else if ( (LA141_54==119) && (synpred30_Objc())) {s = 177;}

                        else if ( (LA141_54==ID||LA141_54==116||LA141_54==120) ) {s = 12;}

                         
                        input.seek(index141_54);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA141_56 = input.LA(1);

                         
                        int index141_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_56==ID||LA141_56==116||LA141_56==120||LA141_56==185) ) {s = 12;}

                        else if ( (LA141_56==176) ) {s = 185;}

                        else if ( (LA141_56==119) && (synpred30_Objc())) {s = 186;}

                        else if ( (LA141_56==121) ) {s = 187;}

                         
                        input.seek(index141_56);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA141_59 = input.LA(1);

                         
                        int index141_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_59==200) ) {s = 193;}

                        else if ( (LA141_59==136) ) {s = 194;}

                        else if ( (LA141_59==121) ) {s = 195;}

                        else if ( (LA141_59==176) ) {s = 196;}

                        else if ( (LA141_59==119) && (synpred30_Objc())) {s = 197;}

                        else if ( (LA141_59==204) ) {s = 198;}

                        else if ( (LA141_59==ID||LA141_59==116||LA141_59==120) ) {s = 12;}

                         
                        input.seek(index141_59);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA141_64 = input.LA(1);

                         
                        int index141_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_64==ID||LA141_64==116||LA141_64==120||LA141_64==185) ) {s = 12;}

                        else if ( (LA141_64==176) ) {s = 206;}

                        else if ( (LA141_64==119) && (synpred30_Objc())) {s = 207;}

                        else if ( (LA141_64==121) ) {s = 208;}

                         
                        input.seek(index141_64);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA141_70 = input.LA(1);

                         
                        int index141_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_70==200) && (synpred28_Objc())) {s = 214;}

                        else if ( (LA141_70==196) ) {s = 215;}

                        else if ( (LA141_70==201) && (synpred28_Objc())) {s = 216;}

                        else if ( (LA141_70==204) && (synpred28_Objc())) {s = 217;}

                        else if ( (LA141_70==ID) ) {s = 218;}

                        else if ( (LA141_70==136) ) {s = 12;}

                         
                        input.seek(index141_70);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA141_77 = input.LA(1);

                         
                        int index141_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_77==136) ) {s = 220;}

                        else if ( (LA141_77==142) && (synpred28_Objc())) {s = 221;}

                         
                        input.seek(index141_77);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA141_80 = input.LA(1);

                         
                        int index141_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_80==121) ) {s = 222;}

                        else if ( (LA141_80==142) && (synpred28_Objc())) {s = 223;}

                         
                        input.seek(index141_80);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA141_85 = input.LA(1);

                         
                        int index141_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_85==ID||LA141_85==116||LA141_85==120||LA141_85==185) ) {s = 12;}

                        else if ( (LA141_85==176) ) {s = 230;}

                        else if ( (LA141_85==119) && (synpred30_Objc())) {s = 231;}

                        else if ( (LA141_85==121) ) {s = 232;}

                         
                        input.seek(index141_85);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA141_90 = input.LA(1);

                         
                        int index141_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_90==119) && (synpred30_Objc())) {s = 237;}

                        else if ( (LA141_90==176) ) {s = 238;}

                        else if ( (LA141_90==ID||LA141_90==116||(LA141_90 >= 120 && LA141_90 <= 121)) ) {s = 12;}

                         
                        input.seek(index141_90);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA141_92 = input.LA(1);

                         
                        int index141_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_92==ID||LA141_92==116||LA141_92==120||LA141_92==185) ) {s = 12;}

                        else if ( (LA141_92==176) ) {s = 247;}

                        else if ( (LA141_92==119) && (synpred30_Objc())) {s = 248;}

                        else if ( (LA141_92==121) ) {s = 249;}

                         
                        input.seek(index141_92);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA141_99 = input.LA(1);

                         
                        int index141_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_99==ID||LA141_99==116||LA141_99==120||LA141_99==185) ) {s = 12;}

                        else if ( (LA141_99==176) ) {s = 259;}

                        else if ( (LA141_99==119) && (synpred30_Objc())) {s = 260;}

                        else if ( (LA141_99==121) ) {s = 261;}

                         
                        input.seek(index141_99);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA141_105 = input.LA(1);

                         
                        int index141_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_105==185) ) {s = 267;}

                        else if ( (LA141_105==136) ) {s = 268;}

                        else if ( (LA141_105==121) ) {s = 269;}

                        else if ( (LA141_105==176) ) {s = 270;}

                        else if ( (LA141_105==119) && (synpred30_Objc())) {s = 271;}

                        else if ( (LA141_105==ID||LA141_105==116||LA141_105==120) ) {s = 12;}

                         
                        input.seek(index141_105);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA141_108 = input.LA(1);

                         
                        int index141_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_108==ID||LA141_108==116||LA141_108==120||LA141_108==185) ) {s = 12;}

                        else if ( (LA141_108==176) ) {s = 280;}

                        else if ( (LA141_108==119) && (synpred30_Objc())) {s = 281;}

                        else if ( (LA141_108==121) ) {s = 282;}

                         
                        input.seek(index141_108);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA141_111 = input.LA(1);

                         
                        int index141_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_111==200) ) {s = 288;}

                        else if ( (LA141_111==185) ) {s = 289;}

                        else if ( (LA141_111==136) ) {s = 290;}

                        else if ( (LA141_111==121) ) {s = 291;}

                        else if ( (LA141_111==176) ) {s = 292;}

                        else if ( (LA141_111==119) && (synpred30_Objc())) {s = 293;}

                        else if ( (LA141_111==201) ) {s = 294;}

                        else if ( (LA141_111==ID||LA141_111==116||LA141_111==120) ) {s = 12;}

                         
                        input.seek(index141_111);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA141_115 = input.LA(1);

                         
                        int index141_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_115==136) ) {s = 298;}

                        else if ( (LA141_115==121) ) {s = 299;}

                        else if ( (LA141_115==176) ) {s = 300;}

                        else if ( (LA141_115==119) && (synpred30_Objc())) {s = 301;}

                        else if ( (LA141_115==ID||LA141_115==116||LA141_115==120) ) {s = 12;}

                         
                        input.seek(index141_115);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA141_117 = input.LA(1);

                         
                        int index141_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_117==ID||LA141_117==116||LA141_117==120||LA141_117==185) ) {s = 12;}

                        else if ( (LA141_117==176) ) {s = 309;}

                        else if ( (LA141_117==119) && (synpred30_Objc())) {s = 310;}

                        else if ( (LA141_117==121) ) {s = 311;}

                         
                        input.seek(index141_117);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA141_120 = input.LA(1);

                         
                        int index141_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_120==200) ) {s = 317;}

                        else if ( (LA141_120==136) ) {s = 318;}

                        else if ( (LA141_120==121) ) {s = 319;}

                        else if ( (LA141_120==176) ) {s = 320;}

                        else if ( (LA141_120==119) && (synpred30_Objc())) {s = 321;}

                        else if ( (LA141_120==204) ) {s = 322;}

                        else if ( (LA141_120==ID||LA141_120==116||LA141_120==120) ) {s = 12;}

                         
                        input.seek(index141_120);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA141_125 = input.LA(1);

                         
                        int index141_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_125==ID||LA141_125==116||LA141_125==120||LA141_125==185) ) {s = 12;}

                        else if ( (LA141_125==176) ) {s = 330;}

                        else if ( (LA141_125==119) && (synpred30_Objc())) {s = 331;}

                        else if ( (LA141_125==121) ) {s = 332;}

                         
                        input.seek(index141_125);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA141_137 = input.LA(1);

                         
                        int index141_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_137==ID||LA141_137==116||LA141_137==120||LA141_137==185) ) {s = 12;}

                        else if ( (LA141_137==176) ) {s = 346;}

                        else if ( (LA141_137==119) && (synpred30_Objc())) {s = 347;}

                        else if ( (LA141_137==121) ) {s = 348;}

                         
                        input.seek(index141_137);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA141_142 = input.LA(1);

                         
                        int index141_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_142==119) && (synpred30_Objc())) {s = 353;}

                        else if ( (LA141_142==176) ) {s = 354;}

                        else if ( (LA141_142==ID||LA141_142==116||(LA141_142 >= 120 && LA141_142 <= 121)) ) {s = 12;}

                         
                        input.seek(index141_142);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA141_145 = input.LA(1);

                         
                        int index141_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_145==ID||LA141_145==116||LA141_145==120||LA141_145==185) ) {s = 12;}

                        else if ( (LA141_145==176) ) {s = 364;}

                        else if ( (LA141_145==119) && (synpred30_Objc())) {s = 365;}

                        else if ( (LA141_145==121) ) {s = 366;}

                         
                        input.seek(index141_145);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA141_151 = input.LA(1);

                         
                        int index141_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_151==136) ) {s = 372;}

                        else if ( (LA141_151==121) ) {s = 373;}

                        else if ( (LA141_151==176) ) {s = 374;}

                        else if ( (LA141_151==119) && (synpred30_Objc())) {s = 375;}

                        else if ( (LA141_151==ID||LA141_151==116||LA141_151==120) ) {s = 12;}

                         
                        input.seek(index141_151);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA141_158 = input.LA(1);

                         
                        int index141_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_158==ID||LA141_158==116||LA141_158==120||LA141_158==185) ) {s = 12;}

                        else if ( (LA141_158==176) ) {s = 387;}

                        else if ( (LA141_158==119) && (synpred30_Objc())) {s = 388;}

                        else if ( (LA141_158==121) ) {s = 389;}

                         
                        input.seek(index141_158);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA141_163 = input.LA(1);

                         
                        int index141_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_163==119) && (synpred30_Objc())) {s = 394;}

                        else if ( (LA141_163==176) ) {s = 395;}

                        else if ( (LA141_163==ID||LA141_163==116||(LA141_163 >= 120 && LA141_163 <= 121)) ) {s = 12;}

                         
                        input.seek(index141_163);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA141_164 = input.LA(1);

                         
                        int index141_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_164==185) ) {s = 400;}

                        else if ( (LA141_164==136) ) {s = 401;}

                        else if ( (LA141_164==121) ) {s = 402;}

                        else if ( (LA141_164==176) ) {s = 403;}

                        else if ( (LA141_164==119) && (synpred30_Objc())) {s = 404;}

                        else if ( (LA141_164==ID||LA141_164==116||LA141_164==120) ) {s = 12;}

                         
                        input.seek(index141_164);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA141_167 = input.LA(1);

                         
                        int index141_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_167==ID||LA141_167==116||LA141_167==120||LA141_167==185) ) {s = 12;}

                        else if ( (LA141_167==176) ) {s = 413;}

                        else if ( (LA141_167==119) && (synpred30_Objc())) {s = 414;}

                        else if ( (LA141_167==121) ) {s = 415;}

                         
                        input.seek(index141_167);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA141_170 = input.LA(1);

                         
                        int index141_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_170==200) ) {s = 421;}

                        else if ( (LA141_170==185) ) {s = 422;}

                        else if ( (LA141_170==136) ) {s = 423;}

                        else if ( (LA141_170==121) ) {s = 424;}

                        else if ( (LA141_170==176) ) {s = 425;}

                        else if ( (LA141_170==119) && (synpred30_Objc())) {s = 426;}

                        else if ( (LA141_170==201) ) {s = 427;}

                        else if ( (LA141_170==ID||LA141_170==116||LA141_170==120) ) {s = 12;}

                         
                        input.seek(index141_170);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA141_175 = input.LA(1);

                         
                        int index141_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_175==ID||LA141_175==116||LA141_175==120||LA141_175==185) ) {s = 12;}

                        else if ( (LA141_175==176) ) {s = 435;}

                        else if ( (LA141_175==119) && (synpred30_Objc())) {s = 436;}

                        else if ( (LA141_175==121) ) {s = 437;}

                         
                        input.seek(index141_175);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA141_187 = input.LA(1);

                         
                        int index141_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_187==ID||LA141_187==116||LA141_187==120||LA141_187==185) ) {s = 12;}

                        else if ( (LA141_187==176) ) {s = 451;}

                        else if ( (LA141_187==119) && (synpred30_Objc())) {s = 452;}

                        else if ( (LA141_187==121) ) {s = 453;}

                         
                        input.seek(index141_187);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA141_192 = input.LA(1);

                         
                        int index141_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_192==119) && (synpred30_Objc())) {s = 458;}

                        else if ( (LA141_192==176) ) {s = 459;}

                        else if ( (LA141_192==ID||LA141_192==116||(LA141_192 >= 120 && LA141_192 <= 121)) ) {s = 12;}

                         
                        input.seek(index141_192);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA141_193 = input.LA(1);

                         
                        int index141_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_193==136) ) {s = 464;}

                        else if ( (LA141_193==121) ) {s = 465;}

                        else if ( (LA141_193==176) ) {s = 466;}

                        else if ( (LA141_193==119) && (synpred30_Objc())) {s = 467;}

                        else if ( (LA141_193==ID||LA141_193==116||LA141_193==120) ) {s = 12;}

                         
                        input.seek(index141_193);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA141_195 = input.LA(1);

                         
                        int index141_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_195==ID||LA141_195==116||LA141_195==120||LA141_195==185) ) {s = 12;}

                        else if ( (LA141_195==176) ) {s = 475;}

                        else if ( (LA141_195==119) && (synpred30_Objc())) {s = 476;}

                        else if ( (LA141_195==121) ) {s = 477;}

                         
                        input.seek(index141_195);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA141_198 = input.LA(1);

                         
                        int index141_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_198==200) ) {s = 483;}

                        else if ( (LA141_198==136) ) {s = 484;}

                        else if ( (LA141_198==121) ) {s = 485;}

                        else if ( (LA141_198==176) ) {s = 486;}

                        else if ( (LA141_198==119) && (synpred30_Objc())) {s = 487;}

                        else if ( (LA141_198==204) ) {s = 488;}

                        else if ( (LA141_198==ID||LA141_198==116||LA141_198==120) ) {s = 12;}

                         
                        input.seek(index141_198);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA141_208 = input.LA(1);

                         
                        int index141_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_208==ID||LA141_208==116||LA141_208==120||LA141_208==185) ) {s = 12;}

                        else if ( (LA141_208==176) ) {s = 500;}

                        else if ( (LA141_208==119) && (synpred30_Objc())) {s = 501;}

                        else if ( (LA141_208==121) ) {s = 502;}

                         
                        input.seek(index141_208);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA141_213 = input.LA(1);

                         
                        int index141_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA141_213==119) && (synpred30_Objc())) {s = 507;}

                        else if ( (LA141_213==176) ) {s = 508;}

                        else if ( (LA141_213==ID||LA141_213==116||(LA141_213 >= 120 && LA141_213 <= 121)) ) {s = 12;}

                         
                        input.seek(index141_213);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA141_215 = input.LA(1);

                         
                        int index141_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 223;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_215);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA141_218 = input.LA(1);

                         
                        int index141_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 223;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_218);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA141_220 = input.LA(1);

                         
                        int index141_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_220);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA141_222 = input.LA(1);

                         
                        int index141_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_222);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA141_224 = input.LA(1);

                         
                        int index141_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_224);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA141_225 = input.LA(1);

                         
                        int index141_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_225);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA141_226 = input.LA(1);

                         
                        int index141_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_226);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA141_227 = input.LA(1);

                         
                        int index141_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_227);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA141_228 = input.LA(1);

                         
                        int index141_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_228);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA141_230 = input.LA(1);

                         
                        int index141_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_230);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA141_232 = input.LA(1);

                         
                        int index141_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_232);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA141_236 = input.LA(1);

                         
                        int index141_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_236);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA141_238 = input.LA(1);

                         
                        int index141_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_238);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA141_243 = input.LA(1);

                         
                        int index141_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_243);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA141_244 = input.LA(1);

                         
                        int index141_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_244);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA141_245 = input.LA(1);

                         
                        int index141_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_245);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA141_247 = input.LA(1);

                         
                        int index141_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_247);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA141_249 = input.LA(1);

                         
                        int index141_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_249);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA141_253 = input.LA(1);

                         
                        int index141_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_253);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA141_254 = input.LA(1);

                         
                        int index141_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_254);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA141_255 = input.LA(1);

                         
                        int index141_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_255);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA141_256 = input.LA(1);

                         
                        int index141_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_256);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA141_257 = input.LA(1);

                         
                        int index141_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_257);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA141_259 = input.LA(1);

                         
                        int index141_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_259);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA141_261 = input.LA(1);

                         
                        int index141_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_261);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA141_265 = input.LA(1);

                         
                        int index141_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_265);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA141_266 = input.LA(1);

                         
                        int index141_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_266);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA141_267 = input.LA(1);

                         
                        int index141_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_267);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA141_268 = input.LA(1);

                         
                        int index141_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_268);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA141_269 = input.LA(1);

                         
                        int index141_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_269);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA141_270 = input.LA(1);

                         
                        int index141_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_270);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA141_275 = input.LA(1);

                         
                        int index141_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_275);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA141_276 = input.LA(1);

                         
                        int index141_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_276);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA141_277 = input.LA(1);

                         
                        int index141_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_277);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA141_278 = input.LA(1);

                         
                        int index141_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_278);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA141_280 = input.LA(1);

                         
                        int index141_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_280);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA141_282 = input.LA(1);

                         
                        int index141_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_282);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA141_286 = input.LA(1);

                         
                        int index141_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_286);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA141_287 = input.LA(1);

                         
                        int index141_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_287);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA141_288 = input.LA(1);

                         
                        int index141_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_288);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA141_289 = input.LA(1);

                         
                        int index141_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_289);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA141_290 = input.LA(1);

                         
                        int index141_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_290);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA141_291 = input.LA(1);

                         
                        int index141_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_291);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA141_292 = input.LA(1);

                         
                        int index141_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_292);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA141_294 = input.LA(1);

                         
                        int index141_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_294);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA141_298 = input.LA(1);

                         
                        int index141_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_298);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA141_299 = input.LA(1);

                         
                        int index141_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_299);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA141_300 = input.LA(1);

                         
                        int index141_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_300);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA141_305 = input.LA(1);

                         
                        int index141_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_305);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA141_306 = input.LA(1);

                         
                        int index141_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_306);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA141_307 = input.LA(1);

                         
                        int index141_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_307);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA141_309 = input.LA(1);

                         
                        int index141_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_309);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA141_311 = input.LA(1);

                         
                        int index141_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_311);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA141_315 = input.LA(1);

                         
                        int index141_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_315);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA141_316 = input.LA(1);

                         
                        int index141_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_316);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA141_317 = input.LA(1);

                         
                        int index141_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_317);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA141_318 = input.LA(1);

                         
                        int index141_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_318);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA141_319 = input.LA(1);

                         
                        int index141_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_319);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA141_320 = input.LA(1);

                         
                        int index141_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_320);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA141_322 = input.LA(1);

                         
                        int index141_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_322);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA141_326 = input.LA(1);

                         
                        int index141_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_326);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA141_327 = input.LA(1);

                         
                        int index141_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_327);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA141_328 = input.LA(1);

                         
                        int index141_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_328);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA141_330 = input.LA(1);

                         
                        int index141_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_330);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA141_332 = input.LA(1);

                         
                        int index141_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_332);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA141_336 = input.LA(1);

                         
                        int index141_336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_336);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA141_337 = input.LA(1);

                         
                        int index141_337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_337);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA141_338 = input.LA(1);

                         
                        int index141_338 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_338);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA141_339 = input.LA(1);

                         
                        int index141_339 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_339);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA141_340 = input.LA(1);

                         
                        int index141_340 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_340);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA141_341 = input.LA(1);

                         
                        int index141_341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_341);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA141_342 = input.LA(1);

                         
                        int index141_342 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_342);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA141_343 = input.LA(1);

                         
                        int index141_343 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_343);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA141_344 = input.LA(1);

                         
                        int index141_344 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_344);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA141_346 = input.LA(1);

                         
                        int index141_346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_346);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA141_348 = input.LA(1);

                         
                        int index141_348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_348);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA141_352 = input.LA(1);

                         
                        int index141_352 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_352);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA141_354 = input.LA(1);

                         
                        int index141_354 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_354);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA141_359 = input.LA(1);

                         
                        int index141_359 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_359);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA141_360 = input.LA(1);

                         
                        int index141_360 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_360);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA141_361 = input.LA(1);

                         
                        int index141_361 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_361);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA141_362 = input.LA(1);

                         
                        int index141_362 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_362);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA141_364 = input.LA(1);

                         
                        int index141_364 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_364);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA141_366 = input.LA(1);

                         
                        int index141_366 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_366);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA141_370 = input.LA(1);

                         
                        int index141_370 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_370);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA141_371 = input.LA(1);

                         
                        int index141_371 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_371);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA141_372 = input.LA(1);

                         
                        int index141_372 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_372);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA141_373 = input.LA(1);

                         
                        int index141_373 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_373);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA141_374 = input.LA(1);

                         
                        int index141_374 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_374);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA141_379 = input.LA(1);

                         
                        int index141_379 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_379);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA141_380 = input.LA(1);

                         
                        int index141_380 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_380);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA141_381 = input.LA(1);

                         
                        int index141_381 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_381);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA141_382 = input.LA(1);

                         
                        int index141_382 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_382);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA141_383 = input.LA(1);

                         
                        int index141_383 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_383);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA141_384 = input.LA(1);

                         
                        int index141_384 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_384);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA141_385 = input.LA(1);

                         
                        int index141_385 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_385);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA141_387 = input.LA(1);

                         
                        int index141_387 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_387);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA141_389 = input.LA(1);

                         
                        int index141_389 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_389);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA141_393 = input.LA(1);

                         
                        int index141_393 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_393);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA141_395 = input.LA(1);

                         
                        int index141_395 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_395);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA141_400 = input.LA(1);

                         
                        int index141_400 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_400);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA141_401 = input.LA(1);

                         
                        int index141_401 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_401);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA141_402 = input.LA(1);

                         
                        int index141_402 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_402);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA141_403 = input.LA(1);

                         
                        int index141_403 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_403);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA141_408 = input.LA(1);

                         
                        int index141_408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_408);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA141_409 = input.LA(1);

                         
                        int index141_409 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_409);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA141_410 = input.LA(1);

                         
                        int index141_410 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_410);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA141_411 = input.LA(1);

                         
                        int index141_411 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_411);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA141_413 = input.LA(1);

                         
                        int index141_413 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_413);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA141_415 = input.LA(1);

                         
                        int index141_415 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_415);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA141_419 = input.LA(1);

                         
                        int index141_419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_419);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA141_420 = input.LA(1);

                         
                        int index141_420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_420);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA141_421 = input.LA(1);

                         
                        int index141_421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_421);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA141_422 = input.LA(1);

                         
                        int index141_422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_422);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA141_423 = input.LA(1);

                         
                        int index141_423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_423);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA141_424 = input.LA(1);

                         
                        int index141_424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_424);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA141_425 = input.LA(1);

                         
                        int index141_425 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_425);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA141_427 = input.LA(1);

                         
                        int index141_427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_427);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA141_431 = input.LA(1);

                         
                        int index141_431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_431);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA141_432 = input.LA(1);

                         
                        int index141_432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_432);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA141_433 = input.LA(1);

                         
                        int index141_433 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_433);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA141_435 = input.LA(1);

                         
                        int index141_435 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_435);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA141_437 = input.LA(1);

                         
                        int index141_437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_437);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA141_441 = input.LA(1);

                         
                        int index141_441 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_441);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA141_442 = input.LA(1);

                         
                        int index141_442 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_442);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA141_443 = input.LA(1);

                         
                        int index141_443 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_443);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA141_444 = input.LA(1);

                         
                        int index141_444 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_444);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA141_445 = input.LA(1);

                         
                        int index141_445 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_445);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA141_446 = input.LA(1);

                         
                        int index141_446 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_446);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA141_447 = input.LA(1);

                         
                        int index141_447 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_447);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA141_448 = input.LA(1);

                         
                        int index141_448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_448);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA141_449 = input.LA(1);

                         
                        int index141_449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_449);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA141_451 = input.LA(1);

                         
                        int index141_451 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_451);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA141_453 = input.LA(1);

                         
                        int index141_453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_453);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA141_457 = input.LA(1);

                         
                        int index141_457 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_457);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA141_459 = input.LA(1);

                         
                        int index141_459 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_459);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA141_464 = input.LA(1);

                         
                        int index141_464 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_464);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA141_465 = input.LA(1);

                         
                        int index141_465 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_465);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA141_466 = input.LA(1);

                         
                        int index141_466 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_466);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA141_471 = input.LA(1);

                         
                        int index141_471 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_471);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA141_472 = input.LA(1);

                         
                        int index141_472 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_472);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA141_473 = input.LA(1);

                         
                        int index141_473 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_473);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA141_475 = input.LA(1);

                         
                        int index141_475 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_475);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA141_477 = input.LA(1);

                         
                        int index141_477 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_477);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA141_481 = input.LA(1);

                         
                        int index141_481 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_481);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA141_482 = input.LA(1);

                         
                        int index141_482 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_482);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA141_483 = input.LA(1);

                         
                        int index141_483 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_483);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA141_484 = input.LA(1);

                         
                        int index141_484 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_484);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA141_485 = input.LA(1);

                         
                        int index141_485 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_485);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA141_486 = input.LA(1);

                         
                        int index141_486 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_486);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA141_488 = input.LA(1);

                         
                        int index141_488 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_488);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA141_492 = input.LA(1);

                         
                        int index141_492 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_492);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA141_493 = input.LA(1);

                         
                        int index141_493 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_493);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA141_494 = input.LA(1);

                         
                        int index141_494 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_494);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA141_495 = input.LA(1);

                         
                        int index141_495 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_495);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA141_496 = input.LA(1);

                         
                        int index141_496 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_496);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA141_497 = input.LA(1);

                         
                        int index141_497 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_497);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA141_498 = input.LA(1);

                         
                        int index141_498 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_498);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA141_500 = input.LA(1);

                         
                        int index141_500 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_500);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA141_502 = input.LA(1);

                         
                        int index141_502 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_502);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA141_506 = input.LA(1);

                         
                        int index141_506 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_506);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA141_508 = input.LA(1);

                         
                        int index141_508 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred30_Objc()) ) {s = 507;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index141_508);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA189_eotS =
        "\u009d\uffff";
    static final String DFA189_eofS =
        "\2\uffff\1\30\11\uffff\1\166\u0090\uffff";
    static final String DFA189_minS =
        "\1\26\1\56\1\23\1\56\1\23\1\uffff\1\23\3\uffff\1\56\1\uffff\1\26"+
        "\51\uffff\1\0\1\uffff\26\0\17\uffff\1\0\20\uffff\3\0\13\uffff\1"+
        "\0\26\uffff\1\0\2\uffff\2\0\5\uffff";
    static final String DFA189_maxS =
        "\1\26\1\56\1\u00db\1\56\1\u00db\1\uffff\1\u00d0\3\uffff\1\166\1"+
        "\uffff\1\u00d9\51\uffff\1\0\1\uffff\26\0\17\uffff\1\0\20\uffff\3"+
        "\0\13\uffff\1\0\26\uffff\1\0\2\uffff\2\0\5\uffff";
    static final String DFA189_acceptS =
        "\5\uffff\1\4\1\uffff\3\4\1\uffff\1\4\1\uffff\13\4\1\5\36\uffff\1"+
        "\1\26\uffff\17\4\1\uffff\17\4\4\uffff\13\4\1\uffff\26\4\1\uffff"+
        "\2\4\3\uffff\1\4\1\1\1\2\1\3";
    static final String DFA189_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\uffff\1\2\3\uffff\1\3\1\uffff\1\4\51"+
        "\uffff\1\5\1\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
        "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
        "\17\uffff\1\34\20\uffff\1\35\1\36\1\37\13\uffff\1\40\26\uffff\1"+
        "\41\2\uffff\1\42\1\43\5\uffff}>";
    static final String[] DFA189_transitionS = {
            "\1\1",
            "\1\2",
            "\1\20\2\uffff\1\30\27\uffff\1\14\20\uffff\1\30\1\uffff\1\21"+
            "\26\uffff\1\16\4\uffff\1\30\21\uffff\1\25\4\uffff\1\13\1\uffff"+
            "\1\4\2\uffff\1\15\1\uffff\1\30\1\27\2\uffff\1\6\1\27\1\uffff"+
            "\2\3\3\uffff\1\30\14\uffff\1\17\1\5\2\uffff\3\30\1\uffff\2\30"+
            "\4\uffff\1\12\2\uffff\1\11\1\uffff\1\30\2\uffff\1\24\2\30\1"+
            "\22\1\uffff\1\22\1\23\2\uffff\1\7\1\10\2\30\2\uffff\1\30\4\uffff"+
            "\1\30\1\uffff\1\30\1\22\2\uffff\1\30\2\uffff\4\30\1\uffff\3"+
            "\30\1\uffff\1\22\4\30\6\uffff\1\26",
            "\1\66",
            "\1\105\32\uffff\1\102\20\uffff\1\71\1\uffff\1\106\26\uffff"+
            "\1\103\4\uffff\1\70\21\uffff\1\112\4\uffff\1\101\1\uffff\1\74"+
            "\1\uffff\1\115\1\67\2\uffff\1\114\2\uffff\1\73\1\114\23\uffff"+
            "\1\104\1\72\14\uffff\1\100\2\uffff\1\77\4\uffff\1\111\1\126"+
            "\1\uffff\1\107\1\uffff\1\107\1\110\2\uffff\1\75\1\76\1\120\1"+
            "\116\2\uffff\1\122\4\uffff\1\134\2\uffff\1\107\2\uffff\1\117"+
            "\2\uffff\1\124\1\127\1\130\1\125\1\uffff\1\131\1\uffff\1\132"+
            "\1\uffff\1\107\1\uffff\1\133\1\123\1\121\6\uffff\1\113",
            "",
            "\1\147\32\uffff\1\143\22\uffff\1\150\26\uffff\1\145\33\uffff"+
            "\1\142\1\uffff\1\135\2\uffff\1\144\32\uffff\1\146\15\uffff\1"+
            "\141\2\uffff\1\140\4\uffff\1\153\2\uffff\1\151\1\uffff\1\151"+
            "\1\152\2\uffff\1\136\1\137\14\uffff\1\151\16\uffff\1\151",
            "",
            "",
            "",
            "\1\30\107\uffff\1\154",
            "",
            "\1\u008c\27\uffff\1\174\20\uffff\1\u0090\35\uffff\1\u008f\22"+
            "\uffff\1\u0099\1\uffff\2\u0099\1\u0097\1\uffff\1\160\1\30\1"+
            "\uffff\1\u0096\1\uffff\1\163\1\162\1\161\1\uffff\1\163\1\162"+
            "\1\161\2\157\1\u0099\2\uffff\1\u0091\1\u0093\1\u0099\1\uffff"+
            "\6\u0099\1\uffff\1\165\1\164\4\uffff\1\u0088\1\u0095\1\u0092"+
            "\1\uffff\1\u0087\1\u008a\4\uffff\1\u0089\4\uffff\1\u0094\3\uffff"+
            "\1\167\1\u008b\3\uffff\1\156\2\uffff\1\u0099\1\uffff\1\u0081"+
            "\1\175\2\uffff\1\u0083\4\uffff\1\177\1\uffff\1\u008b\3\uffff"+
            "\1\171\2\uffff\1\u0085\1\170\1\172\1\u0086\1\uffff\1\173\1\u008e"+
            "\1\176\2\uffff\1\u008d\1\u0080\1\u0084\1\u0082\2\uffff\1\u0099"+
            "\1\uffff\1\u0099",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA189_eot = DFA.unpackEncodedString(DFA189_eotS);
    static final short[] DFA189_eof = DFA.unpackEncodedString(DFA189_eofS);
    static final char[] DFA189_min = DFA.unpackEncodedStringToUnsignedChars(DFA189_minS);
    static final char[] DFA189_max = DFA.unpackEncodedStringToUnsignedChars(DFA189_maxS);
    static final short[] DFA189_accept = DFA.unpackEncodedString(DFA189_acceptS);
    static final short[] DFA189_special = DFA.unpackEncodedString(DFA189_specialS);
    static final short[][] DFA189_transition;

    static {
        int numStates = DFA189_transitionS.length;
        DFA189_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA189_transition[i] = DFA.unpackEncodedString(DFA189_transitionS[i]);
        }
    }

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = DFA189_eot;
            this.eof = DFA189_eof;
            this.min = DFA189_min;
            this.max = DFA189_max;
            this.accept = DFA189_accept;
            this.special = DFA189_special;
            this.transition = DFA189_transition;
        }
        public String getDescription() {
            return "997:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL classical_method_call_wrapper '(' )=> define_as_line | ( DEFINE_LITERAL classical_method_call_wrapper ) -> ^( DEFINE classical_method_call_wrapper ) | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_2 = input.LA(1);

                         
                        int index189_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA189_2 >= 130 && LA189_2 <= 131)) ) {s = 3;}

                        else if ( (LA189_2==118) ) {s = 4;}

                        else if ( (LA189_2==149) && (synpred38_Objc())) {s = 5;}

                        else if ( (LA189_2==127) ) {s = 6;}

                        else if ( (LA189_2==179) && (synpred38_Objc())) {s = 7;}

                        else if ( (LA189_2==180) && (synpred38_Objc())) {s = 8;}

                        else if ( (LA189_2==165) && (synpred38_Objc())) {s = 9;}

                        else if ( (LA189_2==162) ) {s = 10;}

                        else if ( (LA189_2==116) && (synpred38_Objc())) {s = 11;}

                        else if ( (LA189_2==ID) ) {s = 12;}

                        else if ( (LA189_2==121) && (synpred38_Objc())) {s = 13;}

                        else if ( (LA189_2==STR_LIT) && (synpred38_Objc())) {s = 14;}

                        else if ( (LA189_2==148) && (synpred38_Objc())) {s = 15;}

                        else if ( (LA189_2==C_LIT) && (synpred38_Objc())) {s = 16;}

                        else if ( (LA189_2==NR_LIT) && (synpred38_Objc())) {s = 17;}

                        else if ( (LA189_2==173||LA189_2==175||LA189_2==193||LA189_2==208) && (synpred38_Objc())) {s = 18;}

                        else if ( (LA189_2==176) && (synpred38_Objc())) {s = 19;}

                        else if ( (LA189_2==170) && (synpred38_Objc())) {s = 20;}

                        else if ( (LA189_2==111) && (synpred38_Objc())) {s = 21;}

                        else if ( (LA189_2==219) && (synpred38_Objc())) {s = 22;}

                        else if ( (LA189_2==124||LA189_2==128) && (synpred38_Objc())) {s = 23;}

                        else if ( (LA189_2==EOF||LA189_2==DEFINE_LITERAL||LA189_2==M_C_LIT||LA189_2==S_C_LIT||LA189_2==123||LA189_2==135||(LA189_2 >= 152 && LA189_2 <= 154)||(LA189_2 >= 156 && LA189_2 <= 157)||LA189_2==167||(LA189_2 >= 171 && LA189_2 <= 172)||(LA189_2 >= 181 && LA189_2 <= 182)||LA189_2==185||LA189_2==190||LA189_2==192||LA189_2==196||(LA189_2 >= 199 && LA189_2 <= 202)||(LA189_2 >= 204 && LA189_2 <= 206)||(LA189_2 >= 209 && LA189_2 <= 212)) ) {s = 24;}

                         
                        input.seek(index189_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA189_4 = input.LA(1);

                         
                        int index189_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA189_4==121) ) {s = 55;}

                        else if ( (LA189_4==S_C_LIT) ) {s = 56;}

                        else if ( (LA189_4==M_C_LIT) ) {s = 57;}

                        else if ( (LA189_4==149) ) {s = 58;}

                        else if ( (LA189_4==127) ) {s = 59;}

                        else if ( (LA189_4==118) ) {s = 60;}

                        else if ( (LA189_4==179) ) {s = 61;}

                        else if ( (LA189_4==180) ) {s = 62;}

                        else if ( (LA189_4==165) ) {s = 63;}

                        else if ( (LA189_4==162) ) {s = 64;}

                        else if ( (LA189_4==116) ) {s = 65;}

                        else if ( (LA189_4==ID) ) {s = 66;}

                        else if ( (LA189_4==STR_LIT) ) {s = 67;}

                        else if ( (LA189_4==148) ) {s = 68;}

                        else if ( (LA189_4==C_LIT) ) {s = 69;}

                        else if ( (LA189_4==NR_LIT) ) {s = 70;}

                        else if ( (LA189_4==173||LA189_4==175||LA189_4==193||LA189_4==208) ) {s = 71;}

                        else if ( (LA189_4==176) ) {s = 72;}

                        else if ( (LA189_4==170) ) {s = 73;}

                        else if ( (LA189_4==111) ) {s = 74;}

                        else if ( (LA189_4==219) ) {s = 75;}

                        else if ( (LA189_4==124||LA189_4==128) ) {s = 76;}

                        else if ( (LA189_4==120) ) {s = 77;}

                        else if ( (LA189_4==182) && (synpred38_Objc())) {s = 78;}

                        else if ( (LA189_4==196) && (synpred38_Objc())) {s = 79;}

                        else if ( (LA189_4==181) && (synpred38_Objc())) {s = 80;}

                        else if ( (LA189_4==212) && (synpred38_Objc())) {s = 81;}

                        else if ( (LA189_4==185) && (synpred38_Objc())) {s = 82;}

                        else if ( (LA189_4==211) && (synpred38_Objc())) {s = 83;}

                        else if ( (LA189_4==199) && (synpred38_Objc())) {s = 84;}

                        else if ( (LA189_4==202) && (synpred38_Objc())) {s = 85;}

                        else if ( (LA189_4==171) && (synpred38_Objc())) {s = 86;}

                        else if ( (LA189_4==200) && (synpred38_Objc())) {s = 87;}

                        else if ( (LA189_4==201) && (synpred38_Objc())) {s = 88;}

                        else if ( (LA189_4==204) && (synpred38_Objc())) {s = 89;}

                        else if ( (LA189_4==206) && (synpred38_Objc())) {s = 90;}

                        else if ( (LA189_4==210) && (synpred38_Objc())) {s = 91;}

                        else if ( (LA189_4==190) && (synpred38_Objc())) {s = 92;}

                         
                        input.seek(index189_4);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA189_6 = input.LA(1);

                         
                        int index189_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA189_6==118) ) {s = 93;}

                        else if ( (LA189_6==179) && (synpred38_Objc())) {s = 94;}

                        else if ( (LA189_6==180) && (synpred38_Objc())) {s = 95;}

                        else if ( (LA189_6==165) && (synpred38_Objc())) {s = 96;}

                        else if ( (LA189_6==162) && (synpred38_Objc())) {s = 97;}

                        else if ( (LA189_6==116) && (synpred38_Objc())) {s = 98;}

                        else if ( (LA189_6==ID) && (synpred38_Objc())) {s = 99;}

                        else if ( (LA189_6==121) && (synpred38_Objc())) {s = 100;}

                        else if ( (LA189_6==STR_LIT) && (synpred38_Objc())) {s = 101;}

                        else if ( (LA189_6==148) && (synpred38_Objc())) {s = 102;}

                        else if ( (LA189_6==C_LIT) && (synpred38_Objc())) {s = 103;}

                        else if ( (LA189_6==NR_LIT) && (synpred38_Objc())) {s = 104;}

                        else if ( (LA189_6==173||LA189_6==175||LA189_6==193||LA189_6==208) && (synpred38_Objc())) {s = 105;}

                        else if ( (LA189_6==176) && (synpred38_Objc())) {s = 106;}

                        else if ( (LA189_6==170) && (synpred38_Objc())) {s = 107;}

                         
                        input.seek(index189_6);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA189_10 = input.LA(1);

                         
                        int index189_10 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA189_10==118) && (synpred38_Objc())) {s = 108;}

                        else if ( (LA189_10==ID) ) {s = 24;}

                         
                        input.seek(index189_10);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA189_12 = input.LA(1);

                         
                        int index189_12 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA189_12==176) ) {s = 110;}

                        else if ( ((LA189_12 >= 130 && LA189_12 <= 131)) ) {s = 111;}

                        else if ( (LA189_12==118) ) {s = 112;}

                        else if ( (LA189_12==125||LA189_12==129) && (synpred38_Objc())) {s = 113;}

                        else if ( (LA189_12==124||LA189_12==128) && (synpred38_Objc())) {s = 114;}

                        else if ( (LA189_12==123||LA189_12==127) && (synpred38_Objc())) {s = 115;}

                        else if ( (LA189_12==147) && (synpred38_Objc())) {s = 116;}

                        else if ( (LA189_12==146) && (synpred38_Objc())) {s = 117;}

                        else if ( (LA189_12==EOF) && (synpred38_Objc())) {s = 118;}

                        else if ( (LA189_12==171) && (synpred38_Objc())) {s = 119;}

                        else if ( (LA189_12==200) && (synpred38_Objc())) {s = 120;}

                        else if ( (LA189_12==196) && (synpred38_Objc())) {s = 121;}

                        else if ( (LA189_12==201) && (synpred38_Objc())) {s = 122;}

                        else if ( (LA189_12==204) && (synpred38_Objc())) {s = 123;}

                        else if ( (LA189_12==ID) ) {s = 124;}

                        else if ( (LA189_12==182) && (synpred38_Objc())) {s = 125;}

                        else if ( (LA189_12==206) && (synpred38_Objc())) {s = 126;}

                        else if ( (LA189_12==190) && (synpred38_Objc())) {s = 127;}

                        else if ( (LA189_12==210) && (synpred38_Objc())) {s = 128;}

                        else if ( (LA189_12==181) && (synpred38_Objc())) {s = 129;}

                        else if ( (LA189_12==212) && (synpred38_Objc())) {s = 130;}

                        else if ( (LA189_12==185) && (synpred38_Objc())) {s = 131;}

                        else if ( (LA189_12==211) && (synpred38_Objc())) {s = 132;}

                        else if ( (LA189_12==199) && (synpred38_Objc())) {s = 133;}

                        else if ( (LA189_12==202) && (synpred38_Objc())) {s = 134;}

                        else if ( (LA189_12==156) && (synpred38_Objc())) {s = 135;}

                        else if ( (LA189_12==152) && (synpred38_Objc())) {s = 136;}

                        else if ( (LA189_12==162) && (synpred38_Objc())) {s = 137;}

                        else if ( (LA189_12==157) && (synpred38_Objc())) {s = 138;}

                        else if ( (LA189_12==172||LA189_12==192) && (synpred38_Objc())) {s = 139;}

                        else if ( (LA189_12==DEFINE_LITERAL) && (synpred38_Objc())) {s = 140;}

                        else if ( (LA189_12==209) && (synpred38_Objc())) {s = 141;}

                        else if ( (LA189_12==205) && (synpred38_Objc())) {s = 142;}

                        else if ( (LA189_12==S_C_LIT) && (synpred38_Objc())) {s = 143;}

                        else if ( (LA189_12==M_C_LIT) && (synpred38_Objc())) {s = 144;}

                        else if ( (LA189_12==135) && (synpred38_Objc())) {s = 145;}

                        else if ( (LA189_12==154) && (synpred38_Objc())) {s = 146;}

                        else if ( (LA189_12==136) ) {s = 147;}

                        else if ( (LA189_12==167) && (synpred38_Objc())) {s = 148;}

                        else if ( (LA189_12==153) && (synpred38_Objc())) {s = 149;}

                        else if ( (LA189_12==121) ) {s = 150;}

                        else if ( (LA189_12==116) ) {s = 151;}

                        else if ( (LA189_12==119) ) {s = 24;}

                        else if ( (LA189_12==112||(LA189_12 >= 114 && LA189_12 <= 115)||LA189_12==132||LA189_12==137||(LA189_12 >= 139 && LA189_12 <= 144)||LA189_12==179||LA189_12==215||LA189_12==217) && (synpred38_Objc())) {s = 153;}

                         
                        input.seek(index189_12);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA189_54 = input.LA(1);

                         
                        int index189_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                         
                        input.seek(index189_54);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA189_56 = input.LA(1);

                         
                        int index189_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                         
                        input.seek(index189_56);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA189_57 = input.LA(1);

                         
                        int index189_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                         
                        input.seek(index189_57);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA189_58 = input.LA(1);

                         
                        int index189_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_58);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA189_59 = input.LA(1);

                         
                        int index189_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_59);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA189_60 = input.LA(1);

                         
                        int index189_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_60);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA189_61 = input.LA(1);

                         
                        int index189_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_61);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA189_62 = input.LA(1);

                         
                        int index189_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_62);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA189_63 = input.LA(1);

                         
                        int index189_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_63);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA189_64 = input.LA(1);

                         
                        int index189_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_64);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA189_65 = input.LA(1);

                         
                        int index189_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_65);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA189_66 = input.LA(1);

                         
                        int index189_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_66);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA189_67 = input.LA(1);

                         
                        int index189_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_67);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA189_68 = input.LA(1);

                         
                        int index189_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_68);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA189_69 = input.LA(1);

                         
                        int index189_69 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_69);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA189_70 = input.LA(1);

                         
                        int index189_70 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_70);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA189_71 = input.LA(1);

                         
                        int index189_71 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_71);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA189_72 = input.LA(1);

                         
                        int index189_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_72);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA189_73 = input.LA(1);

                         
                        int index189_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_73);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA189_74 = input.LA(1);

                         
                        int index189_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_74);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA189_75 = input.LA(1);

                         
                        int index189_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_75);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA189_76 = input.LA(1);

                         
                        int index189_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                        else if ( (synpred38_Objc()) ) {s = 153;}

                         
                        input.seek(index189_76);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA189_77 = input.LA(1);

                         
                        int index189_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred36_Objc()) ) {s = 154;}

                        else if ( (synpred37_Objc()) ) {s = 155;}

                        else if ( (true) ) {s = 156;}

                         
                        input.seek(index189_77);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA189_93 = input.LA(1);

                         
                        int index189_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_93);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA189_110 = input.LA(1);

                         
                        int index189_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_110);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA189_111 = input.LA(1);

                         
                        int index189_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_111);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA189_112 = input.LA(1);

                         
                        int index189_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_112);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA189_124 = input.LA(1);

                         
                        int index189_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_124);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA189_147 = input.LA(1);

                         
                        int index189_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_147);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA189_150 = input.LA(1);

                         
                        int index189_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_150);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA189_151 = input.LA(1);

                         
                        int index189_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred38_Objc()) ) {s = 153;}

                        else if ( (true) ) {s = 24;}

                         
                        input.seek(index189_151);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code483 = new BitSet(new long[]{0x8000400000400002L,0x0040000020000000L,0x4260180431000080L,0x00000000001E7791L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_code_internal580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_S_C_LIT_in_single_comment613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_M_C_LIT_in_multi_comment635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_c_in_extern_wrapper664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_extern_c688 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_extern_c691 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_extern_c694 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFEFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x000000000FFFFFFFL});
    public static final BitSet FOLLOW_set_in_extern_c696 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_extern_c701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_156_in_implementation737 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_implementation740 = new BitSet(new long[]{0x8000400000400000L,0x8840000020000000L,0x4260088006000080L,0x00000000001E7790L});
    public static final BitSet FOLLOW_category_in_implementation743 = new BitSet(new long[]{0x8000400000400000L,0x8840000020000000L,0x4260088006000080L,0x00000000001E7790L});
    public static final BitSet FOLLOW_implementation_body_in_implementation748 = new BitSet(new long[]{0x8000400000400000L,0x8840000020000000L,0x4260088006000080L,0x00000000001E7790L});
    public static final BitSet FOLLOW_154_in_implementation753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_implementation_body817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_synthesize850 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_153_in_synthesize854 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001080L});
    public static final BitSet FOLLOW_140_in_synthesize861 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synthesize863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synthesize867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_205_in_static_declaration_wrapper891 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_block_call_predicate913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_block_call_predicate919 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_call_predicate921 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_block_call_predicate923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_block_call_predicate930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_block_call_predicate932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_block_type_decl_predicate948 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_type_decl_predicate951 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_type_decl_predicate952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_block_type_decl972 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_type_decl975 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_type_decl976 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_block_type_decl977 = new BitSet(new long[]{0x0000400000000000L,0x0140000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_block_params_in_block_type_decl979 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_type_decl982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_block_decl_predicate1004 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_decl_predicate1007 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_decl_predicate1009 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_decl_predicate1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_block_decl1029 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_decl1032 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_block_decl1034 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_decl1036 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_block_decl1037 = new BitSet(new long[]{0x0000400000000000L,0x0140000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_block_params_in_block_decl1039 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_decl1042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001080L});
    public static final BitSet FOLLOW_140_in_block_decl1046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0018000000000000L});
    public static final BitSet FOLLOW_block_call_in_block_decl1048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_block_decl1053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper1074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_block_call1096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_block_call1098 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xF6E10F4000400080L,0x00000000047CFFBCL});
    public static final BitSet FOLLOW_block_internal_in_block_call1100 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xF6E10F4000400080L,0x00000000047CFFBCL});
    public static final BitSet FOLLOW_218_in_block_call1103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_block_call1124 = new BitSet(new long[]{0x0000400000000000L,0x0140000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_block_params_in_block_call1126 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_call1129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call1132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_block_call1140 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_call1142 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_block_call1144 = new BitSet(new long[]{0x0000400000000000L,0x0140000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_block_params_in_block_call1146 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_call1149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call1152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper1166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_synchronized_call1189 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synchronized_call1191 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1193 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_synchronized_call1195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1213 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_block_params1216 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_classical_param_in_block_params1218 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_block_multiline1281 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xF6E30F4000400080L,0x00000000047CFFBCL});
    public static final BitSet FOLLOW_block_internal_macro_in_block_multiline1286 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xF6E30F4000400080L,0x00000000047CFFBCL});
    public static final BitSet FOLLOW_218_in_block_multiline1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1326 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1358 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externC_stmt_in_block_singleline1363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_block_singleline1403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1431 = new BitSet(new long[]{0x0000000000000002L,0x2420000000000000L,0x000000000002142EL,0x0000000001000000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_singleline1435 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_singleline1437 = new BitSet(new long[]{0x0000000000000000L,0x2420000000000000L,0x000000000002142EL,0x0000000001000000L});
    public static final BitSet FOLLOW_op_assign_in_block_singleline1441 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_block_singleline1443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_block_internal_macro1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_macro1469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1502 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_externC_stmt_in_block_internal1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_block_internal1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1618 = new BitSet(new long[]{0x0000000000000002L,0x2420000000000000L,0x000000000002142EL,0x0000000001000000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_internal1622 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_internal1624 = new BitSet(new long[]{0x0000000000000000L,0x2420000000000000L,0x000000000002142EL,0x0000000001000000L});
    public static final BitSet FOLLOW_op_assign_in_block_internal1628 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_block_internal1630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_autorelease_stmt_in_block_internal1638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_goto_stmt1656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_goto_stmt1658 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_goto_stmt1662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_213_in_while_stmt1708 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_while_stmt1710 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1712 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_while_stmt1714 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_while_stmt1716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_for_in_stmt1731 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_for_classic_stmt1756 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300081L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_for_classic_stmt1761 = new BitSet(new long[]{0x0000400000080002L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1788 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1790 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_for_stmt_body1792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1807 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1809 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_for_stmt_body1811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1822 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1824 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_for_stmt_body1826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1842 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1844 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_for_stmt_body1846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1852 = new BitSet(new long[]{0x0000000000000000L,0x2420000000000000L,0x0000000000021422L,0x0000000001000040L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1856 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1860 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1865 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_for_stmt_body1868 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_for_stmt_body1870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_for_stmt1883 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_for_stmt1885 = new BitSet(new long[]{0x0000400000000000L,0x0250000000000000L,0x4260080000000080L,0x00000000001C5790L});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1900 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_return_stmt1923 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300081L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_switch_stmt1948 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_switch_stmt1950 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1952 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_switch_stmt1954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_switch_stmt1956 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xBD81044000000080L,0x000000000460882CL});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1959 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xBD81044000000080L,0x000000000460882CL});
    public static final BitSet FOLLOW_218_in_switch_stmt1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body2001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_autorelease_stmt2022 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_autorelease_stmt2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_case_stmt2039 = new BitSet(new long[]{0x0000400000000000L,0x8000000000000002L});
    public static final BitSet FOLLOW_name_number_in_case_stmt2041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_case_stmt2043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_default_stmt2066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_default_stmt2068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_do_stmt2089 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_do_stmt2091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_213_in_do_stmt2093 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_do_stmt2095 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_do_stmt2097 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_do_stmt2099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_if_stmt2124 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_if_stmt2126 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_if_stmt2128 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_if_stmt2130 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_if_stmt2132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_else_stmt2155 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_else_stmt2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_try_stmt_wrapper2179 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper2182 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008800000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper2185 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008800000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper2188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_catch_stmt2214 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_catch_stmt2217 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2220 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_catch_stmt2223 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2225 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_catch_stmt2228 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_catch_stmt2231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_finally_stmt2255 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_finally_stmt2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_throw_stmt2296 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_throw_stmt2300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_externC_stmt2312 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_block_in_externC_stmt2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_name_number2362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NR_LIT_in_name_number2365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2437 = new BitSet(new long[]{0x0000000000000000L,0x2420000000000000L,0x0000000000021422L,0x0000000001000000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2439 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2462 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2470 = new BitSet(new long[]{0x0000400000000000L,0x0250000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2487 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_implementation_common2502 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2504 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_implementation_common2506 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2508 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2571 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2574 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2576 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_118_in_clasical_method_call_predicate2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2595 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2598 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2600 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_118_in_classical_method_call2605 = new BitSet(new long[]{0x8000400000080000L,0x9350800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2607 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_classical_method_call2610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2625 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_classical_method_params_push2628 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2630 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2654 = new BitSet(new long[]{0x0000400000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_method_params_push2659 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_params_push2664 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_126_in_method_params_push2669 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2672 = new BitSet(new long[]{0x0000400000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_comments_in_method_param_push2693 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2696 = new BitSet(new long[]{0x8000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_comments_in_method_param_push2698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_method_msg2729 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_method_msg2731 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_170_in_method_msg2736 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2740 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000040L,0x0000000004000000L});
    public static final BitSet FOLLOW_134_in_method_msg2743 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2745 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_178_in_method_msg2750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_218_in_method_msg2754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_questionmark_if_stmt2782 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_comments_in_questionmark_if_stmt2784 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_questionmark_if_stmt2805 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2807 = new BitSet(new long[]{0x8000000000000000L,0x0000000020000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_comments_in_questionmark_if_stmt2809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_questionmark_if_stmt2812 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_comments_in_questionmark_if_stmt2814 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_element_value2845 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400100001L,0x0000000008010002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2847 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_element_value2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_element_value_or_semicolon2892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_array_init2913 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008410002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2916 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_array_init2919 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008410002L});
    public static final BitSet FOLLOW_comments_in_array_init2921 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008410002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2924 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_214_in_element_value_or_array_init2941 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x000000000C410002L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_218_in_element_value_or_array_init2946 = new BitSet(new long[]{0x8000000000000002L,0x0000000020000000L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2967 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression3005 = new BitSet(new long[]{0x0000000000000002L,0x8A1D000000000000L,0x00080000000DFB10L,0x0000000002800000L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression3007 = new BitSet(new long[]{0x0000000000000002L,0x8A1D000000000000L,0x00080000000DFB10L,0x0000000002800000L});
    public static final BitSet FOLLOW_127_in_cast_unary_expression13022 = new BitSet(new long[]{0x0000400000080000L,0x0250000001000002L,0x0019A42400100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression13024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression13038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt3052 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400100001L,0x0000000008010002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt3054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt3061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3074 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression3076 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_cast_unary_expression3083 = new BitSet(new long[]{0x0000400000080000L,0x0250000001000002L,0x0019A42400100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_219_in_cast_unary_expression3099 = new BitSet(new long[]{0x0000400000080000L,0x0250000001000002L,0x0019A42400100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression3115 = new BitSet(new long[]{0x0000400000080000L,0x0250000001000002L,0x0019A42400100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression3117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression3135 = new BitSet(new long[]{0x0000400000080000L,0x1250000001000002L,0x0019A42400100001L,0x0000000000010002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_expression3137 = new BitSet(new long[]{0x0000400000080000L,0x0250000001000002L,0x0019A42400100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_expression3159 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression3161 = new BitSet(new long[]{0x0000400000080000L,0x0250000001000002L,0x0019A42400100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3163 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_cast_expression3165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression3168 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_simple_name_or_classical_function_call_in_cast_expression3170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call3199 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_name_or_classical_function_call3202 = new BitSet(new long[]{0x8000400000080000L,0x9350800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call3204 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_name_or_classical_function_call3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call3214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value_access3235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access3241 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access3243 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3245 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_simple_expression_value_access3248 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_simple_expression_value_access3253 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value_access3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_simple_expression_value_access3265 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access3267 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3269 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value_access3271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_access2_in_simple_expression_value_access3286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access23313 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access23316 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access23318 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_118_in_simple_expression_value_access23323 = new BitSet(new long[]{0x8000400000080000L,0x9350800021000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access23325 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value_access23328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access23335 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access23338 = new BitSet(new long[]{0x0000400000080000L,0x0210000001000002L,0x0000A00000100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access23340 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x000000000000000EL});
    public static final BitSet FOLLOW_set_in_simple_expression_value_access23345 = new BitSet(new long[]{0x0000400000080000L,0x0210000001000002L,0x0000A00000100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access23351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_simple_expression_value3378 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3381 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_simple_expression_value3383 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value3385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_simple_expression_value3387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value3415 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_simple_expression_value3427 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_objc_in_simple_expression_value3433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_C_LIT_in_simple_expression_value3439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NR_LIT_in_simple_expression_value3453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_in_simple_expression_value3467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_simple_expression_value23506 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23508 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_simple_expression_value23510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_selector3720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_type_cast_name3758 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3760 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_type_cast_name3762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3857 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3859 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3918 = new BitSet(new long[]{0x0000400000000000L,0x0250000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_cast_lvalue3933 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3935 = new BitSet(new long[]{0x0000400000000000L,0x0250000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3937 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_cast_lvalue3939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3942 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3968 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3971 = new BitSet(new long[]{0x0000400000000000L,0x0210000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3973 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_118_in_lvalue_access3981 = new BitSet(new long[]{0x0000400000000000L,0x0210000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3983 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_lvalue_access3985 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3988 = new BitSet(new long[]{0x0000400000000000L,0x0210000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_116_in_lvalue4017 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue4020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_lvalue4022 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_lvalue4024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_lvalue4026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue4042 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue4048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue4054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_break_stmt4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_continue_stmt4091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper4142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_declaration4163 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration4165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations4191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_in_declarations4197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations4211 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260081040000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations4213 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_field_declaration_in_declarations4216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations4232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper4247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_ns_inline4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_property_prefix4281 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_property_prefix4283 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4285 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_property_prefix4288 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4290 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_126_in_property_prefix4295 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4297 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_property_prefix4300 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4302 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_property_prefix4304 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_120_in_property_prefix4311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper4344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_209_in_typedef_declaration_wrapper4362 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper4364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_decl_in_typedef_declaration4418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration4424 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4426 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_126_in_typedef_declaration4429 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4431 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_typedef_declaration4435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer_predicate4447 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer_predicate4449 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0260080000000000L,0x0000000000181790L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate4451 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer_predicate4453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_func_pointer4468 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer4470 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0260080000000000L,0x0000000000181790L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4472 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer4474 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_func_pointer4476 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L,0x0260080000000000L,0x0000000000181790L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4479 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_126_in_func_pointer4482 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0260080000000000L,0x0000000000181790L});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4484 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_120_in_func_pointer4490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal4519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal4525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal4537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal4543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name4558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_forward_class_declaration4576 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_forward_class_declaration4593 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_forward_class_declaration4642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_protocol_declaration4682 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4684 = new BitSet(new long[]{0x8000000000000000L,0x8800000020000000L,0x0000001144000100L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4686 = new BitSet(new long[]{0x8000000000000000L,0x8800000020000000L,0x0000001144000000L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4708 = new BitSet(new long[]{0x8000000000000000L,0x8800000020000000L,0x0000001144000000L});
    public static final BitSet FOLLOW_154_in_class_protocol_end4715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_template4727 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_template_internal_in_template4729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_template4731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_implements_protocols4765 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4767 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_126_in_implements_protocols4770 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4772 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_implements_protocols4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4798 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_template_internal4801 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_template_type_in_template_internal4803 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_template_type4823 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_157_in_interface_declaration4887 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4889 = new BitSet(new long[]{0x8000000000000000L,0x8800000020000000L,0x0000001144000140L,0x0000000000400000L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4891 = new BitSet(new long[]{0x8000000000000000L,0x8800000020000000L,0x0000001144000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4895 = new BitSet(new long[]{0x8000000000000000L,0x8800000020000000L,0x0000001144000000L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4900 = new BitSet(new long[]{0x8000000000000000L,0x8800000020000000L,0x0000001144000000L});
    public static final BitSet FOLLOW_154_in_interface_declaration4905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_fields_body4922 = new BitSet(new long[]{0x8000400000000000L,0x0040000020000000L,0x4260080A80000000L,0x00000000041E5790L});
    public static final BitSet FOLLOW_body_item_in_fields_body4928 = new BitSet(new long[]{0x8000400000000000L,0x0040000020000000L,0x4260080A80000000L,0x00000000041E5790L});
    public static final BitSet FOLLOW_218_in_fields_body4933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4948 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001E5790L});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4951 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001E5790L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_field_modifiers5024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name5039 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name5041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_category5060 = new BitSet(new long[]{0x0000400000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_ID_in_category5062 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_category5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_superclass_name5085 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name5087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name5091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations5120 = new BitSet(new long[]{0x0000400000000002L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_block_decl_in_field_declaration5147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration5155 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration5157 = new BitSet(new long[]{0x0000000000000000L,0x6460000000000000L,0x00000000000214A2L,0x0000000001000000L});
    public static final BitSet FOLLOW_126_in_field_declaration5161 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration5163 = new BitSet(new long[]{0x0000000000000000L,0x6460000000000000L,0x00000000000214A2L,0x0000000001000000L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration5170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L,0x0000000000400000L});
    public static final BitSet FOLLOW_135_in_field_declaration5173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration5177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration5184 = new BitSet(new long[]{0x8000400000080000L,0x9250800021000002L,0x0019A42400300001L,0x0000000008410002L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration5186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_field_declaration5188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_field_declaration5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple5209 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple5211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_classical_method_params5236 = new BitSet(new long[]{0x0000400000000000L,0x4140000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params5238 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_126_in_classical_method_params5242 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params5244 = new BitSet(new long[]{0x0000000000000000L,0x4100000000000000L});
    public static final BitSet FOLLOW_120_in_classical_method_params5248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param5273 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param5275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration5315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration5321 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration5323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_classical_type_declaration5331 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5333 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration5335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_classical_type_declaration5352 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5354 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration5356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_classical_type_declaration5373 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5375 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_classical_type_declaration5377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration5406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration5417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_type_decl_in_type_declaration5428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration5434 = new BitSet(new long[]{0x0000000000000002L,0x0210000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration5436 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_declaration5438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration5445 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration5447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration5454 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration5456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration5463 = new BitSet(new long[]{0x0000000000000002L,0x0010000000000000L});
    public static final BitSet FOLLOW_116_in_type_declaration5465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_type_declaration_plane5480 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0240080000000000L,0x0000000000181790L});
    public static final BitSet FOLLOW_212_in_type_declaration_plane5483 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0240080000000000L,0x0000000000081790L});
    public static final BitSet FOLLOW_185_in_type_declaration_plane5486 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0040080000000000L,0x0000000000081790L});
    public static final BitSet FOLLOW_211_in_type_declaration_plane5489 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0040080000000000L,0x0000000000001790L});
    public static final BitSet FOLLOW_199_in_type_declaration_plane5492 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0040080000000000L,0x0000000000001710L});
    public static final BitSet FOLLOW_182_in_type_declaration_plane5495 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001710L});
    public static final BitSet FOLLOW_202_in_type_declaration_plane5498 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane5501 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_declaration_plane5504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_type_declaration_plane5506 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_declaration_plane5508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_decl_protocol_predicate5540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_type_decl_protocol_predicate5543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type_decl_protocol_predicate5545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_type_declaration_protocol5561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_type_declaration_protocol5564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type_declaration_protocol5566 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol5568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_type_declaration_protocol5570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_type_declaration_struct_simple5592 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple5594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_type_declaration_union_simple5614 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_enum_simple5640 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_type_declaration_struct_full5662 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_full5664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct_full5667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_type_declaration_union_full5691 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_full5693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union_full5696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_type_declaration_enum_full5720 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_full5722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum_full5725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct5760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_union5790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_enum5820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_enum_wrapper5839 = new BitSet(new long[]{0x8000400000000000L,0x4000000020000000L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5849 = new BitSet(new long[]{0x8000400000000000L,0x4000000020000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_218_in_enum_wrapper5856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_enum_element5871 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_enum_element5874 = new BitSet(new long[]{0x0000000000000002L,0x6420000000000000L,0x0000000000021422L,0x0000000001000000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5877 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_enum_element5879 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_enum_element5883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_214_in_struct5937 = new BitSet(new long[]{0x8000400000000000L,0x0040000020000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_struct_internal_in_struct5946 = new BitSet(new long[]{0x8000400000000000L,0x0040000020000000L,0x4260080000000000L,0x00000000041C5790L});
    public static final BitSet FOLLOW_218_in_struct5953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_type_dec_template6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_type_dec_template6026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_type_dec_template6028 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_type_dec_template6030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_type_dec_template6032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_136_in_type_dec_template6050 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ID_in_type_dec_template6053 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_dec_template6055 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_142_in_type_dec_template6057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_171_in_type_dec6070 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001310L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec6073 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0001000000000100L});
    public static final BitSet FOLLOW_type_dec_template_in_type_dec6075 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_121_in_type_dec6078 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec6082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal6099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal6108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_knownTypes6121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_knownTypes6127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_knownTypes6133 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L,0x0000000000000300L});
    public static final BitSet FOLLOW_200_in_knownTypes6136 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_185_in_knownTypes6140 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_knownTypes6142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_204_in_knownTypes6150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000001100L});
    public static final BitSet FOLLOW_200_in_knownTypes6153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name6169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000040L});
    public static final BitSet FOLLOW_array_size_in_field_name6171 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0001000000000040L});
    public static final BitSet FOLLOW_field_crap_in_field_name6175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_array_size6206 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000002L,0x0004000000000000L});
    public static final BitSet FOLLOW_178_in_array_size6217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_field_crap6227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_NR_LIT_in_field_crap6229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration6241 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration6243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper6255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants6292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_method_declaration_common6305 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common6307 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_declaration_common6309 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common6311 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x00000000000000C0L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common6314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_method_declaration_common6317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate6329 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_declaration_predicate6332 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate6334 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_declaration_predicate6336 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate6338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name6356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params6379 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_prefix_in_method_param6399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_method_param6402 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_method_param6405 = new BitSet(new long[]{0x0000400000000000L,0x0040000000000000L,0x4260080000000000L,0x00000000001C5790L});
    public static final BitSet FOLLOW_type_declaration_in_method_param6407 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_method_param6409 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param6413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name6446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix6465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_function_in_define_declaration6494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_line_in_define_declaration6510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6517 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_declaration6519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6542 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration6544 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_define_declaration6546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6562 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_line6586 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_line6588 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_define_as_line6590 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400100001L,0x0000000008010002L});
    public static final BitSet FOLLOW_simple_expression_in_define_as_line6592 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_define_as_line6594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_function6623 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_function6625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_define_as_function6628 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000060882CL});
    public static final BitSet FOLLOW_214_in_define_as_function6630 = new BitSet(new long[]{0x8000400000000000L,0x0250000020000000L,0xB481044000000080L,0x000000000020882CL});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_define_as_function6633 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_218_in_define_as_function6635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_STR_LIT_in_string6662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_string_objc6685 = new BitSet(new long[]{0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_STR_LIT_in_string_objc6687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred1_Objc507 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_synpred1_Objc509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1496 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred5_Objc1498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred6_Objc1511 = new BitSet(new long[]{0x0000000000000000L,0x2420000000000000L,0x0000000000021422L,0x0000000001000000L});
    public static final BitSet FOLLOW_op_assign_in_synpred6_Objc1513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred7_Objc1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred8_Objc1799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_synpred8_Objc1801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_synpred9_Objc1818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred10_Objc1833 = new BitSet(new long[]{0x0000000000000000L,0x2420000000000000L,0x0000000000021422L,0x0000000001000000L});
    public static final BitSet FOLLOW_op_assign_in_synpred10_Objc1835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred11_Objc2455 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred11_Objc2457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred12_Objc3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred13_Objc3147 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred13_Objc3149 = new BitSet(new long[]{0x0000400000080000L,0x0250000001000002L,0x0019A42400100000L,0x0000000000010002L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred13_Objc3151 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_synpred13_Objc3153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_synpred13_Objc3155 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred14_Objc3192 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synpred14_Objc3194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred15_Objc3230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred16_Objc3300 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_access_wrapper_in_synpred16_Objc3303 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred16_Objc3305 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_118_in_synpred16_Objc3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred17_Objc3369 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred17_Objc3372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_synpred17_Objc3374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred18_Objc3404 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred18_Objc3410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred19_Objc3776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_synpred20_Objc3914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_synpred21_Objc3927 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_type_cast_name_in_synpred21_Objc3929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_synpred22_Objc4008 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred22_Objc4011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_176_in_synpred22_Objc4013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_decl_predicate_in_synpred23_Objc4413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred24_Objc4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_decl_predicate_in_synpred25_Objc5143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred26_Objc5300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred27_Objc5311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred28_Objc5402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred29_Objc5413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_type_decl_predicate_in_synpred30_Objc5424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_synpred31_Objc5751 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred31_Objc5753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred31_Objc5756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_210_in_synpred32_Objc5781 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred32_Objc5783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred32_Objc5786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred33_Objc5811 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred33_Objc5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_214_in_synpred33_Objc5816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_synpred34_Objc6015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000000010L});
    public static final BitSet FOLLOW_196_in_synpred34_Objc6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_synpred35_Objc6040 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_ID_in_synpred35_Objc6043 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_synpred35_Objc6045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred36_Objc6485 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred36_Objc6487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_synpred36_Objc6489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred37_Objc6501 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred37_Objc6503 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_118_in_synpred37_Objc6505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred38_Objc6535 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred38_Objc6537 = new BitSet(new long[]{0x0000400000080000L,0x9250800001000002L,0x0019A42400300001L,0x0000000008010002L});
    public static final BitSet FOLLOW_element_value_in_synpred38_Objc6539 = new BitSet(new long[]{0x0000000000000002L});

}