// $ANTLR 3.4 /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g 2017-06-15 19:44:58

package cz.spalda2.objctojavacnv.antlr.output;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;


@SuppressWarnings({"all", "warnings", "unchecked"})
public class ObjcParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ACCESS", "ARRAY_INIT", "ARRAY_VALUE", "BLOCK_CALL", "BLOCK_MULTI", "BLOCK_SINGLE", "BOOL", "BREAK_STMT", "CASE_STMT", "CATCH_STMT", "CATEGORY", "CHAR", "CHAR_LITERAL", "CLASS_NAME", "CODE", "CONTINUE_STMT", "DEFAULT_STMT", "DEFINE", "DEFINE_LITERAL", "DIGIT", "DIRECTIVE", "DO_STMT", "ELSE_STMT", "ENUM", "ENUM_DEC", "ENUM_FIELD", "EXPR_COMPLEMENT", "EXPR_NEGATE", "EXPR_NOT", "EXTERN", "EscapeSequence", "FIELD", "FIELDS", "FIELD_NAME", "FINALLY_STMT", "FORWARD_DECLARATION", "FOR_IN_STMT", "FOR_STMT", "FUNC_POINTER", "GOTO", "GROUP_MODIFIER", "HexDigit", "ID", "IF0_COMMENT", "IF_STMT", "IMPLEMENTATION", "IMPLEMENTS_INTERFACES", "IMPLEMENTS_INTERFACE_NAME", "INTERFACE", "INTERFACE_NAME", "LETTER", "METHOD", "METHOD_CALL", "METHOD_IMPL", "METHOD_MSG", "METHOD_NAME", "METHOD_PARAM", "METHOD_PARAMS", "MODIFIER", "MULTI_COMMENT", "MULTI_COMMENT_LIT", "NAME", "NUMBER", "NUMBER_LITERAL", "OBJECT_ACCESS", "OP", "PARAMS", "PARAM_NAME", "PARAM_PREFIX", "PREFIX", "PREPROCESSOR_DECLARATION", "PROPERTY", "PROTOCOL", "PROTOCOL_NAME", "QUESTION_MARK_IF", "RETURN_STMT", "SIMPLE_EXPR", "SINGLE_COMMENT", "SINGLE_COMMENT_LIT", "STATIC", "STATIC_METHOD", "STATIC_VARIABLE", "STRING", "STRING_LITERAL", "STRING_OBJC", "STRUCT", "STRUCT_DEC", "SUPERCLASS_NAME", "SWITCH_STMT", "SYNCHRONIZED", "SYNTHETIZE", "StringBody", "TEMPLATE_TYPE", "THROW_STMT", "TRY_STMT", "TYPEDEF", "TYPEDEF_NAME", "TYPE_CAST", "TYPE_PLAIN", "UNION", "UNION_DEC", "UnicodeEscape", "VALUE", "VARIABLE", "VARIABLE_ASSIGNMENT", "VA_ARGS", "WHILE_STMT", "WHITESPACE", "'!'", "'!='", "'\"C\"'", "'%'", "'&&'", "'&'", "'&='", "'('", "'(^'", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'.'", "'/'", "'/='", "':'", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'@'", "'@catch'", "'@class'", "'@dynamic'", "'@end'", "'@finally'", "'@implementation'", "'@interface'", "'@optional'", "'@private'", "'@property'", "'@protected'", "'@protocol'", "'@public'", "'@required'", "'@selector'", "'@synchronized'", "'@synthesize'", "'@throw'", "'@try'", "'IBOutlet'", "'MH_EXPORT'", "'NO'", "'NS_INLINE'", "'YES'", "'['", "'\\\\'", "']'", "'^'", "'^('", "'__block'", "'break'", "'case'", "'const'", "'continue'", "'default'", "'do'", "'else'", "'enum'", "'extern'", "'false'", "'for'", "'goto'", "'id'", "'if'", "'in'", "'int'", "'long'", "'return'", "'short'", "'static'", "'struct'", "'switch'", "'true'", "'typedef'", "'union'", "'unsigned'", "'volatile'", "'while'", "'{'", "'|'", "'|='", "'||'", "'}'", "'~'"
    };

    public static final int EOF=-1;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int T__136=136;
    public static final int T__137=137;
    public static final int T__138=138;
    public static final int T__139=139;
    public static final int T__140=140;
    public static final int T__141=141;
    public static final int T__142=142;
    public static final int T__143=143;
    public static final int T__144=144;
    public static final int T__145=145;
    public static final int T__146=146;
    public static final int T__147=147;
    public static final int T__148=148;
    public static final int T__149=149;
    public static final int T__150=150;
    public static final int T__151=151;
    public static final int T__152=152;
    public static final int T__153=153;
    public static final int T__154=154;
    public static final int T__155=155;
    public static final int T__156=156;
    public static final int T__157=157;
    public static final int T__158=158;
    public static final int T__159=159;
    public static final int T__160=160;
    public static final int T__161=161;
    public static final int T__162=162;
    public static final int T__163=163;
    public static final int T__164=164;
    public static final int T__165=165;
    public static final int T__166=166;
    public static final int T__167=167;
    public static final int T__168=168;
    public static final int T__169=169;
    public static final int T__170=170;
    public static final int T__171=171;
    public static final int T__172=172;
    public static final int T__173=173;
    public static final int T__174=174;
    public static final int T__175=175;
    public static final int T__176=176;
    public static final int T__177=177;
    public static final int T__178=178;
    public static final int T__179=179;
    public static final int T__180=180;
    public static final int T__181=181;
    public static final int T__182=182;
    public static final int T__183=183;
    public static final int T__184=184;
    public static final int T__185=185;
    public static final int T__186=186;
    public static final int T__187=187;
    public static final int T__188=188;
    public static final int T__189=189;
    public static final int T__190=190;
    public static final int T__191=191;
    public static final int T__192=192;
    public static final int T__193=193;
    public static final int T__194=194;
    public static final int T__195=195;
    public static final int T__196=196;
    public static final int T__197=197;
    public static final int T__198=198;
    public static final int T__199=199;
    public static final int T__200=200;
    public static final int T__201=201;
    public static final int T__202=202;
    public static final int T__203=203;
    public static final int T__204=204;
    public static final int T__205=205;
    public static final int T__206=206;
    public static final int T__207=207;
    public static final int T__208=208;
    public static final int T__209=209;
    public static final int T__210=210;
    public static final int T__211=211;
    public static final int T__212=212;
    public static final int ACCESS=4;
    public static final int ARRAY_INIT=5;
    public static final int ARRAY_VALUE=6;
    public static final int BLOCK_CALL=7;
    public static final int BLOCK_MULTI=8;
    public static final int BLOCK_SINGLE=9;
    public static final int BOOL=10;
    public static final int BREAK_STMT=11;
    public static final int CASE_STMT=12;
    public static final int CATCH_STMT=13;
    public static final int CATEGORY=14;
    public static final int CHAR=15;
    public static final int CHAR_LITERAL=16;
    public static final int CLASS_NAME=17;
    public static final int CODE=18;
    public static final int CONTINUE_STMT=19;
    public static final int DEFAULT_STMT=20;
    public static final int DEFINE=21;
    public static final int DEFINE_LITERAL=22;
    public static final int DIGIT=23;
    public static final int DIRECTIVE=24;
    public static final int DO_STMT=25;
    public static final int ELSE_STMT=26;
    public static final int ENUM=27;
    public static final int ENUM_DEC=28;
    public static final int ENUM_FIELD=29;
    public static final int EXPR_COMPLEMENT=30;
    public static final int EXPR_NEGATE=31;
    public static final int EXPR_NOT=32;
    public static final int EXTERN=33;
    public static final int EscapeSequence=34;
    public static final int FIELD=35;
    public static final int FIELDS=36;
    public static final int FIELD_NAME=37;
    public static final int FINALLY_STMT=38;
    public static final int FORWARD_DECLARATION=39;
    public static final int FOR_IN_STMT=40;
    public static final int FOR_STMT=41;
    public static final int FUNC_POINTER=42;
    public static final int GOTO=43;
    public static final int GROUP_MODIFIER=44;
    public static final int HexDigit=45;
    public static final int ID=46;
    public static final int IF0_COMMENT=47;
    public static final int IF_STMT=48;
    public static final int IMPLEMENTATION=49;
    public static final int IMPLEMENTS_INTERFACES=50;
    public static final int IMPLEMENTS_INTERFACE_NAME=51;
    public static final int INTERFACE=52;
    public static final int INTERFACE_NAME=53;
    public static final int LETTER=54;
    public static final int METHOD=55;
    public static final int METHOD_CALL=56;
    public static final int METHOD_IMPL=57;
    public static final int METHOD_MSG=58;
    public static final int METHOD_NAME=59;
    public static final int METHOD_PARAM=60;
    public static final int METHOD_PARAMS=61;
    public static final int MODIFIER=62;
    public static final int MULTI_COMMENT=63;
    public static final int MULTI_COMMENT_LIT=64;
    public static final int NAME=65;
    public static final int NUMBER=66;
    public static final int NUMBER_LITERAL=67;
    public static final int OBJECT_ACCESS=68;
    public static final int OP=69;
    public static final int PARAMS=70;
    public static final int PARAM_NAME=71;
    public static final int PARAM_PREFIX=72;
    public static final int PREFIX=73;
    public static final int PREPROCESSOR_DECLARATION=74;
    public static final int PROPERTY=75;
    public static final int PROTOCOL=76;
    public static final int PROTOCOL_NAME=77;
    public static final int QUESTION_MARK_IF=78;
    public static final int RETURN_STMT=79;
    public static final int SIMPLE_EXPR=80;
    public static final int SINGLE_COMMENT=81;
    public static final int SINGLE_COMMENT_LIT=82;
    public static final int STATIC=83;
    public static final int STATIC_METHOD=84;
    public static final int STATIC_VARIABLE=85;
    public static final int STRING=86;
    public static final int STRING_LITERAL=87;
    public static final int STRING_OBJC=88;
    public static final int STRUCT=89;
    public static final int STRUCT_DEC=90;
    public static final int SUPERCLASS_NAME=91;
    public static final int SWITCH_STMT=92;
    public static final int SYNCHRONIZED=93;
    public static final int SYNTHETIZE=94;
    public static final int StringBody=95;
    public static final int TEMPLATE_TYPE=96;
    public static final int THROW_STMT=97;
    public static final int TRY_STMT=98;
    public static final int TYPEDEF=99;
    public static final int TYPEDEF_NAME=100;
    public static final int TYPE_CAST=101;
    public static final int TYPE_PLAIN=102;
    public static final int UNION=103;
    public static final int UNION_DEC=104;
    public static final int UnicodeEscape=105;
    public static final int VALUE=106;
    public static final int VARIABLE=107;
    public static final int VARIABLE_ASSIGNMENT=108;
    public static final int VA_ARGS=109;
    public static final int WHILE_STMT=110;
    public static final int WHITESPACE=111;

    // delegates
    public Parser[] getDelegates() {
        return new Parser[] {};
    }

    // delegators


    public ObjcParser(TokenStream input) {
        this(input, new RecognizerSharedState());
    }
    public ObjcParser(TokenStream input, RecognizerSharedState state) {
        super(input, state);
    }

protected TreeAdaptor adaptor = new CommonTreeAdaptor();

public void setTreeAdaptor(TreeAdaptor adaptor) {
    this.adaptor = adaptor;
}
public TreeAdaptor getTreeAdaptor() {
    return adaptor;
}
    public String[] getTokenNames() { return ObjcParser.tokenNames; }
    public String getGrammarFileName() { return "/Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g"; }


    public static class code_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:1: code : ( code_internal )+ -> ^( CODE ( code_internal )+ ) ;
    public final ObjcParser.code_return code() throws RecognitionException {
        ObjcParser.code_return retval = new ObjcParser.code_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.code_internal_return code_internal1 =null;


        RewriteRuleSubtreeStream stream_code_internal=new RewriteRuleSubtreeStream(adaptor,"rule code_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:117:6: ( ( code_internal )+ -> ^( CODE ( code_internal )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: ( code_internal )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==DEFINE_LITERAL||LA1_0==ID||LA1_0==MULTI_COMMENT_LIT||LA1_0==SINGLE_COMMENT_LIT||LA1_0==119||LA1_0==136||LA1_0==150||(LA1_0 >= 154 && LA1_0 <= 155)||LA1_0==160||LA1_0==169||LA1_0==178||LA1_0==181||(LA1_0 >= 186 && LA1_0 <= 187)||LA1_0==191||(LA1_0 >= 194 && LA1_0 <= 195)||(LA1_0 >= 197 && LA1_0 <= 199)||(LA1_0 >= 202 && LA1_0 <= 205)) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:3: code_internal
            	    {
            	    pushFollow(FOLLOW_code_internal_in_code483);
            	    code_internal1=code_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_code_internal.add(code_internal1.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);


            // AST REWRITE
            // elements: code_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 118:18: -> ^( CODE ( code_internal )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:118:21: ^( CODE ( code_internal )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CODE, "CODE")
                , root_1);

                if ( !(stream_code_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_code_internal.hasNext() ) {
                    adaptor.addChild(root_1, stream_code_internal.nextTree());

                }
                stream_code_internal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code"


    public static class code_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "code_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );
    public final ObjcParser.code_internal_return code_internal() throws RecognitionException {
        ObjcParser.code_internal_return retval = new ObjcParser.code_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal13=null;
        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper2 =null;

        ObjcParser.implementation_wrapper_return implementation_wrapper3 =null;

        ObjcParser.forward_class_declaration_return forward_class_declaration4 =null;

        ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper5 =null;

        ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper6 =null;

        ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper7 =null;

        ObjcParser.define_declaration_return define_declaration8 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper9 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper10 =null;

        ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous11 =null;

        ObjcParser.comments_return comments12 =null;


        Object char_literal13_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:3: ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' )
            int alt2=12;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )=> variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_code_internal514);
                    variable_declaration_wrapper2=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper2.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:123:4: implementation_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_wrapper_in_code_internal519);
                    implementation_wrapper3=implementation_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_wrapper3.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:124:4: forward_class_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_forward_class_declaration_in_code_internal524);
                    forward_class_declaration4=forward_class_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forward_class_declaration4.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:125:5: protocol_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_protocol_declaration_wrapper_in_code_internal530);
                    protocol_declaration_wrapper5=protocol_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_declaration_wrapper5.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:126:5: interface_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_interface_declaration_wrapper_in_code_internal537);
                    interface_declaration_wrapper6=interface_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_declaration_wrapper6.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:127:5: extern_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_extern_declaration_wrapper_in_code_internal544);
                    extern_declaration_wrapper7=extern_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, extern_declaration_wrapper7.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:128:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_code_internal550);
                    define_declaration8=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration8.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:129:5: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_code_internal556);
                    typedef_declaration_wrapper9=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper9.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:130:5: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_code_internal562);
                    static_declaration_wrapper10=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper10.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:131:5: type_declaration_struct_enum_union_anonymous
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568);
                    type_declaration_struct_enum_union_anonymous11=type_declaration_struct_enum_union_anonymous();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_enum_union_anonymous11.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:132:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_code_internal574);
                    comments12=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments12.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:133:5: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal13=(Token)match(input,136,FOLLOW_136_in_code_internal580); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal13_tree = 
                    (Object)adaptor.create(char_literal13)
                    ;
                    adaptor.addChild(root_0, char_literal13_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "code_internal"


    public static class comments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "comments"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:136:1: comments : ( single_comment | multi_comment );
    public final ObjcParser.comments_return comments() throws RecognitionException {
        ObjcParser.comments_return retval = new ObjcParser.comments_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.single_comment_return single_comment14 =null;

        ObjcParser.multi_comment_return multi_comment15 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:3: ( single_comment | multi_comment )
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==SINGLE_COMMENT_LIT) ) {
                alt3=1;
            }
            else if ( (LA3_0==MULTI_COMMENT_LIT) ) {
                alt3=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 3, 0, input);

                throw nvae;

            }
            switch (alt3) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:137:5: single_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_single_comment_in_comments592);
                    single_comment14=single_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, single_comment14.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:138:5: multi_comment
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_multi_comment_in_comments598);
                    multi_comment15=multi_comment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, multi_comment15.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "comments"


    public static class single_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "single_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:141:1: single_comment : SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) ;
    public final ObjcParser.single_comment_return single_comment() throws RecognitionException {
        ObjcParser.single_comment_return retval = new ObjcParser.single_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token SINGLE_COMMENT_LIT16=null;

        Object SINGLE_COMMENT_LIT16_tree=null;
        RewriteRuleTokenStream stream_SINGLE_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token SINGLE_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:3: ( SINGLE_COMMENT_LIT -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:5: SINGLE_COMMENT_LIT
            {
            SINGLE_COMMENT_LIT16=(Token)match(input,SINGLE_COMMENT_LIT,FOLLOW_SINGLE_COMMENT_LIT_in_single_comment613); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SINGLE_COMMENT_LIT.add(SINGLE_COMMENT_LIT16);


            // AST REWRITE
            // elements: SINGLE_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 142:24: -> ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:142:26: ^( SINGLE_COMMENT SINGLE_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SINGLE_COMMENT, "SINGLE_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_SINGLE_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "single_comment"


    public static class multi_comment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "multi_comment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:145:1: multi_comment : MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) ;
    public final ObjcParser.multi_comment_return multi_comment() throws RecognitionException {
        ObjcParser.multi_comment_return retval = new ObjcParser.multi_comment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token MULTI_COMMENT_LIT17=null;

        Object MULTI_COMMENT_LIT17_tree=null;
        RewriteRuleTokenStream stream_MULTI_COMMENT_LIT=new RewriteRuleTokenStream(adaptor,"token MULTI_COMMENT_LIT");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:3: ( MULTI_COMMENT_LIT -> ^( MULTI_COMMENT MULTI_COMMENT_LIT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:5: MULTI_COMMENT_LIT
            {
            MULTI_COMMENT_LIT17=(Token)match(input,MULTI_COMMENT_LIT,FOLLOW_MULTI_COMMENT_LIT_in_multi_comment635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MULTI_COMMENT_LIT.add(MULTI_COMMENT_LIT17);


            // AST REWRITE
            // elements: MULTI_COMMENT_LIT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 146:23: -> ^( MULTI_COMMENT MULTI_COMMENT_LIT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:146:26: ^( MULTI_COMMENT MULTI_COMMENT_LIT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MULTI_COMMENT, "MULTI_COMMENT")
                , root_1);

                adaptor.addChild(root_1, 
                stream_MULTI_COMMENT_LIT.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "multi_comment"


    public static class extern_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:153:2: extern_wrapper : extern_c -> ^( EXTERN ) ;
    public final ObjcParser.extern_wrapper_return extern_wrapper() throws RecognitionException {
        ObjcParser.extern_wrapper_return retval = new ObjcParser.extern_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_c_return extern_c18 =null;


        RewriteRuleSubtreeStream stream_extern_c=new RewriteRuleSubtreeStream(adaptor,"rule extern_c");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:3: ( extern_c -> ^( EXTERN ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:6: extern_c
            {
            pushFollow(FOLLOW_extern_c_in_extern_wrapper664);
            extern_c18=extern_c();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_c.add(extern_c18.getTree());

            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 154:15: -> ^( EXTERN )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:154:18: ^( EXTERN )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_wrapper"


    public static class extern_c_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_c"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:157:2: extern_c : 'extern' '\"C\"' '(' ~ ( ')' ) ')' ;
    public final ObjcParser.extern_c_return extern_c() throws RecognitionException {
        ObjcParser.extern_c_return retval = new ObjcParser.extern_c_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal19=null;
        Token string_literal20=null;
        Token char_literal21=null;
        Token set22=null;
        Token char_literal23=null;

        Object string_literal19_tree=null;
        Object string_literal20_tree=null;
        Object char_literal21_tree=null;
        Object set22_tree=null;
        Object char_literal23_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:5: ( 'extern' '\"C\"' '(' ~ ( ')' ) ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:158:7: 'extern' '\"C\"' '(' ~ ( ')' ) ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal19=(Token)match(input,187,FOLLOW_187_in_extern_c688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal19_tree = 
            (Object)adaptor.create(string_literal19)
            ;
            adaptor.addChild(root_0, string_literal19_tree);
            }

            string_literal20=(Token)match(input,114,FOLLOW_114_in_extern_c691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal20_tree = 
            (Object)adaptor.create(string_literal20)
            ;
            adaptor.addChild(root_0, string_literal20_tree);
            }

            char_literal21=(Token)match(input,119,FOLLOW_119_in_extern_c694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal21_tree = 
            (Object)adaptor.create(char_literal21)
            ;
            adaptor.addChild(root_0, char_literal21_tree);
            }

            set22=(Token)input.LT(1);

            if ( (input.LA(1) >= ACCESS && input.LA(1) <= 120)||(input.LA(1) >= 122 && input.LA(1) <= 212) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set22)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            char_literal23=(Token)match(input,121,FOLLOW_121_in_extern_c701); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal23_tree = 
            (Object)adaptor.create(char_literal23)
            ;
            adaptor.addChild(root_0, char_literal23_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_c"


    public static class implementation_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:161:1: implementation_wrapper : implementation -> ^( IMPLEMENTATION implementation ) ;
    public final ObjcParser.implementation_wrapper_return implementation_wrapper() throws RecognitionException {
        ObjcParser.implementation_wrapper_return retval = new ObjcParser.implementation_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implementation_return implementation24 =null;


        RewriteRuleSubtreeStream stream_implementation=new RewriteRuleSubtreeStream(adaptor,"rule implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:3: ( implementation -> ^( IMPLEMENTATION implementation ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:5: implementation
            {
            pushFollow(FOLLOW_implementation_in_implementation_wrapper718);
            implementation24=implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implementation.add(implementation24.getTree());

            // AST REWRITE
            // elements: implementation
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 162:20: -> ^( IMPLEMENTATION implementation )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:162:23: ^( IMPLEMENTATION implementation )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTATION, "IMPLEMENTATION")
                , root_1);

                adaptor.addChild(root_1, stream_implementation.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_wrapper"


    public static class implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:164:1: implementation : '@implementation' name ( category )? ( implementation_body )* '@end' ;
    public final ObjcParser.implementation_return implementation() throws RecognitionException {
        ObjcParser.implementation_return retval = new ObjcParser.implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal25=null;
        Token string_literal29=null;
        ObjcParser.name_return name26 =null;

        ObjcParser.category_return category27 =null;

        ObjcParser.implementation_body_return implementation_body28 =null;


        Object string_literal25_tree=null;
        Object string_literal29_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:2: ( '@implementation' name ( category )? ( implementation_body )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:4: '@implementation' name ( category )? ( implementation_body )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal25=(Token)match(input,154,FOLLOW_154_in_implementation737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal25_tree = 
            (Object)adaptor.create(string_literal25)
            ;
            adaptor.addChild(root_0, string_literal25_tree);
            }

            pushFollow(FOLLOW_name_in_implementation740);
            name26=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name26.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:29: ( category )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==119) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==ID||LA4_1==121) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:165:29: category
                    {
                    pushFollow(FOLLOW_category_in_implementation743);
                    category27=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, category27.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:3: ( implementation_body )*
            loop5:
            do {
                int alt5=2;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==DEFINE_LITERAL||LA5_0==ID||LA5_0==MULTI_COMMENT_LIT||LA5_0==SINGLE_COMMENT_LIT||LA5_0==119||LA5_0==124||LA5_0==128||LA5_0==136||LA5_0==151||LA5_0==165||LA5_0==178||LA5_0==181||LA5_0==186||LA5_0==191||(LA5_0 >= 194 && LA5_0 <= 195)||(LA5_0 >= 197 && LA5_0 <= 199)||(LA5_0 >= 202 && LA5_0 <= 205)) ) {
                    alt5=1;
                }


                switch (alt5) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:166:3: implementation_body
            	    {
            	    pushFollow(FOLLOW_implementation_body_in_implementation748);
            	    implementation_body28=implementation_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_body28.getTree());

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);


            string_literal29=(Token)match(input,152,FOLLOW_152_in_implementation753); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal29_tree = 
            (Object)adaptor.create(string_literal29)
            ;
            adaptor.addChild(root_0, string_literal29_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation"


    public static class implementation_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:170:1: implementation_body : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' );
    public final ObjcParser.implementation_body_return implementation_body() throws RecognitionException {
        ObjcParser.implementation_body_return retval = new ObjcParser.implementation_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal38=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper30 =null;

        ObjcParser.implementation_method_wrapper_return implementation_method_wrapper31 =null;

        ObjcParser.directives_return directives32 =null;

        ObjcParser.define_declaration_return define_declaration33 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper34 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper35 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper36 =null;

        ObjcParser.comments_return comments37 =null;


        Object char_literal38_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | implementation_method_wrapper | directives | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | variable_declaration_wrapper | comments | ';' )
            int alt6=9;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA6_1 = input.LA(2);

                if ( ((LA6_1 >= 131 && LA6_1 <= 132)) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==119) && (synpred2_Objc())) {
                    alt6=1;
                }
                else if ( (LA6_1==ID||LA6_1==117||LA6_1==120||LA6_1==122||LA6_1==137||LA6_1==173) ) {
                    alt6=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 6, 1, input);

                    throw nvae;

                }
                }
                break;
            case 124:
            case 128:
                {
                alt6=2;
                }
                break;
            case 151:
            case 165:
                {
                alt6=3;
                }
                break;
            case DEFINE_LITERAL:
                {
                alt6=4;
                }
                break;
            case 202:
                {
                alt6=5;
                }
                break;
            case 198:
                {
                alt6=6;
                }
                break;
            case 119:
            case 178:
            case 181:
            case 186:
            case 191:
            case 194:
            case 195:
            case 197:
            case 199:
            case 203:
            case 204:
            case 205:
                {
                alt6=7;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt6=8;
                }
                break;
            case 136:
                {
                alt6=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;

            }

            switch (alt6) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_implementation_body772);
                    classical_method_call_wrapper30=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper30.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:172:5: implementation_method_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_implementation_method_wrapper_in_implementation_body778);
                    implementation_method_wrapper31=implementation_method_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implementation_method_wrapper31.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:173:5: directives
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_directives_in_implementation_body784);
                    directives32=directives();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, directives32.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:174:5: define_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_declaration_in_implementation_body790);
                    define_declaration33=define_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_declaration33.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:175:4: typedef_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_typedef_declaration_wrapper_in_implementation_body795);
                    typedef_declaration_wrapper34=typedef_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper34.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:176:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_implementation_body800);
                    static_declaration_wrapper35=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper35.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:177:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_implementation_body806);
                    variable_declaration_wrapper36=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper36.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:178:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_implementation_body812);
                    comments37=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments37.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:179:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal38=(Token)match(input,136,FOLLOW_136_in_implementation_body817); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal38_tree = 
                    (Object)adaptor.create(char_literal38)
                    ;
                    adaptor.addChild(root_0, char_literal38_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_body"


    public static class directives_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "directives"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:182:1: directives : synthesize -> ^( SYNTHETIZE synthesize ) ;
    public final ObjcParser.directives_return directives() throws RecognitionException {
        ObjcParser.directives_return retval = new ObjcParser.directives_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synthesize_return synthesize39 =null;


        RewriteRuleSubtreeStream stream_synthesize=new RewriteRuleSubtreeStream(adaptor,"rule synthesize");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:2: ( synthesize -> ^( SYNTHETIZE synthesize ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:4: synthesize
            {
            pushFollow(FOLLOW_synthesize_in_directives828);
            synthesize39=synthesize();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synthesize.add(synthesize39.getTree());

            // AST REWRITE
            // elements: synthesize
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 183:15: -> ^( SYNTHETIZE synthesize )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:183:18: ^( SYNTHETIZE synthesize )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNTHETIZE, "SYNTHETIZE")
                , root_1);

                adaptor.addChild(root_1, stream_synthesize.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "directives"


    public static class synthesize_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synthesize"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:186:1: synthesize : ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) ;
    public final ObjcParser.synthesize_return synthesize() throws RecognitionException {
        ObjcParser.synthesize_return retval = new ObjcParser.synthesize_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal40=null;
        Token string_literal41=null;
        Token ID42=null;
        Token char_literal43=null;
        Token char_literal45=null;
        ObjcParser.name_return name44 =null;


        Object string_literal40_tree=null;
        Object string_literal41_tree=null;
        Object ID42_tree=null;
        Object char_literal43_tree=null;
        Object char_literal45_tree=null;
        RewriteRuleTokenStream stream_165=new RewriteRuleTokenStream(adaptor,"token 165");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleTokenStream stream_151=new RewriteRuleTokenStream(adaptor,"token 151");
        RewriteRuleTokenStream stream_141=new RewriteRuleTokenStream(adaptor,"token 141");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:2: ( ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';' -> ^( PROPERTY ID ( name )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:4: ( '@synthesize' | '@dynamic' ) ID ( '=' name )? ';'
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:4: ( '@synthesize' | '@dynamic' )
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==165) ) {
                alt7=1;
            }
            else if ( (LA7_0==151) ) {
                alt7=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 7, 0, input);

                throw nvae;

            }
            switch (alt7) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:5: '@synthesize'
                    {
                    string_literal40=(Token)match(input,165,FOLLOW_165_in_synthesize850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_165.add(string_literal40);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:21: '@dynamic'
                    {
                    string_literal41=(Token)match(input,151,FOLLOW_151_in_synthesize854); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_151.add(string_literal41);


                    }
                    break;

            }


            ID42=(Token)match(input,ID,FOLLOW_ID_in_synthesize858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID42);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:37: ( '=' name )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==141) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:38: '=' name
                    {
                    char_literal43=(Token)match(input,141,FOLLOW_141_in_synthesize861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_141.add(char_literal43);


                    pushFollow(FOLLOW_name_in_synthesize863);
                    name44=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name44.getTree());

                    }
                    break;

            }


            char_literal45=(Token)match(input,136,FOLLOW_136_in_synthesize867); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal45);


            // AST REWRITE
            // elements: ID, name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 187:53: -> ^( PROPERTY ID ( name )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:56: ^( PROPERTY ID ( name )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROPERTY, "PROPERTY")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:187:70: ( name )?
                if ( stream_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_name.nextTree());

                }
                stream_name.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synthesize"


    public static class static_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "static_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:190:1: static_declaration_wrapper : 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) ;
    public final ObjcParser.static_declaration_wrapper_return static_declaration_wrapper() throws RecognitionException {
        ObjcParser.static_declaration_wrapper_return retval = new ObjcParser.static_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal46=null;
        ObjcParser.field_declaration_return field_declaration47 =null;


        Object string_literal46_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:2: ( 'static' field_declaration -> ^( STATIC_VARIABLE field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:4: 'static' field_declaration
            {
            string_literal46=(Token)match(input,198,FOLLOW_198_in_static_declaration_wrapper891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_198.add(string_literal46);


            pushFollow(FOLLOW_field_declaration_in_static_declaration_wrapper893);
            field_declaration47=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration47.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 191:31: -> ^( STATIC_VARIABLE field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:191:34: ^( STATIC_VARIABLE field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STATIC_VARIABLE, "STATIC_VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "static_declaration_wrapper"


    public static class block_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:194:1: block_call_predicate : ( '^(' | '^' ID '(' | ( '^' '{' ) );
    public final ObjcParser.block_call_predicate_return block_call_predicate() throws RecognitionException {
        ObjcParser.block_call_predicate_return retval = new ObjcParser.block_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal48=null;
        Token char_literal49=null;
        Token ID50=null;
        Token char_literal51=null;
        Token char_literal52=null;
        Token char_literal53=null;

        Object string_literal48_tree=null;
        Object char_literal49_tree=null;
        Object ID50_tree=null;
        Object char_literal51_tree=null;
        Object char_literal52_tree=null;
        Object char_literal53_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:3: ( '^(' | '^' ID '(' | ( '^' '{' ) )
            int alt9=3;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==177) ) {
                alt9=1;
            }
            else if ( (LA9_0==176) ) {
                int LA9_2 = input.LA(2);

                if ( (LA9_2==ID) ) {
                    alt9=2;
                }
                else if ( (LA9_2==207) ) {
                    alt9=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 2, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;

            }
            switch (alt9) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:195:5: '^('
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal48=(Token)match(input,177,FOLLOW_177_in_block_call_predicate913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal48_tree = 
                    (Object)adaptor.create(string_literal48)
                    ;
                    adaptor.addChild(root_0, string_literal48_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:196:5: '^' ID '('
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal49=(Token)match(input,176,FOLLOW_176_in_block_call_predicate919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal49_tree = 
                    (Object)adaptor.create(char_literal49)
                    ;
                    adaptor.addChild(root_0, char_literal49_tree);
                    }

                    ID50=(Token)match(input,ID,FOLLOW_ID_in_block_call_predicate921); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID50_tree = 
                    (Object)adaptor.create(ID50)
                    ;
                    adaptor.addChild(root_0, ID50_tree);
                    }

                    char_literal51=(Token)match(input,119,FOLLOW_119_in_block_call_predicate923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal51_tree = 
                    (Object)adaptor.create(char_literal51)
                    ;
                    adaptor.addChild(root_0, char_literal51_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^' '{' )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:5: ( '^' '{' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:197:6: '^' '{'
                    {
                    char_literal52=(Token)match(input,176,FOLLOW_176_in_block_call_predicate930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal52_tree = 
                    (Object)adaptor.create(char_literal52)
                    ;
                    adaptor.addChild(root_0, char_literal52_tree);
                    }

                    char_literal53=(Token)match(input,207,FOLLOW_207_in_block_call_predicate932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal53_tree = 
                    (Object)adaptor.create(char_literal53)
                    ;
                    adaptor.addChild(root_0, char_literal53_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_predicate"


    public static class block_type_decl_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_type_decl_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:200:1: block_type_decl_predicate : type_dec_internal ( '(^' ')' ) ;
    public final ObjcParser.block_type_decl_predicate_return block_type_decl_predicate() throws RecognitionException {
        ObjcParser.block_type_decl_predicate_return retval = new ObjcParser.block_type_decl_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal55=null;
        Token char_literal56=null;
        ObjcParser.type_dec_internal_return type_dec_internal54 =null;


        Object string_literal55_tree=null;
        Object char_literal56_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:5: ( type_dec_internal ( '(^' ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:7: type_dec_internal ( '(^' ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_block_type_decl_predicate948);
            type_dec_internal54=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal54.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:25: ( '(^' ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:201:26: '(^' ')'
            {
            string_literal55=(Token)match(input,120,FOLLOW_120_in_block_type_decl_predicate951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal55_tree = 
            (Object)adaptor.create(string_literal55)
            ;
            adaptor.addChild(root_0, string_literal55_tree);
            }

            char_literal56=(Token)match(input,121,FOLLOW_121_in_block_type_decl_predicate952); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal56_tree = 
            (Object)adaptor.create(char_literal56)
            ;
            adaptor.addChild(root_0, char_literal56_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_type_decl_predicate"


    public static class block_type_decl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_type_decl"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:204:1: block_type_decl : type_dec_internal ( '(^' ')' '(' ( block_params )? ')' ) ;
    public final ObjcParser.block_type_decl_return block_type_decl() throws RecognitionException {
        ObjcParser.block_type_decl_return retval = new ObjcParser.block_type_decl_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal58=null;
        Token char_literal59=null;
        Token char_literal60=null;
        Token char_literal62=null;
        ObjcParser.type_dec_internal_return type_dec_internal57 =null;

        ObjcParser.block_params_return block_params61 =null;


        Object string_literal58_tree=null;
        Object char_literal59_tree=null;
        Object char_literal60_tree=null;
        Object char_literal62_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:5: ( type_dec_internal ( '(^' ')' '(' ( block_params )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:7: type_dec_internal ( '(^' ')' '(' ( block_params )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_block_type_decl972);
            type_dec_internal57=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal57.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:25: ( '(^' ')' '(' ( block_params )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:26: '(^' ')' '(' ( block_params )? ')'
            {
            string_literal58=(Token)match(input,120,FOLLOW_120_in_block_type_decl975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal58_tree = 
            (Object)adaptor.create(string_literal58)
            ;
            adaptor.addChild(root_0, string_literal58_tree);
            }

            char_literal59=(Token)match(input,121,FOLLOW_121_in_block_type_decl976); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal59_tree = 
            (Object)adaptor.create(char_literal59)
            ;
            adaptor.addChild(root_0, char_literal59_tree);
            }

            char_literal60=(Token)match(input,119,FOLLOW_119_in_block_type_decl977); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal60_tree = 
            (Object)adaptor.create(char_literal60)
            ;
            adaptor.addChild(root_0, char_literal60_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:37: ( block_params )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ID||LA10_0==119||LA10_0==178||LA10_0==181||LA10_0==186||LA10_0==191||(LA10_0 >= 194 && LA10_0 <= 195)||LA10_0==197||LA10_0==199||(LA10_0 >= 203 && LA10_0 <= 205)) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:205:37: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_type_decl979);
                    block_params61=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params61.getTree());

                    }
                    break;

            }


            char_literal62=(Token)match(input,121,FOLLOW_121_in_block_type_decl982); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal62_tree = 
            (Object)adaptor.create(char_literal62)
            ;
            adaptor.addChild(root_0, char_literal62_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_type_decl"


    public static class block_decl_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_decl_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:208:1: block_decl_predicate : type_dec_internal ( '(^' ID ')' ) ;
    public final ObjcParser.block_decl_predicate_return block_decl_predicate() throws RecognitionException {
        ObjcParser.block_decl_predicate_return retval = new ObjcParser.block_decl_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal64=null;
        Token ID65=null;
        Token char_literal66=null;
        ObjcParser.type_dec_internal_return type_dec_internal63 =null;


        Object string_literal64_tree=null;
        Object ID65_tree=null;
        Object char_literal66_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:5: ( type_dec_internal ( '(^' ID ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:7: type_dec_internal ( '(^' ID ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_block_decl_predicate1004);
            type_dec_internal63=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal63.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:25: ( '(^' ID ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:209:26: '(^' ID ')'
            {
            string_literal64=(Token)match(input,120,FOLLOW_120_in_block_decl_predicate1007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal64_tree = 
            (Object)adaptor.create(string_literal64)
            ;
            adaptor.addChild(root_0, string_literal64_tree);
            }

            ID65=(Token)match(input,ID,FOLLOW_ID_in_block_decl_predicate1009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID65_tree = 
            (Object)adaptor.create(ID65)
            ;
            adaptor.addChild(root_0, ID65_tree);
            }

            char_literal66=(Token)match(input,121,FOLLOW_121_in_block_decl_predicate1011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = 
            (Object)adaptor.create(char_literal66)
            ;
            adaptor.addChild(root_0, char_literal66_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_decl_predicate"


    public static class block_decl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_decl"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:212:1: block_decl : type_dec_internal ( '(^' ID ')' '(' ( block_params )? ')' '=' block_call ) ;
    public final ObjcParser.block_decl_return block_decl() throws RecognitionException {
        ObjcParser.block_decl_return retval = new ObjcParser.block_decl_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal68=null;
        Token ID69=null;
        Token char_literal70=null;
        Token char_literal71=null;
        Token char_literal73=null;
        Token char_literal74=null;
        ObjcParser.type_dec_internal_return type_dec_internal67 =null;

        ObjcParser.block_params_return block_params72 =null;

        ObjcParser.block_call_return block_call75 =null;


        Object string_literal68_tree=null;
        Object ID69_tree=null;
        Object char_literal70_tree=null;
        Object char_literal71_tree=null;
        Object char_literal73_tree=null;
        Object char_literal74_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:5: ( type_dec_internal ( '(^' ID ')' '(' ( block_params )? ')' '=' block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:7: type_dec_internal ( '(^' ID ')' '(' ( block_params )? ')' '=' block_call )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_block_decl1029);
            type_dec_internal67=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal67.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:25: ( '(^' ID ')' '(' ( block_params )? ')' '=' block_call )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:26: '(^' ID ')' '(' ( block_params )? ')' '=' block_call
            {
            string_literal68=(Token)match(input,120,FOLLOW_120_in_block_decl1032); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal68_tree = 
            (Object)adaptor.create(string_literal68)
            ;
            adaptor.addChild(root_0, string_literal68_tree);
            }

            ID69=(Token)match(input,ID,FOLLOW_ID_in_block_decl1034); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ID69_tree = 
            (Object)adaptor.create(ID69)
            ;
            adaptor.addChild(root_0, ID69_tree);
            }

            char_literal70=(Token)match(input,121,FOLLOW_121_in_block_decl1036); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal70_tree = 
            (Object)adaptor.create(char_literal70)
            ;
            adaptor.addChild(root_0, char_literal70_tree);
            }

            char_literal71=(Token)match(input,119,FOLLOW_119_in_block_decl1037); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal71_tree = 
            (Object)adaptor.create(char_literal71)
            ;
            adaptor.addChild(root_0, char_literal71_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:41: ( block_params )?
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ID||LA11_0==119||LA11_0==178||LA11_0==181||LA11_0==186||LA11_0==191||(LA11_0 >= 194 && LA11_0 <= 195)||LA11_0==197||LA11_0==199||(LA11_0 >= 203 && LA11_0 <= 205)) ) {
                alt11=1;
            }
            switch (alt11) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:213:41: block_params
                    {
                    pushFollow(FOLLOW_block_params_in_block_decl1039);
                    block_params72=block_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params72.getTree());

                    }
                    break;

            }


            char_literal73=(Token)match(input,121,FOLLOW_121_in_block_decl1042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal73_tree = 
            (Object)adaptor.create(char_literal73)
            ;
            adaptor.addChild(root_0, char_literal73_tree);
            }

            char_literal74=(Token)match(input,141,FOLLOW_141_in_block_decl1043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal74_tree = 
            (Object)adaptor.create(char_literal74)
            ;
            adaptor.addChild(root_0, char_literal74_tree);
            }

            pushFollow(FOLLOW_block_call_in_block_decl1045);
            block_call75=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call75.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_decl"


    public static class block_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:216:1: block_call_wrapper : block_call -> ^( BLOCK_CALL block_call ) ;
    public final ObjcParser.block_call_wrapper_return block_call_wrapper() throws RecognitionException {
        ObjcParser.block_call_wrapper_return retval = new ObjcParser.block_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_call_return block_call76 =null;


        RewriteRuleSubtreeStream stream_block_call=new RewriteRuleSubtreeStream(adaptor,"rule block_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:3: ( block_call -> ^( BLOCK_CALL block_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:5: block_call
            {
            pushFollow(FOLLOW_block_call_in_block_call_wrapper1065);
            block_call76=block_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_call.add(block_call76.getTree());

            // AST REWRITE
            // elements: block_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 217:16: -> ^( BLOCK_CALL block_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:217:19: ^( BLOCK_CALL block_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_CALL, "BLOCK_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_block_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call_wrapper"


    public static class block_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:220:1: block_call : ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper | ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper );
    public final ObjcParser.block_call_return block_call() throws RecognitionException {
        ObjcParser.block_call_return retval = new ObjcParser.block_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal77=null;
        Token char_literal78=null;
        Token char_literal80=null;
        Token string_literal81=null;
        Token char_literal83=null;
        Token char_literal85=null;
        Token ID86=null;
        Token char_literal87=null;
        Token char_literal89=null;
        ObjcParser.block_internal_return block_internal79 =null;

        ObjcParser.block_params_return block_params82 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper84 =null;

        ObjcParser.block_params_return block_params88 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper90 =null;


        Object char_literal77_tree=null;
        Object char_literal78_tree=null;
        Object char_literal80_tree=null;
        Object string_literal81_tree=null;
        Object char_literal83_tree=null;
        Object char_literal85_tree=null;
        Object ID86_tree=null;
        Object char_literal87_tree=null;
        Object char_literal89_tree=null;
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleSubtreeStream stream_block_internal=new RewriteRuleSubtreeStream(adaptor,"rule block_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:3: ( ( '^' '{' ( block_internal )* '}' ) -> ^( BLOCK_MULTI '{' ( block_internal )* '}' ) | ( '^(' ( block_params )? ')' ) block_multiline_wrapper | ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper )
            int alt15=3;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==176) ) {
                int LA15_1 = input.LA(2);

                if ( (LA15_1==207) ) {
                    alt15=1;
                }
                else if ( (LA15_1==ID) ) {
                    alt15=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 15, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA15_0==177) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;

            }
            switch (alt15) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:5: ( '^' '{' ( block_internal )* '}' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:5: ( '^' '{' ( block_internal )* '}' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:6: '^' '{' ( block_internal )* '}'
                    {
                    char_literal77=(Token)match(input,176,FOLLOW_176_in_block_call1087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(char_literal77);


                    char_literal78=(Token)match(input,207,FOLLOW_207_in_block_call1089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_207.add(char_literal78);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:14: ( block_internal )*
                    loop12:
                    do {
                        int alt12=2;
                        int LA12_0 = input.LA(1);

                        if ( (LA12_0==ID||LA12_0==MULTI_COMMENT_LIT||LA12_0==SINGLE_COMMENT_LIT||LA12_0==117||LA12_0==119||LA12_0==122||LA12_0==136||LA12_0==164||(LA12_0 >= 166 && LA12_0 <= 167)||LA12_0==173||(LA12_0 >= 178 && LA12_0 <= 179)||(LA12_0 >= 181 && LA12_0 <= 182)||(LA12_0 >= 184 && LA12_0 <= 186)||(LA12_0 >= 189 && LA12_0 <= 192)||(LA12_0 >= 194 && LA12_0 <= 200)||(LA12_0 >= 203 && LA12_0 <= 207)) ) {
                            alt12=1;
                        }


                        switch (alt12) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:14: block_internal
                    	    {
                    	    pushFollow(FOLLOW_block_internal_in_block_call1091);
                    	    block_internal79=block_internal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_block_internal.add(block_internal79.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop12;
                        }
                    } while (true);


                    char_literal80=(Token)match(input,211,FOLLOW_211_in_block_call1094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_211.add(char_literal80);


                    }


                    // AST REWRITE
                    // elements: 211, block_internal, 207
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 221:35: -> ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:38: ^( BLOCK_MULTI '{' ( block_internal )* '}' )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_207.nextNode()
                        );

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:221:56: ( block_internal )*
                        while ( stream_block_internal.hasNext() ) {
                            adaptor.addChild(root_1, stream_block_internal.nextTree());

                        }
                        stream_block_internal.reset();

                        adaptor.addChild(root_1, 
                        stream_211.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:5: ( '^(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:5: ( '^(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:6: '^(' ( block_params )? ')'
                    {
                    string_literal81=(Token)match(input,177,FOLLOW_177_in_block_call1115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal81_tree = 
                    (Object)adaptor.create(string_literal81)
                    ;
                    adaptor.addChild(root_0, string_literal81_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:11: ( block_params )?
                    int alt13=2;
                    int LA13_0 = input.LA(1);

                    if ( (LA13_0==ID||LA13_0==119||LA13_0==178||LA13_0==181||LA13_0==186||LA13_0==191||(LA13_0 >= 194 && LA13_0 <= 195)||LA13_0==197||LA13_0==199||(LA13_0 >= 203 && LA13_0 <= 205)) ) {
                        alt13=1;
                    }
                    switch (alt13) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:222:11: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call1117);
                            block_params82=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params82.getTree());

                            }
                            break;

                    }


                    char_literal83=(Token)match(input,121,FOLLOW_121_in_block_call1120); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal83_tree = 
                    (Object)adaptor.create(char_literal83)
                    ;
                    adaptor.addChild(root_0, char_literal83_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call1123);
                    block_multiline_wrapper84=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper84.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:5: ( '^' ID '(' ( block_params )? ')' ) block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:5: ( '^' ID '(' ( block_params )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:6: '^' ID '(' ( block_params )? ')'
                    {
                    char_literal85=(Token)match(input,176,FOLLOW_176_in_block_call1131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal85_tree = 
                    (Object)adaptor.create(char_literal85)
                    ;
                    adaptor.addChild(root_0, char_literal85_tree);
                    }

                    ID86=(Token)match(input,ID,FOLLOW_ID_in_block_call1133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID86_tree = 
                    (Object)adaptor.create(ID86)
                    ;
                    adaptor.addChild(root_0, ID86_tree);
                    }

                    char_literal87=(Token)match(input,119,FOLLOW_119_in_block_call1135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal87_tree = 
                    (Object)adaptor.create(char_literal87)
                    ;
                    adaptor.addChild(root_0, char_literal87_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:17: ( block_params )?
                    int alt14=2;
                    int LA14_0 = input.LA(1);

                    if ( (LA14_0==ID||LA14_0==119||LA14_0==178||LA14_0==181||LA14_0==186||LA14_0==191||(LA14_0 >= 194 && LA14_0 <= 195)||LA14_0==197||LA14_0==199||(LA14_0 >= 203 && LA14_0 <= 205)) ) {
                        alt14=1;
                    }
                    switch (alt14) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:223:17: block_params
                            {
                            pushFollow(FOLLOW_block_params_in_block_call1137);
                            block_params88=block_params();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_params88.getTree());

                            }
                            break;

                    }


                    char_literal89=(Token)match(input,121,FOLLOW_121_in_block_call1140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal89_tree = 
                    (Object)adaptor.create(char_literal89)
                    ;
                    adaptor.addChild(root_0, char_literal89_tree);
                    }

                    }


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_call1143);
                    block_multiline_wrapper90=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper90.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_call"


    public static class synchronized_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:226:1: synchronized_call_wrapper : synchronized_call -> ^( SYNCHRONIZED synchronized_call ) ;
    public final ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper() throws RecognitionException {
        ObjcParser.synchronized_call_wrapper_return retval = new ObjcParser.synchronized_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.synchronized_call_return synchronized_call91 =null;


        RewriteRuleSubtreeStream stream_synchronized_call=new RewriteRuleSubtreeStream(adaptor,"rule synchronized_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:3: ( synchronized_call -> ^( SYNCHRONIZED synchronized_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:5: synchronized_call
            {
            pushFollow(FOLLOW_synchronized_call_in_synchronized_call_wrapper1157);
            synchronized_call91=synchronized_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_synchronized_call.add(synchronized_call91.getTree());

            // AST REWRITE
            // elements: synchronized_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 227:23: -> ^( SYNCHRONIZED synchronized_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:227:26: ^( SYNCHRONIZED synchronized_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SYNCHRONIZED, "SYNCHRONIZED")
                , root_1);

                adaptor.addChild(root_1, stream_synchronized_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call_wrapper"


    public static class synchronized_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "synchronized_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:230:1: synchronized_call : '@synchronized' '(' element_value ')' block_multiline_wrapper ;
    public final ObjcParser.synchronized_call_return synchronized_call() throws RecognitionException {
        ObjcParser.synchronized_call_return retval = new ObjcParser.synchronized_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal92=null;
        Token char_literal93=null;
        Token char_literal95=null;
        ObjcParser.element_value_return element_value94 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper96 =null;


        Object string_literal92_tree=null;
        Object char_literal93_tree=null;
        Object char_literal95_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:3: ( '@synchronized' '(' element_value ')' block_multiline_wrapper )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:231:5: '@synchronized' '(' element_value ')' block_multiline_wrapper
            {
            root_0 = (Object)adaptor.nil();


            string_literal92=(Token)match(input,164,FOLLOW_164_in_synchronized_call1180); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal92_tree = 
            (Object)adaptor.create(string_literal92)
            ;
            adaptor.addChild(root_0, string_literal92_tree);
            }

            char_literal93=(Token)match(input,119,FOLLOW_119_in_synchronized_call1182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal93_tree = 
            (Object)adaptor.create(char_literal93)
            ;
            adaptor.addChild(root_0, char_literal93_tree);
            }

            pushFollow(FOLLOW_element_value_in_synchronized_call1184);
            element_value94=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value94.getTree());

            char_literal95=(Token)match(input,121,FOLLOW_121_in_synchronized_call1186); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal95_tree = 
            (Object)adaptor.create(char_literal95)
            ;
            adaptor.addChild(root_0, char_literal95_tree);
            }

            pushFollow(FOLLOW_block_multiline_wrapper_in_synchronized_call1188);
            block_multiline_wrapper96=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper96.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "synchronized_call"


    public static class block_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:234:1: block_params : ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) ;
    public final ObjcParser.block_params_return block_params() throws RecognitionException {
        ObjcParser.block_params_return retval = new ObjcParser.block_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal98=null;
        ObjcParser.classical_param_return classical_param97 =null;

        ObjcParser.classical_param_return classical_param99 =null;


        Object char_literal98_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:3: ( ( classical_param ( ',' classical_param )* ) -> ^( PARAMS ( classical_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: ( classical_param ( ',' classical_param )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:5: ( classical_param ( ',' classical_param )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:6: classical_param ( ',' classical_param )*
            {
            pushFollow(FOLLOW_classical_param_in_block_params1204);
            classical_param97=classical_param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_param.add(classical_param97.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:22: ( ',' classical_param )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==127) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:23: ',' classical_param
            	    {
            	    char_literal98=(Token)match(input,127,FOLLOW_127_in_block_params1207); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal98);


            	    pushFollow(FOLLOW_classical_param_in_block_params1209);
            	    classical_param99=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param99.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 235:46: -> ^( PARAMS ( classical_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:235:49: ^( PARAMS ( classical_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_classical_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_params"


    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:239:1: block : ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) );
    public final ObjcParser.block_return block() throws RecognitionException {
        ObjcParser.block_return retval = new ObjcParser.block_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline100 =null;

        ObjcParser.block_singleline_return block_singleline101 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:2: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) | block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==207) ) {
                alt17=1;
            }
            else if ( (LA17_0==ID||LA17_0==MULTI_COMMENT_LIT||LA17_0==SINGLE_COMMENT_LIT||LA17_0==117||LA17_0==119||LA17_0==122||LA17_0==136||LA17_0==164||LA17_0==173||LA17_0==179||LA17_0==182||(LA17_0 >= 184 && LA17_0 <= 185)||(LA17_0 >= 189 && LA17_0 <= 190)||LA17_0==192||LA17_0==196||LA17_0==200||LA17_0==206) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;

            }
            switch (alt17) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:4: block_multiline
                    {
                    pushFollow(FOLLOW_block_multiline_in_block1238);
                    block_multiline100=block_multiline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline100.getTree());

                    // AST REWRITE
                    // elements: block_multiline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 240:20: -> ^( BLOCK_MULTI block_multiline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:240:22: ^( BLOCK_MULTI block_multiline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_multiline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:4: block_singleline
                    {
                    pushFollow(FOLLOW_block_singleline_in_block1250);
                    block_singleline101=block_singleline();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline101.getTree());

                    // AST REWRITE
                    // elements: block_singleline
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 241:21: -> ^( BLOCK_SINGLE block_singleline )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:241:23: ^( BLOCK_SINGLE block_singleline )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                        , root_1);

                        adaptor.addChild(root_1, stream_block_singleline.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block"


    public static class block_multiline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:244:1: block_multiline : '{' ( block_internal_macro )* '}' ;
    public final ObjcParser.block_multiline_return block_multiline() throws RecognitionException {
        ObjcParser.block_multiline_return retval = new ObjcParser.block_multiline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal102=null;
        Token char_literal104=null;
        ObjcParser.block_internal_macro_return block_internal_macro103 =null;


        Object char_literal102_tree=null;
        Object char_literal104_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:245:2: ( '{' ( block_internal_macro )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:246:3: '{' ( block_internal_macro )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal102=(Token)match(input,207,FOLLOW_207_in_block_multiline1272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal102_tree = 
            (Object)adaptor.create(char_literal102)
            ;
            adaptor.addChild(root_0, char_literal102_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: ( block_internal_macro )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==ID||LA18_0==MULTI_COMMENT_LIT||LA18_0==SINGLE_COMMENT_LIT||LA18_0==117||LA18_0==119||LA18_0==122||LA18_0==136||LA18_0==164||(LA18_0 >= 166 && LA18_0 <= 167)||(LA18_0 >= 173 && LA18_0 <= 174)||(LA18_0 >= 178 && LA18_0 <= 179)||(LA18_0 >= 181 && LA18_0 <= 182)||(LA18_0 >= 184 && LA18_0 <= 186)||(LA18_0 >= 189 && LA18_0 <= 192)||(LA18_0 >= 194 && LA18_0 <= 200)||(LA18_0 >= 203 && LA18_0 <= 207)) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:247:4: block_internal_macro
            	    {
            	    pushFollow(FOLLOW_block_internal_macro_in_block_multiline1277);
            	    block_internal_macro103=block_internal_macro();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal_macro103.getTree());

            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);


            char_literal104=(Token)match(input,211,FOLLOW_211_in_block_multiline1284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal104_tree = 
            (Object)adaptor.create(char_literal104)
            ;
            adaptor.addChild(root_0, char_literal104_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline"


    public static class block_multiline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_multiline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:251:1: block_multiline_wrapper : block_multiline -> ^( BLOCK_MULTI block_multiline ) ;
    public final ObjcParser.block_multiline_wrapper_return block_multiline_wrapper() throws RecognitionException {
        ObjcParser.block_multiline_wrapper_return retval = new ObjcParser.block_multiline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_multiline_return block_multiline105 =null;


        RewriteRuleSubtreeStream stream_block_multiline=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:3: ( block_multiline -> ^( BLOCK_MULTI block_multiline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:5: block_multiline
            {
            pushFollow(FOLLOW_block_multiline_in_block_multiline_wrapper1296);
            block_multiline105=block_multiline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline.add(block_multiline105.getTree());

            // AST REWRITE
            // elements: block_multiline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 252:21: -> ^( BLOCK_MULTI block_multiline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:252:24: ^( BLOCK_MULTI block_multiline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_MULTI, "BLOCK_MULTI")
                , root_1);

                adaptor.addChild(root_1, stream_block_multiline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_multiline_wrapper"


    public static class block_singleline_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:255:1: block_singleline_wrapper : block_singleline -> ^( BLOCK_SINGLE block_singleline ) ;
    public final ObjcParser.block_singleline_wrapper_return block_singleline_wrapper() throws RecognitionException {
        ObjcParser.block_singleline_wrapper_return retval = new ObjcParser.block_singleline_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.block_singleline_return block_singleline106 =null;


        RewriteRuleSubtreeStream stream_block_singleline=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:3: ( block_singleline -> ^( BLOCK_SINGLE block_singleline ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:5: block_singleline
            {
            pushFollow(FOLLOW_block_singleline_in_block_singleline_wrapper1317);
            block_singleline106=block_singleline();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_singleline.add(block_singleline106.getTree());

            // AST REWRITE
            // elements: block_singleline
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:22: -> ^( BLOCK_SINGLE block_singleline )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:256:25: ^( BLOCK_SINGLE block_singleline )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BLOCK_SINGLE, "BLOCK_SINGLE")
                , root_1);

                adaptor.addChild(root_1, stream_block_singleline.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline_wrapper"


    public static class block_singleline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_singleline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:259:1: block_singleline : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );
    public final ObjcParser.block_singleline_return block_singleline() throws RecognitionException {
        ObjcParser.block_singleline_return retval = new ObjcParser.block_singleline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal116=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper107 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper108 =null;

        ObjcParser.do_stmt_return do_stmt109 =null;

        ObjcParser.if_stmt_return if_stmt110 =null;

        ObjcParser.else_stmt_return else_stmt111 =null;

        ObjcParser.switch_stmt_return switch_stmt112 =null;

        ObjcParser.return_stmt_return return_stmt113 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper114 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper115 =null;

        ObjcParser.break_stmt_return break_stmt117 =null;

        ObjcParser.continue_stmt_return continue_stmt118 =null;

        ObjcParser.goto_stmt_return goto_stmt119 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper120 =null;

        ObjcParser.method_msg_return method_msg121 =null;

        ObjcParser.access_wrapper_return access_wrapper122 =null;

        ObjcParser.name_return name123 =null;

        ObjcParser.op_assign_return op_assign124 =null;

        ObjcParser.element_value_return element_value125 =null;

        ObjcParser.comments_return comments126 =null;


        Object char_literal116_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:2: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | synchronized_call_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | variable_assignment_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments )
            int alt21=16;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA21_1 = input.LA(2);

                if ( ((LA21_1 >= 131 && LA21_1 <= 132)) ) {
                    int LA21_20 = input.LA(3);

                    if ( (LA21_20==ID) ) {
                        int LA21_24 = input.LA(4);

                        if ( (LA21_24==119) && (synpred3_Objc())) {
                            alt21=1;
                        }
                        else if ( ((LA21_24 >= 131 && LA21_24 <= 132)) ) {
                            int LA21_26 = input.LA(5);

                            if ( (synpred3_Objc()) ) {
                                alt21=1;
                            }
                            else if ( (true) ) {
                                alt21=14;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 21, 26, input);

                                throw nvae;

                            }
                        }
                        else if ( (LA21_24==118||LA21_24==123||LA21_24==126||LA21_24==130||LA21_24==134||LA21_24==139||LA21_24==141||LA21_24==146||LA21_24==209) ) {
                            alt21=14;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 21, 24, input);

                            throw nvae;

                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 21, 20, input);

                        throw nvae;

                    }
                }
                else if ( (LA21_1==119) && (synpred3_Objc())) {
                    alt21=1;
                }
                else if ( (LA21_1==118||LA21_1==123||LA21_1==126||LA21_1==130||LA21_1==134||LA21_1==139||LA21_1==141||LA21_1==146||LA21_1==173||LA21_1==209) ) {
                    alt21=14;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 21, 1, input);

                    throw nvae;

                }
                }
                break;
            case 164:
                {
                alt21=2;
                }
                break;
            case 184:
                {
                alt21=3;
                }
                break;
            case 192:
                {
                alt21=4;
                }
                break;
            case 185:
                {
                alt21=5;
                }
                break;
            case 200:
                {
                alt21=6;
                }
                break;
            case 196:
                {
                alt21=7;
                }
                break;
            case 189:
                {
                alt21=8;
                }
                break;
            case 206:
                {
                alt21=9;
                }
                break;
            case 136:
                {
                alt21=10;
                }
                break;
            case 179:
                {
                alt21=11;
                }
                break;
            case 182:
                {
                alt21=12;
                }
                break;
            case 190:
                {
                alt21=13;
                }
                break;
            case 117:
            case 119:
            case 122:
                {
                alt21=14;
                }
                break;
            case 173:
                {
                alt21=15;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt21=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;

            }

            switch (alt21) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_singleline1344);
                    classical_method_call_wrapper107=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper107.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:261:4: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_singleline1349);
                    synchronized_call_wrapper108=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper108.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:262:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_singleline1354);
                    do_stmt109=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt109.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:263:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_singleline1359);
                    if_stmt110=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt110.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:264:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_singleline1364);
                    else_stmt111=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt111.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:265:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_singleline1369);
                    switch_stmt112=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt112.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:266:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_singleline1374);
                    return_stmt113=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt113.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:267:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_singleline1379);
                    for_stmt_wrapper114=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper114.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:268:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_singleline1384);
                    while_stmt_wrapper115=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper115.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:269:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal116=(Token)match(input,136,FOLLOW_136_in_block_singleline1389); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal116_tree = 
                    (Object)adaptor.create(char_literal116)
                    ;
                    adaptor.addChild(root_0, char_literal116_tree);
                    }

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:270:5: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_singleline1395);
                    break_stmt117=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt117.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:271:5: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_singleline1401);
                    continue_stmt118=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt118.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:272:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_singleline1406);
                    goto_stmt119=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt119.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:273:5: variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_singleline1412);
                    variable_assignment_wrapper120=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper120.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:4: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_singleline1417);
                    method_msg121=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg121.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:15: ( ( access_wrapper name )* op_assign element_value )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==118||LA20_0==123||LA20_0==126||(LA20_0 >= 130 && LA20_0 <= 132)||LA20_0==134||LA20_0==139||LA20_0==141||LA20_0==146||LA20_0==209) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:16: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:16: ( access_wrapper name )*
                            loop19:
                            do {
                                int alt19=2;
                                int LA19_0 = input.LA(1);

                                if ( ((LA19_0 >= 131 && LA19_0 <= 132)) ) {
                                    alt19=1;
                                }


                                switch (alt19) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:274:17: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_singleline1421);
                            	    access_wrapper122=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper122.getTree());

                            	    pushFollow(FOLLOW_name_in_block_singleline1423);
                            	    name123=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name123.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop19;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_singleline1427);
                            op_assign124=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign124.getTree());

                            pushFollow(FOLLOW_element_value_in_block_singleline1429);
                            element_value125=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value125.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:275:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_singleline1437);
                    comments126=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments126.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_singleline"


    public static class block_internal_macro_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal_macro"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:278:1: block_internal_macro : ( '\\\\' | block_internal );
    public final ObjcParser.block_internal_macro_return block_internal_macro() throws RecognitionException {
        ObjcParser.block_internal_macro_return retval = new ObjcParser.block_internal_macro_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal127=null;
        ObjcParser.block_internal_return block_internal128 =null;


        Object char_literal127_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:3: ( '\\\\' | block_internal )
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==174) ) {
                alt22=1;
            }
            else if ( (LA22_0==ID||LA22_0==MULTI_COMMENT_LIT||LA22_0==SINGLE_COMMENT_LIT||LA22_0==117||LA22_0==119||LA22_0==122||LA22_0==136||LA22_0==164||(LA22_0 >= 166 && LA22_0 <= 167)||LA22_0==173||(LA22_0 >= 178 && LA22_0 <= 179)||(LA22_0 >= 181 && LA22_0 <= 182)||(LA22_0 >= 184 && LA22_0 <= 186)||(LA22_0 >= 189 && LA22_0 <= 192)||(LA22_0 >= 194 && LA22_0 <= 200)||(LA22_0 >= 203 && LA22_0 <= 207)) ) {
                alt22=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;

            }
            switch (alt22) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:279:5: '\\\\'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal127=(Token)match(input,174,FOLLOW_174_in_block_internal_macro1449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal127_tree = 
                    (Object)adaptor.create(char_literal127)
                    ;
                    adaptor.addChild(root_0, char_literal127_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:280:5: block_internal
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_internal_in_block_internal_macro1455);
                    block_internal128=block_internal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_internal128.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal_macro"


    public static class block_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "block_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:283:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );
    public final ObjcParser.block_internal_return block_internal() throws RecognitionException {
        ObjcParser.block_internal_return retval = new ObjcParser.block_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal145=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper129 =null;

        ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper130 =null;

        ObjcParser.increment_decrement_return increment_decrement131 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper132 =null;

        ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper133 =null;

        ObjcParser.synchronized_call_wrapper_return synchronized_call_wrapper134 =null;

        ObjcParser.try_stmt_wrapper_return try_stmt_wrapper135 =null;

        ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper136 =null;

        ObjcParser.static_declaration_wrapper_return static_declaration_wrapper137 =null;

        ObjcParser.do_stmt_return do_stmt138 =null;

        ObjcParser.if_stmt_return if_stmt139 =null;

        ObjcParser.else_stmt_return else_stmt140 =null;

        ObjcParser.switch_stmt_return switch_stmt141 =null;

        ObjcParser.return_stmt_return return_stmt142 =null;

        ObjcParser.for_stmt_wrapper_return for_stmt_wrapper143 =null;

        ObjcParser.while_stmt_wrapper_return while_stmt_wrapper144 =null;

        ObjcParser.break_stmt_return break_stmt146 =null;

        ObjcParser.continue_stmt_return continue_stmt147 =null;

        ObjcParser.goto_stmt_return goto_stmt148 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper149 =null;

        ObjcParser.method_msg_return method_msg150 =null;

        ObjcParser.access_wrapper_return access_wrapper151 =null;

        ObjcParser.name_return name152 =null;

        ObjcParser.op_assign_return op_assign153 =null;

        ObjcParser.element_value_return element_value154 =null;

        ObjcParser.comments_return comments155 =null;


        Object char_literal145_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:3: ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments )
            int alt25=22;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:5: ( clasical_method_call_predicate )=> classical_method_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_method_call_wrapper_in_block_internal1475);
                    classical_method_call_wrapper129=classical_method_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_call_wrapper129.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_simple_wrapper_in_block_internal1488);
                    object_access_simple_wrapper130=object_access_simple_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_simple_wrapper130.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_block_internal1490);
                    increment_decrement131=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement131.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: ( object_access op_assign )=> variable_assignment_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_block_internal1504);
                    variable_assignment_wrapper132=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper132.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:287:5: variable_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_declaration_wrapper_in_block_internal1510);
                    variable_declaration_wrapper133=variable_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_declaration_wrapper133.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:288:5: synchronized_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_synchronized_call_wrapper_in_block_internal1516);
                    synchronized_call_wrapper134=synchronized_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synchronized_call_wrapper134.getTree());

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:289:5: try_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_try_stmt_wrapper_in_block_internal1522);
                    try_stmt_wrapper135=try_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt_wrapper135.getTree());

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:290:4: throw_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_throw_stmt_wrapper_in_block_internal1527);
                    throw_stmt_wrapper136=throw_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, throw_stmt_wrapper136.getTree());

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:291:4: static_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_static_declaration_wrapper_in_block_internal1532);
                    static_declaration_wrapper137=static_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, static_declaration_wrapper137.getTree());

                    }
                    break;
                case 9 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:292:4: do_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_do_stmt_in_block_internal1537);
                    do_stmt138=do_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, do_stmt138.getTree());

                    }
                    break;
                case 10 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:293:4: if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_if_stmt_in_block_internal1542);
                    if_stmt139=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt139.getTree());

                    }
                    break;
                case 11 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:294:4: else_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_else_stmt_in_block_internal1547);
                    else_stmt140=else_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_stmt140.getTree());

                    }
                    break;
                case 12 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:295:4: switch_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_switch_stmt_in_block_internal1552);
                    switch_stmt141=switch_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, switch_stmt141.getTree());

                    }
                    break;
                case 13 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:296:4: return_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_return_stmt_in_block_internal1557);
                    return_stmt142=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt142.getTree());

                    }
                    break;
                case 14 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:297:4: for_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_for_stmt_wrapper_in_block_internal1562);
                    for_stmt_wrapper143=for_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_wrapper143.getTree());

                    }
                    break;
                case 15 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:298:4: while_stmt_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_while_stmt_wrapper_in_block_internal1567);
                    while_stmt_wrapper144=while_stmt_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt_wrapper144.getTree());

                    }
                    break;
                case 16 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:299:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal145=(Token)match(input,136,FOLLOW_136_in_block_internal1572); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal145_tree = 
                    (Object)adaptor.create(char_literal145)
                    ;
                    adaptor.addChild(root_0, char_literal145_tree);
                    }

                    }
                    break;
                case 17 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:300:4: break_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_break_stmt_in_block_internal1577);
                    break_stmt146=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt146.getTree());

                    }
                    break;
                case 18 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:301:4: continue_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_continue_stmt_in_block_internal1582);
                    continue_stmt147=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt147.getTree());

                    }
                    break;
                case 19 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:302:4: goto_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_goto_stmt_in_block_internal1587);
                    goto_stmt148=goto_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, goto_stmt148.getTree());

                    }
                    break;
                case 20 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:303:4: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_block_internal1592);
                    block_multiline_wrapper149=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper149.getTree());

                    }
                    break;
                case 21 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:5: method_msg ( ( access_wrapper name )* op_assign element_value )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_block_internal1598);
                    method_msg150=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg150.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:16: ( ( access_wrapper name )* op_assign element_value )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==118||LA24_0==123||LA24_0==126||(LA24_0 >= 130 && LA24_0 <= 132)||LA24_0==134||LA24_0==139||LA24_0==141||LA24_0==146||LA24_0==209) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:17: ( access_wrapper name )* op_assign element_value
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:17: ( access_wrapper name )*
                            loop23:
                            do {
                                int alt23=2;
                                int LA23_0 = input.LA(1);

                                if ( ((LA23_0 >= 131 && LA23_0 <= 132)) ) {
                                    alt23=1;
                                }


                                switch (alt23) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:304:18: access_wrapper name
                            	    {
                            	    pushFollow(FOLLOW_access_wrapper_in_block_internal1602);
                            	    access_wrapper151=access_wrapper();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper151.getTree());

                            	    pushFollow(FOLLOW_name_in_block_internal1604);
                            	    name152=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name152.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop23;
                                }
                            } while (true);


                            pushFollow(FOLLOW_op_assign_in_block_internal1608);
                            op_assign153=op_assign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign153.getTree());

                            pushFollow(FOLLOW_element_value_in_block_internal1610);
                            element_value154=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value154.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 22 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:305:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_block_internal1618);
                    comments155=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments155.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "block_internal"


    public static class goto_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "goto_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:308:1: goto_stmt : 'goto' ':' ID ';' -> ^( GOTO ID ) ;
    public final ObjcParser.goto_stmt_return goto_stmt() throws RecognitionException {
        ObjcParser.goto_stmt_return retval = new ObjcParser.goto_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal156=null;
        Token char_literal157=null;
        Token ID158=null;
        Token char_literal159=null;

        Object string_literal156_tree=null;
        Object char_literal157_tree=null;
        Object ID158_tree=null;
        Object char_literal159_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:3: ( 'goto' ':' ID ';' -> ^( GOTO ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:5: 'goto' ':' ID ';'
            {
            string_literal156=(Token)match(input,190,FOLLOW_190_in_goto_stmt1630); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_190.add(string_literal156);


            char_literal157=(Token)match(input,135,FOLLOW_135_in_goto_stmt1632); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal157);


            ID158=(Token)match(input,ID,FOLLOW_ID_in_goto_stmt1634); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID158);


            char_literal159=(Token)match(input,136,FOLLOW_136_in_goto_stmt1636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_136.add(char_literal159);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 309:23: -> ^( GOTO ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:309:26: ^( GOTO ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GOTO, "GOTO")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "goto_stmt"


    public static class while_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:312:1: while_stmt_wrapper : while_stmt -> ^( WHILE_STMT while_stmt ) ;
    public final ObjcParser.while_stmt_wrapper_return while_stmt_wrapper() throws RecognitionException {
        ObjcParser.while_stmt_wrapper_return retval = new ObjcParser.while_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.while_stmt_return while_stmt160 =null;


        RewriteRuleSubtreeStream stream_while_stmt=new RewriteRuleSubtreeStream(adaptor,"rule while_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:3: ( while_stmt -> ^( WHILE_STMT while_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:5: while_stmt
            {
            pushFollow(FOLLOW_while_stmt_in_while_stmt_wrapper1659);
            while_stmt160=while_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_while_stmt.add(while_stmt160.getTree());

            // AST REWRITE
            // elements: while_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 313:16: -> ^( WHILE_STMT while_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:313:19: ^( WHILE_STMT while_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(WHILE_STMT, "WHILE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_while_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt_wrapper"


    public static class while_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "while_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:316:1: while_stmt : 'while' '(' element_value ')' block ;
    public final ObjcParser.while_stmt_return while_stmt() throws RecognitionException {
        ObjcParser.while_stmt_return retval = new ObjcParser.while_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal161=null;
        Token char_literal162=null;
        Token char_literal164=null;
        ObjcParser.element_value_return element_value163 =null;

        ObjcParser.block_return block165 =null;


        Object string_literal161_tree=null;
        Object char_literal162_tree=null;
        Object char_literal164_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:3: ( 'while' '(' element_value ')' block )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:317:5: 'while' '(' element_value ')' block
            {
            root_0 = (Object)adaptor.nil();


            string_literal161=(Token)match(input,206,FOLLOW_206_in_while_stmt1682); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal161_tree = 
            (Object)adaptor.create(string_literal161)
            ;
            adaptor.addChild(root_0, string_literal161_tree);
            }

            char_literal162=(Token)match(input,119,FOLLOW_119_in_while_stmt1684); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal162_tree = 
            (Object)adaptor.create(char_literal162)
            ;
            adaptor.addChild(root_0, char_literal162_tree);
            }

            pushFollow(FOLLOW_element_value_in_while_stmt1686);
            element_value163=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value163.getTree());

            char_literal164=(Token)match(input,121,FOLLOW_121_in_while_stmt1688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal164_tree = 
            (Object)adaptor.create(char_literal164)
            ;
            adaptor.addChild(root_0, char_literal164_tree);
            }

            pushFollow(FOLLOW_block_in_while_stmt1690);
            block165=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, block165.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "while_stmt"


    public static class for_in_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_in_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:320:1: for_in_stmt : 'in' element_value -> ^( FOR_IN_STMT element_value ) ;
    public final ObjcParser.for_in_stmt_return for_in_stmt() throws RecognitionException {
        ObjcParser.for_in_stmt_return retval = new ObjcParser.for_in_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal166=null;
        ObjcParser.element_value_return element_value167 =null;


        Object string_literal166_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:3: ( 'in' element_value -> ^( FOR_IN_STMT element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:5: 'in' element_value
            {
            string_literal166=(Token)match(input,193,FOLLOW_193_in_for_in_stmt1705); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_193.add(string_literal166);


            pushFollow(FOLLOW_element_value_in_for_in_stmt1707);
            element_value167=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value167.getTree());

            // AST REWRITE
            // elements: element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 321:24: -> ^( FOR_IN_STMT element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:321:27: ^( FOR_IN_STMT element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_IN_STMT, "FOR_IN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_in_stmt"


    public static class for_classic_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_classic_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:324:1: for_classic_stmt : ';' ( element_value )? ';' ( element_value )? ;
    public final ObjcParser.for_classic_stmt_return for_classic_stmt() throws RecognitionException {
        ObjcParser.for_classic_stmt_return retval = new ObjcParser.for_classic_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal168=null;
        Token char_literal170=null;
        ObjcParser.element_value_return element_value169 =null;

        ObjcParser.element_value_return element_value171 =null;


        Object char_literal168_tree=null;
        Object char_literal170_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:3: ( ';' ( element_value )? ';' ( element_value )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:5: ';' ( element_value )? ';' ( element_value )?
            {
            root_0 = (Object)adaptor.nil();


            char_literal168=(Token)match(input,136,FOLLOW_136_in_for_classic_stmt1730); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal168_tree = 
            (Object)adaptor.create(char_literal168)
            ;
            adaptor.addChild(root_0, char_literal168_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:9: ( element_value )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==CHAR_LITERAL||LA26_0==ID||LA26_0==NUMBER_LITERAL||LA26_0==STRING_LITERAL||LA26_0==112||LA26_0==117||LA26_0==119||LA26_0==122||LA26_0==125||(LA26_0 >= 128 && LA26_0 <= 129)||LA26_0==148||LA26_0==160||LA26_0==163||LA26_0==170||(LA26_0 >= 172 && LA26_0 <= 173)||(LA26_0 >= 176 && LA26_0 <= 177)||LA26_0==188||LA26_0==201||LA26_0==212) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:9: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1732);
                    element_value169=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value169.getTree());

                    }
                    break;

            }


            char_literal170=(Token)match(input,136,FOLLOW_136_in_for_classic_stmt1735); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal170_tree = 
            (Object)adaptor.create(char_literal170)
            ;
            adaptor.addChild(root_0, char_literal170_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:28: ( element_value )?
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==CHAR_LITERAL||LA27_0==ID||LA27_0==NUMBER_LITERAL||LA27_0==STRING_LITERAL||LA27_0==112||LA27_0==117||LA27_0==119||LA27_0==122||LA27_0==125||(LA27_0 >= 128 && LA27_0 <= 129)||LA27_0==148||LA27_0==160||LA27_0==163||LA27_0==170||(LA27_0 >= 172 && LA27_0 <= 173)||(LA27_0 >= 176 && LA27_0 <= 177)||LA27_0==188||LA27_0==201||LA27_0==212) ) {
                alt27=1;
            }
            switch (alt27) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:325:28: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_for_classic_stmt1737);
                    element_value171=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value171.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_classic_stmt"


    public static class for_stmt_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:328:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );
    public final ObjcParser.for_stmt_body_return for_stmt_body() throws RecognitionException {
        ObjcParser.for_stmt_body_return retval = new ObjcParser.for_stmt_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal174=null;
        Token char_literal178=null;
        Token char_literal182=null;
        Token char_literal189=null;
        ObjcParser.name_return name172 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt173 =null;

        ObjcParser.block_return block175 =null;

        ObjcParser.name_return name176 =null;

        ObjcParser.for_in_stmt_return for_in_stmt177 =null;

        ObjcParser.block_return block179 =null;

        ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper180 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt181 =null;

        ObjcParser.block_return block183 =null;

        ObjcParser.field_declaration_simple_return field_declaration_simple184 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper185 =null;

        ObjcParser.element_value_return element_value186 =null;

        ObjcParser.for_classic_stmt_return for_classic_stmt187 =null;

        ObjcParser.for_in_stmt_return for_in_stmt188 =null;

        ObjcParser.block_return block190 =null;


        Object char_literal174_tree=null;
        Object char_literal178_tree=null;
        Object char_literal182_tree=null;
        Object char_literal189_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:3: ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block )
            int alt29=4;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:5: ( name ';' )=> name for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1760);
                    name172=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name172.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1762);
                    for_classic_stmt173=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt173.getTree());

                    char_literal174=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal174_tree = 
                    (Object)adaptor.create(char_literal174)
                    ;
                    adaptor.addChild(root_0, char_literal174_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1766);
                    block175=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block175.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:5: ( name 'in' )=> name for_in_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_for_stmt_body1779);
                    name176=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name176.getTree());

                    pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1781);
                    for_in_stmt177=for_in_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt177.getTree());

                    char_literal178=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal178_tree = 
                    (Object)adaptor.create(char_literal178)
                    ;
                    adaptor.addChild(root_0, char_literal178_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1785);
                    block179=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block179.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:5: ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_variable_assignment_wrapper_in_for_stmt_body1799);
                    variable_assignment_wrapper180=variable_assignment_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, variable_assignment_wrapper180.getTree());

                    pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1801);
                    for_classic_stmt181=for_classic_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt181.getTree());

                    char_literal182=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal182_tree = 
                    (Object)adaptor.create(char_literal182)
                    ;
                    adaptor.addChild(root_0, char_literal182_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1805);
                    block183=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block183.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:5: field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_simple_in_for_stmt_body1811);
                    field_declaration_simple184=field_declaration_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_simple184.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:30: ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt )
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==118||LA28_0==123||LA28_0==126||LA28_0==130||LA28_0==134||LA28_0==139||LA28_0==141||LA28_0==146||LA28_0==209) ) {
                        alt28=1;
                    }
                    else if ( (LA28_0==193) ) {
                        alt28=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 28, 0, input);

                        throw nvae;

                    }
                    switch (alt28) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:31: ( op_assign_wrapper element_value for_classic_stmt )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:31: ( op_assign_wrapper element_value for_classic_stmt )
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:32: op_assign_wrapper element_value for_classic_stmt
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_for_stmt_body1815);
                            op_assign_wrapper185=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper185.getTree());

                            pushFollow(FOLLOW_element_value_in_for_stmt_body1817);
                            element_value186=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value186.getTree());

                            pushFollow(FOLLOW_for_classic_stmt_in_for_stmt_body1819);
                            for_classic_stmt187=for_classic_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_classic_stmt187.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:332:84: for_in_stmt
                            {
                            pushFollow(FOLLOW_for_in_stmt_in_for_stmt_body1824);
                            for_in_stmt188=for_in_stmt();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_in_stmt188.getTree());

                            }
                            break;

                    }


                    char_literal189=(Token)match(input,121,FOLLOW_121_in_for_stmt_body1827); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal189_tree = 
                    (Object)adaptor.create(char_literal189)
                    ;
                    adaptor.addChild(root_0, char_literal189_tree);
                    }

                    pushFollow(FOLLOW_block_in_for_stmt_body1829);
                    block190=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block190.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_body"


    public static class for_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:335:1: for_stmt : 'for' '(' for_stmt_body ;
    public final ObjcParser.for_stmt_return for_stmt() throws RecognitionException {
        ObjcParser.for_stmt_return retval = new ObjcParser.for_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal191=null;
        Token char_literal192=null;
        ObjcParser.for_stmt_body_return for_stmt_body193 =null;


        Object string_literal191_tree=null;
        Object char_literal192_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:3: ( 'for' '(' for_stmt_body )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:336:5: 'for' '(' for_stmt_body
            {
            root_0 = (Object)adaptor.nil();


            string_literal191=(Token)match(input,189,FOLLOW_189_in_for_stmt1842); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal191_tree = 
            (Object)adaptor.create(string_literal191)
            ;
            adaptor.addChild(root_0, string_literal191_tree);
            }

            char_literal192=(Token)match(input,119,FOLLOW_119_in_for_stmt1844); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal192_tree = 
            (Object)adaptor.create(char_literal192)
            ;
            adaptor.addChild(root_0, char_literal192_tree);
            }

            pushFollow(FOLLOW_for_stmt_body_in_for_stmt1846);
            for_stmt_body193=for_stmt_body();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt_body193.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt"


    public static class for_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "for_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:339:1: for_stmt_wrapper : for_stmt -> ^( FOR_STMT for_stmt ) ;
    public final ObjcParser.for_stmt_wrapper_return for_stmt_wrapper() throws RecognitionException {
        ObjcParser.for_stmt_wrapper_return retval = new ObjcParser.for_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.for_stmt_return for_stmt194 =null;


        RewriteRuleSubtreeStream stream_for_stmt=new RewriteRuleSubtreeStream(adaptor,"rule for_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:3: ( for_stmt -> ^( FOR_STMT for_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:5: for_stmt
            {
            pushFollow(FOLLOW_for_stmt_in_for_stmt_wrapper1859);
            for_stmt194=for_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_for_stmt.add(for_stmt194.getTree());

            // AST REWRITE
            // elements: for_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 340:14: -> ^( FOR_STMT for_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:340:17: ^( FOR_STMT for_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FOR_STMT, "FOR_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_for_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "for_stmt_wrapper"


    public static class return_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "return_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:343:1: return_stmt : 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) ;
    public final ObjcParser.return_stmt_return return_stmt() throws RecognitionException {
        ObjcParser.return_stmt_return retval = new ObjcParser.return_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal195=null;
        ObjcParser.element_value_or_semicolon_return element_value_or_semicolon196 =null;


        Object string_literal195_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleSubtreeStream stream_element_value_or_semicolon=new RewriteRuleSubtreeStream(adaptor,"rule element_value_or_semicolon");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:3: ( 'return' element_value_or_semicolon -> ^( RETURN_STMT element_value_or_semicolon ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:5: 'return' element_value_or_semicolon
            {
            string_literal195=(Token)match(input,196,FOLLOW_196_in_return_stmt1882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_196.add(string_literal195);


            pushFollow(FOLLOW_element_value_or_semicolon_in_return_stmt1884);
            element_value_or_semicolon196=element_value_or_semicolon();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value_or_semicolon.add(element_value_or_semicolon196.getTree());

            // AST REWRITE
            // elements: element_value_or_semicolon
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 344:41: -> ^( RETURN_STMT element_value_or_semicolon )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:344:44: ^( RETURN_STMT element_value_or_semicolon )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(RETURN_STMT, "RETURN_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value_or_semicolon.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "return_stmt"


    public static class switch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:347:1: switch_stmt : 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) ;
    public final ObjcParser.switch_stmt_return switch_stmt() throws RecognitionException {
        ObjcParser.switch_stmt_return retval = new ObjcParser.switch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal197=null;
        Token char_literal198=null;
        Token char_literal200=null;
        Token char_literal201=null;
        Token char_literal203=null;
        ObjcParser.element_value_return element_value199 =null;

        ObjcParser.switch_body_return switch_body202 =null;


        Object string_literal197_tree=null;
        Object char_literal198_tree=null;
        Object char_literal200_tree=null;
        Object char_literal201_tree=null;
        Object char_literal203_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_switch_body=new RewriteRuleSubtreeStream(adaptor,"rule switch_body");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:3: ( 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}' -> ^( SWITCH_STMT element_value ( switch_body )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:5: 'switch' '(' element_value ')' '{' ( ( switch_body )* ) '}'
            {
            string_literal197=(Token)match(input,200,FOLLOW_200_in_switch_stmt1907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_200.add(string_literal197);


            char_literal198=(Token)match(input,119,FOLLOW_119_in_switch_stmt1909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal198);


            pushFollow(FOLLOW_element_value_in_switch_stmt1911);
            element_value199=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value199.getTree());

            char_literal200=(Token)match(input,121,FOLLOW_121_in_switch_stmt1913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal200);


            char_literal201=(Token)match(input,207,FOLLOW_207_in_switch_stmt1915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_207.add(char_literal201);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:40: ( ( switch_body )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:41: ( switch_body )*
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:41: ( switch_body )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==ID||LA30_0==MULTI_COMMENT_LIT||LA30_0==SINGLE_COMMENT_LIT||LA30_0==117||LA30_0==119||LA30_0==122||LA30_0==136||LA30_0==164||LA30_0==173||(LA30_0 >= 179 && LA30_0 <= 180)||(LA30_0 >= 182 && LA30_0 <= 185)||(LA30_0 >= 189 && LA30_0 <= 190)||LA30_0==192||LA30_0==196||LA30_0==200||(LA30_0 >= 206 && LA30_0 <= 207)) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:41: switch_body
            	    {
            	    pushFollow(FOLLOW_switch_body_in_switch_stmt1918);
            	    switch_body202=switch_body();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_switch_body.add(switch_body202.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }


            char_literal203=(Token)match(input,211,FOLLOW_211_in_switch_stmt1922); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_211.add(char_literal203);


            // AST REWRITE
            // elements: switch_body, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 348:59: -> ^( SWITCH_STMT element_value ( switch_body )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:62: ^( SWITCH_STMT element_value ( switch_body )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SWITCH_STMT, "SWITCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:348:90: ( switch_body )*
                while ( stream_switch_body.hasNext() ) {
                    adaptor.addChild(root_1, stream_switch_body.nextTree());

                }
                stream_switch_body.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_stmt"


    public static class switch_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "switch_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:351:1: switch_body : ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper );
    public final ObjcParser.switch_body_return switch_body() throws RecognitionException {
        ObjcParser.switch_body_return retval = new ObjcParser.switch_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.case_stmt_return case_stmt204 =null;

        ObjcParser.default_stmt_return default_stmt205 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper206 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper207 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:3: ( case_stmt | default_stmt | block_multiline_wrapper | block_singleline_wrapper )
            int alt31=4;
            switch ( input.LA(1) ) {
            case 180:
                {
                alt31=1;
                }
                break;
            case 183:
                {
                alt31=2;
                }
                break;
            case 207:
                {
                alt31=3;
                }
                break;
            case ID:
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
            case 117:
            case 119:
            case 122:
            case 136:
            case 164:
            case 173:
            case 179:
            case 182:
            case 184:
            case 185:
            case 189:
            case 190:
            case 192:
            case 196:
            case 200:
            case 206:
                {
                alt31=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;

            }

            switch (alt31) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:352:5: case_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_case_stmt_in_switch_body1948);
                    case_stmt204=case_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, case_stmt204.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:353:5: default_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_default_stmt_in_switch_body1954);
                    default_stmt205=default_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, default_stmt205.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:354:5: block_multiline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_multiline_wrapper_in_switch_body1960);
                    block_multiline_wrapper206=block_multiline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper206.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:355:5: block_singleline_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_singleline_wrapper_in_switch_body1966);
                    block_singleline_wrapper207=block_singleline_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_singleline_wrapper207.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "switch_body"


    public static class case_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "case_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:358:1: case_stmt : 'case' name_number ':' -> ^( CASE_STMT name_number ) ;
    public final ObjcParser.case_stmt_return case_stmt() throws RecognitionException {
        ObjcParser.case_stmt_return retval = new ObjcParser.case_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal208=null;
        Token char_literal210=null;
        ObjcParser.name_number_return name_number209 =null;


        Object string_literal208_tree=null;
        Object char_literal210_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleSubtreeStream stream_name_number=new RewriteRuleSubtreeStream(adaptor,"rule name_number");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:3: ( 'case' name_number ':' -> ^( CASE_STMT name_number ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:5: 'case' name_number ':'
            {
            string_literal208=(Token)match(input,180,FOLLOW_180_in_case_stmt1981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_180.add(string_literal208);


            pushFollow(FOLLOW_name_number_in_case_stmt1983);
            name_number209=name_number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name_number.add(name_number209.getTree());

            char_literal210=(Token)match(input,135,FOLLOW_135_in_case_stmt1985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal210);


            // AST REWRITE
            // elements: name_number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 359:28: -> ^( CASE_STMT name_number )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:359:31: ^( CASE_STMT name_number )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CASE_STMT, "CASE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name_number.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "case_stmt"


    public static class default_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "default_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:362:1: default_stmt : 'default' ':' -> ^( DEFAULT_STMT ) ;
    public final ObjcParser.default_stmt_return default_stmt() throws RecognitionException {
        ObjcParser.default_stmt_return retval = new ObjcParser.default_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal211=null;
        Token char_literal212=null;

        Object string_literal211_tree=null;
        Object char_literal212_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:3: ( 'default' ':' -> ^( DEFAULT_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:5: 'default' ':'
            {
            string_literal211=(Token)match(input,183,FOLLOW_183_in_default_stmt2008); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(string_literal211);


            char_literal212=(Token)match(input,135,FOLLOW_135_in_default_stmt2010); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal212);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 363:19: -> ^( DEFAULT_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:363:22: ^( DEFAULT_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFAULT_STMT, "DEFAULT_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "default_stmt"


    public static class do_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "do_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:366:1: do_stmt : 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) ;
    public final ObjcParser.do_stmt_return do_stmt() throws RecognitionException {
        ObjcParser.do_stmt_return retval = new ObjcParser.do_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal213=null;
        Token string_literal215=null;
        Token char_literal216=null;
        Token char_literal218=null;
        ObjcParser.block_return block214 =null;

        ObjcParser.element_value_return element_value217 =null;


        Object string_literal213_tree=null;
        Object string_literal215_tree=null;
        Object char_literal216_tree=null;
        Object char_literal218_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_206=new RewriteRuleTokenStream(adaptor,"token 206");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:3: ( 'do' block 'while' '(' element_value ')' -> ^( DO_STMT block element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:5: 'do' block 'while' '(' element_value ')'
            {
            string_literal213=(Token)match(input,184,FOLLOW_184_in_do_stmt2031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_184.add(string_literal213);


            pushFollow(FOLLOW_block_in_do_stmt2033);
            block214=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block214.getTree());

            string_literal215=(Token)match(input,206,FOLLOW_206_in_do_stmt2035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_206.add(string_literal215);


            char_literal216=(Token)match(input,119,FOLLOW_119_in_do_stmt2037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal216);


            pushFollow(FOLLOW_element_value_in_do_stmt2039);
            element_value217=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value217.getTree());

            char_literal218=(Token)match(input,121,FOLLOW_121_in_do_stmt2041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal218);


            // AST REWRITE
            // elements: block, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 367:46: -> ^( DO_STMT block element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:367:49: ^( DO_STMT block element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DO_STMT, "DO_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "do_stmt"


    public static class if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:370:1: if_stmt : 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) ;
    public final ObjcParser.if_stmt_return if_stmt() throws RecognitionException {
        ObjcParser.if_stmt_return retval = new ObjcParser.if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal219=null;
        Token char_literal220=null;
        Token char_literal222=null;
        ObjcParser.element_value_return element_value221 =null;

        ObjcParser.block_return block223 =null;


        Object string_literal219_tree=null;
        Object char_literal220_tree=null;
        Object char_literal222_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:3: ( 'if' '(' element_value ')' block -> ^( IF_STMT element_value block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:5: 'if' '(' element_value ')' block
            {
            string_literal219=(Token)match(input,192,FOLLOW_192_in_if_stmt2066); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_192.add(string_literal219);


            char_literal220=(Token)match(input,119,FOLLOW_119_in_if_stmt2068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal220);


            pushFollow(FOLLOW_element_value_in_if_stmt2070);
            element_value221=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value221.getTree());

            char_literal222=(Token)match(input,121,FOLLOW_121_in_if_stmt2072); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal222);


            pushFollow(FOLLOW_block_in_if_stmt2074);
            block223=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block223.getTree());

            // AST REWRITE
            // elements: element_value, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 371:38: -> ^( IF_STMT element_value block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:371:41: ^( IF_STMT element_value block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IF_STMT, "IF_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "if_stmt"


    public static class else_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "else_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:374:1: else_stmt : 'else' block -> ^( ELSE_STMT block ) ;
    public final ObjcParser.else_stmt_return else_stmt() throws RecognitionException {
        ObjcParser.else_stmt_return retval = new ObjcParser.else_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal224=null;
        ObjcParser.block_return block225 =null;


        Object string_literal224_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:3: ( 'else' block -> ^( ELSE_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:5: 'else' block
            {
            string_literal224=(Token)match(input,185,FOLLOW_185_in_else_stmt2097); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_185.add(string_literal224);


            pushFollow(FOLLOW_block_in_else_stmt2099);
            block225=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block225.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 375:18: -> ^( ELSE_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:375:21: ^( ELSE_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ELSE_STMT, "ELSE_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "else_stmt"


    public static class try_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "try_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:378:1: try_stmt_wrapper : '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) ;
    public final ObjcParser.try_stmt_wrapper_return try_stmt_wrapper() throws RecognitionException {
        ObjcParser.try_stmt_wrapper_return retval = new ObjcParser.try_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal226=null;
        ObjcParser.block_return block227 =null;

        ObjcParser.catch_stmt_return catch_stmt228 =null;

        ObjcParser.finally_stmt_return finally_stmt229 =null;


        Object string_literal226_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleSubtreeStream stream_catch_stmt=new RewriteRuleSubtreeStream(adaptor,"rule catch_stmt");
        RewriteRuleSubtreeStream stream_finally_stmt=new RewriteRuleSubtreeStream(adaptor,"rule finally_stmt");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:2: ( '@try' block ( catch_stmt )* ( finally_stmt )? -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:4: '@try' block ( catch_stmt )* ( finally_stmt )?
            {
            string_literal226=(Token)match(input,167,FOLLOW_167_in_try_stmt_wrapper2121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(string_literal226);


            pushFollow(FOLLOW_block_in_try_stmt_wrapper2124);
            block227=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block227.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:19: ( catch_stmt )*
            loop32:
            do {
                int alt32=2;
                int LA32_0 = input.LA(1);

                if ( (LA32_0==149) ) {
                    alt32=1;
                }


                switch (alt32) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:19: catch_stmt
            	    {
            	    pushFollow(FOLLOW_catch_stmt_in_try_stmt_wrapper2127);
            	    catch_stmt228=catch_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_catch_stmt.add(catch_stmt228.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:31: ( finally_stmt )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==153) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:31: finally_stmt
                    {
                    pushFollow(FOLLOW_finally_stmt_in_try_stmt_wrapper2130);
                    finally_stmt229=finally_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_finally_stmt.add(finally_stmt229.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: finally_stmt, catch_stmt, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 379:45: -> ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:48: ^( TRY_STMT block ( catch_stmt )* ( finally_stmt )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TRY_STMT, "TRY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:65: ( catch_stmt )*
                while ( stream_catch_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_catch_stmt.nextTree());

                }
                stream_catch_stmt.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:379:77: ( finally_stmt )?
                if ( stream_finally_stmt.hasNext() ) {
                    adaptor.addChild(root_1, stream_finally_stmt.nextTree());

                }
                stream_finally_stmt.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "try_stmt_wrapper"


    public static class catch_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "catch_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:382:1: catch_stmt : '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) ;
    public final ObjcParser.catch_stmt_return catch_stmt() throws RecognitionException {
        ObjcParser.catch_stmt_return retval = new ObjcParser.catch_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal230=null;
        Token char_literal231=null;
        Token char_literal233=null;
        Token char_literal235=null;
        ObjcParser.name_return name232 =null;

        ObjcParser.name_return name234 =null;

        ObjcParser.block_return block236 =null;


        Object string_literal230_tree=null;
        Object char_literal231_tree=null;
        Object char_literal233_tree=null;
        Object char_literal235_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_149=new RewriteRuleTokenStream(adaptor,"token 149");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:2: ( '@catch' '(' name '*' name ')' block -> ^( CATCH_STMT name name block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:4: '@catch' '(' name '*' name ')' block
            {
            string_literal230=(Token)match(input,149,FOLLOW_149_in_catch_stmt2156); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_149.add(string_literal230);


            char_literal231=(Token)match(input,119,FOLLOW_119_in_catch_stmt2159); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal231);


            pushFollow(FOLLOW_name_in_catch_stmt2162);
            name232=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name232.getTree());

            char_literal233=(Token)match(input,122,FOLLOW_122_in_catch_stmt2165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(char_literal233);


            pushFollow(FOLLOW_name_in_catch_stmt2167);
            name234=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_name.add(name234.getTree());

            char_literal235=(Token)match(input,121,FOLLOW_121_in_catch_stmt2170); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal235);


            pushFollow(FOLLOW_block_in_catch_stmt2173);
            block236=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block236.getTree());

            // AST REWRITE
            // elements: name, name, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:46: -> ^( CATCH_STMT name name block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:383:49: ^( CATCH_STMT name name block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATCH_STMT, "CATCH_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_name.nextTree());

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "catch_stmt"


    public static class finally_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "finally_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:386:1: finally_stmt : '@finally' block -> ^( FINALLY_STMT block ) ;
    public final ObjcParser.finally_stmt_return finally_stmt() throws RecognitionException {
        ObjcParser.finally_stmt_return retval = new ObjcParser.finally_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal237=null;
        ObjcParser.block_return block238 =null;


        Object string_literal237_tree=null;
        RewriteRuleTokenStream stream_153=new RewriteRuleTokenStream(adaptor,"token 153");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:2: ( '@finally' block -> ^( FINALLY_STMT block ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:4: '@finally' block
            {
            string_literal237=(Token)match(input,153,FOLLOW_153_in_finally_stmt2197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_153.add(string_literal237);


            pushFollow(FOLLOW_block_in_finally_stmt2200);
            block238=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block238.getTree());

            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:22: -> ^( FINALLY_STMT block )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:387:25: ^( FINALLY_STMT block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FINALLY_STMT, "FINALLY_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "finally_stmt"


    public static class throw_stmt_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:390:1: throw_stmt_wrapper : throw_stmt -> ^( THROW_STMT throw_stmt ) ;
    public final ObjcParser.throw_stmt_wrapper_return throw_stmt_wrapper() throws RecognitionException {
        ObjcParser.throw_stmt_wrapper_return retval = new ObjcParser.throw_stmt_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.throw_stmt_return throw_stmt239 =null;


        RewriteRuleSubtreeStream stream_throw_stmt=new RewriteRuleSubtreeStream(adaptor,"rule throw_stmt");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:2: ( throw_stmt -> ^( THROW_STMT throw_stmt ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:4: throw_stmt
            {
            pushFollow(FOLLOW_throw_stmt_in_throw_stmt_wrapper2219);
            throw_stmt239=throw_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_throw_stmt.add(throw_stmt239.getTree());

            // AST REWRITE
            // elements: throw_stmt
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 391:15: -> ^( THROW_STMT throw_stmt )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:391:18: ^( THROW_STMT throw_stmt )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(THROW_STMT, "THROW_STMT")
                , root_1);

                adaptor.addChild(root_1, stream_throw_stmt.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt_wrapper"


    public static class throw_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "throw_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:394:1: throw_stmt : '@throw' element_value ';' ;
    public final ObjcParser.throw_stmt_return throw_stmt() throws RecognitionException {
        ObjcParser.throw_stmt_return retval = new ObjcParser.throw_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal240=null;
        Token char_literal242=null;
        ObjcParser.element_value_return element_value241 =null;


        Object string_literal240_tree=null;
        Object char_literal242_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:2: ( '@throw' element_value ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:395:4: '@throw' element_value ';'
            {
            root_0 = (Object)adaptor.nil();


            string_literal240=(Token)match(input,166,FOLLOW_166_in_throw_stmt2238); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal240_tree = 
            (Object)adaptor.create(string_literal240)
            ;
            adaptor.addChild(root_0, string_literal240_tree);
            }

            pushFollow(FOLLOW_element_value_in_throw_stmt2240);
            element_value241=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value241.getTree());

            char_literal242=(Token)match(input,136,FOLLOW_136_in_throw_stmt2242); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal242_tree = 
            (Object)adaptor.create(char_literal242)
            ;
            adaptor.addChild(root_0, char_literal242_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "throw_stmt"


    public static class name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:398:1: name : ID -> ^( NAME ID ) ;
    public final ObjcParser.name_return name() throws RecognitionException {
        ObjcParser.name_return retval = new ObjcParser.name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID243=null;

        Object ID243_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:2: ( ID -> ^( NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:4: ID
            {
            ID243=(Token)match(input,ID,FOLLOW_ID_in_name2253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID243);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 399:7: -> ^( NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:399:10: ^( NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(NAME, "NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name"


    public static class name_number_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "name_number"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:402:1: name_number : ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) );
    public final ObjcParser.name_number_return name_number() throws RecognitionException {
        ObjcParser.name_number_return retval = new ObjcParser.name_number_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID244=null;
        Token char_literal245=null;
        Token NUMBER_LITERAL246=null;

        Object ID244_tree=null;
        Object char_literal245_tree=null;
        Object NUMBER_LITERAL246_tree=null;
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:3: ( ID -> ^( NAME ID ) | ( '-' )? NUMBER_LITERAL -> ^( NUMBER ( '-' )? NUMBER_LITERAL ) )
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==ID) ) {
                alt35=1;
            }
            else if ( (LA35_0==NUMBER_LITERAL||LA35_0==128) ) {
                alt35=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;

            }
            switch (alt35) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:5: ID
                    {
                    ID244=(Token)match(input,ID,FOLLOW_ID_in_name_number2273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID244);


                    // AST REWRITE
                    // elements: ID
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 403:8: -> ^( NAME ID )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:403:11: ^( NAME ID )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NAME, "NAME")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_ID.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:5: ( '-' )? NUMBER_LITERAL
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:5: ( '-' )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==128) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:5: '-'
                            {
                            char_literal245=(Token)match(input,128,FOLLOW_128_in_name_number2287); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_128.add(char_literal245);


                            }
                            break;

                    }


                    NUMBER_LITERAL246=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_name_number2290); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL246);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL, 128
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 404:25: -> ^( NUMBER ( '-' )? NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:28: ^( NUMBER ( '-' )? NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:404:37: ( '-' )?
                        if ( stream_128.hasNext() ) {
                            adaptor.addChild(root_1, 
                            stream_128.nextNode()
                            );

                        }
                        stream_128.reset();

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "name_number"


    public static class variable_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:407:1: variable_declaration_wrapper : field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) ;
    public final ObjcParser.variable_declaration_wrapper_return variable_declaration_wrapper() throws RecognitionException {
        ObjcParser.variable_declaration_wrapper_return retval = new ObjcParser.variable_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper247 =null;


        RewriteRuleSubtreeStream stream_field_declaration_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:3: ( field_declaration_wrapper -> ^( VARIABLE field_declaration_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:5: field_declaration_wrapper
            {
            pushFollow(FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2316);
            field_declaration_wrapper247=field_declaration_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration_wrapper.add(field_declaration_wrapper247.getTree());

            // AST REWRITE
            // elements: field_declaration_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 408:31: -> ^( VARIABLE field_declaration_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:408:34: ^( VARIABLE field_declaration_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE, "VARIABLE")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_declaration_wrapper"


    public static class variable_assignment_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:411:1: variable_assignment_wrapper : variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) ;
    public final ObjcParser.variable_assignment_wrapper_return variable_assignment_wrapper() throws RecognitionException {
        ObjcParser.variable_assignment_wrapper_return retval = new ObjcParser.variable_assignment_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.variable_assignment_return variable_assignment248 =null;


        RewriteRuleSubtreeStream stream_variable_assignment=new RewriteRuleSubtreeStream(adaptor,"rule variable_assignment");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:3: ( variable_assignment -> ^( VARIABLE_ASSIGNMENT variable_assignment ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:5: variable_assignment
            {
            pushFollow(FOLLOW_variable_assignment_in_variable_assignment_wrapper2339);
            variable_assignment248=variable_assignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variable_assignment.add(variable_assignment248.getTree());

            // AST REWRITE
            // elements: variable_assignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 412:25: -> ^( VARIABLE_ASSIGNMENT variable_assignment )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:412:28: ^( VARIABLE_ASSIGNMENT variable_assignment )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VARIABLE_ASSIGNMENT, "VARIABLE_ASSIGNMENT")
                , root_1);

                adaptor.addChild(root_1, stream_variable_assignment.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment_wrapper"


    public static class variable_assignment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_assignment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:415:1: variable_assignment : object_access_wrapper op_assign_wrapper element_value ;
    public final ObjcParser.variable_assignment_return variable_assignment() throws RecognitionException {
        ObjcParser.variable_assignment_return retval = new ObjcParser.variable_assignment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper249 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper250 =null;

        ObjcParser.element_value_return element_value251 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:3: ( object_access_wrapper op_assign_wrapper element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:416:5: object_access_wrapper op_assign_wrapper element_value
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_object_access_wrapper_in_variable_assignment2362);
            object_access_wrapper249=object_access_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper249.getTree());

            pushFollow(FOLLOW_op_assign_wrapper_in_variable_assignment2364);
            op_assign_wrapper250=op_assign_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper250.getTree());

            pushFollow(FOLLOW_element_value_in_variable_assignment2366);
            element_value251=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value251.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_assignment"


    public static class variable_increment_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "variable_increment"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:419:1: variable_increment : ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper );
    public final ObjcParser.variable_increment_return variable_increment() throws RecognitionException {
        ObjcParser.variable_increment_return retval = new ObjcParser.variable_increment_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_wrapper_return object_access_wrapper252 =null;

        ObjcParser.increment_decrement_return increment_decrement253 =null;

        ObjcParser.increment_decrement_return increment_decrement254 =null;

        ObjcParser.object_access_wrapper_return object_access_wrapper255 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:3: ( ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement | increment_decrement object_access_wrapper )
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==119) && (synpred10_Objc())) {
                alt36=1;
            }
            else if ( (LA36_0==117) && (synpred10_Objc())) {
                alt36=1;
            }
            else if ( (LA36_0==ID) && (synpred10_Objc())) {
                alt36=1;
            }
            else if ( (LA36_0==122) && (synpred10_Objc())) {
                alt36=1;
            }
            else if ( (LA36_0==125||LA36_0==129) ) {
                alt36=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;

            }
            switch (alt36) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:5: ( object_access_wrapper increment_decrement )=> object_access_wrapper increment_decrement
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2387);
                    object_access_wrapper252=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper252.getTree());

                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2389);
                    increment_decrement253=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement253.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:421:5: increment_decrement object_access_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_variable_increment2395);
                    increment_decrement254=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement254.getTree());

                    pushFollow(FOLLOW_object_access_wrapper_in_variable_increment2397);
                    object_access_wrapper255=object_access_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, object_access_wrapper255.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "variable_increment"


    public static class method_implementation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:424:1: method_implementation : method_modifier_wrapper method_implementation_common ;
    public final ObjcParser.method_implementation_return method_implementation() throws RecognitionException {
        ObjcParser.method_implementation_return retval = new ObjcParser.method_implementation_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper256 =null;

        ObjcParser.method_implementation_common_return method_implementation_common257 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:3: ( method_modifier_wrapper method_implementation_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:425:5: method_modifier_wrapper method_implementation_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_implementation2412);
            method_modifier_wrapper256=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper256.getTree());

            pushFollow(FOLLOW_method_implementation_common_in_method_implementation2414);
            method_implementation_common257=method_implementation_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_implementation_common257.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation"


    public static class method_implementation_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_implementation_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:427:1: method_implementation_common : ( '(' type_declaration ')' method_name ) ( method_params )? ;
    public final ObjcParser.method_implementation_common_return method_implementation_common() throws RecognitionException {
        ObjcParser.method_implementation_common_return retval = new ObjcParser.method_implementation_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal258=null;
        Token char_literal260=null;
        ObjcParser.type_declaration_return type_declaration259 =null;

        ObjcParser.method_name_return method_name261 =null;

        ObjcParser.method_params_return method_params262 =null;


        Object char_literal258_tree=null;
        Object char_literal260_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:5: ( '(' type_declaration ')' method_name ) ( method_params )?
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:6: '(' type_declaration ')' method_name
            {
            char_literal258=(Token)match(input,119,FOLLOW_119_in_method_implementation_common2427); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal258_tree = 
            (Object)adaptor.create(char_literal258)
            ;
            adaptor.addChild(root_0, char_literal258_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_implementation_common2429);
            type_declaration259=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration259.getTree());

            char_literal260=(Token)match(input,121,FOLLOW_121_in_method_implementation_common2431); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal260_tree = 
            (Object)adaptor.create(char_literal260)
            ;
            adaptor.addChild(root_0, char_literal260_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_implementation_common2433);
            method_name261=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name261.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:44: ( method_params )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==ID||LA37_0==135) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:428:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_implementation_common2436);
                    method_params262=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params262.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_implementation_common"


    public static class implementation_method_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implementation_method_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:430:1: implementation_method_wrapper : method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) ;
    public final ObjcParser.implementation_method_wrapper_return implementation_method_wrapper() throws RecognitionException {
        ObjcParser.implementation_method_wrapper_return retval = new ObjcParser.implementation_method_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_implementation_return method_implementation263 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper264 =null;


        RewriteRuleSubtreeStream stream_block_multiline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_multiline_wrapper");
        RewriteRuleSubtreeStream stream_method_implementation=new RewriteRuleSubtreeStream(adaptor,"rule method_implementation");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:3: ( method_implementation block_multiline_wrapper -> ^( METHOD_IMPL method_implementation block_multiline_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:431:4: method_implementation block_multiline_wrapper
            {
            pushFollow(FOLLOW_method_implementation_in_implementation_method_wrapper2448);
            method_implementation263=method_implementation();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_implementation.add(method_implementation263.getTree());

            pushFollow(FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2452);
            block_multiline_wrapper264=block_multiline_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block_multiline_wrapper.add(block_multiline_wrapper264.getTree());

            // AST REWRITE
            // elements: method_implementation, block_multiline_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 432:27: -> ^( METHOD_IMPL method_implementation block_multiline_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:432:30: ^( METHOD_IMPL method_implementation block_multiline_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_IMPL, "METHOD_IMPL")
                , root_1);

                adaptor.addChild(root_1, stream_method_implementation.nextTree());

                adaptor.addChild(root_1, stream_block_multiline_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implementation_method_wrapper"


    public static class classical_method_call_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:435:1: classical_method_call_wrapper : classical_method_call -> ^( METHOD_CALL classical_method_call ) ;
    public final ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper() throws RecognitionException {
        ObjcParser.classical_method_call_wrapper_return retval = new ObjcParser.classical_method_call_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_method_call_return classical_method_call265 =null;


        RewriteRuleSubtreeStream stream_classical_method_call=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:3: ( classical_method_call -> ^( METHOD_CALL classical_method_call ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:5: classical_method_call
            {
            pushFollow(FOLLOW_classical_method_call_in_classical_method_call_wrapper2475);
            classical_method_call265=classical_method_call();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call.add(classical_method_call265.getTree());

            // AST REWRITE
            // elements: classical_method_call
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 436:27: -> ^( METHOD_CALL classical_method_call )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:436:30: ^( METHOD_CALL classical_method_call )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_CALL, "METHOD_CALL")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call_wrapper"


    public static class clasical_method_call_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "clasical_method_call_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:439:1: clasical_method_call_predicate : name ( access_wrapper name )* '(' ;
    public final ObjcParser.clasical_method_call_predicate_return clasical_method_call_predicate() throws RecognitionException {
        ObjcParser.clasical_method_call_predicate_return retval = new ObjcParser.clasical_method_call_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal269=null;
        ObjcParser.name_return name266 =null;

        ObjcParser.access_wrapper_return access_wrapper267 =null;

        ObjcParser.name_return name268 =null;


        Object char_literal269_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:3: ( name ( access_wrapper name )* '(' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:5: name ( access_wrapper name )* '('
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_clasical_method_call_predicate2496);
            name266=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name266.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:10: ( access_wrapper name )*
            loop38:
            do {
                int alt38=2;
                int LA38_0 = input.LA(1);

                if ( ((LA38_0 >= 131 && LA38_0 <= 132)) ) {
                    alt38=1;
                }


                switch (alt38) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:440:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_clasical_method_call_predicate2499);
            	    access_wrapper267=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper267.getTree());

            	    pushFollow(FOLLOW_name_in_clasical_method_call_predicate2501);
            	    name268=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name268.getTree());

            	    }
            	    break;

            	default :
            	    break loop38;
                }
            } while (true);


            char_literal269=(Token)match(input,119,FOLLOW_119_in_clasical_method_call_predicate2505); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal269_tree = 
            (Object)adaptor.create(char_literal269)
            ;
            adaptor.addChild(root_0, char_literal269_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "clasical_method_call_predicate"


    public static class classical_method_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:443:1: classical_method_call : name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) ;
    public final ObjcParser.classical_method_call_return classical_method_call() throws RecognitionException {
        ObjcParser.classical_method_call_return retval = new ObjcParser.classical_method_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal273=null;
        Token char_literal275=null;
        ObjcParser.name_return name270 =null;

        ObjcParser.access_wrapper_return access_wrapper271 =null;

        ObjcParser.name_return name272 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push274 =null;


        Object char_literal273_tree=null;
        Object char_literal275_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:3: ( name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:5: name ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_classical_method_call2520);
            name270=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name270.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:10: ( access_wrapper name )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( ((LA39_0 >= 131 && LA39_0 <= 132)) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_classical_method_call2523);
            	    access_wrapper271=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper271.getTree());

            	    pushFollow(FOLLOW_name_in_classical_method_call2525);
            	    name272=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name272.getTree());

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:33: ( '(' ( classical_method_params_push )? ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:34: '(' ( classical_method_params_push )? ')'
            {
            char_literal273=(Token)match(input,119,FOLLOW_119_in_classical_method_call2530); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal273_tree = 
            (Object)adaptor.create(char_literal273)
            ;
            adaptor.addChild(root_0, char_literal273_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:38: ( classical_method_params_push )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==CHAR_LITERAL||LA40_0==ID||LA40_0==MULTI_COMMENT_LIT||LA40_0==NUMBER_LITERAL||LA40_0==SINGLE_COMMENT_LIT||LA40_0==STRING_LITERAL||LA40_0==112||LA40_0==117||LA40_0==119||LA40_0==122||LA40_0==125||(LA40_0 >= 128 && LA40_0 <= 129)||LA40_0==148||LA40_0==160||LA40_0==163||LA40_0==170||(LA40_0 >= 172 && LA40_0 <= 173)||(LA40_0 >= 176 && LA40_0 <= 177)||LA40_0==188||LA40_0==201||LA40_0==212) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:444:38: classical_method_params_push
                    {
                    pushFollow(FOLLOW_classical_method_params_push_in_classical_method_call2532);
                    classical_method_params_push274=classical_method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push274.getTree());

                    }
                    break;

            }


            char_literal275=(Token)match(input,121,FOLLOW_121_in_classical_method_call2535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal275_tree = 
            (Object)adaptor.create(char_literal275)
            ;
            adaptor.addChild(root_0, char_literal275_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_call"


    public static class classical_method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:447:1: classical_method_params_push : ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.classical_method_params_push_return classical_method_params_push() throws RecognitionException {
        ObjcParser.classical_method_params_push_return retval = new ObjcParser.classical_method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal277=null;
        ObjcParser.method_param_push_return method_param_push276 =null;

        ObjcParser.method_param_push_return method_param_push278 =null;


        Object char_literal277_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:3: ( ( method_param_push ( ',' method_param_push )* ) -> ^( PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:5: ( method_param_push ( ',' method_param_push )* )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:5: ( method_param_push ( ',' method_param_push )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:6: method_param_push ( ',' method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2550);
            method_param_push276=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push276.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:24: ( ',' method_param_push )*
            loop41:
            do {
                int alt41=2;
                int LA41_0 = input.LA(1);

                if ( (LA41_0==127) ) {
                    alt41=1;
                }


                switch (alt41) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:25: ',' method_param_push
            	    {
            	    char_literal277=(Token)match(input,127,FOLLOW_127_in_classical_method_params_push2553); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal277);


            	    pushFollow(FOLLOW_method_param_push_in_classical_method_params_push2555);
            	    method_param_push278=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push278.getTree());

            	    }
            	    break;

            	default :
            	    break loop41;
                }
            } while (true);


            }


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 448:50: -> ^( PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:448:53: ^( PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params_push"


    public static class method_params_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:451:1: method_params_push : method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) ;
    public final ObjcParser.method_params_push_return method_params_push() throws RecognitionException {
        ObjcParser.method_params_push_return retval = new ObjcParser.method_params_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal281=null;
        Token char_literal282=null;
        ObjcParser.method_param_push_return method_param_push279 =null;

        ObjcParser.prefix_return prefix280 =null;

        ObjcParser.method_param_push_return method_param_push283 =null;


        Object char_literal281_tree=null;
        Object char_literal282_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_method_param_push=new RewriteRuleSubtreeStream(adaptor,"rule method_param_push");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:2: ( method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )* -> ^( METHOD_PARAMS ( method_param_push )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:4: method_param_push ( ( ( prefix ':' ) | ',' ) method_param_push )*
            {
            pushFollow(FOLLOW_method_param_push_in_method_params_push2579);
            method_param_push279=method_param_push();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push279.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:22: ( ( ( prefix ':' ) | ',' ) method_param_push )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==ID||LA43_0==127) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:23: ( ( prefix ':' ) | ',' ) method_param_push
            	    {
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:23: ( ( prefix ':' ) | ',' )
            	    int alt42=2;
            	    int LA42_0 = input.LA(1);

            	    if ( (LA42_0==ID) ) {
            	        alt42=1;
            	    }
            	    else if ( (LA42_0==127) ) {
            	        alt42=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 42, 0, input);

            	        throw nvae;

            	    }
            	    switch (alt42) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:24: ( prefix ':' )
            	            {
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:24: ( prefix ':' )
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:25: prefix ':'
            	            {
            	            pushFollow(FOLLOW_prefix_in_method_params_push2584);
            	            prefix280=prefix();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_prefix.add(prefix280.getTree());

            	            char_literal281=(Token)match(input,135,FOLLOW_135_in_method_params_push2586); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_135.add(char_literal281);


            	            }


            	            }
            	            break;
            	        case 2 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:39: ','
            	            {
            	            char_literal282=(Token)match(input,127,FOLLOW_127_in_method_params_push2591); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_127.add(char_literal282);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_method_param_push_in_method_params_push2594);
            	    method_param_push283=method_param_push();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param_push.add(method_param_push283.getTree());

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);


            // AST REWRITE
            // elements: method_param_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 452:64: -> ^( METHOD_PARAMS ( method_param_push )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:452:67: ^( METHOD_PARAMS ( method_param_push )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param_push.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param_push.nextTree());

                }
                stream_method_param_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params_push"


    public static class method_param_push_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param_push"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:454:1: method_param_push : ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) ;
    public final ObjcParser.method_param_push_return method_param_push() throws RecognitionException {
        ObjcParser.method_param_push_return retval = new ObjcParser.method_param_push_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.comments_return comments284 =null;

        ObjcParser.element_value_return element_value285 =null;

        ObjcParser.comments_return comments286 =null;


        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:3: ( ( comments )? element_value ( comments )? -> ^( METHOD_PARAM ( comments )? element_value ( comments )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: ( comments )? element_value ( comments )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: ( comments )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==MULTI_COMMENT_LIT||LA44_0==SINGLE_COMMENT_LIT) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2615);
                    comments284=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments284.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_in_method_param_push2618);
            element_value285=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value285.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:29: ( comments )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==MULTI_COMMENT_LIT||LA45_0==SINGLE_COMMENT_LIT) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:29: comments
                    {
                    pushFollow(FOLLOW_comments_in_method_param_push2620);
                    comments286=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments286.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: comments, element_value, comments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 455:39: -> ^( METHOD_PARAM ( comments )? element_value ( comments )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:42: ^( METHOD_PARAM ( comments )? element_value ( comments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:57: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_1, stream_element_value.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:455:81: ( comments )?
                if ( stream_comments.hasNext() ) {
                    adaptor.addChild(root_1, stream_comments.nextTree());

                }
                stream_comments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param_push"


    public static class method_msg_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_msg"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:458:1: method_msg : '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) ;
    public final ObjcParser.method_msg_return method_msg() throws RecognitionException {
        ObjcParser.method_msg_return retval = new ObjcParser.method_msg_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal287=null;
        Token char_literal290=null;
        Token char_literal292=null;
        ObjcParser.element_value_return element_value288 =null;

        ObjcParser.method_name_return method_name289 =null;

        ObjcParser.method_params_push_return method_params_push291 =null;


        Object char_literal287_tree=null;
        Object char_literal290_tree=null;
        Object char_literal292_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_method_params_push=new RewriteRuleSubtreeStream(adaptor,"rule method_params_push");
        RewriteRuleSubtreeStream stream_method_name=new RewriteRuleSubtreeStream(adaptor,"rule method_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:3: ( '[' element_value method_name ( ':' method_params_push )? ']' -> ^( METHOD_MSG element_value method_name ( method_params_push )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:5: '[' element_value method_name ( ':' method_params_push )? ']'
            {
            char_literal287=(Token)match(input,173,FOLLOW_173_in_method_msg2649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_173.add(char_literal287);


            pushFollow(FOLLOW_element_value_in_method_msg2651);
            element_value288=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value288.getTree());

            pushFollow(FOLLOW_method_name_in_method_msg2653);
            method_name289=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_name.add(method_name289.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:35: ( ':' method_params_push )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==135) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:36: ':' method_params_push
                    {
                    char_literal290=(Token)match(input,135,FOLLOW_135_in_method_msg2656); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal290);


                    pushFollow(FOLLOW_method_params_push_in_method_msg2658);
                    method_params_push291=method_params_push();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_params_push.add(method_params_push291.getTree());

                    }
                    break;

            }


            char_literal292=(Token)match(input,175,FOLLOW_175_in_method_msg2662); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_175.add(char_literal292);


            // AST REWRITE
            // elements: element_value, method_name, method_params_push
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 459:65: -> ^( METHOD_MSG element_value method_name ( method_params_push )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:67: ^( METHOD_MSG element_value method_name ( method_params_push )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_MSG, "METHOD_MSG")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_method_name.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:459:106: ( method_params_push )?
                if ( stream_method_params_push.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_params_push.nextTree());

                }
                stream_method_params_push.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_msg"


    public static class questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:462:1: questionmark_if_stmt : ( '?' element_value ':' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) ;
    public final ObjcParser.questionmark_if_stmt_return questionmark_if_stmt() throws RecognitionException {
        ObjcParser.questionmark_if_stmt_return retval = new ObjcParser.questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal293=null;
        Token char_literal295=null;
        ObjcParser.element_value_return element_value294 =null;

        ObjcParser.comments_return comments296 =null;

        ObjcParser.element_value_return element_value297 =null;


        Object char_literal293_tree=null;
        Object char_literal295_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:3: ( ( '?' element_value ':' ( comments )? element_value ) -> ^( QUESTION_MARK_IF element_value element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:5: ( '?' element_value ':' ( comments )? element_value )
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:5: ( '?' element_value ':' ( comments )? element_value )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:6: '?' element_value ':' ( comments )? element_value
            {
            char_literal293=(Token)match(input,147,FOLLOW_147_in_questionmark_if_stmt2688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_147.add(char_literal293);


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2690);
            element_value294=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value294.getTree());

            char_literal295=(Token)match(input,135,FOLLOW_135_in_questionmark_if_stmt2692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal295);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:28: ( comments )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==MULTI_COMMENT_LIT||LA47_0==SINGLE_COMMENT_LIT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:28: comments
                    {
                    pushFollow(FOLLOW_comments_in_questionmark_if_stmt2694);
                    comments296=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_comments.add(comments296.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_in_questionmark_if_stmt2697);
            element_value297=element_value();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_element_value.add(element_value297.getTree());

            }


            // AST REWRITE
            // elements: element_value, element_value
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 463:53: -> ^( QUESTION_MARK_IF element_value element_value )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:463:56: ^( QUESTION_MARK_IF element_value element_value )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(QUESTION_MARK_IF, "QUESTION_MARK_IF")
                , root_1);

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_1, stream_element_value.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "questionmark_if_stmt"


    public static class element_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:466:1: element_value : simple_expression -> ^( VALUE simple_expression ) ;
    public final ObjcParser.element_value_return element_value() throws RecognitionException {
        ObjcParser.element_value_return retval = new ObjcParser.element_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.simple_expression_return simple_expression298 =null;


        RewriteRuleSubtreeStream stream_simple_expression=new RewriteRuleSubtreeStream(adaptor,"rule simple_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:5: ( simple_expression -> ^( VALUE simple_expression ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:7: simple_expression
            {
            pushFollow(FOLLOW_simple_expression_in_element_value2725);
            simple_expression298=simple_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_simple_expression.add(simple_expression298.getTree());

            // AST REWRITE
            // elements: simple_expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 467:25: -> ^( VALUE simple_expression )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:467:28: ^( VALUE simple_expression )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(VALUE, "VALUE")
                , root_1);

                adaptor.addChild(root_1, stream_simple_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value"


    public static class element_value_or_semicolon_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_semicolon"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:470:1: element_value_or_semicolon : ( ';' | element_value ) ;
    public final ObjcParser.element_value_or_semicolon_return element_value_or_semicolon() throws RecognitionException {
        ObjcParser.element_value_or_semicolon_return retval = new ObjcParser.element_value_or_semicolon_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal299=null;
        ObjcParser.element_value_return element_value300 =null;


        Object char_literal299_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:3: ( ( ';' | element_value ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:5: ( ';' | element_value )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:5: ( ';' | element_value )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==136) ) {
                alt48=1;
            }
            else if ( (LA48_0==CHAR_LITERAL||LA48_0==ID||LA48_0==NUMBER_LITERAL||LA48_0==STRING_LITERAL||LA48_0==112||LA48_0==117||LA48_0==119||LA48_0==122||LA48_0==125||(LA48_0 >= 128 && LA48_0 <= 129)||LA48_0==148||LA48_0==160||LA48_0==163||LA48_0==170||(LA48_0 >= 172 && LA48_0 <= 173)||(LA48_0 >= 176 && LA48_0 <= 177)||LA48_0==188||LA48_0==201||LA48_0==212) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;

            }
            switch (alt48) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:6: ';'
                    {
                    char_literal299=(Token)match(input,136,FOLLOW_136_in_element_value_or_semicolon2752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal299_tree = 
                    (Object)adaptor.create(char_literal299)
                    ;
                    adaptor.addChild(root_0, char_literal299_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:471:12: element_value
                    {
                    pushFollow(FOLLOW_element_value_in_element_value_or_semicolon2756);
                    element_value300=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value300.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_semicolon"


    public static class array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:474:1: array_init : ( comments )? element_value_or_array_init ( ',' element_value_or_array_init )* ;
    public final ObjcParser.array_init_return array_init() throws RecognitionException {
        ObjcParser.array_init_return retval = new ObjcParser.array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal303=null;
        ObjcParser.comments_return comments301 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init302 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init304 =null;


        Object char_literal303_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:3: ( ( comments )? element_value_or_array_init ( ',' element_value_or_array_init )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: ( comments )? element_value_or_array_init ( ',' element_value_or_array_init )*
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: ( comments )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SINGLE_COMMENT_LIT) ) {
                alt49=1;
            }
            else if ( (LA49_0==MULTI_COMMENT_LIT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:5: comments
                    {
                    pushFollow(FOLLOW_comments_in_array_init2773);
                    comments301=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments301.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_element_value_or_array_init_in_array_init2776);
            element_value_or_array_init302=element_value_or_array_init();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init302.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:43: ( ',' element_value_or_array_init )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==127) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:476:44: ',' element_value_or_array_init
            	    {
            	    char_literal303=(Token)match(input,127,FOLLOW_127_in_array_init2779); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal303_tree = 
            	    (Object)adaptor.create(char_literal303)
            	    ;
            	    adaptor.addChild(root_0, char_literal303_tree);
            	    }

            	    pushFollow(FOLLOW_element_value_or_array_init_in_array_init2781);
            	    element_value_or_array_init304=element_value_or_array_init();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init304.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_init"


    public static class element_value_or_array_init_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "element_value_or_array_init"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:479:1: element_value_or_array_init : ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( comments )? ( array_init )? ) | ( comments )? element_value );
    public final ObjcParser.element_value_or_array_init_return element_value_or_array_init() throws RecognitionException {
        ObjcParser.element_value_or_array_init_return retval = new ObjcParser.element_value_or_array_init_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal305=null;
        Token char_literal307=null;
        ObjcParser.array_init_return array_init306 =null;

        ObjcParser.comments_return comments308 =null;

        ObjcParser.comments_return comments309 =null;

        ObjcParser.element_value_return element_value310 =null;


        Object char_literal305_tree=null;
        Object char_literal307_tree=null;
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleSubtreeStream stream_array_init=new RewriteRuleSubtreeStream(adaptor,"rule array_init");
        RewriteRuleSubtreeStream stream_comments=new RewriteRuleSubtreeStream(adaptor,"rule comments");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:3: ( '{' ( array_init )? '}' ( comments )? -> ^( ARRAY_INIT ( comments )? ( array_init )? ) | ( comments )? element_value )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==207) ) {
                alt54=1;
            }
            else if ( (LA54_0==CHAR_LITERAL||LA54_0==ID||LA54_0==MULTI_COMMENT_LIT||LA54_0==NUMBER_LITERAL||LA54_0==SINGLE_COMMENT_LIT||LA54_0==STRING_LITERAL||LA54_0==112||LA54_0==117||LA54_0==119||LA54_0==122||LA54_0==125||(LA54_0 >= 128 && LA54_0 <= 129)||LA54_0==148||LA54_0==160||LA54_0==163||LA54_0==170||(LA54_0 >= 172 && LA54_0 <= 173)||(LA54_0 >= 176 && LA54_0 <= 177)||LA54_0==188||LA54_0==201||LA54_0==212) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;

            }
            switch (alt54) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:5: '{' ( array_init )? '}' ( comments )?
                    {
                    char_literal305=(Token)match(input,207,FOLLOW_207_in_element_value_or_array_init2798); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_207.add(char_literal305);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:9: ( array_init )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==CHAR_LITERAL||LA51_0==ID||LA51_0==MULTI_COMMENT_LIT||LA51_0==NUMBER_LITERAL||LA51_0==SINGLE_COMMENT_LIT||LA51_0==STRING_LITERAL||LA51_0==112||LA51_0==117||LA51_0==119||LA51_0==122||LA51_0==125||(LA51_0 >= 128 && LA51_0 <= 129)||LA51_0==148||LA51_0==160||LA51_0==163||LA51_0==170||(LA51_0 >= 172 && LA51_0 <= 173)||(LA51_0 >= 176 && LA51_0 <= 177)||LA51_0==188||LA51_0==201||LA51_0==207||LA51_0==212) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:9: array_init
                            {
                            pushFollow(FOLLOW_array_init_in_element_value_or_array_init2800);
                            array_init306=array_init();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_array_init.add(array_init306.getTree());

                            }
                            break;

                    }


                    char_literal307=(Token)match(input,211,FOLLOW_211_in_element_value_or_array_init2803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_211.add(char_literal307);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:25: ( comments )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==MULTI_COMMENT_LIT||LA52_0==SINGLE_COMMENT_LIT) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:25: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2805);
                            comments308=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_comments.add(comments308.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: array_init, comments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 480:35: -> ^( ARRAY_INIT ( comments )? ( array_init )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:38: ^( ARRAY_INIT ( comments )? ( array_init )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_INIT, "ARRAY_INIT")
                        , root_1);

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:51: ( comments )?
                        if ( stream_comments.hasNext() ) {
                            adaptor.addChild(root_1, stream_comments.nextTree());

                        }
                        stream_comments.reset();

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:480:61: ( array_init )?
                        if ( stream_array_init.hasNext() ) {
                            adaptor.addChild(root_1, stream_array_init.nextTree());

                        }
                        stream_array_init.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:5: ( comments )? element_value
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:5: ( comments )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==MULTI_COMMENT_LIT||LA53_0==SINGLE_COMMENT_LIT) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:481:5: comments
                            {
                            pushFollow(FOLLOW_comments_in_element_value_or_array_init2824);
                            comments309=comments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, comments309.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_element_value_in_element_value_or_array_init2827);
                    element_value310=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value310.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "element_value_or_array_init"


    public static class increment_decrement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "increment_decrement"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:484:1: increment_decrement : ( '++' | '--' ) ;
    public final ObjcParser.increment_decrement_return increment_decrement() throws RecognitionException {
        ObjcParser.increment_decrement_return retval = new ObjcParser.increment_decrement_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set311=null;

        Object set311_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:485:3: ( ( '++' | '--' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set311=(Token)input.LT(1);

            if ( input.LA(1)==125||input.LA(1)==129 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set311)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "increment_decrement"


    public static class simple_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:488:1: simple_expression : cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* ;
    public final ObjcParser.simple_expression_return simple_expression() throws RecognitionException {
        ObjcParser.simple_expression_return retval = new ObjcParser.simple_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1312 =null;

        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt313 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:2: ( cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:4: cast_unary_expression1 ( op2_unary_expression_or_questionmark_if_stmt )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_unary_expression1_in_simple_expression2862);
            cast_unary_expression1312=cast_unary_expression1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1312.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:27: ( op2_unary_expression_or_questionmark_if_stmt )*
            loop55:
            do {
                int alt55=2;
                switch ( input.LA(1) ) {
                case 117:
                    {
                    alt55=1;
                    }
                    break;
                case 122:
                    {
                    alt55=1;
                    }
                    break;
                case 124:
                case 128:
                    {
                    alt55=1;
                    }
                    break;
                case 113:
                case 115:
                case 116:
                case 133:
                case 137:
                case 138:
                case 140:
                case 141:
                case 142:
                case 143:
                case 144:
                case 145:
                case 176:
                case 208:
                case 210:
                    {
                    alt55=1;
                    }
                    break;
                case 147:
                    {
                    alt55=1;
                    }
                    break;

                }

                switch (alt55) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:489:27: op2_unary_expression_or_questionmark_if_stmt
            	    {
            	    pushFollow(FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2864);
            	    op2_unary_expression_or_questionmark_if_stmt313=op2_unary_expression_or_questionmark_if_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_unary_expression_or_questionmark_if_stmt313.getTree());

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression"


    public static class cast_unary_expression1_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression1"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:492:1: cast_unary_expression1 : ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression );
    public final ObjcParser.cast_unary_expression1_return cast_unary_expression1() throws RecognitionException {
        ObjcParser.cast_unary_expression1_return retval = new ObjcParser.cast_unary_expression1_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal314=null;
        ObjcParser.cast_expression_return cast_expression315 =null;

        ObjcParser.cast_unary_expression_return cast_unary_expression316 =null;


        Object char_literal314_tree=null;
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:3: ( '-' cast_expression -> ^( EXPR_NEGATE cast_expression ) | cast_unary_expression )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==128) ) {
                alt56=1;
            }
            else if ( (LA56_0==CHAR_LITERAL||LA56_0==ID||LA56_0==NUMBER_LITERAL||LA56_0==STRING_LITERAL||LA56_0==112||LA56_0==117||LA56_0==119||LA56_0==122||LA56_0==125||LA56_0==129||LA56_0==148||LA56_0==160||LA56_0==163||LA56_0==170||(LA56_0 >= 172 && LA56_0 <= 173)||(LA56_0 >= 176 && LA56_0 <= 177)||LA56_0==188||LA56_0==201||LA56_0==212) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;

            }
            switch (alt56) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:5: '-' cast_expression
                    {
                    char_literal314=(Token)match(input,128,FOLLOW_128_in_cast_unary_expression12879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(char_literal314);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression12881);
                    cast_expression315=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression315.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 493:25: -> ^( EXPR_NEGATE cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:493:28: ^( EXPR_NEGATE cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NEGATE, "EXPR_NEGATE")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:494:5: cast_unary_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_unary_expression_in_cast_unary_expression12895);
                    cast_unary_expression316=cast_unary_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression316.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression1"


    public static class op2_unary_expression_or_questionmark_if_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_unary_expression_or_questionmark_if_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:497:1: op2_unary_expression_or_questionmark_if_stmt : ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt );
    public final ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return op2_unary_expression_or_questionmark_if_stmt() throws RecognitionException {
        ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return retval = new ObjcParser.op2_unary_expression_or_questionmark_if_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_wrapper_return op2_wrapper317 =null;

        ObjcParser.cast_unary_expression1_return cast_unary_expression1318 =null;

        ObjcParser.questionmark_if_stmt_return questionmark_if_stmt319 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:3: ( ( op2_wrapper cast_unary_expression1 ) | questionmark_if_stmt )
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==113||(LA57_0 >= 115 && LA57_0 <= 117)||LA57_0==122||LA57_0==124||LA57_0==128||LA57_0==133||(LA57_0 >= 137 && LA57_0 <= 138)||(LA57_0 >= 140 && LA57_0 <= 145)||LA57_0==176||LA57_0==208||LA57_0==210) ) {
                alt57=1;
            }
            else if ( (LA57_0==147) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;

            }
            switch (alt57) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:5: ( op2_wrapper cast_unary_expression1 )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:5: ( op2_wrapper cast_unary_expression1 )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:498:6: op2_wrapper cast_unary_expression1
                    {
                    pushFollow(FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2909);
                    op2_wrapper317=op2_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op2_wrapper317.getTree());

                    pushFollow(FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2911);
                    cast_unary_expression1318=cast_unary_expression1();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_unary_expression1318.getTree());

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:499:5: questionmark_if_stmt
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2918);
                    questionmark_if_stmt319=questionmark_if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, questionmark_if_stmt319.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_unary_expression_or_questionmark_if_stmt"


    public static class cast_unary_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_unary_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:502:1: cast_unary_expression : ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression );
    public final ObjcParser.cast_unary_expression_return cast_unary_expression() throws RecognitionException {
        ObjcParser.cast_unary_expression_return retval = new ObjcParser.cast_unary_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal322=null;
        Token char_literal324=null;
        ObjcParser.cast_expression_return cast_expression320 =null;

        ObjcParser.increment_decrement_return increment_decrement321 =null;

        ObjcParser.cast_expression_return cast_expression323 =null;

        ObjcParser.cast_expression_return cast_expression325 =null;

        ObjcParser.increment_decrement_return increment_decrement326 =null;

        ObjcParser.cast_expression_return cast_expression327 =null;


        Object char_literal322_tree=null;
        Object char_literal324_tree=null;
        RewriteRuleTokenStream stream_112=new RewriteRuleTokenStream(adaptor,"token 112");
        RewriteRuleTokenStream stream_212=new RewriteRuleTokenStream(adaptor,"token 212");
        RewriteRuleSubtreeStream stream_cast_expression=new RewriteRuleSubtreeStream(adaptor,"rule cast_expression");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:3: ( cast_expression ( increment_decrement )? | '!' cast_expression -> ^( EXPR_NOT cast_expression ) | '~' cast_expression -> ^( EXPR_COMPLEMENT cast_expression ) | increment_decrement cast_expression )
            int alt59=4;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case 117:
            case 119:
            case 122:
            case 148:
            case 160:
            case 163:
            case 170:
            case 172:
            case 173:
            case 176:
            case 177:
            case 188:
            case 201:
                {
                alt59=1;
                }
                break;
            case 112:
                {
                alt59=2;
                }
                break;
            case 212:
                {
                alt59=3;
                }
                break;
            case 125:
            case 129:
                {
                alt59=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 59, 0, input);

                throw nvae;

            }

            switch (alt59) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:5: cast_expression ( increment_decrement )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2931);
                    cast_expression320=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression320.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:21: ( increment_decrement )?
                    int alt58=2;
                    alt58 = dfa58.predict(input);
                    switch (alt58) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:503:21: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2933);
                            increment_decrement321=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement321.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:5: '!' cast_expression
                    {
                    char_literal322=(Token)match(input,112,FOLLOW_112_in_cast_unary_expression2940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_112.add(char_literal322);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2942);
                    cast_expression323=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression323.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 504:25: -> ^( EXPR_NOT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:504:28: ^( EXPR_NOT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_NOT, "EXPR_NOT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:5: '~' cast_expression
                    {
                    char_literal324=(Token)match(input,212,FOLLOW_212_in_cast_unary_expression2956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_212.add(char_literal324);


                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2958);
                    cast_expression325=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_cast_expression.add(cast_expression325.getTree());

                    // AST REWRITE
                    // elements: cast_expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 505:25: -> ^( EXPR_COMPLEMENT cast_expression )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:505:28: ^( EXPR_COMPLEMENT cast_expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(EXPR_COMPLEMENT, "EXPR_COMPLEMENT")
                        , root_1);

                        adaptor.addChild(root_1, stream_cast_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:506:5: increment_decrement cast_expression
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_increment_decrement_in_cast_unary_expression2972);
                    increment_decrement326=increment_decrement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement326.getTree());

                    pushFollow(FOLLOW_cast_expression_in_cast_unary_expression2974);
                    cast_expression327=cast_expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_expression327.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_unary_expression"


    public static class cast_expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_expression"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:509:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );
    public final ObjcParser.cast_expression_return cast_expression() throws RecognitionException {
        ObjcParser.cast_expression_return retval = new ObjcParser.cast_expression_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal331=null;
        Token char_literal334=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper328 =null;

        ObjcParser.increment_decrement_return increment_decrement329 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access330 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper332 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access333 =null;

        ObjcParser.access_wrapper_return access_wrapper335 =null;

        ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call336 =null;

        ObjcParser.simple_expression_value_access_return simple_expression_value_access337 =null;


        Object char_literal331_tree=null;
        Object char_literal334_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:3: ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access )
            int alt62=3;
            alt62 = dfa62.predict(input);
            switch (alt62) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:5: ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression2992);
                    type_cast_wrapper328=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper328.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:45: ( increment_decrement )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==125||LA60_0==129) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:45: increment_decrement
                            {
                            pushFollow(FOLLOW_increment_decrement_in_cast_expression2994);
                            increment_decrement329=increment_decrement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, increment_decrement329.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression2997);
                    simple_expression_value_access330=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access330.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal331=(Token)match(input,119,FOLLOW_119_in_cast_expression3016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal331_tree = 
                    (Object)adaptor.create(char_literal331)
                    ;
                    adaptor.addChild(root_0, char_literal331_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_expression3018);
                    type_cast_wrapper332=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper332.getTree());

                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3020);
                    simple_expression_value_access333=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access333.getTree());

                    char_literal334=(Token)match(input,121,FOLLOW_121_in_cast_expression3022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal334_tree = 
                    (Object)adaptor.create(char_literal334)
                    ;
                    adaptor.addChild(root_0, char_literal334_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:138: ( access_wrapper simple_name_or_classical_function_call )+
                    int cnt61=0;
                    loop61:
                    do {
                        int alt61=2;
                        alt61 = dfa61.predict(input);
                        switch (alt61) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:139: access_wrapper simple_name_or_classical_function_call
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_expression3025);
                    	    access_wrapper335=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper335.getTree());

                    	    pushFollow(FOLLOW_simple_name_or_classical_function_call_in_cast_expression3027);
                    	    simple_name_or_classical_function_call336=simple_name_or_classical_function_call();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_name_or_classical_function_call336.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt61 >= 1 ) break loop61;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(61, input);
                                throw eee;
                        }
                        cnt61++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:512:5: simple_expression_value_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_access_in_cast_expression3035);
                    simple_expression_value_access337=simple_expression_value_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value_access337.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_expression"


    public static class simple_name_or_classical_function_call_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_name_or_classical_function_call"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:515:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );
    public final ObjcParser.simple_name_or_classical_function_call_return simple_name_or_classical_function_call() throws RecognitionException {
        ObjcParser.simple_name_or_classical_function_call_return retval = new ObjcParser.simple_name_or_classical_function_call_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal339=null;
        Token char_literal341=null;
        ObjcParser.name_return name338 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push340 =null;

        ObjcParser.name_return name342 =null;


        Object char_literal339_tree=null;
        Object char_literal341_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:3: ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name )
            int alt64=2;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:5: ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call3056);
                    name338=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name338.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:24: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:25: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal339=(Token)match(input,119,FOLLOW_119_in_simple_name_or_classical_function_call3059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal339_tree = 
                    (Object)adaptor.create(char_literal339)
                    ;
                    adaptor.addChild(root_0, char_literal339_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:29: ( classical_method_params_push )?
                    int alt63=2;
                    int LA63_0 = input.LA(1);

                    if ( (LA63_0==CHAR_LITERAL||LA63_0==ID||LA63_0==MULTI_COMMENT_LIT||LA63_0==NUMBER_LITERAL||LA63_0==SINGLE_COMMENT_LIT||LA63_0==STRING_LITERAL||LA63_0==112||LA63_0==117||LA63_0==119||LA63_0==122||LA63_0==125||(LA63_0 >= 128 && LA63_0 <= 129)||LA63_0==148||LA63_0==160||LA63_0==163||LA63_0==170||(LA63_0 >= 172 && LA63_0 <= 173)||(LA63_0 >= 176 && LA63_0 <= 177)||LA63_0==188||LA63_0==201||LA63_0==212) ) {
                        alt63=1;
                    }
                    switch (alt63) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:29: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call3061);
                            classical_method_params_push340=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push340.getTree());

                            }
                            break;

                    }


                    char_literal341=(Token)match(input,121,FOLLOW_121_in_simple_name_or_classical_function_call3064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal341_tree = 
                    (Object)adaptor.create(char_literal341)
                    ;
                    adaptor.addChild(root_0, char_literal341_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:517:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_name_or_classical_function_call3071);
                    name342=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name342.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_name_or_classical_function_call"


    public static class simple_expression_value_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:520:1: simple_expression_value_access : ( ( block_call_predicate )=> block_call_wrapper | selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* );
    public final ObjcParser.simple_expression_value_access_return simple_expression_value_access() throws RecognitionException {
        ObjcParser.simple_expression_value_access_return retval = new ObjcParser.simple_expression_value_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal345=null;
        Token char_literal347=null;
        Token char_literal349=null;
        Token char_literal350=null;
        Token string_literal351=null;
        Token char_literal352=null;
        Token char_literal354=null;
        Token char_literal358=null;
        Token char_literal360=null;
        ObjcParser.block_call_wrapper_return block_call_wrapper343 =null;

        ObjcParser.selector_wrapper_return selector_wrapper344 =null;

        ObjcParser.name_return name346 =null;

        ObjcParser.name_return name348 =null;

        ObjcParser.name_return name353 =null;

        ObjcParser.simple_expression_value_return simple_expression_value355 =null;

        ObjcParser.access_wrapper_return access_wrapper356 =null;

        ObjcParser.name_return name357 =null;

        ObjcParser.classical_method_params_push_return classical_method_params_push359 =null;

        ObjcParser.simple_expression_value2_return simple_expression_value2361 =null;

        ObjcParser.access_wrapper_return access_wrapper362 =null;

        ObjcParser.simple_expression_value_return simple_expression_value363 =null;


        Object char_literal345_tree=null;
        Object char_literal347_tree=null;
        Object char_literal349_tree=null;
        Object char_literal350_tree=null;
        Object string_literal351_tree=null;
        Object char_literal352_tree=null;
        Object char_literal354_tree=null;
        Object char_literal358_tree=null;
        Object char_literal360_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:3: ( ( block_call_predicate )=> block_call_wrapper | selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* )
            int alt70=5;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:5: ( block_call_predicate )=> block_call_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_call_wrapper_in_simple_expression_value_access3092);
                    block_call_wrapper343=block_call_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_call_wrapper343.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:522:5: selector_wrapper '(' name ( ':' ( name ':' )* )? ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_selector_wrapper_in_simple_expression_value_access3098);
                    selector_wrapper344=selector_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selector_wrapper344.getTree());

                    char_literal345=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access3100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal345_tree = 
                    (Object)adaptor.create(char_literal345)
                    ;
                    adaptor.addChild(root_0, char_literal345_tree);
                    }

                    pushFollow(FOLLOW_name_in_simple_expression_value_access3102);
                    name346=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name346.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:522:31: ( ':' ( name ':' )* )?
                    int alt66=2;
                    int LA66_0 = input.LA(1);

                    if ( (LA66_0==135) ) {
                        alt66=1;
                    }
                    switch (alt66) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:522:32: ':' ( name ':' )*
                            {
                            char_literal347=(Token)match(input,135,FOLLOW_135_in_simple_expression_value_access3105); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal347_tree = 
                            (Object)adaptor.create(char_literal347)
                            ;
                            adaptor.addChild(root_0, char_literal347_tree);
                            }

                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:522:36: ( name ':' )*
                            loop65:
                            do {
                                int alt65=2;
                                int LA65_0 = input.LA(1);

                                if ( (LA65_0==ID) ) {
                                    alt65=1;
                                }


                                switch (alt65) {
                            	case 1 :
                            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:522:37: name ':'
                            	    {
                            	    pushFollow(FOLLOW_name_in_simple_expression_value_access3108);
                            	    name348=name();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name348.getTree());

                            	    char_literal349=(Token)match(input,135,FOLLOW_135_in_simple_expression_value_access3110); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    char_literal349_tree = 
                            	    (Object)adaptor.create(char_literal349)
                            	    ;
                            	    adaptor.addChild(root_0, char_literal349_tree);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop65;
                                }
                            } while (true);


                            }
                            break;

                    }


                    char_literal350=(Token)match(input,121,FOLLOW_121_in_simple_expression_value_access3116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal350_tree = 
                    (Object)adaptor.create(char_literal350)
                    ;
                    adaptor.addChild(root_0, char_literal350_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:5: '@protocol' '(' name ')'
                    {
                    string_literal351=(Token)match(input,160,FOLLOW_160_in_simple_expression_value_access3122); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal351);


                    char_literal352=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access3124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal352);


                    pushFollow(FOLLOW_name_in_simple_expression_value_access3126);
                    name353=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name353.getTree());

                    char_literal354=(Token)match(input,121,FOLLOW_121_in_simple_expression_value_access3128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal354);


                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 523:30: -> ^( DIRECTIVE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:523:34: ^( DIRECTIVE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' )
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access3157);
                    simple_expression_value355=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value355.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:84: ( access_wrapper name )*
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( ((LA67_0 >= 131 && LA67_0 <= 132)) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:85: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access3160);
                    	    access_wrapper356=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper356.getTree());

                    	    pushFollow(FOLLOW_name_in_simple_expression_value_access3162);
                    	    name357=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name357.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:107: ( '(' ( classical_method_params_push )? ')' )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:108: '(' ( classical_method_params_push )? ')'
                    {
                    char_literal358=(Token)match(input,119,FOLLOW_119_in_simple_expression_value_access3167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal358_tree = 
                    (Object)adaptor.create(char_literal358)
                    ;
                    adaptor.addChild(root_0, char_literal358_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:112: ( classical_method_params_push )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==CHAR_LITERAL||LA68_0==ID||LA68_0==MULTI_COMMENT_LIT||LA68_0==NUMBER_LITERAL||LA68_0==SINGLE_COMMENT_LIT||LA68_0==STRING_LITERAL||LA68_0==112||LA68_0==117||LA68_0==119||LA68_0==122||LA68_0==125||(LA68_0 >= 128 && LA68_0 <= 129)||LA68_0==148||LA68_0==160||LA68_0==163||LA68_0==170||(LA68_0 >= 172 && LA68_0 <= 173)||(LA68_0 >= 176 && LA68_0 <= 177)||LA68_0==188||LA68_0==201||LA68_0==212) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:112: classical_method_params_push
                            {
                            pushFollow(FOLLOW_classical_method_params_push_in_simple_expression_value_access3169);
                            classical_method_params_push359=classical_method_params_push();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params_push359.getTree());

                            }
                            break;

                    }


                    char_literal360=(Token)match(input,121,FOLLOW_121_in_simple_expression_value_access3172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal360_tree = 
                    (Object)adaptor.create(char_literal360)
                    ;
                    adaptor.addChild(root_0, char_literal360_tree);
                    }

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:5: simple_expression_value2 ( access_wrapper simple_expression_value )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value2_in_simple_expression_value_access3179);
                    simple_expression_value2361=simple_expression_value2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value2361.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:30: ( access_wrapper simple_expression_value )*
                    loop69:
                    do {
                        int alt69=2;
                        alt69 = dfa69.predict(input);
                        switch (alt69) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:525:31: access_wrapper simple_expression_value
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_simple_expression_value_access3182);
                    	    access_wrapper362=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper362.getTree());

                    	    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value_access3184);
                    	    simple_expression_value363=simple_expression_value();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value363.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value_access"


    public static class simple_expression_value_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:528:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name );
    public final ObjcParser.simple_expression_value_return simple_expression_value() throws RecognitionException {
        ObjcParser.simple_expression_value_return retval = new ObjcParser.simple_expression_value_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal364=null;
        Token char_literal366=null;
        Token char_literal368=null;
        Token set369=null;
        Token CHAR_LITERAL373=null;
        Token NUMBER_LITERAL374=null;
        ObjcParser.name_return name365 =null;

        ObjcParser.element_value_return element_value367 =null;

        ObjcParser.name_return name370 =null;

        ObjcParser.string_return string371 =null;

        ObjcParser.string_objc_return string_objc372 =null;

        ObjcParser.bool_return bool375 =null;

        ObjcParser.name_return name376 =null;


        Object char_literal364_tree=null;
        Object char_literal366_tree=null;
        Object char_literal368_tree=null;
        Object set369_tree=null;
        Object CHAR_LITERAL373_tree=null;
        Object NUMBER_LITERAL374_tree=null;
        RewriteRuleTokenStream stream_NUMBER_LITERAL=new RewriteRuleTokenStream(adaptor,"token NUMBER_LITERAL");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_CHAR_LITERAL=new RewriteRuleTokenStream(adaptor,"token CHAR_LITERAL");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_bool=new RewriteRuleSubtreeStream(adaptor,"rule bool");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name )
            int alt72=8;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:23: ( '&' )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==117) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:23: '&'
                            {
                            char_literal364=(Token)match(input,117,FOLLOW_117_in_simple_expression_value3211); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal364);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3214);
                    name365=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name365.getTree());

                    char_literal366=(Token)match(input,173,FOLLOW_173_in_simple_expression_value3216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(char_literal366);


                    pushFollow(FOLLOW_element_value_in_simple_expression_value3218);
                    element_value367=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value367.getTree());

                    char_literal368=(Token)match(input,175,FOLLOW_175_in_simple_expression_value3220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(char_literal368);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 529:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: ( ( '&' | '*' ) name )=> ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set369=(Token)input.LT(1);

                    if ( input.LA(1)==117||input.LA(1)==122 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set369)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_simple_expression_value3254);
                    name370=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name370.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:531:4: string
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_in_simple_expression_value3259);
                    string371=string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string371.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:532:4: string_objc
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_string_objc_in_simple_expression_value3264);
                    string_objc372=string_objc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, string_objc372.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:4: CHAR_LITERAL
                    {
                    CHAR_LITERAL373=(Token)match(input,CHAR_LITERAL,FOLLOW_CHAR_LITERAL_in_simple_expression_value3269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CHAR_LITERAL.add(CHAR_LITERAL373);


                    // AST REWRITE
                    // elements: CHAR_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 533:17: -> ^( CHAR CHAR_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:533:20: ^( CHAR CHAR_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(CHAR, "CHAR")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_CHAR_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:4: NUMBER_LITERAL
                    {
                    NUMBER_LITERAL374=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_simple_expression_value3282); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUMBER_LITERAL.add(NUMBER_LITERAL374);


                    // AST REWRITE
                    // elements: NUMBER_LITERAL
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 534:19: -> ^( NUMBER NUMBER_LITERAL )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:534:22: ^( NUMBER NUMBER_LITERAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(NUMBER, "NUMBER")
                        , root_1);

                        adaptor.addChild(root_1, 
                        stream_NUMBER_LITERAL.nextNode()
                        );

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:4: bool
                    {
                    pushFollow(FOLLOW_bool_in_simple_expression_value3295);
                    bool375=bool();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bool.add(bool375.getTree());

                    // AST REWRITE
                    // elements: bool
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 535:9: -> ^( BOOL bool )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:535:12: ^( BOOL bool )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(BOOL, "BOOL")
                        , root_1);

                        adaptor.addChild(root_1, stream_bool.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 8 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:536:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_simple_expression_value3309);
                    name376=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name376.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value"


    public static class simple_expression_value2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "simple_expression_value2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:539:1: simple_expression_value2 : ( simple_expression_value | method_msg | '(' element_value ')' );
    public final ObjcParser.simple_expression_value2_return simple_expression_value2() throws RecognitionException {
        ObjcParser.simple_expression_value2_return retval = new ObjcParser.simple_expression_value2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal379=null;
        Token char_literal381=null;
        ObjcParser.simple_expression_value_return simple_expression_value377 =null;

        ObjcParser.method_msg_return method_msg378 =null;

        ObjcParser.element_value_return element_value380 =null;


        Object char_literal379_tree=null;
        Object char_literal381_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:540:3: ( simple_expression_value | method_msg | '(' element_value ')' )
            int alt73=3;
            switch ( input.LA(1) ) {
            case CHAR_LITERAL:
            case ID:
            case NUMBER_LITERAL:
            case STRING_LITERAL:
            case 117:
            case 122:
            case 148:
            case 170:
            case 172:
            case 188:
            case 201:
                {
                alt73=1;
                }
                break;
            case 173:
                {
                alt73=2;
                }
                break;
            case 119:
                {
                alt73=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;

            }

            switch (alt73) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:540:5: simple_expression_value
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_simple_expression_value_in_simple_expression_value23322);
                    simple_expression_value377=simple_expression_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_expression_value377.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:541:5: method_msg
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_method_msg_in_simple_expression_value23328);
                    method_msg378=method_msg();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_msg378.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:542:5: '(' element_value ')'
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal379=(Token)match(input,119,FOLLOW_119_in_simple_expression_value23334); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal379_tree = 
                    (Object)adaptor.create(char_literal379)
                    ;
                    adaptor.addChild(root_0, char_literal379_tree);
                    }

                    pushFollow(FOLLOW_element_value_in_simple_expression_value23336);
                    element_value380=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value380.getTree());

                    char_literal381=(Token)match(input,121,FOLLOW_121_in_simple_expression_value23338); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal381_tree = 
                    (Object)adaptor.create(char_literal381)
                    ;
                    adaptor.addChild(root_0, char_literal381_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "simple_expression_value2"


    public static class op2_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:545:1: op2_wrapper : op2 -> ^( OP op2 ) ;
    public final ObjcParser.op2_wrapper_return op2_wrapper() throws RecognitionException {
        ObjcParser.op2_wrapper_return retval = new ObjcParser.op2_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op2_return op2382 =null;


        RewriteRuleSubtreeStream stream_op2=new RewriteRuleSubtreeStream(adaptor,"rule op2");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:3: ( op2 -> ^( OP op2 ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:5: op2
            {
            pushFollow(FOLLOW_op2_in_op2_wrapper3352);
            op2382=op2();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op2.add(op2382.getTree());

            // AST REWRITE
            // elements: op2
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 546:9: -> ^( OP op2 )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:546:12: ^( OP op2 )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op2.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2_wrapper"


    public static class op2_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op2"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:1: op2 : ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) ;
    public final ObjcParser.op2_return op2() throws RecognitionException {
        ObjcParser.op2_return retval = new ObjcParser.op2_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set383=null;

        Object set383_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:549:5: ( ( '|' | '&' | '<<' | '>>' | '+' | '-' | '*' | '&&' | '||' | '<' | '>' | '<=' | '>=' | '==' | '!=' | '^' | '=' | '/' | '%' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set383=(Token)input.LT(1);

            if ( input.LA(1)==113||(input.LA(1) >= 115 && input.LA(1) <= 117)||input.LA(1)==122||input.LA(1)==124||input.LA(1)==128||input.LA(1)==133||(input.LA(1) >= 137 && input.LA(1) <= 138)||(input.LA(1) >= 140 && input.LA(1) <= 145)||input.LA(1)==176||input.LA(1)==208||input.LA(1)==210 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set383)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op2"


    public static class op_assign_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:551:1: op_assign_wrapper : op_assign -> ^( OP op_assign ) ;
    public final ObjcParser.op_assign_wrapper_return op_assign_wrapper() throws RecognitionException {
        ObjcParser.op_assign_wrapper_return retval = new ObjcParser.op_assign_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.op_assign_return op_assign384 =null;


        RewriteRuleSubtreeStream stream_op_assign=new RewriteRuleSubtreeStream(adaptor,"rule op_assign");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:3: ( op_assign -> ^( OP op_assign ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:5: op_assign
            {
            pushFollow(FOLLOW_op_assign_in_op_assign_wrapper3457);
            op_assign384=op_assign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_op_assign.add(op_assign384.getTree());

            // AST REWRITE
            // elements: op_assign
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 552:15: -> ^( OP op_assign )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:552:18: ^( OP op_assign )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OP, "OP")
                , root_1);

                adaptor.addChild(root_1, stream_op_assign.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign_wrapper"


    public static class op_assign_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "op_assign"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:555:1: op_assign : ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) ;
    public final ObjcParser.op_assign_return op_assign() throws RecognitionException {
        ObjcParser.op_assign_return retval = new ObjcParser.op_assign_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set385=null;

        Object set385_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:556:3: ( ( '|=' | '&=' | '+=' | '-=' | '*=' | '=' | '<<=' | '>>=' | '/=' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set385=(Token)input.LT(1);

            if ( input.LA(1)==118||input.LA(1)==123||input.LA(1)==126||input.LA(1)==130||input.LA(1)==134||input.LA(1)==139||input.LA(1)==141||input.LA(1)==146||input.LA(1)==209 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set385)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "op_assign"


    public static class selector_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:559:1: selector_wrapper : selector -> ^( DIRECTIVE selector ) ;
    public final ObjcParser.selector_wrapper_return selector_wrapper() throws RecognitionException {
        ObjcParser.selector_wrapper_return retval = new ObjcParser.selector_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.selector_return selector386 =null;


        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:560:3: ( selector -> ^( DIRECTIVE selector ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:560:5: selector
            {
            pushFollow(FOLLOW_selector_in_selector_wrapper3525);
            selector386=selector();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selector.add(selector386.getTree());

            // AST REWRITE
            // elements: selector
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 560:14: -> ^( DIRECTIVE selector )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:560:17: ^( DIRECTIVE selector )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DIRECTIVE, "DIRECTIVE")
                , root_1);

                adaptor.addChild(root_1, stream_selector.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector_wrapper"


    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "selector"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:563:1: selector : '@selector' ;
    public final ObjcParser.selector_return selector() throws RecognitionException {
        ObjcParser.selector_return retval = new ObjcParser.selector_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal387=null;

        Object string_literal387_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:3: ( '@selector' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:564:5: '@selector'
            {
            root_0 = (Object)adaptor.nil();


            string_literal387=(Token)match(input,163,FOLLOW_163_in_selector3548); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal387_tree = 
            (Object)adaptor.create(string_literal387)
            ;
            adaptor.addChild(root_0, string_literal387_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "selector"


    public static class type_cast_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:567:1: type_cast_wrapper : type_cast_name -> ^( TYPE_CAST type_cast_name ) ;
    public final ObjcParser.type_cast_wrapper_return type_cast_wrapper() throws RecognitionException {
        ObjcParser.type_cast_wrapper_return retval = new ObjcParser.type_cast_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_cast_name_return type_cast_name388 =null;


        RewriteRuleSubtreeStream stream_type_cast_name=new RewriteRuleSubtreeStream(adaptor,"rule type_cast_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:2: ( type_cast_name -> ^( TYPE_CAST type_cast_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:4: type_cast_name
            {
            pushFollow(FOLLOW_type_cast_name_in_type_cast_wrapper3563);
            type_cast_name388=type_cast_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_cast_name.add(type_cast_name388.getTree());

            // AST REWRITE
            // elements: type_cast_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 568:19: -> ^( TYPE_CAST type_cast_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:568:22: ^( TYPE_CAST type_cast_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_CAST, "TYPE_CAST")
                , root_1);

                adaptor.addChild(root_1, stream_type_cast_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_wrapper"


    public static class type_cast_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:571:1: type_cast_name : '(' type_cast_declaration ')' ;
    public final ObjcParser.type_cast_name_return type_cast_name() throws RecognitionException {
        ObjcParser.type_cast_name_return retval = new ObjcParser.type_cast_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal389=null;
        Token char_literal391=null;
        ObjcParser.type_cast_declaration_return type_cast_declaration390 =null;


        Object char_literal389_tree=null;
        Object char_literal391_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:3: ( '(' type_cast_declaration ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:573:5: '(' type_cast_declaration ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal389=(Token)match(input,119,FOLLOW_119_in_type_cast_name3586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal389_tree = 
            (Object)adaptor.create(char_literal389)
            ;
            adaptor.addChild(root_0, char_literal389_tree);
            }

            pushFollow(FOLLOW_type_cast_declaration_in_type_cast_name3588);
            type_cast_declaration390=type_cast_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_declaration390.getTree());

            char_literal391=(Token)match(input,121,FOLLOW_121_in_type_cast_name3590); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal391_tree = 
            (Object)adaptor.create(char_literal391)
            ;
            adaptor.addChild(root_0, char_literal391_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_name"


    public static class type_cast_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_cast_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:576:1: type_cast_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration );
    public final ObjcParser.type_cast_declaration_return type_cast_declaration() throws RecognitionException {
        ObjcParser.type_cast_declaration_return retval = new ObjcParser.type_cast_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_protocol_return type_declaration_protocol392 =null;

        ObjcParser.classical_type_declaration_return classical_type_declaration393 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | classical_type_declaration )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==191) ) {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==137) ) {
                    switch ( input.LA(3) ) {
                    case ID:
                        {
                        int LA74_19 = input.LA(4);

                        if ( (LA74_19==122) ) {
                            alt74=2;
                        }
                        else if ( (LA74_19==143) ) {
                            int LA74_25 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 25, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 74, 19, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 194:
                        {
                        int LA74_20 = input.LA(4);

                        if ( (LA74_20==143) ) {
                            int LA74_26 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 26, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 74, 20, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 191:
                        {
                        int LA74_21 = input.LA(4);

                        if ( (LA74_21==143) ) {
                            int LA74_27 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 27, input);

                                throw nvae;

                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 74, 21, input);

                            throw nvae;

                        }
                        }
                        break;
                    case 195:
                        {
                        switch ( input.LA(4) ) {
                        case 194:
                            {
                            int LA74_28 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 28, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 143:
                            {
                            int LA74_29 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 29, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 195:
                            {
                            int LA74_30 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 30, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 74, 22, input);

                            throw nvae;

                        }

                        }
                        break;
                    case 197:
                        {
                        switch ( input.LA(4) ) {
                        case 194:
                            {
                            int LA74_31 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 31, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 143:
                            {
                            int LA74_32 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 32, input);

                                throw nvae;

                            }
                            }
                            break;
                        case 197:
                            {
                            int LA74_33 = input.LA(5);

                            if ( (synpred18_Objc()) ) {
                                alt74=1;
                            }
                            else if ( (true) ) {
                                alt74=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 74, 33, input);

                                throw nvae;

                            }
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 74, 23, input);

                            throw nvae;

                        }

                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 74, 14, input);

                        throw nvae;

                    }

                }
                else if ( (LA74_1==117||(LA74_1 >= 121 && LA74_1 <= 122)||LA74_1==173) ) {
                    alt74=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 74, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA74_0==ID||LA74_0==119||LA74_0==178||LA74_0==181||LA74_0==186||(LA74_0 >= 194 && LA74_0 <= 195)||LA74_0==197||LA74_0==199||(LA74_0 >= 203 && LA74_0 <= 205)) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;

            }
            switch (alt74) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_cast_declaration3608);
                    type_declaration_protocol392=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol392.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:578:5: classical_type_declaration
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_classical_type_declaration_in_type_cast_declaration3614);
                    classical_type_declaration393=classical_type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_type_declaration393.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_cast_declaration"


    public static class access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:581:1: access : ( '.' | '->' );
    public final ObjcParser.access_return access() throws RecognitionException {
        ObjcParser.access_return retval = new ObjcParser.access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set394=null;

        Object set394_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:582:2: ( '.' | '->' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set394=(Token)input.LT(1);

            if ( (input.LA(1) >= 131 && input.LA(1) <= 132) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set394)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access"


    public static class access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:585:1: access_wrapper : access -> ^( ACCESS access ) ;
    public final ObjcParser.access_wrapper_return access_wrapper() throws RecognitionException {
        ObjcParser.access_wrapper_return retval = new ObjcParser.access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.access_return access395 =null;


        RewriteRuleSubtreeStream stream_access=new RewriteRuleSubtreeStream(adaptor,"rule access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:2: ( access -> ^( ACCESS access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:4: access
            {
            pushFollow(FOLLOW_access_in_access_wrapper3642);
            access395=access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_access.add(access395.getTree());

            // AST REWRITE
            // elements: access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 586:11: -> ^( ACCESS access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:586:13: ^( ACCESS access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ACCESS, "ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "access_wrapper"


    public static class object_access_simple_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:589:1: object_access_simple_wrapper : object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) ;
    public final ObjcParser.object_access_simple_wrapper_return object_access_simple_wrapper() throws RecognitionException {
        ObjcParser.object_access_simple_wrapper_return retval = new ObjcParser.object_access_simple_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_simple_return object_access_simple396 =null;


        RewriteRuleSubtreeStream stream_object_access_simple=new RewriteRuleSubtreeStream(adaptor,"rule object_access_simple");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:3: ( object_access_simple -> ^( OBJECT_ACCESS object_access_simple ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:5: object_access_simple
            {
            pushFollow(FOLLOW_object_access_simple_in_object_access_simple_wrapper3661);
            object_access_simple396=object_access_simple();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access_simple.add(object_access_simple396.getTree());

            // AST REWRITE
            // elements: object_access_simple
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 590:26: -> ^( OBJECT_ACCESS object_access_simple )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:590:29: ^( OBJECT_ACCESS object_access_simple )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access_simple.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple_wrapper"


    public static class object_access_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:593:1: object_access_simple : name ( access_wrapper name )* ;
    public final ObjcParser.object_access_simple_return object_access_simple() throws RecognitionException {
        ObjcParser.object_access_simple_return retval = new ObjcParser.object_access_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.name_return name397 =null;

        ObjcParser.access_wrapper_return access_wrapper398 =null;

        ObjcParser.name_return name399 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:3: ( name ( access_wrapper name )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:5: name ( access_wrapper name )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_name_in_object_access_simple3682);
            name397=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name397.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:10: ( access_wrapper name )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( ((LA75_0 >= 131 && LA75_0 <= 132)) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:594:11: access_wrapper name
            	    {
            	    pushFollow(FOLLOW_access_wrapper_in_object_access_simple3685);
            	    access_wrapper398=access_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper398.getTree());

            	    pushFollow(FOLLOW_name_in_object_access_simple3687);
            	    name399=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name399.getTree());

            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_simple"


    public static class object_access_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:597:1: object_access_wrapper : object_access -> ^( OBJECT_ACCESS object_access ) ;
    public final ObjcParser.object_access_wrapper_return object_access_wrapper() throws RecognitionException {
        ObjcParser.object_access_wrapper_return retval = new ObjcParser.object_access_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.object_access_return object_access400 =null;


        RewriteRuleSubtreeStream stream_object_access=new RewriteRuleSubtreeStream(adaptor,"rule object_access");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:3: ( object_access -> ^( OBJECT_ACCESS object_access ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:5: object_access
            {
            pushFollow(FOLLOW_object_access_in_object_access_wrapper3704);
            object_access400=object_access();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_object_access.add(object_access400.getTree());

            // AST REWRITE
            // elements: object_access
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 598:19: -> ^( OBJECT_ACCESS object_access )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:598:22: ^( OBJECT_ACCESS object_access )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(OBJECT_ACCESS, "OBJECT_ACCESS")
                , root_1);

                adaptor.addChild(root_1, stream_object_access.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access_wrapper"


    public static class object_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "object_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:601:1: object_access : cast_lvalue ;
    public final ObjcParser.object_access_return object_access() throws RecognitionException {
        ObjcParser.object_access_return retval = new ObjcParser.object_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.cast_lvalue_return cast_lvalue401 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:2: ( cast_lvalue )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:602:4: cast_lvalue
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_cast_lvalue_in_object_access3724);
            cast_lvalue401=cast_lvalue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, cast_lvalue401.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "object_access"


    public static class cast_lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "cast_lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:605:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );
    public final ObjcParser.cast_lvalue_return cast_lvalue() throws RecognitionException {
        ObjcParser.cast_lvalue_return retval = new ObjcParser.cast_lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal404=null;
        Token char_literal407=null;
        ObjcParser.type_cast_wrapper_return type_cast_wrapper402 =null;

        ObjcParser.lvalue_access_return lvalue_access403 =null;

        ObjcParser.type_cast_wrapper_return type_cast_wrapper405 =null;

        ObjcParser.lvalue_access_return lvalue_access406 =null;

        ObjcParser.access_wrapper_return access_wrapper408 =null;

        ObjcParser.name_return name409 =null;

        ObjcParser.lvalue_access_return lvalue_access410 =null;


        Object char_literal404_tree=null;
        Object char_literal407_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:3: ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access )
            int alt77=3;
            alt77 = dfa77.predict(input);
            switch (alt77) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:5: ( type_cast_wrapper )=> type_cast_wrapper lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3742);
                    type_cast_wrapper402=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper402.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3744);
                    lvalue_access403=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access403.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:5: ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal404=(Token)match(input,119,FOLLOW_119_in_cast_lvalue3757); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal404_tree = 
                    (Object)adaptor.create(char_literal404)
                    ;
                    adaptor.addChild(root_0, char_literal404_tree);
                    }

                    pushFollow(FOLLOW_type_cast_wrapper_in_cast_lvalue3759);
                    type_cast_wrapper405=type_cast_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_cast_wrapper405.getTree());

                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3761);
                    lvalue_access406=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access406.getTree());

                    char_literal407=(Token)match(input,121,FOLLOW_121_in_cast_lvalue3763); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal407_tree = 
                    (Object)adaptor.create(char_literal407)
                    ;
                    adaptor.addChild(root_0, char_literal407_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:71: ( access_wrapper name )+
                    int cnt76=0;
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( ((LA76_0 >= 131 && LA76_0 <= 132)) ) {
                            alt76=1;
                        }


                        switch (alt76) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:72: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_cast_lvalue3766);
                    	    access_wrapper408=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper408.getTree());

                    	    pushFollow(FOLLOW_name_in_cast_lvalue3768);
                    	    name409=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name409.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt76 >= 1 ) break loop76;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(76, input);
                                throw eee;
                        }
                        cnt76++;
                    } while (true);


                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:608:5: lvalue_access
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_access_in_cast_lvalue3776);
                    lvalue_access410=lvalue_access();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue_access410.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "cast_lvalue"


    public static class lvalue_access_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue_access"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:611:1: lvalue_access : ( lvalue ( access_wrapper name )* | '(' lvalue ')' ( access_wrapper name )* );
    public final ObjcParser.lvalue_access_return lvalue_access() throws RecognitionException {
        ObjcParser.lvalue_access_return retval = new ObjcParser.lvalue_access_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal414=null;
        Token char_literal416=null;
        ObjcParser.lvalue_return lvalue411 =null;

        ObjcParser.access_wrapper_return access_wrapper412 =null;

        ObjcParser.name_return name413 =null;

        ObjcParser.lvalue_return lvalue415 =null;

        ObjcParser.access_wrapper_return access_wrapper417 =null;

        ObjcParser.name_return name418 =null;


        Object char_literal414_tree=null;
        Object char_literal416_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:3: ( lvalue ( access_wrapper name )* | '(' lvalue ')' ( access_wrapper name )* )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==ID||LA80_0==117||LA80_0==122) ) {
                alt80=1;
            }
            else if ( (LA80_0==119) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;

            }
            switch (alt80) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:5: lvalue ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_lvalue_in_lvalue_access3789);
                    lvalue411=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue411.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:12: ( access_wrapper name )*
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( ((LA78_0 >= 131 && LA78_0 <= 132)) ) {
                            alt78=1;
                        }


                        switch (alt78) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:612:13: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3792);
                    	    access_wrapper412=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper412.getTree());

                    	    pushFollow(FOLLOW_name_in_lvalue_access3794);
                    	    name413=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name413.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop78;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:5: '(' lvalue ')' ( access_wrapper name )*
                    {
                    root_0 = (Object)adaptor.nil();


                    char_literal414=(Token)match(input,119,FOLLOW_119_in_lvalue_access3802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal414_tree = 
                    (Object)adaptor.create(char_literal414)
                    ;
                    adaptor.addChild(root_0, char_literal414_tree);
                    }

                    pushFollow(FOLLOW_lvalue_in_lvalue_access3804);
                    lvalue415=lvalue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lvalue415.getTree());

                    char_literal416=(Token)match(input,121,FOLLOW_121_in_lvalue_access3806); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal416_tree = 
                    (Object)adaptor.create(char_literal416)
                    ;
                    adaptor.addChild(root_0, char_literal416_tree);
                    }

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:20: ( access_wrapper name )*
                    loop79:
                    do {
                        int alt79=2;
                        int LA79_0 = input.LA(1);

                        if ( ((LA79_0 >= 131 && LA79_0 <= 132)) ) {
                            alt79=1;
                        }


                        switch (alt79) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:613:21: access_wrapper name
                    	    {
                    	    pushFollow(FOLLOW_access_wrapper_in_lvalue_access3809);
                    	    access_wrapper417=access_wrapper();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, access_wrapper417.getTree());

                    	    pushFollow(FOLLOW_name_in_lvalue_access3811);
                    	    name418=name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name418.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop79;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue_access"


    public static class lvalue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "lvalue"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:616:1: lvalue : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name );
    public final ObjcParser.lvalue_return lvalue() throws RecognitionException {
        ObjcParser.lvalue_return retval = new ObjcParser.lvalue_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal419=null;
        Token char_literal421=null;
        Token char_literal423=null;
        Token set424=null;
        ObjcParser.name_return name420 =null;

        ObjcParser.element_value_return element_value422 =null;

        ObjcParser.name_return name425 =null;

        ObjcParser.name_return name426 =null;


        Object char_literal419_tree=null;
        Object char_literal421_tree=null;
        Object char_literal423_tree=null;
        Object set424_tree=null;
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:3: ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( '&' | '*' ) name | name )
            int alt82=3;
            switch ( input.LA(1) ) {
            case 117:
                {
                int LA82_1 = input.LA(2);

                if ( (LA82_1==ID) ) {
                    int LA82_4 = input.LA(3);

                    if ( (LA82_4==173) && (synpred21_Objc())) {
                        alt82=1;
                    }
                    else if ( (LA82_4==EOF||LA82_4==118||LA82_4==121||LA82_4==123||(LA82_4 >= 125 && LA82_4 <= 126)||(LA82_4 >= 129 && LA82_4 <= 132)||LA82_4==134||LA82_4==139||LA82_4==141||LA82_4==146||LA82_4==209) ) {
                        alt82=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 4, input);

                        throw nvae;

                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;

                }
                }
                break;
            case ID:
                {
                int LA82_2 = input.LA(2);

                if ( (LA82_2==173) && (synpred21_Objc())) {
                    alt82=1;
                }
                else if ( (LA82_2==EOF||LA82_2==118||LA82_2==121||LA82_2==123||(LA82_2 >= 125 && LA82_2 <= 126)||(LA82_2 >= 129 && LA82_2 <= 132)||LA82_2==134||LA82_2==139||LA82_2==141||LA82_2==146||LA82_2==209) ) {
                    alt82=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 2, input);

                    throw nvae;

                }
                }
                break;
            case 122:
                {
                alt82=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;

            }

            switch (alt82) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:5: ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']'
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:23: ( '&' )?
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( (LA81_0==117) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:23: '&'
                            {
                            char_literal419=(Token)match(input,117,FOLLOW_117_in_lvalue3838); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal419);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_lvalue3841);
                    name420=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name420.getTree());

                    char_literal421=(Token)match(input,173,FOLLOW_173_in_lvalue3843); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(char_literal421);


                    pushFollow(FOLLOW_element_value_in_lvalue3845);
                    element_value422=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value422.getTree());

                    char_literal423=(Token)match(input,175,FOLLOW_175_in_lvalue3847); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(char_literal423);


                    // AST REWRITE
                    // elements: element_value, name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 617:55: -> ^( ARRAY_VALUE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:58: ^( ARRAY_VALUE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ARRAY_VALUE, "ARRAY_VALUE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:618:5: ( '&' | '*' ) name
                    {
                    root_0 = (Object)adaptor.nil();


                    set424=(Token)input.LT(1);

                    if ( input.LA(1)==117||input.LA(1)==122 ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set424)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    pushFollow(FOLLOW_name_in_lvalue3869);
                    name425=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name425.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:619:5: name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_name_in_lvalue3875);
                    name426=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name426.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "lvalue"


    public static class break_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "break_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:623:1: break_stmt : 'break' -> ^( BREAK_STMT ) ;
    public final ObjcParser.break_stmt_return break_stmt() throws RecognitionException {
        ObjcParser.break_stmt_return retval = new ObjcParser.break_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal427=null;

        Object string_literal427_tree=null;
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:3: ( 'break' -> ^( BREAK_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:5: 'break'
            {
            string_literal427=(Token)match(input,179,FOLLOW_179_in_break_stmt3891); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_179.add(string_literal427);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 624:13: -> ^( BREAK_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:624:16: ^( BREAK_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(BREAK_STMT, "BREAK_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "break_stmt"


    public static class continue_stmt_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "continue_stmt"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:627:1: continue_stmt : 'continue' -> ^( CONTINUE_STMT ) ;
    public final ObjcParser.continue_stmt_return continue_stmt() throws RecognitionException {
        ObjcParser.continue_stmt_return retval = new ObjcParser.continue_stmt_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal428=null;

        Object string_literal428_tree=null;
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:3: ( 'continue' -> ^( CONTINUE_STMT ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:5: 'continue'
            {
            string_literal428=(Token)match(input,182,FOLLOW_182_in_continue_stmt3912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_182.add(string_literal428);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:16: -> ^( CONTINUE_STMT )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:628:18: ^( CONTINUE_STMT )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CONTINUE_STMT, "CONTINUE_STMT")
                , root_1);

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"


    public static class extern_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:634:1: extern : ( 'extern' | 'MH_EXPORT' );
    public final ObjcParser.extern_return extern() throws RecognitionException {
        ObjcParser.extern_return retval = new ObjcParser.extern_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set429=null;

        Object set429_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:635:5: ( 'extern' | 'MH_EXPORT' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set429=(Token)input.LT(1);

            if ( input.LA(1)==169||input.LA(1)==187 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set429)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern"


    public static class extern_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:638:1: extern_declaration_wrapper : extern_declaration -> ^( EXTERN extern_declaration ) ;
    public final ObjcParser.extern_declaration_wrapper_return extern_declaration_wrapper() throws RecognitionException {
        ObjcParser.extern_declaration_wrapper_return retval = new ObjcParser.extern_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_declaration_return extern_declaration430 =null;


        RewriteRuleSubtreeStream stream_extern_declaration=new RewriteRuleSubtreeStream(adaptor,"rule extern_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:639:3: ( extern_declaration -> ^( EXTERN extern_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:639:5: extern_declaration
            {
            pushFollow(FOLLOW_extern_declaration_in_extern_declaration_wrapper3963);
            extern_declaration430=extern_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_extern_declaration.add(extern_declaration430.getTree());

            // AST REWRITE
            // elements: extern_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 639:24: -> ^( EXTERN extern_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:639:27: ^( EXTERN extern_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(EXTERN, "EXTERN")
                , root_1);

                adaptor.addChild(root_1, stream_extern_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration_wrapper"


    public static class extern_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "extern_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:641:1: extern_declaration : extern field_declaration ;
    public final ObjcParser.extern_declaration_return extern_declaration() throws RecognitionException {
        ObjcParser.extern_declaration_return retval = new ObjcParser.extern_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.extern_return extern431 =null;

        ObjcParser.field_declaration_return field_declaration432 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:642:3: ( extern field_declaration )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:642:5: extern field_declaration
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_extern_in_extern_declaration3984);
            extern431=extern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, extern431.getTree());

            pushFollow(FOLLOW_field_declaration_in_extern_declaration3986);
            field_declaration432=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration432.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "extern_declaration"


    public static class optional_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "optional_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:644:1: optional_prefix : ( '@optional' | '@required' );
    public final ObjcParser.optional_prefix_return optional_prefix() throws RecognitionException {
        ObjcParser.optional_prefix_return retval = new ObjcParser.optional_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set433=null;

        Object set433_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:645:3: ( '@optional' | '@required' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set433=(Token)input.LT(1);

            if ( input.LA(1)==156||input.LA(1)==162 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set433)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "optional_prefix"


    public static class declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:647:1: declarations : ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments );
    public final ObjcParser.declarations_return declarations() throws RecognitionException {
        ObjcParser.declarations_return retval = new ObjcParser.declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.optional_prefix_return optional_prefix434 =null;

        ObjcParser.method_declaration_return method_declaration435 =null;

        ObjcParser.property_prefix_return property_prefix436 =null;

        ObjcParser.optional_prefix_return optional_prefix437 =null;

        ObjcParser.field_declaration_return field_declaration438 =null;

        ObjcParser.comments_return comments439 =null;


        RewriteRuleSubtreeStream stream_optional_prefix=new RewriteRuleSubtreeStream(adaptor,"rule optional_prefix");
        RewriteRuleSubtreeStream stream_property_prefix=new RewriteRuleSubtreeStream(adaptor,"rule property_prefix");
        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        RewriteRuleSubtreeStream stream_method_declaration=new RewriteRuleSubtreeStream(adaptor,"rule method_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:3: ( ( optional_prefix )? method_declaration -> ^( METHOD method_declaration ) | property_prefix ( optional_prefix )? field_declaration -> ^( PROPERTY property_prefix field_declaration ) | comments )
            int alt85=3;
            switch ( input.LA(1) ) {
            case 124:
            case 128:
            case 156:
            case 162:
                {
                alt85=1;
                }
                break;
            case 158:
                {
                alt85=2;
                }
                break;
            case MULTI_COMMENT_LIT:
            case SINGLE_COMMENT_LIT:
                {
                alt85=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 85, 0, input);

                throw nvae;

            }

            switch (alt85) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:5: ( optional_prefix )? method_declaration
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:5: ( optional_prefix )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==156||LA83_0==162) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:5: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations4012);
                            optional_prefix434=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix434.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_method_declaration_in_declarations4015);
                    method_declaration435=method_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_method_declaration.add(method_declaration435.getTree());

                    // AST REWRITE
                    // elements: method_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 648:41: -> ^( METHOD method_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:648:44: ^( METHOD method_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(METHOD, "METHOD")
                        , root_1);

                        adaptor.addChild(root_1, stream_method_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:5: property_prefix ( optional_prefix )? field_declaration
                    {
                    pushFollow(FOLLOW_property_prefix_in_declarations4029);
                    property_prefix436=property_prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_property_prefix.add(property_prefix436.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:21: ( optional_prefix )?
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==156||LA84_0==162) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:21: optional_prefix
                            {
                            pushFollow(FOLLOW_optional_prefix_in_declarations4031);
                            optional_prefix437=optional_prefix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_optional_prefix.add(optional_prefix437.getTree());

                            }
                            break;

                    }


                    pushFollow(FOLLOW_field_declaration_in_declarations4034);
                    field_declaration438=field_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration438.getTree());

                    // AST REWRITE
                    // elements: property_prefix, field_declaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 649:56: -> ^( PROPERTY property_prefix field_declaration )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:649:59: ^( PROPERTY property_prefix field_declaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(PROPERTY, "PROPERTY")
                        , root_1);

                        adaptor.addChild(root_1, stream_property_prefix.nextTree());

                        adaptor.addChild(root_1, stream_field_declaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:650:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_declarations4050);
                    comments439=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments439.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "declarations"


    public static class field_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:653:1: field_declaration_wrapper : field_declaration -> ^( FIELD field_declaration ) ;
    public final ObjcParser.field_declaration_wrapper_return field_declaration_wrapper() throws RecognitionException {
        ObjcParser.field_declaration_wrapper_return retval = new ObjcParser.field_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration440 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:3: ( field_declaration -> ^( FIELD field_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:5: field_declaration
            {
            pushFollow(FOLLOW_field_declaration_in_field_declaration_wrapper4065);
            field_declaration440=field_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration440.getTree());

            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 654:23: -> ^( FIELD field_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:654:26: ^( FIELD field_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_field_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_wrapper"


    public static class ns_inline_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "ns_inline"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:656:1: ns_inline : 'NS_INLINE' ;
    public final ObjcParser.ns_inline_return ns_inline() throws RecognitionException {
        ObjcParser.ns_inline_return retval = new ObjcParser.ns_inline_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal441=null;

        Object string_literal441_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:3: ( 'NS_INLINE' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:657:5: 'NS_INLINE'
            {
            root_0 = (Object)adaptor.nil();


            string_literal441=(Token)match(input,171,FOLLOW_171_in_ns_inline4087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal441_tree = 
            (Object)adaptor.create(string_literal441)
            ;
            adaptor.addChild(root_0, string_literal441_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "ns_inline"


    public static class property_prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "property_prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:659:1: property_prefix : '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' ;
    public final ObjcParser.property_prefix_return property_prefix() throws RecognitionException {
        ObjcParser.property_prefix_return retval = new ObjcParser.property_prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal442=null;
        Token char_literal443=null;
        Token char_literal445=null;
        Token char_literal447=null;
        Token char_literal449=null;
        Token char_literal451=null;
        Token char_literal452=null;
        ObjcParser.name_return name444 =null;

        ObjcParser.name_return name446 =null;

        ObjcParser.name_return name448 =null;

        ObjcParser.name_return name450 =null;


        Object string_literal442_tree=null;
        Object char_literal443_tree=null;
        Object char_literal445_tree=null;
        Object char_literal447_tree=null;
        Object char_literal449_tree=null;
        Object char_literal451_tree=null;
        Object char_literal452_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:3: ( '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:5: '@property' '(' name ( '=' name )? ( ',' name ( '=' name ( ':' )? )? )* ')'
            {
            root_0 = (Object)adaptor.nil();


            string_literal442=(Token)match(input,158,FOLLOW_158_in_property_prefix4099); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal442_tree = 
            (Object)adaptor.create(string_literal442)
            ;
            adaptor.addChild(root_0, string_literal442_tree);
            }

            char_literal443=(Token)match(input,119,FOLLOW_119_in_property_prefix4101); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal443_tree = 
            (Object)adaptor.create(char_literal443)
            ;
            adaptor.addChild(root_0, char_literal443_tree);
            }

            pushFollow(FOLLOW_name_in_property_prefix4103);
            name444=name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name444.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:26: ( '=' name )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==141) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:27: '=' name
                    {
                    char_literal445=(Token)match(input,141,FOLLOW_141_in_property_prefix4106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal445_tree = 
                    (Object)adaptor.create(char_literal445)
                    ;
                    adaptor.addChild(root_0, char_literal445_tree);
                    }

                    pushFollow(FOLLOW_name_in_property_prefix4108);
                    name446=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name446.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:38: ( ',' name ( '=' name ( ':' )? )? )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==127) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:39: ',' name ( '=' name ( ':' )? )?
            	    {
            	    char_literal447=(Token)match(input,127,FOLLOW_127_in_property_prefix4113); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal447_tree = 
            	    (Object)adaptor.create(char_literal447)
            	    ;
            	    adaptor.addChild(root_0, char_literal447_tree);
            	    }

            	    pushFollow(FOLLOW_name_in_property_prefix4115);
            	    name448=name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, name448.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:48: ( '=' name ( ':' )? )?
            	    int alt88=2;
            	    int LA88_0 = input.LA(1);

            	    if ( (LA88_0==141) ) {
            	        alt88=1;
            	    }
            	    switch (alt88) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:49: '=' name ( ':' )?
            	            {
            	            char_literal449=(Token)match(input,141,FOLLOW_141_in_property_prefix4118); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal449_tree = 
            	            (Object)adaptor.create(char_literal449)
            	            ;
            	            adaptor.addChild(root_0, char_literal449_tree);
            	            }

            	            pushFollow(FOLLOW_name_in_property_prefix4120);
            	            name450=name();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, name450.getTree());

            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:58: ( ':' )?
            	            int alt87=2;
            	            int LA87_0 = input.LA(1);

            	            if ( (LA87_0==135) ) {
            	                alt87=1;
            	            }
            	            switch (alt87) {
            	                case 1 :
            	                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:660:58: ':'
            	                    {
            	                    char_literal451=(Token)match(input,135,FOLLOW_135_in_property_prefix4122); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    char_literal451_tree = 
            	                    (Object)adaptor.create(char_literal451)
            	                    ;
            	                    adaptor.addChild(root_0, char_literal451_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            char_literal452=(Token)match(input,121,FOLLOW_121_in_property_prefix4129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal452_tree = 
            (Object)adaptor.create(char_literal452)
            ;
            adaptor.addChild(root_0, char_literal452_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "property_prefix"


    public static class interface_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:670:1: interface_declaration_wrapper : interface_declaration -> ^( INTERFACE interface_declaration ) ;
    public final ObjcParser.interface_declaration_wrapper_return interface_declaration_wrapper() throws RecognitionException {
        ObjcParser.interface_declaration_wrapper_return retval = new ObjcParser.interface_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.interface_declaration_return interface_declaration453 =null;


        RewriteRuleSubtreeStream stream_interface_declaration=new RewriteRuleSubtreeStream(adaptor,"rule interface_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:3: ( interface_declaration -> ^( INTERFACE interface_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:5: interface_declaration
            {
            pushFollow(FOLLOW_interface_declaration_in_interface_declaration_wrapper4142);
            interface_declaration453=interface_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interface_declaration.add(interface_declaration453.getTree());

            // AST REWRITE
            // elements: interface_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:27: -> ^( INTERFACE interface_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:671:30: ^( INTERFACE interface_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE, "INTERFACE")
                , root_1);

                adaptor.addChild(root_1, stream_interface_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration_wrapper"


    public static class protocol_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:673:1: protocol_declaration_wrapper : protocol_declaration -> ^( PROTOCOL protocol_declaration ) ;
    public final ObjcParser.protocol_declaration_wrapper_return protocol_declaration_wrapper() throws RecognitionException {
        ObjcParser.protocol_declaration_wrapper_return retval = new ObjcParser.protocol_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.protocol_declaration_return protocol_declaration454 =null;


        RewriteRuleSubtreeStream stream_protocol_declaration=new RewriteRuleSubtreeStream(adaptor,"rule protocol_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:3: ( protocol_declaration -> ^( PROTOCOL protocol_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:5: protocol_declaration
            {
            pushFollow(FOLLOW_protocol_declaration_in_protocol_declaration_wrapper4162);
            protocol_declaration454=protocol_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_protocol_declaration.add(protocol_declaration454.getTree());

            // AST REWRITE
            // elements: protocol_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 674:26: -> ^( PROTOCOL protocol_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:674:29: ^( PROTOCOL protocol_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL, "PROTOCOL")
                , root_1);

                adaptor.addChild(root_1, stream_protocol_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration_wrapper"


    public static class typedef_declaration_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:676:1: typedef_declaration_wrapper : 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) ;
    public final ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper() throws RecognitionException {
        ObjcParser.typedef_declaration_wrapper_return retval = new ObjcParser.typedef_declaration_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal455=null;
        ObjcParser.typedef_declaration_return typedef_declaration456 =null;


        Object string_literal455_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleSubtreeStream stream_typedef_declaration=new RewriteRuleSubtreeStream(adaptor,"rule typedef_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:3: ( 'typedef' typedef_declaration -> ^( TYPEDEF typedef_declaration ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:5: 'typedef' typedef_declaration
            {
            string_literal455=(Token)match(input,202,FOLLOW_202_in_typedef_declaration_wrapper4180); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_202.add(string_literal455);


            pushFollow(FOLLOW_typedef_declaration_in_typedef_declaration_wrapper4182);
            typedef_declaration456=typedef_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_declaration.add(typedef_declaration456.getTree());

            // AST REWRITE
            // elements: typedef_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 677:35: -> ^( TYPEDEF typedef_declaration )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:677:38: ^( TYPEDEF typedef_declaration )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF, "TYPEDEF")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_declaration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration_wrapper"


    public static class type_declaration_struct_enum_union_anonymous_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_enum_union_anonymous"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:680:1: type_declaration_struct_enum_union_anonymous : ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full );
    public final ObjcParser.type_declaration_struct_enum_union_anonymous_return type_declaration_struct_enum_union_anonymous() throws RecognitionException {
        ObjcParser.type_declaration_struct_enum_union_anonymous_return retval = new ObjcParser.type_declaration_struct_enum_union_anonymous_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full457 =null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full458 =null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full459 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:681:3: ( type_declaration_struct_full | type_declaration_enum_full | type_declaration_union_full )
            int alt90=3;
            switch ( input.LA(1) ) {
            case 199:
                {
                alt90=1;
                }
                break;
            case 186:
                {
                alt90=2;
                }
                break;
            case 203:
                {
                alt90=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);

                throw nvae;

            }

            switch (alt90) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:681:5: type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4203);
                    type_declaration_struct_full457=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full457.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:682:5: type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4209);
                    type_declaration_enum_full458=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full458.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:683:5: type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4215);
                    type_declaration_union_full459=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full459.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_enum_union_anonymous"


    public static class typedef_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:686:1: typedef_declaration : typedef_internal typedef_name ( ',' typedef_name )* ';' ;
    public final ObjcParser.typedef_declaration_return typedef_declaration() throws RecognitionException {
        ObjcParser.typedef_declaration_return retval = new ObjcParser.typedef_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal462=null;
        Token char_literal464=null;
        ObjcParser.typedef_internal_return typedef_internal460 =null;

        ObjcParser.typedef_name_return typedef_name461 =null;

        ObjcParser.typedef_name_return typedef_name463 =null;


        Object char_literal462_tree=null;
        Object char_literal464_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:3: ( typedef_internal typedef_name ( ',' typedef_name )* ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:5: typedef_internal typedef_name ( ',' typedef_name )* ';'
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_typedef_internal_in_typedef_declaration4230);
            typedef_internal460=typedef_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_internal460.getTree());

            pushFollow(FOLLOW_typedef_name_in_typedef_declaration4232);
            typedef_name461=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name461.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:35: ( ',' typedef_name )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==127) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:687:36: ',' typedef_name
            	    {
            	    char_literal462=(Token)match(input,127,FOLLOW_127_in_typedef_declaration4235); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal462_tree = 
            	    (Object)adaptor.create(char_literal462)
            	    ;
            	    adaptor.addChild(root_0, char_literal462_tree);
            	    }

            	    pushFollow(FOLLOW_typedef_name_in_typedef_declaration4237);
            	    typedef_name463=typedef_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_name463.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            char_literal464=(Token)match(input,136,FOLLOW_136_in_typedef_declaration4241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal464_tree = 
            (Object)adaptor.create(char_literal464)
            ;
            adaptor.addChild(root_0, char_literal464_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_declaration"


    public static class func_pointer_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:689:1: func_pointer_predicate : '(' '*' type_declaration_plane ')' ;
    public final ObjcParser.func_pointer_predicate_return func_pointer_predicate() throws RecognitionException {
        ObjcParser.func_pointer_predicate_return retval = new ObjcParser.func_pointer_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal465=null;
        Token char_literal466=null;
        Token char_literal468=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane467 =null;


        Object char_literal465_tree=null;
        Object char_literal466_tree=null;
        Object char_literal468_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:3: ( '(' '*' type_declaration_plane ')' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:690:5: '(' '*' type_declaration_plane ')'
            {
            root_0 = (Object)adaptor.nil();


            char_literal465=(Token)match(input,119,FOLLOW_119_in_func_pointer_predicate4253); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal465_tree = 
            (Object)adaptor.create(char_literal465)
            ;
            adaptor.addChild(root_0, char_literal465_tree);
            }

            char_literal466=(Token)match(input,122,FOLLOW_122_in_func_pointer_predicate4255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal466_tree = 
            (Object)adaptor.create(char_literal466)
            ;
            adaptor.addChild(root_0, char_literal466_tree);
            }

            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer_predicate4257);
            type_declaration_plane467=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane467.getTree());

            char_literal468=(Token)match(input,121,FOLLOW_121_in_func_pointer_predicate4259); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal468_tree = 
            (Object)adaptor.create(char_literal468)
            ;
            adaptor.addChild(root_0, char_literal468_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer_predicate"


    public static class func_pointer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "func_pointer"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:693:1: func_pointer : '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) ;
    public final ObjcParser.func_pointer_return func_pointer() throws RecognitionException {
        ObjcParser.func_pointer_return retval = new ObjcParser.func_pointer_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal469=null;
        Token char_literal470=null;
        Token char_literal472=null;
        Token char_literal473=null;
        Token char_literal475=null;
        Token char_literal477=null;
        ObjcParser.type_declaration_plane_return type_declaration_plane471 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane474 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane476 =null;


        Object char_literal469_tree=null;
        Object char_literal470_tree=null;
        Object char_literal472_tree=null;
        Object char_literal473_tree=null;
        Object char_literal475_tree=null;
        Object char_literal477_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_type_declaration_plane=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_plane");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:3: ( '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')' -> ^( FUNC_POINTER ( type_declaration_plane )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:5: '(' '*' type_declaration_plane ')' '(' ( type_declaration_plane ( ',' type_declaration_plane )* )? ')'
            {
            char_literal469=(Token)match(input,119,FOLLOW_119_in_func_pointer4274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal469);


            char_literal470=(Token)match(input,122,FOLLOW_122_in_func_pointer4276); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(char_literal470);


            pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4278);
            type_declaration_plane471=type_declaration_plane();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane471.getTree());

            char_literal472=(Token)match(input,121,FOLLOW_121_in_func_pointer4280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal472);


            char_literal473=(Token)match(input,119,FOLLOW_119_in_func_pointer4282); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal473);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:44: ( type_declaration_plane ( ',' type_declaration_plane )* )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==ID||LA93_0==178||LA93_0==181||LA93_0==191||(LA93_0 >= 194 && LA93_0 <= 195)||LA93_0==197||(LA93_0 >= 204 && LA93_0 <= 205)) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:45: type_declaration_plane ( ',' type_declaration_plane )*
                    {
                    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4285);
                    type_declaration_plane474=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane474.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:68: ( ',' type_declaration_plane )*
                    loop92:
                    do {
                        int alt92=2;
                        int LA92_0 = input.LA(1);

                        if ( (LA92_0==127) ) {
                            alt92=1;
                        }


                        switch (alt92) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:69: ',' type_declaration_plane
                    	    {
                    	    char_literal475=(Token)match(input,127,FOLLOW_127_in_func_pointer4288); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_127.add(char_literal475);


                    	    pushFollow(FOLLOW_type_declaration_plane_in_func_pointer4290);
                    	    type_declaration_plane476=type_declaration_plane();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_type_declaration_plane.add(type_declaration_plane476.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop92;
                        }
                    } while (true);


                    }
                    break;

            }


            char_literal477=(Token)match(input,121,FOLLOW_121_in_func_pointer4296); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal477);


            // AST REWRITE
            // elements: type_declaration_plane
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 694:104: -> ^( FUNC_POINTER ( type_declaration_plane )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:694:107: ^( FUNC_POINTER ( type_declaration_plane )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FUNC_POINTER, "FUNC_POINTER")
                , root_1);

                if ( !(stream_type_declaration_plane.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_declaration_plane.hasNext() ) {
                    adaptor.addChild(root_1, stream_type_declaration_plane.nextTree());

                }
                stream_type_declaration_plane.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "func_pointer"


    public static class typedef_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:697:1: typedef_internal : ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane );
    public final ObjcParser.typedef_internal_return typedef_internal() throws RecognitionException {
        ObjcParser.typedef_internal_return retval = new ObjcParser.typedef_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.func_pointer_return func_pointer478 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct479 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum480 =null;

        ObjcParser.type_declaration_union_return type_declaration_union481 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane482 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:3: ( ( func_pointer_predicate )=> func_pointer | type_declaration_struct | type_declaration_enum | type_declaration_union | type_declaration_plane )
            int alt94=5;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==119) && (synpred22_Objc())) {
                alt94=1;
            }
            else if ( (LA94_0==199) ) {
                alt94=2;
            }
            else if ( (LA94_0==186) ) {
                alt94=3;
            }
            else if ( (LA94_0==203) ) {
                alt94=4;
            }
            else if ( (LA94_0==ID||LA94_0==178||LA94_0==181||LA94_0==191||(LA94_0 >= 194 && LA94_0 <= 195)||LA94_0==197||(LA94_0 >= 204 && LA94_0 <= 205)) ) {
                alt94=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;

            }
            switch (alt94) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_typedef_internal4325);
                    func_pointer478=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer478.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:699:5: type_declaration_struct
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_typedef_internal4331);
                    type_declaration_struct479=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct479.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:700:5: type_declaration_enum
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_typedef_internal4337);
                    type_declaration_enum480=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum480.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:701:5: type_declaration_union
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_typedef_internal4343);
                    type_declaration_union481=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union481.getTree());

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:702:5: type_declaration_plane
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_typedef_internal4349);
                    type_declaration_plane482=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane482.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_internal"


    public static class typedef_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "typedef_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:705:1: typedef_name : ID -> ^( TYPEDEF_NAME ID ) ;
    public final ObjcParser.typedef_name_return typedef_name() throws RecognitionException {
        ObjcParser.typedef_name_return retval = new ObjcParser.typedef_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID483=null;

        Object ID483_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:3: ( ID -> ^( TYPEDEF_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:5: ID
            {
            ID483=(Token)match(input,ID,FOLLOW_ID_in_typedef_name4364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID483);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 706:8: -> ^( TYPEDEF_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:706:11: ^( TYPEDEF_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPEDEF_NAME, "TYPEDEF_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "typedef_name"


    public static class forward_class_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "forward_class_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:708:1: forward_class_declaration : ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) );
    public final ObjcParser.forward_class_declaration_return forward_class_declaration() throws RecognitionException {
        ObjcParser.forward_class_declaration_return retval = new ObjcParser.forward_class_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal484=null;
        Token char_literal486=null;
        Token string_literal487=null;
        Token char_literal489=null;
        Token char_literal491=null;
        Token char_literal493=null;
        Token char_literal495=null;
        ObjcParser.class_name_return class_name485 =null;

        ObjcParser.protocol_name_return protocol_name488 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple490 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple492 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple494 =null;


        Object string_literal484_tree=null;
        Object char_literal486_tree=null;
        Object string_literal487_tree=null;
        Object char_literal489_tree=null;
        Object char_literal491_tree=null;
        Object char_literal493_tree=null;
        Object char_literal495_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_150=new RewriteRuleTokenStream(adaptor,"token 150");
        RewriteRuleSubtreeStream stream_type_declaration_union_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_union_simple");
        RewriteRuleSubtreeStream stream_type_declaration_enum_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_enum_simple");
        RewriteRuleSubtreeStream stream_type_declaration_struct_simple=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration_struct_simple");
        RewriteRuleSubtreeStream stream_class_name=new RewriteRuleSubtreeStream(adaptor,"rule class_name");
        RewriteRuleSubtreeStream stream_protocol_name=new RewriteRuleSubtreeStream(adaptor,"rule protocol_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:3: ( '@class' class_name ';' -> ^( FORWARD_DECLARATION class_name ) | '@protocol' protocol_name ';' -> ^( FORWARD_DECLARATION protocol_name ) | type_declaration_struct_simple ';' -> ^( FORWARD_DECLARATION type_declaration_struct_simple ) | type_declaration_union_simple ';' -> ^( FORWARD_DECLARATION type_declaration_union_simple ) | type_declaration_enum_simple ';' -> ^( FORWARD_DECLARATION type_declaration_enum_simple ) )
            int alt95=5;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt95=1;
                }
                break;
            case 160:
                {
                alt95=2;
                }
                break;
            case 199:
                {
                alt95=3;
                }
                break;
            case 203:
                {
                alt95=4;
                }
                break;
            case 186:
                {
                alt95=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;

            }

            switch (alt95) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:5: '@class' class_name ';'
                    {
                    string_literal484=(Token)match(input,150,FOLLOW_150_in_forward_class_declaration4382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_150.add(string_literal484);


                    pushFollow(FOLLOW_class_name_in_forward_class_declaration4384);
                    class_name485=class_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_name.add(class_name485.getTree());

                    char_literal486=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal486);


                    // AST REWRITE
                    // elements: class_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 709:29: -> ^( FORWARD_DECLARATION class_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:709:31: ^( FORWARD_DECLARATION class_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_class_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:5: '@protocol' protocol_name ';'
                    {
                    string_literal487=(Token)match(input,160,FOLLOW_160_in_forward_class_declaration4399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal487);


                    pushFollow(FOLLOW_protocol_name_in_forward_class_declaration4401);
                    protocol_name488=protocol_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_protocol_name.add(protocol_name488.getTree());

                    char_literal489=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal489);


                    // AST REWRITE
                    // elements: protocol_name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 710:35: -> ^( FORWARD_DECLARATION protocol_name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:710:37: ^( FORWARD_DECLARATION protocol_name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_protocol_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:5: type_declaration_struct_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4416);
                    type_declaration_struct_simple490=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_struct_simple.add(type_declaration_struct_simple490.getTree());

                    char_literal491=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal491);


                    // AST REWRITE
                    // elements: type_declaration_struct_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 711:40: -> ^( FORWARD_DECLARATION type_declaration_struct_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:711:42: ^( FORWARD_DECLARATION type_declaration_struct_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_struct_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:712:5: type_declaration_union_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_union_simple_in_forward_class_declaration4431);
                    type_declaration_union_simple492=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_union_simple.add(type_declaration_union_simple492.getTree());

                    char_literal493=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal493);


                    // AST REWRITE
                    // elements: type_declaration_union_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 712:39: -> ^( FORWARD_DECLARATION type_declaration_union_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:712:41: ^( FORWARD_DECLARATION type_declaration_union_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_union_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:5: type_declaration_enum_simple ';'
                    {
                    pushFollow(FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4446);
                    type_declaration_enum_simple494=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration_enum_simple.add(type_declaration_enum_simple494.getTree());

                    char_literal495=(Token)match(input,136,FOLLOW_136_in_forward_class_declaration4448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(char_literal495);


                    // AST REWRITE
                    // elements: type_declaration_enum_simple
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 713:38: -> ^( FORWARD_DECLARATION type_declaration_enum_simple )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:713:40: ^( FORWARD_DECLARATION type_declaration_enum_simple )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(FORWARD_DECLARATION, "FORWARD_DECLARATION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_declaration_enum_simple.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "forward_class_declaration"


    public static class class_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:716:1: class_name : ID -> ^( CLASS_NAME ID ) ;
    public final ObjcParser.class_name_return class_name() throws RecognitionException {
        ObjcParser.class_name_return retval = new ObjcParser.class_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID496=null;

        Object ID496_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:3: ( ID -> ^( CLASS_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:5: ID
            {
            ID496=(Token)match(input,ID,FOLLOW_ID_in_class_name4468); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID496);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 717:8: -> ^( CLASS_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:717:11: ^( CLASS_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CLASS_NAME, "CLASS_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_name"


    public static class protocol_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:719:1: protocol_declaration : '@protocol' protocol_name ( implements_interfaces )? class_protocol_end ;
    public final ObjcParser.protocol_declaration_return protocol_declaration() throws RecognitionException {
        ObjcParser.protocol_declaration_return retval = new ObjcParser.protocol_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal497=null;
        ObjcParser.protocol_name_return protocol_name498 =null;

        ObjcParser.implements_interfaces_return implements_interfaces499 =null;

        ObjcParser.class_protocol_end_return class_protocol_end500 =null;


        Object string_literal497_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:3: ( '@protocol' protocol_name ( implements_interfaces )? class_protocol_end )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:5: '@protocol' protocol_name ( implements_interfaces )? class_protocol_end
            {
            root_0 = (Object)adaptor.nil();


            string_literal497=(Token)match(input,160,FOLLOW_160_in_protocol_declaration4488); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal497_tree = 
            (Object)adaptor.create(string_literal497)
            ;
            adaptor.addChild(root_0, string_literal497_tree);
            }

            pushFollow(FOLLOW_protocol_name_in_protocol_declaration4490);
            protocol_name498=protocol_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, protocol_name498.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:31: ( implements_interfaces )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==137) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:720:31: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_protocol_declaration4492);
                    implements_interfaces499=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, implements_interfaces499.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_class_protocol_end_in_protocol_declaration4500);
            class_protocol_end500=class_protocol_end();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, class_protocol_end500.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_declaration"


    public static class class_protocol_end_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "class_protocol_end"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:724:1: class_protocol_end : ( declarations )* '@end' ;
    public final ObjcParser.class_protocol_end_return class_protocol_end() throws RecognitionException {
        ObjcParser.class_protocol_end_return retval = new ObjcParser.class_protocol_end_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal502=null;
        ObjcParser.declarations_return declarations501 =null;


        Object string_literal502_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:3: ( ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:5: ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:5: ( declarations )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==MULTI_COMMENT_LIT||LA97_0==SINGLE_COMMENT_LIT||LA97_0==124||LA97_0==128||LA97_0==156||LA97_0==158||LA97_0==162) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:725:5: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_class_protocol_end4514);
            	    declarations501=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations501.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            string_literal502=(Token)match(input,152,FOLLOW_152_in_class_protocol_end4521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal502_tree = 
            (Object)adaptor.create(string_literal502)
            ;
            adaptor.addChild(root_0, string_literal502_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "class_protocol_end"


    public static class template_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:1: template : '<' template_internal '>' ;
    public final ObjcParser.template_return template() throws RecognitionException {
        ObjcParser.template_return retval = new ObjcParser.template_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal503=null;
        Token char_literal505=null;
        ObjcParser.template_internal_return template_internal504 =null;


        Object char_literal503_tree=null;
        Object char_literal505_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:9: ( '<' template_internal '>' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:729:11: '<' template_internal '>'
            {
            root_0 = (Object)adaptor.nil();


            char_literal503=(Token)match(input,137,FOLLOW_137_in_template4533); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal503_tree = 
            (Object)adaptor.create(char_literal503)
            ;
            adaptor.addChild(root_0, char_literal503_tree);
            }

            pushFollow(FOLLOW_template_internal_in_template4535);
            template_internal504=template_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_internal504.getTree());

            char_literal505=(Token)match(input,143,FOLLOW_143_in_template4537); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal505_tree = 
            (Object)adaptor.create(char_literal505)
            ;
            adaptor.addChild(root_0, char_literal505_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template"


    public static class implements_interfaces_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_interfaces"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:731:1: implements_interfaces : implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) ;
    public final ObjcParser.implements_interfaces_return implements_interfaces() throws RecognitionException {
        ObjcParser.implements_interfaces_return retval = new ObjcParser.implements_interfaces_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.implements_protocols_return implements_protocols506 =null;


        RewriteRuleSubtreeStream stream_implements_protocols=new RewriteRuleSubtreeStream(adaptor,"rule implements_protocols");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:3: ( implements_protocols -> ^( IMPLEMENTS_INTERFACES implements_protocols ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:4: implements_protocols
            {
            pushFollow(FOLLOW_implements_protocols_in_implements_interfaces4546);
            implements_protocols506=implements_protocols();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_implements_protocols.add(implements_protocols506.getTree());

            // AST REWRITE
            // elements: implements_protocols
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 732:25: -> ^( IMPLEMENTS_INTERFACES implements_protocols )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:732:28: ^( IMPLEMENTS_INTERFACES implements_protocols )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(IMPLEMENTS_INTERFACES, "IMPLEMENTS_INTERFACES")
                , root_1);

                adaptor.addChild(root_1, stream_implements_protocols.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_interfaces"


    public static class implements_protocols_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "implements_protocols"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:735:1: implements_protocols : '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ ;
    public final ObjcParser.implements_protocols_return implements_protocols() throws RecognitionException {
        ObjcParser.implements_protocols_return retval = new ObjcParser.implements_protocols_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal507=null;
        Token char_literal509=null;
        Token char_literal511=null;
        ObjcParser.type_dec_internal_return type_dec_internal508 =null;

        ObjcParser.type_dec_internal_return type_dec_internal510 =null;


        Object char_literal507_tree=null;
        Object char_literal509_tree=null;
        Object char_literal511_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:3: ( '<' type_dec_internal ( ',' type_dec_internal )* '>' -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:5: '<' type_dec_internal ( ',' type_dec_internal )* '>'
            {
            char_literal507=(Token)match(input,137,FOLLOW_137_in_implements_protocols4571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal507);


            pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4573);
            type_dec_internal508=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal508.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:27: ( ',' type_dec_internal )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==127) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:28: ',' type_dec_internal
            	    {
            	    char_literal509=(Token)match(input,127,FOLLOW_127_in_implements_protocols4576); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal509);


            	    pushFollow(FOLLOW_type_dec_internal_in_implements_protocols4578);
            	    type_dec_internal510=type_dec_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal510.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            char_literal511=(Token)match(input,143,FOLLOW_143_in_implements_protocols4582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(char_literal511);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 736:56: -> ( ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal ) )+
            {
                if ( !(stream_type_dec_internal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_type_dec_internal.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:736:59: ^( IMPLEMENTS_INTERFACE_NAME type_dec_internal )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(IMPLEMENTS_INTERFACE_NAME, "IMPLEMENTS_INTERFACE_NAME")
                    , root_1);

                    adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_type_dec_internal.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "implements_protocols"


    public static class template_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:739:1: template_internal : template_type ( ',' template_type )* ;
    public final ObjcParser.template_internal_return template_internal() throws RecognitionException {
        ObjcParser.template_internal_return retval = new ObjcParser.template_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal513=null;
        ObjcParser.template_type_return template_type512 =null;

        ObjcParser.template_type_return template_type514 =null;


        Object char_literal513_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:3: ( template_type ( ',' template_type )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:5: template_type ( ',' template_type )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_template_type_in_template_internal4604);
            template_type512=template_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type512.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:19: ( ',' template_type )*
            loop99:
            do {
                int alt99=2;
                int LA99_0 = input.LA(1);

                if ( (LA99_0==127) ) {
                    alt99=1;
                }


                switch (alt99) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:740:20: ',' template_type
            	    {
            	    char_literal513=(Token)match(input,127,FOLLOW_127_in_template_internal4607); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal513_tree = 
            	    (Object)adaptor.create(char_literal513)
            	    ;
            	    adaptor.addChild(root_0, char_literal513_tree);
            	    }

            	    pushFollow(FOLLOW_template_type_in_template_internal4609);
            	    template_type514=template_type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_type514.getTree());

            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_internal"


    public static class template_type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_type"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:742:1: template_type : ( template_name | 'struct' template_name );
    public final ObjcParser.template_type_return template_type() throws RecognitionException {
        ObjcParser.template_type_return retval = new ObjcParser.template_type_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal516=null;
        ObjcParser.template_name_return template_name515 =null;

        ObjcParser.template_name_return template_name517 =null;


        Object string_literal516_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:3: ( template_name | 'struct' template_name )
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==ID) ) {
                alt100=1;
            }
            else if ( (LA100_0==199) ) {
                alt100=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 100, 0, input);

                throw nvae;

            }
            switch (alt100) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:743:5: template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_template_name_in_template_type4623);
                    template_name515=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name515.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:744:5: 'struct' template_name
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal516=(Token)match(input,199,FOLLOW_199_in_template_type4629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal516_tree = 
                    (Object)adaptor.create(string_literal516)
                    ;
                    adaptor.addChild(root_0, string_literal516_tree);
                    }

                    pushFollow(FOLLOW_template_name_in_template_type4631);
                    template_name517=template_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, template_name517.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_type"


    public static class template_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "template_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:747:1: template_name : ID -> ^( TEMPLATE_TYPE ID ) ;
    public final ObjcParser.template_name_return template_name() throws RecognitionException {
        ObjcParser.template_name_return retval = new ObjcParser.template_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID518=null;

        Object ID518_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:3: ( ID -> ^( TEMPLATE_TYPE ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:5: ID
            {
            ID518=(Token)match(input,ID,FOLLOW_ID_in_template_name4646); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID518);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 748:8: -> ^( TEMPLATE_TYPE ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:748:11: ^( TEMPLATE_TYPE ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TEMPLATE_TYPE, "TEMPLATE_TYPE")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "template_name"


    public static class protocol_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "protocol_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:751:1: protocol_name : ID -> ^( PROTOCOL_NAME ID ) ;
    public final ObjcParser.protocol_name_return protocol_name() throws RecognitionException {
        ObjcParser.protocol_name_return retval = new ObjcParser.protocol_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID519=null;

        Object ID519_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:3: ( ID -> ^( PROTOCOL_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:5: ID
            {
            ID519=(Token)match(input,ID,FOLLOW_ID_in_protocol_name4669); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID519);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 752:8: -> ^( PROTOCOL_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:752:11: ^( PROTOCOL_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PROTOCOL_NAME, "PROTOCOL_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "protocol_name"


    public static class interface_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:754:1: interface_declaration : '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' ;
    public final ObjcParser.interface_declaration_return interface_declaration() throws RecognitionException {
        ObjcParser.interface_declaration_return retval = new ObjcParser.interface_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal520=null;
        Token string_literal525=null;
        ObjcParser.interface_name_return interface_name521 =null;

        ObjcParser.superclass_name_return superclass_name522 =null;

        ObjcParser.fields_body_return fields_body523 =null;

        ObjcParser.declarations_return declarations524 =null;


        Object string_literal520_tree=null;
        Object string_literal525_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:3: ( '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:755:5: '@interface' interface_name superclass_name ( fields_body )? ( declarations )* '@end'
            {
            root_0 = (Object)adaptor.nil();


            string_literal520=(Token)match(input,155,FOLLOW_155_in_interface_declaration4693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal520_tree = 
            (Object)adaptor.create(string_literal520)
            ;
            adaptor.addChild(root_0, string_literal520_tree);
            }

            pushFollow(FOLLOW_interface_name_in_interface_declaration4695);
            interface_name521=interface_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interface_name521.getTree());

            pushFollow(FOLLOW_superclass_name_in_interface_declaration4697);
            superclass_name522=superclass_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, superclass_name522.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:3: ( fields_body )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==207) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:756:3: fields_body
                    {
                    pushFollow(FOLLOW_fields_body_in_interface_declaration4701);
                    fields_body523=fields_body();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fields_body523.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:3: ( declarations )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==MULTI_COMMENT_LIT||LA102_0==SINGLE_COMMENT_LIT||LA102_0==124||LA102_0==128||LA102_0==156||LA102_0==158||LA102_0==162) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:757:3: declarations
            	    {
            	    pushFollow(FOLLOW_declarations_in_interface_declaration4706);
            	    declarations524=declarations();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, declarations524.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);


            string_literal525=(Token)match(input,152,FOLLOW_152_in_interface_declaration4711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal525_tree = 
            (Object)adaptor.create(string_literal525)
            ;
            adaptor.addChild(root_0, string_literal525_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_declaration"


    public static class fields_body_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_body"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:761:1: fields_body : '{' ( body_item )* '}' ;
    public final ObjcParser.fields_body_return fields_body() throws RecognitionException {
        ObjcParser.fields_body_return retval = new ObjcParser.fields_body_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal526=null;
        Token char_literal528=null;
        ObjcParser.body_item_return body_item527 =null;


        Object char_literal526_tree=null;
        Object char_literal528_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:762:3: ( '{' ( body_item )* '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:763:3: '{' ( body_item )* '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal526=(Token)match(input,207,FOLLOW_207_in_fields_body4728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal526_tree = 
            (Object)adaptor.create(char_literal526)
            ;
            adaptor.addChild(root_0, char_literal526_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:5: ( body_item )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==ID||LA103_0==MULTI_COMMENT_LIT||LA103_0==SINGLE_COMMENT_LIT||LA103_0==119||LA103_0==157||LA103_0==159||LA103_0==161||LA103_0==168||LA103_0==178||LA103_0==181||LA103_0==186||LA103_0==191||(LA103_0 >= 194 && LA103_0 <= 195)||LA103_0==197||LA103_0==199||(LA103_0 >= 202 && LA103_0 <= 205)) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:764:5: body_item
            	    {
            	    pushFollow(FOLLOW_body_item_in_fields_body4734);
            	    body_item527=body_item();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, body_item527.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);


            char_literal528=(Token)match(input,211,FOLLOW_211_in_fields_body4739); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal528_tree = 
            (Object)adaptor.create(char_literal528)
            ;
            adaptor.addChild(root_0, char_literal528_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_body"


    public static class body_item_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "body_item"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:768:1: body_item : ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments );
    public final ObjcParser.body_item_return body_item() throws RecognitionException {
        ObjcParser.body_item_return retval = new ObjcParser.body_item_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_wrapper_return group_modifier_wrapper529 =null;

        ObjcParser.field_modifiers_return field_modifiers530 =null;

        ObjcParser.typedef_declaration_wrapper_return typedef_declaration_wrapper531 =null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper532 =null;

        ObjcParser.comments_return comments533 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:3: ( ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper ) | comments )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==ID||LA107_0==119||LA107_0==157||LA107_0==159||LA107_0==161||LA107_0==168||LA107_0==178||LA107_0==181||LA107_0==186||LA107_0==191||(LA107_0 >= 194 && LA107_0 <= 195)||LA107_0==197||LA107_0==199||(LA107_0 >= 202 && LA107_0 <= 205)) ) {
                alt107=1;
            }
            else if ( (LA107_0==MULTI_COMMENT_LIT||LA107_0==SINGLE_COMMENT_LIT) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;

            }
            switch (alt107) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:5: ( group_modifier_wrapper )? ( field_modifiers )? ( typedef_declaration_wrapper | field_declaration_wrapper )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:5: ( group_modifier_wrapper )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==157||LA104_0==159||LA104_0==161) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:5: group_modifier_wrapper
                            {
                            pushFollow(FOLLOW_group_modifier_wrapper_in_body_item4754);
                            group_modifier_wrapper529=group_modifier_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, group_modifier_wrapper529.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:29: ( field_modifiers )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==168) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:29: field_modifiers
                            {
                            pushFollow(FOLLOW_field_modifiers_in_body_item4757);
                            field_modifiers530=field_modifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_modifiers530.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:46: ( typedef_declaration_wrapper | field_declaration_wrapper )
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==202) ) {
                        alt106=1;
                    }
                    else if ( (LA106_0==ID||LA106_0==119||LA106_0==178||LA106_0==181||LA106_0==186||LA106_0==191||(LA106_0 >= 194 && LA106_0 <= 195)||LA106_0==197||LA106_0==199||(LA106_0 >= 203 && LA106_0 <= 205)) ) {
                        alt106=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;

                    }
                    switch (alt106) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:47: typedef_declaration_wrapper
                            {
                            pushFollow(FOLLOW_typedef_declaration_wrapper_in_body_item4761);
                            typedef_declaration_wrapper531=typedef_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, typedef_declaration_wrapper531.getTree());

                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:769:77: field_declaration_wrapper
                            {
                            pushFollow(FOLLOW_field_declaration_wrapper_in_body_item4765);
                            field_declaration_wrapper532=field_declaration_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper532.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:770:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_body_item4772);
                    comments533=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments533.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "body_item"


    public static class group_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:773:1: group_modifier_wrapper : group_modifier -> ^( GROUP_MODIFIER group_modifier ) ;
    public final ObjcParser.group_modifier_wrapper_return group_modifier_wrapper() throws RecognitionException {
        ObjcParser.group_modifier_wrapper_return retval = new ObjcParser.group_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.group_modifier_return group_modifier534 =null;


        RewriteRuleSubtreeStream stream_group_modifier=new RewriteRuleSubtreeStream(adaptor,"rule group_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:3: ( group_modifier -> ^( GROUP_MODIFIER group_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:5: group_modifier
            {
            pushFollow(FOLLOW_group_modifier_in_group_modifier_wrapper4785);
            group_modifier534=group_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_group_modifier.add(group_modifier534.getTree());

            // AST REWRITE
            // elements: group_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 774:20: -> ^( GROUP_MODIFIER group_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:774:23: ^( GROUP_MODIFIER group_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(GROUP_MODIFIER, "GROUP_MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_group_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier_wrapper"


    public static class group_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "group_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:776:1: group_modifier : ( '@private' | '@protected' | '@public' );
    public final ObjcParser.group_modifier_return group_modifier() throws RecognitionException {
        ObjcParser.group_modifier_return retval = new ObjcParser.group_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set535=null;

        Object set535_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:777:3: ( '@private' | '@protected' | '@public' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set535=(Token)input.LT(1);

            if ( input.LA(1)==157||input.LA(1)==159||input.LA(1)==161 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set535)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "group_modifier"


    public static class field_modifiers_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_modifiers"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:779:1: field_modifiers : 'IBOutlet' ;
    public final ObjcParser.field_modifiers_return field_modifiers() throws RecognitionException {
        ObjcParser.field_modifiers_return retval = new ObjcParser.field_modifiers_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal536=null;

        Object string_literal536_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:3: ( 'IBOutlet' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:780:5: 'IBOutlet'
            {
            root_0 = (Object)adaptor.nil();


            string_literal536=(Token)match(input,168,FOLLOW_168_in_field_modifiers4830); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal536_tree = 
            (Object)adaptor.create(string_literal536)
            ;
            adaptor.addChild(root_0, string_literal536_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_modifiers"


    public static class interface_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "interface_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:783:1: interface_name : ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) ;
    public final ObjcParser.interface_name_return interface_name() throws RecognitionException {
        ObjcParser.interface_name_return retval = new ObjcParser.interface_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID537=null;
        ObjcParser.category_return category538 =null;


        Object ID537_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_category=new RewriteRuleSubtreeStream(adaptor,"rule category");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:3: ( ID ( category )? -> ^( INTERFACE_NAME ID ( category )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:5: ID ( category )?
            {
            ID537=(Token)match(input,ID,FOLLOW_ID_in_interface_name4845); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID537);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:8: ( category )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==119) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:8: category
                    {
                    pushFollow(FOLLOW_category_in_interface_name4847);
                    category538=category();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_category.add(category538.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ID, category
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 784:18: -> ^( INTERFACE_NAME ID ( category )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:21: ^( INTERFACE_NAME ID ( category )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(INTERFACE_NAME, "INTERFACE_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:784:41: ( category )?
                if ( stream_category.hasNext() ) {
                    adaptor.addChild(root_1, stream_category.nextTree());

                }
                stream_category.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "interface_name"


    public static class category_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "category"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:1: category : '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) ;
    public final ObjcParser.category_return category() throws RecognitionException {
        ObjcParser.category_return retval = new ObjcParser.category_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal539=null;
        Token ID540=null;
        Token char_literal541=null;

        Object char_literal539_tree=null;
        Object ID540_tree=null;
        Object char_literal541_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:9: ( '(' ( ID )? ')' -> ^( CATEGORY ( ID )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:11: '(' ( ID )? ')'
            {
            char_literal539=(Token)match(input,119,FOLLOW_119_in_category4866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal539);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:15: ( ID )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==ID) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:15: ID
                    {
                    ID540=(Token)match(input,ID,FOLLOW_ID_in_category4868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID540);


                    }
                    break;

            }


            char_literal541=(Token)match(input,121,FOLLOW_121_in_category4871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal541);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 786:23: -> ^( CATEGORY ( ID )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:26: ^( CATEGORY ( ID )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(CATEGORY, "CATEGORY")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:786:37: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "category"


    public static class superclass_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "superclass_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:788:1: superclass_name : ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) ;
    public final ObjcParser.superclass_name_return superclass_name() throws RecognitionException {
        ObjcParser.superclass_name_return retval = new ObjcParser.superclass_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal542=null;
        Token ID543=null;
        ObjcParser.implements_interfaces_return implements_interfaces544 =null;


        Object char_literal542_tree=null;
        Object ID543_tree=null;
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_implements_interfaces=new RewriteRuleSubtreeStream(adaptor,"rule implements_interfaces");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:3: ( ( ':' ID )? ( implements_interfaces )? -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( ':' ID )? ( implements_interfaces )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:5: ( ':' ID )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==135) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:6: ':' ID
                    {
                    char_literal542=(Token)match(input,135,FOLLOW_135_in_superclass_name4891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_135.add(char_literal542);


                    ID543=(Token)match(input,ID,FOLLOW_ID_in_superclass_name4893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ID.add(ID543);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:15: ( implements_interfaces )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==137) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:15: implements_interfaces
                    {
                    pushFollow(FOLLOW_implements_interfaces_in_superclass_name4897);
                    implements_interfaces544=implements_interfaces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_implements_interfaces.add(implements_interfaces544.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: implements_interfaces, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 789:38: -> ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:41: ^( SUPERCLASS_NAME ( ID )? ( implements_interfaces )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(SUPERCLASS_NAME, "SUPERCLASS_NAME")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:59: ( ID )?
                if ( stream_ID.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_ID.nextNode()
                    );

                }
                stream_ID.reset();

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:789:63: ( implements_interfaces )?
                if ( stream_implements_interfaces.hasNext() ) {
                    adaptor.addChild(root_1, stream_implements_interfaces.nextTree());

                }
                stream_implements_interfaces.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "superclass_name"


    public static class fields_declarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "fields_declarations"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:792:1: fields_declarations : ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ ;
    public final ObjcParser.fields_declarations_return fields_declarations() throws RecognitionException {
        ObjcParser.fields_declarations_return retval = new ObjcParser.fields_declarations_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_return field_declaration545 =null;


        RewriteRuleSubtreeStream stream_field_declaration=new RewriteRuleSubtreeStream(adaptor,"rule field_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:3: ( ( field_declaration )+ -> ( ^( FIELD field_declaration ) )+ )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: ( field_declaration )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: ( field_declaration )+
            int cnt112=0;
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==ID||LA112_0==119||LA112_0==178||LA112_0==181||LA112_0==186||LA112_0==191||(LA112_0 >= 194 && LA112_0 <= 195)||LA112_0==197||LA112_0==199||(LA112_0 >= 203 && LA112_0 <= 205)) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:5: field_declaration
            	    {
            	    pushFollow(FOLLOW_field_declaration_in_fields_declarations4926);
            	    field_declaration545=field_declaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_field_declaration.add(field_declaration545.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt112 >= 1 ) break loop112;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(112, input);
                        throw eee;
                }
                cnt112++;
            } while (true);


            // AST REWRITE
            // elements: field_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 793:24: -> ( ^( FIELD field_declaration ) )+
            {
                if ( !(stream_field_declaration.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_field_declaration.hasNext() ) {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:793:27: ^( FIELD field_declaration )
                    {
                    Object root_1 = (Object)adaptor.nil();
                    root_1 = (Object)adaptor.becomeRoot(
                    (Object)adaptor.create(FIELD, "FIELD")
                    , root_1);

                    adaptor.addChild(root_1, stream_field_declaration.nextTree());

                    adaptor.addChild(root_0, root_1);
                    }

                }
                stream_field_declaration.reset();

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "fields_declarations"


    public static class field_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:795:1: field_declaration : ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) );
    public final ObjcParser.field_declaration_return field_declaration() throws RecognitionException {
        ObjcParser.field_declaration_return retval = new ObjcParser.field_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal549=null;
        Token char_literal552=null;
        Token char_literal556=null;
        Token char_literal557=null;
        ObjcParser.block_decl_return block_decl546 =null;

        ObjcParser.type_declaration_return type_declaration547 =null;

        ObjcParser.field_name_return field_name548 =null;

        ObjcParser.field_name_return field_name550 =null;

        ObjcParser.classical_method_params_return classical_method_params551 =null;

        ObjcParser.block_multiline_wrapper_return block_multiline_wrapper553 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper554 =null;

        ObjcParser.element_value_or_array_init_return element_value_or_array_init555 =null;


        Object char_literal549_tree=null;
        Object char_literal552_tree=null;
        Object char_literal556_tree=null;
        Object char_literal557_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:3: ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) )
            int alt117=2;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:5: ( block_decl_predicate )=> block_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_decl_in_field_declaration4953);
                    block_decl546=block_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_decl546.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:5: ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:6: ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:6: ( type_declaration field_name )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:7: type_declaration field_name
                    {
                    pushFollow(FOLLOW_type_declaration_in_field_declaration4961);
                    type_declaration547=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration547.getTree());

                    pushFollow(FOLLOW_field_name_in_field_declaration4963);
                    field_name548=field_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name548.getTree());

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:36: ( ',' field_name )*
                    loop113:
                    do {
                        int alt113=2;
                        int LA113_0 = input.LA(1);

                        if ( (LA113_0==127) ) {
                            alt113=1;
                        }


                        switch (alt113) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:37: ',' field_name
                    	    {
                    	    char_literal549=(Token)match(input,127,FOLLOW_127_in_field_declaration4967); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal549_tree = 
                    	    (Object)adaptor.create(char_literal549)
                    	    ;
                    	    adaptor.addChild(root_0, char_literal549_tree);
                    	    }

                    	    pushFollow(FOLLOW_field_name_in_field_declaration4969);
                    	    field_name550=field_name();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_name550.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop113;
                        }
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:54: ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' )
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( ((LA116_0 >= 118 && LA116_0 <= 119)||LA116_0==123||LA116_0==126||LA116_0==130||LA116_0==134||LA116_0==139||LA116_0==141||LA116_0==146||LA116_0==209) ) {
                        alt116=1;
                    }
                    else if ( (LA116_0==136) ) {
                        alt116=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 116, 0, input);

                        throw nvae;

                    }
                    switch (alt116) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                            {
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:55: ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) )
                            int alt115=2;
                            int LA115_0 = input.LA(1);

                            if ( (LA115_0==119) ) {
                                alt115=1;
                            }
                            else if ( (LA115_0==118||LA115_0==123||LA115_0==126||LA115_0==130||LA115_0==134||LA115_0==139||LA115_0==141||LA115_0==146||LA115_0==209) ) {
                                alt115=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 115, 0, input);

                                throw nvae;

                            }
                            switch (alt115) {
                                case 1 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                                    {
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:56: ( classical_method_params ( ';' | block_multiline_wrapper ) )
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:57: classical_method_params ( ';' | block_multiline_wrapper )
                                    {
                                    pushFollow(FOLLOW_classical_method_params_in_field_declaration4976);
                                    classical_method_params551=classical_method_params();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classical_method_params551.getTree());

                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:81: ( ';' | block_multiline_wrapper )
                                    int alt114=2;
                                    int LA114_0 = input.LA(1);

                                    if ( (LA114_0==136) ) {
                                        alt114=1;
                                    }
                                    else if ( (LA114_0==207) ) {
                                        alt114=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 114, 0, input);

                                        throw nvae;

                                    }
                                    switch (alt114) {
                                        case 1 :
                                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:82: ';'
                                            {
                                            char_literal552=(Token)match(input,136,FOLLOW_136_in_field_declaration4979); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            char_literal552_tree = 
                                            (Object)adaptor.create(char_literal552)
                                            ;
                                            adaptor.addChild(root_0, char_literal552_tree);
                                            }

                                            }
                                            break;
                                        case 2 :
                                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:88: block_multiline_wrapper
                                            {
                                            pushFollow(FOLLOW_block_multiline_wrapper_in_field_declaration4983);
                                            block_multiline_wrapper553=block_multiline_wrapper();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, block_multiline_wrapper553.getTree());

                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:116: ( op_assign_wrapper element_value_or_array_init ';' )
                                    {
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:116: ( op_assign_wrapper element_value_or_array_init ';' )
                                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:117: op_assign_wrapper element_value_or_array_init ';'
                                    {
                                    pushFollow(FOLLOW_op_assign_wrapper_in_field_declaration4990);
                                    op_assign_wrapper554=op_assign_wrapper();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op_assign_wrapper554.getTree());

                                    pushFollow(FOLLOW_element_value_or_array_init_in_field_declaration4992);
                                    element_value_or_array_init555=element_value_or_array_init();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, element_value_or_array_init555.getTree());

                                    char_literal556=(Token)match(input,136,FOLLOW_136_in_field_declaration4994); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    char_literal556_tree = 
                                    (Object)adaptor.create(char_literal556)
                                    ;
                                    adaptor.addChild(root_0, char_literal556_tree);
                                    }

                                    }


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:797:171: ';'
                            {
                            char_literal557=(Token)match(input,136,FOLLOW_136_in_field_declaration5000); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal557_tree = 
                            (Object)adaptor.create(char_literal557)
                            ;
                            adaptor.addChild(root_0, char_literal557_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration"


    public static class field_declaration_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_declaration_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:800:1: field_declaration_simple : type_declaration field_name -> ^( FIELD type_declaration field_name ) ;
    public final ObjcParser.field_declaration_simple_return field_declaration_simple() throws RecognitionException {
        ObjcParser.field_declaration_simple_return retval = new ObjcParser.field_declaration_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_return type_declaration558 =null;

        ObjcParser.field_name_return field_name559 =null;


        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        RewriteRuleSubtreeStream stream_field_name=new RewriteRuleSubtreeStream(adaptor,"rule field_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:3: ( type_declaration field_name -> ^( FIELD type_declaration field_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:5: type_declaration field_name
            {
            pushFollow(FOLLOW_type_declaration_in_field_declaration_simple5015);
            type_declaration558=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration558.getTree());

            pushFollow(FOLLOW_field_name_in_field_declaration_simple5017);
            field_name559=field_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_field_name.add(field_name559.getTree());

            // AST REWRITE
            // elements: type_declaration, field_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 801:33: -> ^( FIELD type_declaration field_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:801:36: ^( FIELD type_declaration field_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD, "FIELD")
                , root_1);

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_field_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_declaration_simple"


    public static class classical_method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:804:1: classical_method_params : '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) ;
    public final ObjcParser.classical_method_params_return classical_method_params() throws RecognitionException {
        ObjcParser.classical_method_params_return retval = new ObjcParser.classical_method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal560=null;
        Token char_literal562=null;
        Token char_literal564=null;
        ObjcParser.classical_param_return classical_param561 =null;

        ObjcParser.classical_param_return classical_param563 =null;


        Object char_literal560_tree=null;
        Object char_literal562_tree=null;
        Object char_literal564_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_classical_param=new RewriteRuleSubtreeStream(adaptor,"rule classical_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:3: ( '(' ( classical_param )? ( ',' classical_param )* ')' -> ^( PARAMS ( classical_param )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:5: '(' ( classical_param )? ( ',' classical_param )* ')'
            {
            char_literal560=(Token)match(input,119,FOLLOW_119_in_classical_method_params5042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_119.add(char_literal560);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:9: ( classical_param )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==ID||LA118_0==119||LA118_0==178||LA118_0==181||LA118_0==186||LA118_0==191||(LA118_0 >= 194 && LA118_0 <= 195)||LA118_0==197||LA118_0==199||(LA118_0 >= 203 && LA118_0 <= 205)) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:9: classical_param
                    {
                    pushFollow(FOLLOW_classical_param_in_classical_method_params5044);
                    classical_param561=classical_param();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classical_param.add(classical_param561.getTree());

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:26: ( ',' classical_param )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==127) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:27: ',' classical_param
            	    {
            	    char_literal562=(Token)match(input,127,FOLLOW_127_in_classical_method_params5048); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_127.add(char_literal562);


            	    pushFollow(FOLLOW_classical_param_in_classical_method_params5050);
            	    classical_param563=classical_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classical_param.add(classical_param563.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);


            char_literal564=(Token)match(input,121,FOLLOW_121_in_classical_method_params5054); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal564);


            // AST REWRITE
            // elements: classical_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 805:53: -> ^( PARAMS ( classical_param )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:56: ^( PARAMS ( classical_param )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAMS, "PARAMS")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:805:65: ( classical_param )*
                while ( stream_classical_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_classical_param.nextTree());

                }
                stream_classical_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_method_params"


    public static class classical_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:808:1: classical_param : classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) ;
    public final ObjcParser.classical_param_return classical_param() throws RecognitionException {
        ObjcParser.classical_param_return retval = new ObjcParser.classical_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.classical_type_declaration_return classical_type_declaration565 =null;

        ObjcParser.param_name_return param_name566 =null;


        RewriteRuleSubtreeStream stream_classical_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule classical_type_declaration");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:3: ( classical_type_declaration param_name -> ^( METHOD_PARAM classical_type_declaration param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:5: classical_type_declaration param_name
            {
            pushFollow(FOLLOW_classical_type_declaration_in_classical_param5079);
            classical_type_declaration565=classical_type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_type_declaration.add(classical_type_declaration565.getTree());

            pushFollow(FOLLOW_param_name_in_classical_param5081);
            param_name566=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name566.getTree());

            // AST REWRITE
            // elements: param_name, classical_type_declaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 809:43: -> ^( METHOD_PARAM classical_type_declaration param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:809:45: ^( METHOD_PARAM classical_type_declaration param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                adaptor.addChild(root_1, stream_classical_type_declaration.nextTree());

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_param"


    public static class classical_type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "classical_type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:812:1: classical_type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) );
    public final ObjcParser.classical_type_declaration_return classical_type_declaration() throws RecognitionException {
        ObjcParser.classical_type_declaration_return retval = new ObjcParser.classical_type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal570=null;
        Token string_literal571=null;
        Token char_literal573=null;
        Token string_literal574=null;
        Token char_literal576=null;
        Token string_literal577=null;
        Token char_literal579=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol567 =null;

        ObjcParser.func_pointer_return func_pointer568 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane569 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper572 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper575 =null;

        ObjcParser.type_dec_wrapper_return type_dec_wrapper578 =null;


        Object char_literal570_tree=null;
        Object string_literal571_tree=null;
        Object char_literal573_tree=null;
        Object string_literal574_tree=null;
        Object char_literal576_tree=null;
        Object string_literal577_tree=null;
        Object char_literal579_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleTokenStream stream_117=new RewriteRuleTokenStream(adaptor,"token 117");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_type_dec_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | type_declaration_plane ( '&' )? | ( 'struct' type_dec_wrapper ( '&' )? ) -> ^( STRUCT type_dec_wrapper ) | ( 'union' type_dec_wrapper ( '&' )? ) -> ^( UNION type_dec_wrapper ) | ( 'enum' type_dec_wrapper ( '&' )? ) -> ^( ENUM type_dec_wrapper ) )
            int alt124=6;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==191) ) {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==137) ) {
                    int LA124_14 = input.LA(3);

                    if ( (LA124_14==ID) ) {
                        int LA124_20 = input.LA(4);

                        if ( (LA124_20==122) ) {
                            alt124=3;
                        }
                        else if ( (LA124_20==143) && (synpred24_Objc())) {
                            alt124=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 124, 20, input);

                            throw nvae;

                        }
                    }
                    else if ( (LA124_14==194) && (synpred24_Objc())) {
                        alt124=1;
                    }
                    else if ( (LA124_14==191) && (synpred24_Objc())) {
                        alt124=1;
                    }
                    else if ( (LA124_14==195) && (synpred24_Objc())) {
                        alt124=1;
                    }
                    else if ( (LA124_14==197) && (synpred24_Objc())) {
                        alt124=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 14, input);

                        throw nvae;

                    }
                }
                else if ( (LA124_1==ID||LA124_1==117||(LA124_1 >= 121 && LA124_1 <= 122)||LA124_1==173) ) {
                    alt124=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 124, 1, input);

                    throw nvae;

                }
            }
            else if ( (LA124_0==119) && (synpred25_Objc())) {
                alt124=2;
            }
            else if ( (LA124_0==ID||LA124_0==178||LA124_0==181||(LA124_0 >= 194 && LA124_0 <= 195)||LA124_0==197||(LA124_0 >= 204 && LA124_0 <= 205)) ) {
                alt124=3;
            }
            else if ( (LA124_0==199) ) {
                alt124=4;
            }
            else if ( (LA124_0==203) ) {
                alt124=5;
            }
            else if ( (LA124_0==186) ) {
                alt124=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;

            }
            switch (alt124) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_classical_type_declaration5110);
                    type_declaration_protocol567=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol567.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_classical_type_declaration5121);
                    func_pointer568=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer568.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_classical_type_declaration5127);
                    type_declaration_plane569=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane569.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:28: ( '&' )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==117) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:815:28: '&'
                            {
                            char_literal570=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5129); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal570_tree = 
                            (Object)adaptor.create(char_literal570)
                            ;
                            adaptor.addChild(root_0, char_literal570_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:5: ( 'struct' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:6: 'struct' type_dec_wrapper ( '&' )?
                    {
                    string_literal571=(Token)match(input,199,FOLLOW_199_in_classical_type_declaration5137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(string_literal571);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5139);
                    type_dec_wrapper572=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper572.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:32: ( '&' )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==117) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:32: '&'
                            {
                            char_literal573=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5141); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal573);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 816:38: -> ^( STRUCT type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:816:41: ^( STRUCT type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(STRUCT, "STRUCT")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: ( 'union' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:5: ( 'union' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:6: 'union' type_dec_wrapper ( '&' )?
                    {
                    string_literal574=(Token)match(input,203,FOLLOW_203_in_classical_type_declaration5158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_203.add(string_literal574);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5160);
                    type_dec_wrapper575=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper575.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:31: ( '&' )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==117) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:31: '&'
                            {
                            char_literal576=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5162); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal576);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 817:37: -> ^( UNION type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:817:40: ^( UNION type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(UNION, "UNION")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:5: ( 'enum' type_dec_wrapper ( '&' )? )
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:6: 'enum' type_dec_wrapper ( '&' )?
                    {
                    string_literal577=(Token)match(input,186,FOLLOW_186_in_classical_type_declaration5179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(string_literal577);


                    pushFollow(FOLLOW_type_dec_wrapper_in_classical_type_declaration5181);
                    type_dec_wrapper578=type_dec_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_dec_wrapper.add(type_dec_wrapper578.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:30: ( '&' )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==117) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:30: '&'
                            {
                            char_literal579=(Token)match(input,117,FOLLOW_117_in_classical_type_declaration5183); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_117.add(char_literal579);


                            }
                            break;

                    }


                    }


                    // AST REWRITE
                    // elements: type_dec_wrapper
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 818:36: -> ^( ENUM type_dec_wrapper )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:818:39: ^( ENUM type_dec_wrapper )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM, "ENUM")
                        , root_1);

                        adaptor.addChild(root_1, stream_type_dec_wrapper.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "classical_type_declaration"


    public static class type_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:821:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );
    public final ObjcParser.type_declaration_return type_declaration() throws RecognitionException {
        ObjcParser.type_declaration_return retval = new ObjcParser.type_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal584=null;
        Token char_literal585=null;
        Token char_literal587=null;
        Token char_literal589=null;
        Token char_literal591=null;
        ObjcParser.type_declaration_protocol_return type_declaration_protocol580 =null;

        ObjcParser.func_pointer_return func_pointer581 =null;

        ObjcParser.block_type_decl_return block_type_decl582 =null;

        ObjcParser.type_declaration_struct_return type_declaration_struct583 =null;

        ObjcParser.type_declaration_enum_return type_declaration_enum586 =null;

        ObjcParser.type_declaration_union_return type_declaration_union588 =null;

        ObjcParser.type_declaration_plane_return type_declaration_plane590 =null;


        Object char_literal584_tree=null;
        Object char_literal585_tree=null;
        Object char_literal587_tree=null;
        Object char_literal589_tree=null;
        Object char_literal591_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:3: ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? )
            int alt130=7;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:5: ( type_decl_protocol_predicate )=> type_declaration_protocol
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_protocol_in_type_declaration5212);
                    type_declaration_protocol580=type_declaration_protocol();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_protocol580.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:5: ( func_pointer_predicate )=> func_pointer
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_func_pointer_in_type_declaration5223);
                    func_pointer581=func_pointer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, func_pointer581.getTree());

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:5: ( block_type_decl_predicate )=> block_type_decl
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_block_type_decl_in_type_declaration5234);
                    block_type_decl582=block_type_decl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block_type_decl582.getTree());

                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:5: type_declaration_struct ( '&' )? ( '*' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_in_type_declaration5240);
                    type_declaration_struct583=type_declaration_struct();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct583.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:29: ( '&' )?
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==117) ) {
                        alt125=1;
                    }
                    switch (alt125) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:29: '&'
                            {
                            char_literal584=(Token)match(input,117,FOLLOW_117_in_type_declaration5242); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal584_tree = 
                            (Object)adaptor.create(char_literal584)
                            ;
                            adaptor.addChild(root_0, char_literal584_tree);
                            }

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:33: ( '*' )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==122) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:825:33: '*'
                            {
                            char_literal585=(Token)match(input,122,FOLLOW_122_in_type_declaration5244); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal585_tree = 
                            (Object)adaptor.create(char_literal585)
                            ;
                            adaptor.addChild(root_0, char_literal585_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:5: type_declaration_enum ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_in_type_declaration5251);
                    type_declaration_enum586=type_declaration_enum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum586.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:27: ( '&' )?
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==117) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:826:27: '&'
                            {
                            char_literal587=(Token)match(input,117,FOLLOW_117_in_type_declaration5253); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal587_tree = 
                            (Object)adaptor.create(char_literal587)
                            ;
                            adaptor.addChild(root_0, char_literal587_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:5: type_declaration_union ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_in_type_declaration5260);
                    type_declaration_union588=type_declaration_union();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union588.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:28: ( '&' )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==117) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:827:28: '&'
                            {
                            char_literal589=(Token)match(input,117,FOLLOW_117_in_type_declaration5262); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal589_tree = 
                            (Object)adaptor.create(char_literal589)
                            ;
                            adaptor.addChild(root_0, char_literal589_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 7 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:5: type_declaration_plane ( '&' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_plane_in_type_declaration5269);
                    type_declaration_plane590=type_declaration_plane();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_plane590.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:28: ( '&' )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==117) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:828:28: '&'
                            {
                            char_literal591=(Token)match(input,117,FOLLOW_117_in_type_declaration5271); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal591_tree = 
                            (Object)adaptor.create(char_literal591)
                            ;
                            adaptor.addChild(root_0, char_literal591_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration"


    public static class type_declaration_plane_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_plane"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:831:1: type_declaration_plane : ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( '*' 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) ;
    public final ObjcParser.type_declaration_plane_return type_declaration_plane() throws RecognitionException {
        ObjcParser.type_declaration_plane_return retval = new ObjcParser.type_declaration_plane_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal592=null;
        Token string_literal593=null;
        Token string_literal594=null;
        Token string_literal595=null;
        Token char_literal597=null;
        Token string_literal598=null;
        Token char_literal599=null;
        ObjcParser.type_dec_return type_dec596 =null;


        Object string_literal592_tree=null;
        Object string_literal593_tree=null;
        Object string_literal594_tree=null;
        Object string_literal595_tree=null;
        Object char_literal597_tree=null;
        Object string_literal598_tree=null;
        Object char_literal599_tree=null;
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_204=new RewriteRuleTokenStream(adaptor,"token 204");
        RewriteRuleTokenStream stream_205=new RewriteRuleTokenStream(adaptor,"token 205");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:3: ( ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( '*' 'const' ( '*' )? )? -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: ( '__block' )? ( 'volatile' )? ( 'const' )? ( 'unsigned' )? type_dec ( '*' 'const' ( '*' )? )?
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: ( '__block' )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( (LA131_0==178) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:5: '__block'
                    {
                    string_literal592=(Token)match(input,178,FOLLOW_178_in_type_declaration_plane5286); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(string_literal592);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:16: ( 'volatile' )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==205) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:16: 'volatile'
                    {
                    string_literal593=(Token)match(input,205,FOLLOW_205_in_type_declaration_plane5289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_205.add(string_literal593);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:28: ( 'const' )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==181) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:28: 'const'
                    {
                    string_literal594=(Token)match(input,181,FOLLOW_181_in_type_declaration_plane5292); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(string_literal594);


                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:37: ( 'unsigned' )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==204) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:37: 'unsigned'
                    {
                    string_literal595=(Token)match(input,204,FOLLOW_204_in_type_declaration_plane5295); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_204.add(string_literal595);


                    }
                    break;

            }


            pushFollow(FOLLOW_type_dec_in_type_declaration_plane5298);
            type_dec596=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec596.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:58: ( '*' 'const' ( '*' )? )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==122) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:59: '*' 'const' ( '*' )?
                    {
                    char_literal597=(Token)match(input,122,FOLLOW_122_in_type_declaration_plane5301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_122.add(char_literal597);


                    string_literal598=(Token)match(input,181,FOLLOW_181_in_type_declaration_plane5303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(string_literal598);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:71: ( '*' )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==122) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:71: '*'
                            {
                            char_literal599=(Token)match(input,122,FOLLOW_122_in_type_declaration_plane5305); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_122.add(char_literal599);


                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: type_dec, 181, 205
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 832:78: -> ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:81: ^( TYPE_PLAIN ( 'volatile' )? type_dec ( 'const' )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:94: ( 'volatile' )?
                if ( stream_205.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_205.nextNode()
                    );

                }
                stream_205.reset();

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:832:115: ( 'const' )?
                if ( stream_181.hasNext() ) {
                    adaptor.addChild(root_1, 
                    stream_181.nextNode()
                    );

                }
                stream_181.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_plane"


    public static class type_decl_protocol_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_decl_protocol_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:835:1: type_decl_protocol_predicate : ( 'id' '<' ) ;
    public final ObjcParser.type_decl_protocol_predicate_return type_decl_protocol_predicate() throws RecognitionException {
        ObjcParser.type_decl_protocol_predicate_return retval = new ObjcParser.type_decl_protocol_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal600=null;
        Token char_literal601=null;

        Object string_literal600_tree=null;
        Object char_literal601_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:3: ( ( 'id' '<' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( 'id' '<' )
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:5: ( 'id' '<' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:836:6: 'id' '<'
            {
            string_literal600=(Token)match(input,191,FOLLOW_191_in_type_decl_protocol_predicate5337); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal600_tree = 
            (Object)adaptor.create(string_literal600)
            ;
            adaptor.addChild(root_0, string_literal600_tree);
            }

            char_literal601=(Token)match(input,137,FOLLOW_137_in_type_decl_protocol_predicate5339); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal601_tree = 
            (Object)adaptor.create(char_literal601)
            ;
            adaptor.addChild(root_0, char_literal601_tree);
            }

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_decl_protocol_predicate"


    public static class type_declaration_protocol_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_protocol"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:839:1: type_declaration_protocol : 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) ;
    public final ObjcParser.type_declaration_protocol_return type_declaration_protocol() throws RecognitionException {
        ObjcParser.type_declaration_protocol_return retval = new ObjcParser.type_declaration_protocol_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal602=null;
        Token char_literal603=null;
        Token char_literal605=null;
        ObjcParser.type_dec_internal_return type_dec_internal604 =null;


        Object string_literal602_tree=null;
        Object char_literal603_tree=null;
        Object char_literal605_tree=null;
        RewriteRuleTokenStream stream_143=new RewriteRuleTokenStream(adaptor,"token 143");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_type_dec_internal=new RewriteRuleSubtreeStream(adaptor,"rule type_dec_internal");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:840:3: ( 'id' '<' type_dec_internal '>' -> ^( TYPE_PLAIN type_dec_internal ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:840:5: 'id' '<' type_dec_internal '>'
            {
            string_literal602=(Token)match(input,191,FOLLOW_191_in_type_declaration_protocol5355); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_191.add(string_literal602);


            char_literal603=(Token)match(input,137,FOLLOW_137_in_type_declaration_protocol5357); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_137.add(char_literal603);


            pushFollow(FOLLOW_type_dec_internal_in_type_declaration_protocol5359);
            type_dec_internal604=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec_internal.add(type_dec_internal604.getTree());

            char_literal605=(Token)match(input,143,FOLLOW_143_in_type_declaration_protocol5361); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_143.add(char_literal605);


            // AST REWRITE
            // elements: type_dec_internal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 840:36: -> ^( TYPE_PLAIN type_dec_internal )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:840:39: ^( TYPE_PLAIN type_dec_internal )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec_internal.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_protocol"


    public static class type_declaration_struct_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:843:1: type_declaration_struct_simple : 'struct' typedef_name -> ^( STRUCT typedef_name ) ;
    public final ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple() throws RecognitionException {
        ObjcParser.type_declaration_struct_simple_return retval = new ObjcParser.type_declaration_struct_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal606=null;
        ObjcParser.typedef_name_return typedef_name607 =null;


        Object string_literal606_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:3: ( 'struct' typedef_name -> ^( STRUCT typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:5: 'struct' typedef_name
            {
            string_literal606=(Token)match(input,199,FOLLOW_199_in_type_declaration_struct_simple5383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_199.add(string_literal606);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_simple5385);
            typedef_name607=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name607.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 844:27: -> ^( STRUCT typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:844:29: ^( STRUCT typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_simple"


    public static class type_declaration_union_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:847:1: type_declaration_union_simple : 'union' typedef_name -> ^( UNION typedef_name ) ;
    public final ObjcParser.type_declaration_union_simple_return type_declaration_union_simple() throws RecognitionException {
        ObjcParser.type_declaration_union_simple_return retval = new ObjcParser.type_declaration_union_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal608=null;
        ObjcParser.typedef_name_return typedef_name609 =null;


        Object string_literal608_tree=null;
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:3: ( 'union' typedef_name -> ^( UNION typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:5: 'union' typedef_name
            {
            string_literal608=(Token)match(input,203,FOLLOW_203_in_type_declaration_union_simple5405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_203.add(string_literal608);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_union_simple5407);
            typedef_name609=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name609.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 848:26: -> ^( UNION typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:848:28: ^( UNION typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION, "UNION")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_simple"


    public static class type_declaration_enum_simple_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_simple"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:851:1: type_declaration_enum_simple : 'enum' typedef_name -> ^( ENUM typedef_name ) ;
    public final ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple() throws RecognitionException {
        ObjcParser.type_declaration_enum_simple_return retval = new ObjcParser.type_declaration_enum_simple_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal610=null;
        ObjcParser.typedef_name_return typedef_name611 =null;


        Object string_literal610_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:3: ( 'enum' typedef_name -> ^( ENUM typedef_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:5: 'enum' typedef_name
            {
            string_literal610=(Token)match(input,186,FOLLOW_186_in_type_declaration_enum_simple5431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal610);


            pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_simple5433);
            typedef_name611=typedef_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name611.getTree());

            // AST REWRITE
            // elements: typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 852:25: -> ^( ENUM typedef_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:852:27: ^( ENUM typedef_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM, "ENUM")
                , root_1);

                adaptor.addChild(root_1, stream_typedef_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_simple"


    public static class type_declaration_struct_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:855:1: type_declaration_struct_full : 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_struct_full_return type_declaration_struct_full() throws RecognitionException {
        ObjcParser.type_declaration_struct_full_return retval = new ObjcParser.type_declaration_struct_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal612=null;
        ObjcParser.typedef_name_return typedef_name613 =null;

        ObjcParser.struct_wrapper_return struct_wrapper614 =null;


        Object string_literal612_tree=null;
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:3: ( 'struct' ( typedef_name )? struct_wrapper -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:5: 'struct' ( typedef_name )? struct_wrapper
            {
            string_literal612=(Token)match(input,199,FOLLOW_199_in_type_declaration_struct_full5453); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_199.add(string_literal612);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:14: ( typedef_name )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==ID) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:14: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_struct_full5455);
                    typedef_name613=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name613.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_struct_full5458);
            struct_wrapper614=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper614.getTree());

            // AST REWRITE
            // elements: struct_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 856:43: -> ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:45: ^( STRUCT_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT_DEC, "STRUCT_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:856:58: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct_full"


    public static class type_declaration_union_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:859:1: type_declaration_union_full : 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) ;
    public final ObjcParser.type_declaration_union_full_return type_declaration_union_full() throws RecognitionException {
        ObjcParser.type_declaration_union_full_return retval = new ObjcParser.type_declaration_union_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal615=null;
        ObjcParser.typedef_name_return typedef_name616 =null;

        ObjcParser.struct_wrapper_return struct_wrapper617 =null;


        Object string_literal615_tree=null;
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleSubtreeStream stream_struct_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule struct_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:3: ( 'union' ( typedef_name )? struct_wrapper -> ^( UNION_DEC ( typedef_name )? struct_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:5: 'union' ( typedef_name )? struct_wrapper
            {
            string_literal615=(Token)match(input,203,FOLLOW_203_in_type_declaration_union_full5482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_203.add(string_literal615);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:13: ( typedef_name )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==ID) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:13: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_union_full5484);
                    typedef_name616=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name616.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_struct_wrapper_in_type_declaration_union_full5487);
            struct_wrapper617=struct_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct_wrapper.add(struct_wrapper617.getTree());

            // AST REWRITE
            // elements: typedef_name, struct_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 860:42: -> ^( UNION_DEC ( typedef_name )? struct_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:44: ^( UNION_DEC ( typedef_name )? struct_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(UNION_DEC, "UNION_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:860:56: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_struct_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union_full"


    public static class type_declaration_enum_full_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum_full"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:863:1: type_declaration_enum_full : 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) ;
    public final ObjcParser.type_declaration_enum_full_return type_declaration_enum_full() throws RecognitionException {
        ObjcParser.type_declaration_enum_full_return retval = new ObjcParser.type_declaration_enum_full_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal618=null;
        ObjcParser.typedef_name_return typedef_name619 =null;

        ObjcParser.enum_wrapper_return enum_wrapper620 =null;


        Object string_literal618_tree=null;
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_enum_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule enum_wrapper");
        RewriteRuleSubtreeStream stream_typedef_name=new RewriteRuleSubtreeStream(adaptor,"rule typedef_name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:3: ( 'enum' ( typedef_name )? enum_wrapper -> ^( ENUM_DEC ( typedef_name )? enum_wrapper ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:5: 'enum' ( typedef_name )? enum_wrapper
            {
            string_literal618=(Token)match(input,186,FOLLOW_186_in_type_declaration_enum_full5511); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_186.add(string_literal618);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:12: ( typedef_name )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==ID) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:12: typedef_name
                    {
                    pushFollow(FOLLOW_typedef_name_in_type_declaration_enum_full5513);
                    typedef_name619=typedef_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typedef_name.add(typedef_name619.getTree());

                    }
                    break;

            }


            pushFollow(FOLLOW_enum_wrapper_in_type_declaration_enum_full5516);
            enum_wrapper620=enum_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enum_wrapper.add(enum_wrapper620.getTree());

            // AST REWRITE
            // elements: enum_wrapper, typedef_name
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 864:39: -> ^( ENUM_DEC ( typedef_name )? enum_wrapper )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:41: ^( ENUM_DEC ( typedef_name )? enum_wrapper )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(ENUM_DEC, "ENUM_DEC")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:864:52: ( typedef_name )?
                if ( stream_typedef_name.hasNext() ) {
                    adaptor.addChild(root_1, stream_typedef_name.nextTree());

                }
                stream_typedef_name.reset();

                adaptor.addChild(root_1, stream_enum_wrapper.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum_full"


    public static class type_declaration_struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:867:1: type_declaration_struct : ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple );
    public final ObjcParser.type_declaration_struct_return type_declaration_struct() throws RecognitionException {
        ObjcParser.type_declaration_struct_return retval = new ObjcParser.type_declaration_struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_struct_full_return type_declaration_struct_full621 =null;

        ObjcParser.type_declaration_struct_simple_return type_declaration_struct_simple622 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:3: ( ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full | type_declaration_struct_simple )
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==199) ) {
                int LA140_1 = input.LA(2);

                if ( (LA140_1==ID) ) {
                    int LA140_2 = input.LA(3);

                    if ( (LA140_2==207) && (synpred29_Objc())) {
                        alt140=1;
                    }
                    else if ( (LA140_2==ID||LA140_2==117||(LA140_2 >= 121 && LA140_2 <= 122)) ) {
                        alt140=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 140, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA140_1==207) && (synpred29_Objc())) {
                    alt140=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 140, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);

                throw nvae;

            }
            switch (alt140) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:5: ( 'struct' ( typedef_name )? '{' )=> type_declaration_struct_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_full_in_type_declaration_struct5551);
                    type_declaration_struct_full621=type_declaration_struct_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_full621.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:869:5: type_declaration_struct_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5557);
                    type_declaration_struct_simple622=type_declaration_struct_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_struct_simple622.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_struct"


    public static class type_declaration_union_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_union"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:872:1: type_declaration_union : ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple );
    public final ObjcParser.type_declaration_union_return type_declaration_union() throws RecognitionException {
        ObjcParser.type_declaration_union_return retval = new ObjcParser.type_declaration_union_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_union_full_return type_declaration_union_full623 =null;

        ObjcParser.type_declaration_union_simple_return type_declaration_union_simple624 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:3: ( ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full | type_declaration_union_simple )
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==203) ) {
                int LA141_1 = input.LA(2);

                if ( (LA141_1==ID) ) {
                    int LA141_2 = input.LA(3);

                    if ( (LA141_2==207) && (synpred30_Objc())) {
                        alt141=1;
                    }
                    else if ( (LA141_2==ID||LA141_2==117||LA141_2==121) ) {
                        alt141=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 141, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA141_1==207) && (synpred30_Objc())) {
                    alt141=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;

            }
            switch (alt141) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:5: ( 'union' ( typedef_name )? '{' )=> type_declaration_union_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_full_in_type_declaration_union5581);
                    type_declaration_union_full623=type_declaration_union_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_full623.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:874:5: type_declaration_union_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_union_simple_in_type_declaration_union5587);
                    type_declaration_union_simple624=type_declaration_union_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_union_simple624.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_union"


    public static class type_declaration_enum_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_declaration_enum"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:877:1: type_declaration_enum : ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple );
    public final ObjcParser.type_declaration_enum_return type_declaration_enum() throws RecognitionException {
        ObjcParser.type_declaration_enum_return retval = new ObjcParser.type_declaration_enum_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_declaration_enum_full_return type_declaration_enum_full625 =null;

        ObjcParser.type_declaration_enum_simple_return type_declaration_enum_simple626 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:3: ( ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full | type_declaration_enum_simple )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==186) ) {
                int LA142_1 = input.LA(2);

                if ( (LA142_1==ID) ) {
                    int LA142_2 = input.LA(3);

                    if ( (LA142_2==207) && (synpred31_Objc())) {
                        alt142=1;
                    }
                    else if ( (LA142_2==ID||LA142_2==117||LA142_2==121) ) {
                        alt142=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 142, 2, input);

                        throw nvae;

                    }
                }
                else if ( (LA142_1==207) && (synpred31_Objc())) {
                    alt142=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 142, 1, input);

                    throw nvae;

                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;

            }
            switch (alt142) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:5: ( 'enum' ( typedef_name )? '{' )=> type_declaration_enum_full
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_full_in_type_declaration_enum5611);
                    type_declaration_enum_full625=type_declaration_enum_full();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_full625.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:879:5: type_declaration_enum_simple
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5617);
                    type_declaration_enum_simple626=type_declaration_enum_simple();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration_enum_simple626.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_declaration_enum"


    public static class enum_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:882:1: enum_wrapper : '{' ( enum_element )+ '}' ;
    public final ObjcParser.enum_wrapper_return enum_wrapper() throws RecognitionException {
        ObjcParser.enum_wrapper_return retval = new ObjcParser.enum_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal627=null;
        Token char_literal629=null;
        ObjcParser.enum_element_return enum_element628 =null;


        Object char_literal627_tree=null;
        Object char_literal629_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:3: ( '{' ( enum_element )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:883:5: '{' ( enum_element )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal627=(Token)match(input,207,FOLLOW_207_in_enum_wrapper5630); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal627_tree = 
            (Object)adaptor.create(char_literal627)
            ;
            adaptor.addChild(root_0, char_literal627_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:9: ( enum_element )+
            int cnt143=0;
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==ID||LA143_0==MULTI_COMMENT_LIT||LA143_0==SINGLE_COMMENT_LIT||LA143_0==127) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:884:9: enum_element
            	    {
            	    pushFollow(FOLLOW_enum_element_in_enum_wrapper5640);
            	    enum_element628=enum_element();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, enum_element628.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt143 >= 1 ) break loop143;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(143, input);
                        throw eee;
                }
                cnt143++;
            } while (true);


            char_literal629=(Token)match(input,211,FOLLOW_211_in_enum_wrapper5647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal629_tree = 
            (Object)adaptor.create(char_literal629)
            ;
            adaptor.addChild(root_0, char_literal629_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_wrapper"


    public static class enum_element_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "enum_element"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:888:1: enum_element : ( ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments );
    public final ObjcParser.enum_element_return enum_element() throws RecognitionException {
        ObjcParser.enum_element_return retval = new ObjcParser.enum_element_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal630=null;
        Token char_literal634=null;
        ObjcParser.name_return name631 =null;

        ObjcParser.op_assign_wrapper_return op_assign_wrapper632 =null;

        ObjcParser.element_value_return element_value633 =null;

        ObjcParser.comments_return comments635 =null;


        Object char_literal630_tree=null;
        Object char_literal634_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_op_assign_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule op_assign_wrapper");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:3: ( ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )? -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? ) | comments )
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==ID||LA147_0==127) ) {
                alt147=1;
            }
            else if ( (LA147_0==MULTI_COMMENT_LIT||LA147_0==SINGLE_COMMENT_LIT) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;

            }
            switch (alt147) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:5: ( ',' )? name ( op_assign_wrapper element_value )? ( ',' )?
                    {
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:5: ( ',' )?
                    int alt144=2;
                    int LA144_0 = input.LA(1);

                    if ( (LA144_0==127) ) {
                        alt144=1;
                    }
                    switch (alt144) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:5: ','
                            {
                            char_literal630=(Token)match(input,127,FOLLOW_127_in_enum_element5662); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal630);


                            }
                            break;

                    }


                    pushFollow(FOLLOW_name_in_enum_element5665);
                    name631=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name631.getTree());

                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:15: ( op_assign_wrapper element_value )?
                    int alt145=2;
                    int LA145_0 = input.LA(1);

                    if ( (LA145_0==118||LA145_0==123||LA145_0==126||LA145_0==130||LA145_0==134||LA145_0==139||LA145_0==141||LA145_0==146||LA145_0==209) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:16: op_assign_wrapper element_value
                            {
                            pushFollow(FOLLOW_op_assign_wrapper_in_enum_element5668);
                            op_assign_wrapper632=op_assign_wrapper();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_op_assign_wrapper.add(op_assign_wrapper632.getTree());

                            pushFollow(FOLLOW_element_value_in_enum_element5670);
                            element_value633=element_value();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_element_value.add(element_value633.getTree());

                            }
                            break;

                    }


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:50: ( ',' )?
                    int alt146=2;
                    int LA146_0 = input.LA(1);

                    if ( (LA146_0==127) ) {
                        alt146=1;
                    }
                    switch (alt146) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:50: ','
                            {
                            char_literal634=(Token)match(input,127,FOLLOW_127_in_enum_element5674); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_127.add(char_literal634);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: name, op_assign_wrapper, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 889:55: -> ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:57: ^( ENUM_FIELD name ( op_assign_wrapper element_value )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(ENUM_FIELD, "ENUM_FIELD")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:889:75: ( op_assign_wrapper element_value )?
                        if ( stream_op_assign_wrapper.hasNext()||stream_element_value.hasNext() ) {
                            adaptor.addChild(root_1, stream_op_assign_wrapper.nextTree());

                            adaptor.addChild(root_1, stream_element_value.nextTree());

                        }
                        stream_op_assign_wrapper.reset();
                        stream_element_value.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:890:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_enum_element5695);
                    comments635=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments635.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "enum_element"


    public static class struct_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:893:1: struct_wrapper : struct -> ^( STRUCT struct ) ;
    public final ObjcParser.struct_wrapper_return struct_wrapper() throws RecognitionException {
        ObjcParser.struct_wrapper_return retval = new ObjcParser.struct_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.struct_return struct636 =null;


        RewriteRuleSubtreeStream stream_struct=new RewriteRuleSubtreeStream(adaptor,"rule struct");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:3: ( struct -> ^( STRUCT struct ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:5: struct
            {
            pushFollow(FOLLOW_struct_in_struct_wrapper5710);
            struct636=struct();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_struct.add(struct636.getTree());

            // AST REWRITE
            // elements: struct
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 894:12: -> ^( STRUCT struct )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:894:15: ^( STRUCT struct )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRUCT, "STRUCT")
                , root_1);

                adaptor.addChild(root_1, stream_struct.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_wrapper"


    public static class struct_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:896:1: struct : '{' ( struct_internal )+ '}' ;
    public final ObjcParser.struct_return struct() throws RecognitionException {
        ObjcParser.struct_return retval = new ObjcParser.struct_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal637=null;
        Token char_literal639=null;
        ObjcParser.struct_internal_return struct_internal638 =null;


        Object char_literal637_tree=null;
        Object char_literal639_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:3: ( '{' ( struct_internal )+ '}' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:897:5: '{' ( struct_internal )+ '}'
            {
            root_0 = (Object)adaptor.nil();


            char_literal637=(Token)match(input,207,FOLLOW_207_in_struct5728); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal637_tree = 
            (Object)adaptor.create(char_literal637)
            ;
            adaptor.addChild(root_0, char_literal637_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:7: ( struct_internal )+
            int cnt148=0;
            loop148:
            do {
                int alt148=2;
                int LA148_0 = input.LA(1);

                if ( (LA148_0==ID||LA148_0==MULTI_COMMENT_LIT||LA148_0==SINGLE_COMMENT_LIT||LA148_0==119||LA148_0==178||LA148_0==181||LA148_0==186||LA148_0==191||(LA148_0 >= 194 && LA148_0 <= 195)||LA148_0==197||LA148_0==199||(LA148_0 >= 203 && LA148_0 <= 205)) ) {
                    alt148=1;
                }


                switch (alt148) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:898:7: struct_internal
            	    {
            	    pushFollow(FOLLOW_struct_internal_in_struct5737);
            	    struct_internal638=struct_internal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, struct_internal638.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt148 >= 1 ) break loop148;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(148, input);
                        throw eee;
                }
                cnt148++;
            } while (true);


            char_literal639=(Token)match(input,211,FOLLOW_211_in_struct5744); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal639_tree = 
            (Object)adaptor.create(char_literal639)
            ;
            adaptor.addChild(root_0, char_literal639_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct"


    public static class struct_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "struct_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:902:1: struct_internal : ( field_declaration_wrapper | comments );
    public final ObjcParser.struct_internal_return struct_internal() throws RecognitionException {
        ObjcParser.struct_internal_return retval = new ObjcParser.struct_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.field_declaration_wrapper_return field_declaration_wrapper640 =null;

        ObjcParser.comments_return comments641 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:3: ( field_declaration_wrapper | comments )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==ID||LA149_0==119||LA149_0==178||LA149_0==181||LA149_0==186||LA149_0==191||(LA149_0 >= 194 && LA149_0 <= 195)||LA149_0==197||LA149_0==199||(LA149_0 >= 203 && LA149_0 <= 205)) ) {
                alt149=1;
            }
            else if ( (LA149_0==MULTI_COMMENT_LIT||LA149_0==SINGLE_COMMENT_LIT) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;

            }
            switch (alt149) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:903:5: field_declaration_wrapper
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_field_declaration_wrapper_in_struct_internal5758);
                    field_declaration_wrapper640=field_declaration_wrapper();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field_declaration_wrapper640.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:904:5: comments
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_comments_in_struct_internal5764);
                    comments641=comments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comments641.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "struct_internal"


    public static class type_dec_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:907:1: type_dec_wrapper : type_dec -> ^( TYPE_PLAIN type_dec ) ;
    public final ObjcParser.type_dec_wrapper_return type_dec_wrapper() throws RecognitionException {
        ObjcParser.type_dec_wrapper_return retval = new ObjcParser.type_dec_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.type_dec_return type_dec642 =null;


        RewriteRuleSubtreeStream stream_type_dec=new RewriteRuleSubtreeStream(adaptor,"rule type_dec");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:3: ( type_dec -> ^( TYPE_PLAIN type_dec ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:5: type_dec
            {
            pushFollow(FOLLOW_type_dec_in_type_dec_wrapper5779);
            type_dec642=type_dec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type_dec.add(type_dec642.getTree());

            // AST REWRITE
            // elements: type_dec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:14: -> ^( TYPE_PLAIN type_dec )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:908:17: ^( TYPE_PLAIN type_dec )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(TYPE_PLAIN, "TYPE_PLAIN")
                , root_1);

                adaptor.addChild(root_1, stream_type_dec.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_wrapper"


    public static class type_dec_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:1: type_dec : type_dec_internal ( '<' ID '*' '>' )? ( '*' )* ( array_size )* ;
    public final ObjcParser.type_dec_return type_dec() throws RecognitionException {
        ObjcParser.type_dec_return retval = new ObjcParser.type_dec_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal644=null;
        Token ID645=null;
        Token char_literal646=null;
        Token char_literal647=null;
        Token char_literal648=null;
        ObjcParser.type_dec_internal_return type_dec_internal643 =null;

        ObjcParser.array_size_return array_size649 =null;


        Object char_literal644_tree=null;
        Object ID645_tree=null;
        Object char_literal646_tree=null;
        Object char_literal647_tree=null;
        Object char_literal648_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:9: ( type_dec_internal ( '<' ID '*' '>' )? ( '*' )* ( array_size )* )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:11: type_dec_internal ( '<' ID '*' '>' )? ( '*' )* ( array_size )*
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_type_dec_internal_in_type_dec5799);
            type_dec_internal643=type_dec_internal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_dec_internal643.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:28: ( '<' ID '*' '>' )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==137) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:29: '<' ID '*' '>'
                    {
                    char_literal644=(Token)match(input,137,FOLLOW_137_in_type_dec5801); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal644_tree = 
                    (Object)adaptor.create(char_literal644)
                    ;
                    adaptor.addChild(root_0, char_literal644_tree);
                    }

                    ID645=(Token)match(input,ID,FOLLOW_ID_in_type_dec5803); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID645_tree = 
                    (Object)adaptor.create(ID645)
                    ;
                    adaptor.addChild(root_0, ID645_tree);
                    }

                    char_literal646=(Token)match(input,122,FOLLOW_122_in_type_dec5805); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal646_tree = 
                    (Object)adaptor.create(char_literal646)
                    ;
                    adaptor.addChild(root_0, char_literal646_tree);
                    }

                    char_literal647=(Token)match(input,143,FOLLOW_143_in_type_dec5807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal647_tree = 
                    (Object)adaptor.create(char_literal647)
                    ;
                    adaptor.addChild(root_0, char_literal647_tree);
                    }

                    }
                    break;

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:46: ( '*' )*
            loop151:
            do {
                int alt151=2;
                int LA151_0 = input.LA(1);

                if ( (LA151_0==122) ) {
                    int LA151_2 = input.LA(2);

                    if ( (LA151_2==ID||LA151_2==117||(LA151_2 >= 121 && LA151_2 <= 122)||LA151_2==127||LA151_2==173) ) {
                        alt151=1;
                    }


                }


                switch (alt151) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:46: '*'
            	    {
            	    char_literal648=(Token)match(input,122,FOLLOW_122_in_type_dec5811); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal648_tree = 
            	    (Object)adaptor.create(char_literal648)
            	    ;
            	    adaptor.addChild(root_0, char_literal648_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop151;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:51: ( array_size )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==173) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:911:52: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_type_dec5815);
            	    array_size649=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, array_size649.getTree());

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec"


    public static class type_dec_internal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "type_dec_internal"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:914:1: type_dec_internal : ( knownTypes | ID );
    public final ObjcParser.type_dec_internal_return type_dec_internal() throws RecognitionException {
        ObjcParser.type_dec_internal_return retval = new ObjcParser.type_dec_internal_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID651=null;
        ObjcParser.knownTypes_return knownTypes650 =null;


        Object ID651_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:3: ( knownTypes | ID )
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==191||(LA153_0 >= 194 && LA153_0 <= 195)||LA153_0==197) ) {
                alt153=1;
            }
            else if ( (LA153_0==ID) ) {
                alt153=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;

            }
            switch (alt153) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:915:5: knownTypes
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_knownTypes_in_type_dec_internal5832);
                    knownTypes650=knownTypes();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, knownTypes650.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:916:7: ID
                    {
                    root_0 = (Object)adaptor.nil();


                    ID651=(Token)match(input,ID,FOLLOW_ID_in_type_dec_internal5841); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ID651_tree = 
                    (Object)adaptor.create(ID651)
                    ;
                    adaptor.addChild(root_0, ID651_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "type_dec_internal"


    public static class knownTypes_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "knownTypes"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:919:1: knownTypes : ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? );
    public final ObjcParser.knownTypes_return knownTypes() throws RecognitionException {
        ObjcParser.knownTypes_return retval = new ObjcParser.knownTypes_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token string_literal652=null;
        Token string_literal653=null;
        Token string_literal654=null;
        Token string_literal655=null;
        Token string_literal656=null;
        Token string_literal657=null;

        Object string_literal652_tree=null;
        Object string_literal653_tree=null;
        Object string_literal654_tree=null;
        Object string_literal655_tree=null;
        Object string_literal656_tree=null;
        Object string_literal657_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:3: ( 'int' | 'id' | ( 'long' )+ ( 'int' )? | ( 'short' )+ ( 'int' )? )
            int alt158=4;
            switch ( input.LA(1) ) {
            case 194:
                {
                alt158=1;
                }
                break;
            case 191:
                {
                alt158=2;
                }
                break;
            case 195:
                {
                alt158=3;
                }
                break;
            case 197:
                {
                alt158=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;

            }

            switch (alt158) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:920:5: 'int'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal652=(Token)match(input,194,FOLLOW_194_in_knownTypes5854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal652_tree = 
                    (Object)adaptor.create(string_literal652)
                    ;
                    adaptor.addChild(root_0, string_literal652_tree);
                    }

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:921:5: 'id'
                    {
                    root_0 = (Object)adaptor.nil();


                    string_literal653=(Token)match(input,191,FOLLOW_191_in_knownTypes5860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal653_tree = 
                    (Object)adaptor.create(string_literal653)
                    ;
                    adaptor.addChild(root_0, string_literal653_tree);
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:5: ( 'long' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:5: ( 'long' )+
                    int cnt154=0;
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==195) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:5: 'long'
                    	    {
                    	    string_literal654=(Token)match(input,195,FOLLOW_195_in_knownTypes5866); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal654_tree = 
                    	    (Object)adaptor.create(string_literal654)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal654_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt154 >= 1 ) break loop154;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(154, input);
                                throw eee;
                        }
                        cnt154++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:13: ( 'int' )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==194) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:922:13: 'int'
                            {
                            string_literal655=(Token)match(input,194,FOLLOW_194_in_knownTypes5869); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal655_tree = 
                            (Object)adaptor.create(string_literal655)
                            ;
                            adaptor.addChild(root_0, string_literal655_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:5: ( 'short' )+ ( 'int' )?
                    {
                    root_0 = (Object)adaptor.nil();


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:5: ( 'short' )+
                    int cnt156=0;
                    loop156:
                    do {
                        int alt156=2;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==197) ) {
                            alt156=1;
                        }


                        switch (alt156) {
                    	case 1 :
                    	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:5: 'short'
                    	    {
                    	    string_literal656=(Token)match(input,197,FOLLOW_197_in_knownTypes5876); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    string_literal656_tree = 
                    	    (Object)adaptor.create(string_literal656)
                    	    ;
                    	    adaptor.addChild(root_0, string_literal656_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt156 >= 1 ) break loop156;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(156, input);
                                throw eee;
                        }
                        cnt156++;
                    } while (true);


                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:14: ( 'int' )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==194) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:923:14: 'int'
                            {
                            string_literal657=(Token)match(input,194,FOLLOW_194_in_knownTypes5879); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal657_tree = 
                            (Object)adaptor.create(string_literal657)
                            ;
                            adaptor.addChild(root_0, string_literal657_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "knownTypes"


    public static class field_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:926:1: field_name : ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) ;
    public final ObjcParser.field_name_return field_name() throws RecognitionException {
        ObjcParser.field_name_return retval = new ObjcParser.field_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID658=null;
        ObjcParser.array_size_return array_size659 =null;

        ObjcParser.field_crap_return field_crap660 =null;


        Object ID658_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");
        RewriteRuleSubtreeStream stream_field_crap=new RewriteRuleSubtreeStream(adaptor,"rule field_crap");
        RewriteRuleSubtreeStream stream_array_size=new RewriteRuleSubtreeStream(adaptor,"rule array_size");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:3: ( ID ( array_size )* ( field_crap )? -> ^( FIELD_NAME ID ( array_size )* ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:5: ID ( array_size )* ( field_crap )?
            {
            ID658=(Token)match(input,ID,FOLLOW_ID_in_field_name5895); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID658);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:8: ( array_size )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==173) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:8: array_size
            	    {
            	    pushFollow(FOLLOW_array_size_in_field_name5897);
            	    array_size659=array_size();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_array_size.add(array_size659.getTree());

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:20: ( field_crap )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==135) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:21: field_crap
                    {
                    pushFollow(FOLLOW_field_crap_in_field_name5901);
                    field_crap660=field_crap();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_field_crap.add(field_crap660.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: array_size, ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 927:34: -> ^( FIELD_NAME ID ( array_size )* )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:37: ^( FIELD_NAME ID ( array_size )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(FIELD_NAME, "FIELD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:927:53: ( array_size )*
                while ( stream_array_size.hasNext() ) {
                    adaptor.addChild(root_1, stream_array_size.nextTree());

                }
                stream_array_size.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_name"


    public static class array_size_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "array_size"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:930:1: array_size : '[' ( NUMBER_LITERAL | ID )? ']' ;
    public final ObjcParser.array_size_return array_size() throws RecognitionException {
        ObjcParser.array_size_return retval = new ObjcParser.array_size_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal661=null;
        Token set662=null;
        Token char_literal663=null;

        Object char_literal661_tree=null;
        Object set662_tree=null;
        Object char_literal663_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:931:3: ( '[' ( NUMBER_LITERAL | ID )? ']' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:931:5: '[' ( NUMBER_LITERAL | ID )? ']'
            {
            root_0 = (Object)adaptor.nil();


            char_literal661=(Token)match(input,173,FOLLOW_173_in_array_size5932); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal661_tree = 
            (Object)adaptor.create(char_literal661)
            ;
            adaptor.addChild(root_0, char_literal661_tree);
            }

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:931:9: ( NUMBER_LITERAL | ID )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==ID||LA161_0==NUMBER_LITERAL) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
                    {
                    set662=(Token)input.LT(1);

                    if ( input.LA(1)==ID||input.LA(1)==NUMBER_LITERAL ) {
                        input.consume();
                        if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                        (Object)adaptor.create(set662)
                        );
                        state.errorRecovery=false;
                        state.failed=false;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        MismatchedSetException mse = new MismatchedSetException(null,input);
                        throw mse;
                    }


                    }
                    break;

            }


            char_literal663=(Token)match(input,175,FOLLOW_175_in_array_size5943); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal663_tree = 
            (Object)adaptor.create(char_literal663)
            ;
            adaptor.addChild(root_0, char_literal663_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "array_size"


    public static class field_crap_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "field_crap"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:933:1: field_crap : ':' NUMBER_LITERAL ;
    public final ObjcParser.field_crap_return field_crap() throws RecognitionException {
        ObjcParser.field_crap_return retval = new ObjcParser.field_crap_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal664=null;
        Token NUMBER_LITERAL665=null;

        Object char_literal664_tree=null;
        Object NUMBER_LITERAL665_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:3: ( ':' NUMBER_LITERAL )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:934:5: ':' NUMBER_LITERAL
            {
            root_0 = (Object)adaptor.nil();


            char_literal664=(Token)match(input,135,FOLLOW_135_in_field_crap5953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal664_tree = 
            (Object)adaptor.create(char_literal664)
            ;
            adaptor.addChild(root_0, char_literal664_tree);
            }

            NUMBER_LITERAL665=(Token)match(input,NUMBER_LITERAL,FOLLOW_NUMBER_LITERAL_in_field_crap5955); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NUMBER_LITERAL665_tree = 
            (Object)adaptor.create(NUMBER_LITERAL665)
            ;
            adaptor.addChild(root_0, NUMBER_LITERAL665_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "field_crap"


    public static class method_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:936:1: method_declaration : method_modifier_wrapper method_declaration_variants ;
    public final ObjcParser.method_declaration_return method_declaration() throws RecognitionException {
        ObjcParser.method_declaration_return retval = new ObjcParser.method_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_wrapper_return method_modifier_wrapper666 =null;

        ObjcParser.method_declaration_variants_return method_declaration_variants667 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:3: ( method_modifier_wrapper method_declaration_variants )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:937:5: method_modifier_wrapper method_declaration_variants
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_wrapper_in_method_declaration5967);
            method_modifier_wrapper666=method_modifier_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier_wrapper666.getTree());

            pushFollow(FOLLOW_method_declaration_variants_in_method_declaration5969);
            method_declaration_variants667=method_declaration_variants();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_variants667.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration"


    public static class method_modifier_wrapper_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier_wrapper"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:939:1: method_modifier_wrapper : method_modifier -> ^( MODIFIER method_modifier ) ;
    public final ObjcParser.method_modifier_wrapper_return method_modifier_wrapper() throws RecognitionException {
        ObjcParser.method_modifier_wrapper_return retval = new ObjcParser.method_modifier_wrapper_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_modifier_return method_modifier668 =null;


        RewriteRuleSubtreeStream stream_method_modifier=new RewriteRuleSubtreeStream(adaptor,"rule method_modifier");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:940:3: ( method_modifier -> ^( MODIFIER method_modifier ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:940:5: method_modifier
            {
            pushFollow(FOLLOW_method_modifier_in_method_modifier_wrapper5981);
            method_modifier668=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_method_modifier.add(method_modifier668.getTree());

            // AST REWRITE
            // elements: method_modifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 940:21: -> ^( MODIFIER method_modifier )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:940:24: ^( MODIFIER method_modifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(MODIFIER, "MODIFIER")
                , root_1);

                adaptor.addChild(root_1, stream_method_modifier.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier_wrapper"


    public static class method_modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_modifier"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:942:1: method_modifier : ( '+' | '-' );
    public final ObjcParser.method_modifier_return method_modifier() throws RecognitionException {
        ObjcParser.method_modifier_return retval = new ObjcParser.method_modifier_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set669=null;

        Object set669_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:943:3: ( '+' | '-' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set669=(Token)input.LT(1);

            if ( input.LA(1)==124||input.LA(1)==128 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set669)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_modifier"


    public static class method_declaration_variants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_variants"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:945:1: method_declaration_variants : method_declaration_common ;
    public final ObjcParser.method_declaration_variants_return method_declaration_variants() throws RecognitionException {
        ObjcParser.method_declaration_variants_return retval = new ObjcParser.method_declaration_variants_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_declaration_common_return method_declaration_common670 =null;



        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:3: ( method_declaration_common )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:946:6: method_declaration_common
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_declaration_common_in_method_declaration_variants6018);
            method_declaration_common670=method_declaration_common();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_declaration_common670.getTree());

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_variants"


    public static class method_declaration_common_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_common"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:948:1: method_declaration_common : ( '(' type_declaration ')' method_name ) ( method_params )? ';' ;
    public final ObjcParser.method_declaration_common_return method_declaration_common() throws RecognitionException {
        ObjcParser.method_declaration_common_return retval = new ObjcParser.method_declaration_common_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal671=null;
        Token char_literal673=null;
        Token char_literal676=null;
        ObjcParser.type_declaration_return type_declaration672 =null;

        ObjcParser.method_name_return method_name674 =null;

        ObjcParser.method_params_return method_params675 =null;


        Object char_literal671_tree=null;
        Object char_literal673_tree=null;
        Object char_literal676_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:3: ( ( '(' type_declaration ')' method_name ) ( method_params )? ';' )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:5: ( '(' type_declaration ')' method_name ) ( method_params )? ';'
            {
            root_0 = (Object)adaptor.nil();


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:5: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:6: '(' type_declaration ')' method_name
            {
            char_literal671=(Token)match(input,119,FOLLOW_119_in_method_declaration_common6031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal671_tree = 
            (Object)adaptor.create(char_literal671)
            ;
            adaptor.addChild(root_0, char_literal671_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_common6033);
            type_declaration672=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration672.getTree());

            char_literal673=(Token)match(input,121,FOLLOW_121_in_method_declaration_common6035); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal673_tree = 
            (Object)adaptor.create(char_literal673)
            ;
            adaptor.addChild(root_0, char_literal673_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_common6037);
            method_name674=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name674.getTree());

            }


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:44: ( method_params )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==ID||LA162_0==135) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:949:44: method_params
                    {
                    pushFollow(FOLLOW_method_params_in_method_declaration_common6040);
                    method_params675=method_params();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method_params675.getTree());

                    }
                    break;

            }


            char_literal676=(Token)match(input,136,FOLLOW_136_in_method_declaration_common6043); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal676_tree = 
            (Object)adaptor.create(char_literal676)
            ;
            adaptor.addChild(root_0, char_literal676_tree);
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_common"


    public static class method_declaration_predicate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_declaration_predicate"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:951:1: method_declaration_predicate : method_modifier ( '(' type_declaration ')' method_name ) ;
    public final ObjcParser.method_declaration_predicate_return method_declaration_predicate() throws RecognitionException {
        ObjcParser.method_declaration_predicate_return retval = new ObjcParser.method_declaration_predicate_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal678=null;
        Token char_literal680=null;
        ObjcParser.method_modifier_return method_modifier677 =null;

        ObjcParser.type_declaration_return type_declaration679 =null;

        ObjcParser.method_name_return method_name681 =null;


        Object char_literal678_tree=null;
        Object char_literal680_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:3: ( method_modifier ( '(' type_declaration ')' method_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:5: method_modifier ( '(' type_declaration ')' method_name )
            {
            root_0 = (Object)adaptor.nil();


            pushFollow(FOLLOW_method_modifier_in_method_declaration_predicate6055);
            method_modifier677=method_modifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_modifier677.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:21: ( '(' type_declaration ')' method_name )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:952:22: '(' type_declaration ')' method_name
            {
            char_literal678=(Token)match(input,119,FOLLOW_119_in_method_declaration_predicate6058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal678_tree = 
            (Object)adaptor.create(char_literal678)
            ;
            adaptor.addChild(root_0, char_literal678_tree);
            }

            pushFollow(FOLLOW_type_declaration_in_method_declaration_predicate6060);
            type_declaration679=type_declaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type_declaration679.getTree());

            char_literal680=(Token)match(input,121,FOLLOW_121_in_method_declaration_predicate6062); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal680_tree = 
            (Object)adaptor.create(char_literal680)
            ;
            adaptor.addChild(root_0, char_literal680_tree);
            }

            pushFollow(FOLLOW_method_name_in_method_declaration_predicate6064);
            method_name681=method_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, method_name681.getTree());

            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_declaration_predicate"


    public static class method_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:955:1: method_name : ID -> ^( METHOD_NAME ID ) ;
    public final ObjcParser.method_name_return method_name() throws RecognitionException {
        ObjcParser.method_name_return retval = new ObjcParser.method_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID682=null;

        Object ID682_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:3: ( ID -> ^( METHOD_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:5: ID
            {
            ID682=(Token)match(input,ID,FOLLOW_ID_in_method_name6082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID682);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 956:8: -> ^( METHOD_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:956:11: ^( METHOD_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_NAME, "METHOD_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_name"


    public static class method_params_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_params"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:959:1: method_params : ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) ;
    public final ObjcParser.method_params_return method_params() throws RecognitionException {
        ObjcParser.method_params_return retval = new ObjcParser.method_params_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        ObjcParser.method_param_return method_param683 =null;


        RewriteRuleSubtreeStream stream_method_param=new RewriteRuleSubtreeStream(adaptor,"rule method_param");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:3: ( ( method_param )+ -> ^( METHOD_PARAMS ( method_param )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:5: ( method_param )+
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:5: ( method_param )+
            int cnt163=0;
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==ID||LA163_0==135) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:5: method_param
            	    {
            	    pushFollow(FOLLOW_method_param_in_method_params6105);
            	    method_param683=method_param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_method_param.add(method_param683.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt163 >= 1 ) break loop163;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(163, input);
                        throw eee;
                }
                cnt163++;
            } while (true);


            // AST REWRITE
            // elements: method_param
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 960:19: -> ^( METHOD_PARAMS ( method_param )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:960:22: ^( METHOD_PARAMS ( method_param )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAMS, "METHOD_PARAMS")
                , root_1);

                if ( !(stream_method_param.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_method_param.hasNext() ) {
                    adaptor.addChild(root_1, stream_method_param.nextTree());

                }
                stream_method_param.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_params"


    public static class method_param_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "method_param"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:962:1: method_param : ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) ;
    public final ObjcParser.method_param_return method_param() throws RecognitionException {
        ObjcParser.method_param_return retval = new ObjcParser.method_param_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal685=null;
        Token char_literal686=null;
        Token char_literal688=null;
        ObjcParser.prefix_return prefix684 =null;

        ObjcParser.type_declaration_return type_declaration687 =null;

        ObjcParser.param_name_return param_name689 =null;


        Object char_literal685_tree=null;
        Object char_literal686_tree=null;
        Object char_literal688_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleTokenStream stream_119=new RewriteRuleTokenStream(adaptor,"token 119");
        RewriteRuleSubtreeStream stream_prefix=new RewriteRuleSubtreeStream(adaptor,"rule prefix");
        RewriteRuleSubtreeStream stream_param_name=new RewriteRuleSubtreeStream(adaptor,"rule param_name");
        RewriteRuleSubtreeStream stream_type_declaration=new RewriteRuleSubtreeStream(adaptor,"rule type_declaration");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:3: ( ( prefix )? ':' ( '(' type_declaration ')' )? param_name -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:5: ( prefix )? ':' ( '(' type_declaration ')' )? param_name
            {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:5: ( prefix )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==ID) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:5: prefix
                    {
                    pushFollow(FOLLOW_prefix_in_method_param6125);
                    prefix684=prefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prefix.add(prefix684.getTree());

                    }
                    break;

            }


            char_literal685=(Token)match(input,135,FOLLOW_135_in_method_param6128); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(char_literal685);


            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:17: ( '(' type_declaration ')' )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==119) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:18: '(' type_declaration ')'
                    {
                    char_literal686=(Token)match(input,119,FOLLOW_119_in_method_param6131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_119.add(char_literal686);


                    pushFollow(FOLLOW_type_declaration_in_method_param6133);
                    type_declaration687=type_declaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type_declaration.add(type_declaration687.getTree());

                    char_literal688=(Token)match(input,121,FOLLOW_121_in_method_param6135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal688);


                    }
                    break;

            }


            pushFollow(FOLLOW_param_name_in_method_param6139);
            param_name689=param_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_param_name.add(param_name689.getTree());

            // AST REWRITE
            // elements: prefix, param_name, 119, 135, type_declaration, 121
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 963:56: -> ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:59: ^( METHOD_PARAM ( prefix )? ':' '(' type_declaration ')' param_name )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(METHOD_PARAM, "METHOD_PARAM")
                , root_1);

                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:963:74: ( prefix )?
                if ( stream_prefix.hasNext() ) {
                    adaptor.addChild(root_1, stream_prefix.nextTree());

                }
                stream_prefix.reset();

                adaptor.addChild(root_1, 
                stream_135.nextNode()
                );

                adaptor.addChild(root_1, 
                stream_119.nextNode()
                );

                adaptor.addChild(root_1, stream_type_declaration.nextTree());

                adaptor.addChild(root_1, 
                stream_121.nextNode()
                );

                adaptor.addChild(root_1, stream_param_name.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "method_param"


    public static class param_name_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "param_name"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:965:1: param_name : ID -> ^( PARAM_NAME ID ) ;
    public final ObjcParser.param_name_return param_name() throws RecognitionException {
        ObjcParser.param_name_return retval = new ObjcParser.param_name_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID690=null;

        Object ID690_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:966:3: ( ID -> ^( PARAM_NAME ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:966:5: ID
            {
            ID690=(Token)match(input,ID,FOLLOW_ID_in_param_name6172); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID690);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 966:8: -> ^( PARAM_NAME ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:966:11: ^( PARAM_NAME ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_NAME, "PARAM_NAME")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "param_name"


    public static class prefix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "prefix"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:968:1: prefix : ID -> ^( PARAM_PREFIX ID ) ;
    public final ObjcParser.prefix_return prefix() throws RecognitionException {
        ObjcParser.prefix_return retval = new ObjcParser.prefix_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token ID691=null;

        Object ID691_tree=null;
        RewriteRuleTokenStream stream_ID=new RewriteRuleTokenStream(adaptor,"token ID");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:968:9: ( ID -> ^( PARAM_PREFIX ID ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:968:11: ID
            {
            ID691=(Token)match(input,ID,FOLLOW_ID_in_prefix6191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ID.add(ID691);


            // AST REWRITE
            // elements: ID
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 968:14: -> ^( PARAM_PREFIX ID )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:968:17: ^( PARAM_PREFIX ID )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(PARAM_PREFIX, "PARAM_PREFIX")
                , root_1);

                adaptor.addChild(root_1, 
                stream_ID.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "prefix"


    public static class define_declaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_declaration"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:971:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );
    public final ObjcParser.define_declaration_return define_declaration() throws RecognitionException {
        ObjcParser.define_declaration_return retval = new ObjcParser.define_declaration_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL693=null;
        Token DEFINE_LITERAL696=null;
        ObjcParser.define_as_function_return define_as_function692 =null;

        ObjcParser.name_return name694 =null;

        ObjcParser.element_value_return element_value695 =null;

        ObjcParser.name_return name697 =null;


        Object DEFINE_LITERAL693_tree=null;
        Object DEFINE_LITERAL696_tree=null;
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleSubtreeStream stream_element_value=new RewriteRuleSubtreeStream(adaptor,"rule element_value");
        RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"rule name");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:972:3: ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) )
            int alt166=3;
            alt166 = dfa166.predict(input);
            switch (alt166) {
                case 1 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:972:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function
                    {
                    root_0 = (Object)adaptor.nil();


                    pushFollow(FOLLOW_define_as_function_in_define_declaration6220);
                    define_as_function692=define_as_function();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, define_as_function692.getTree());

                    }
                    break;
                case 2 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:973:5: ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value
                    {
                    DEFINE_LITERAL693=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL693);


                    pushFollow(FOLLOW_name_in_define_declaration6236);
                    name694=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name694.getTree());

                    pushFollow(FOLLOW_element_value_in_define_declaration6238);
                    element_value695=element_value();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_element_value.add(element_value695.getTree());

                    // AST REWRITE
                    // elements: name, element_value
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 973:76: -> ^( DEFINE name element_value )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:973:79: ^( DEFINE name element_value )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_1, stream_element_value.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;
                case 3 :
                    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:5: DEFINE_LITERAL name
                    {
                    DEFINE_LITERAL696=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_declaration6254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL696);


                    pushFollow(FOLLOW_name_in_define_declaration6256);
                    name697=name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_name.add(name697.getTree());

                    // AST REWRITE
                    // elements: name
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {

                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 974:26: -> ^( DEFINE name )
                    {
                        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:974:29: ^( DEFINE name )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot(
                        (Object)adaptor.create(DEFINE, "DEFINE")
                        , root_1);

                        adaptor.addChild(root_1, stream_name.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }


                    retval.tree = root_0;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_declaration"


    public static class define_as_function_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "define_as_function"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:977:1: define_as_function : DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) ;
    public final ObjcParser.define_as_function_return define_as_function() throws RecognitionException {
        ObjcParser.define_as_function_return retval = new ObjcParser.define_as_function_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token DEFINE_LITERAL698=null;
        Token char_literal700=null;
        Token char_literal701=null;
        Token char_literal703=null;
        ObjcParser.classical_method_call_wrapper_return classical_method_call_wrapper699 =null;

        ObjcParser.block_singleline_wrapper_return block_singleline_wrapper702 =null;


        Object DEFINE_LITERAL698_tree=null;
        Object char_literal700_tree=null;
        Object char_literal701_tree=null;
        Object char_literal703_tree=null;
        RewriteRuleTokenStream stream_211=new RewriteRuleTokenStream(adaptor,"token 211");
        RewriteRuleTokenStream stream_207=new RewriteRuleTokenStream(adaptor,"token 207");
        RewriteRuleTokenStream stream_DEFINE_LITERAL=new RewriteRuleTokenStream(adaptor,"token DEFINE_LITERAL");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleSubtreeStream stream_classical_method_call_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule classical_method_call_wrapper");
        RewriteRuleSubtreeStream stream_block_singleline_wrapper=new RewriteRuleSubtreeStream(adaptor,"rule block_singleline_wrapper");
        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:3: ( DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+ -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:5: DEFINE_LITERAL classical_method_call_wrapper ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            {
            DEFINE_LITERAL698=(Token)match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_define_as_function6280); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE_LITERAL.add(DEFINE_LITERAL698);


            pushFollow(FOLLOW_classical_method_call_wrapper_in_define_as_function6282);
            classical_method_call_wrapper699=classical_method_call_wrapper();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classical_method_call_wrapper.add(classical_method_call_wrapper699.getTree());

            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:50: ( '\\\\' ( '{' )? block_singleline_wrapper ( '}' )? )+
            int cnt169=0;
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==174) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:51: '\\\\' ( '{' )? block_singleline_wrapper ( '}' )?
            	    {
            	    char_literal700=(Token)match(input,174,FOLLOW_174_in_define_as_function6285); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_174.add(char_literal700);


            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:56: ( '{' )?
            	    int alt167=2;
            	    int LA167_0 = input.LA(1);

            	    if ( (LA167_0==207) ) {
            	        alt167=1;
            	    }
            	    switch (alt167) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:56: '{'
            	            {
            	            char_literal701=(Token)match(input,207,FOLLOW_207_in_define_as_function6287); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_207.add(char_literal701);


            	            }
            	            break;

            	    }


            	    pushFollow(FOLLOW_block_singleline_wrapper_in_define_as_function6290);
            	    block_singleline_wrapper702=block_singleline_wrapper();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_block_singleline_wrapper.add(block_singleline_wrapper702.getTree());

            	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:86: ( '}' )?
            	    int alt168=2;
            	    int LA168_0 = input.LA(1);

            	    if ( (LA168_0==211) ) {
            	        alt168=1;
            	    }
            	    switch (alt168) {
            	        case 1 :
            	            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:86: '}'
            	            {
            	            char_literal703=(Token)match(input,211,FOLLOW_211_in_define_as_function6292); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_211.add(char_literal703);


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt169 >= 1 ) break loop169;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(169, input);
                        throw eee;
                }
                cnt169++;
            } while (true);


            // AST REWRITE
            // elements: block_singleline_wrapper, classical_method_call_wrapper
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 978:93: -> ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:978:96: ^( DEFINE classical_method_call_wrapper ( block_singleline_wrapper )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(DEFINE, "DEFINE")
                , root_1);

                adaptor.addChild(root_1, stream_classical_method_call_wrapper.nextTree());

                if ( !(stream_block_singleline_wrapper.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_block_singleline_wrapper.hasNext() ) {
                    adaptor.addChild(root_1, stream_block_singleline_wrapper.nextTree());

                }
                stream_block_singleline_wrapper.reset();

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "define_as_function"


    public static class string_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:981:1: string : STRING_LITERAL -> ^( STRING STRING_LITERAL ) ;
    public final ObjcParser.string_return string() throws RecognitionException {
        ObjcParser.string_return retval = new ObjcParser.string_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token STRING_LITERAL704=null;

        Object STRING_LITERAL704_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:982:3: ( STRING_LITERAL -> ^( STRING STRING_LITERAL ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:982:5: STRING_LITERAL
            {
            STRING_LITERAL704=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string6319); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL704);


            // AST REWRITE
            // elements: STRING_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 982:20: -> ^( STRING STRING_LITERAL )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:982:23: ^( STRING STRING_LITERAL )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING, "STRING")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STRING_LITERAL.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string"


    public static class string_objc_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "string_objc"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:985:1: string_objc : '@' STRING_LITERAL -> ^( STRING_OBJC STRING_LITERAL ) ;
    public final ObjcParser.string_objc_return string_objc() throws RecognitionException {
        ObjcParser.string_objc_return retval = new ObjcParser.string_objc_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token char_literal705=null;
        Token STRING_LITERAL706=null;

        Object char_literal705_tree=null;
        Object STRING_LITERAL706_tree=null;
        RewriteRuleTokenStream stream_148=new RewriteRuleTokenStream(adaptor,"token 148");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:3: ( '@' STRING_LITERAL -> ^( STRING_OBJC STRING_LITERAL ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:5: '@' STRING_LITERAL
            {
            char_literal705=(Token)match(input,148,FOLLOW_148_in_string_objc6342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_148.add(char_literal705);


            STRING_LITERAL706=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_string_objc6344); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(STRING_LITERAL706);


            // AST REWRITE
            // elements: STRING_LITERAL
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {

            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 986:24: -> ^( STRING_OBJC STRING_LITERAL )
            {
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:986:27: ^( STRING_OBJC STRING_LITERAL )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(
                (Object)adaptor.create(STRING_OBJC, "STRING_OBJC")
                , root_1);

                adaptor.addChild(root_1, 
                stream_STRING_LITERAL.nextNode()
                );

                adaptor.addChild(root_0, root_1);
                }

            }


            retval.tree = root_0;
            }

            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "string_objc"


    public static class bool_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };


    // $ANTLR start "bool"
    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:989:1: bool : ( 'YES' | 'NO' | 'true' | 'false' ) ;
    public final ObjcParser.bool_return bool() throws RecognitionException {
        ObjcParser.bool_return retval = new ObjcParser.bool_return();
        retval.start = input.LT(1);


        Object root_0 = null;

        Token set707=null;

        Object set707_tree=null;

        try {
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:990:3: ( ( 'YES' | 'NO' | 'true' | 'false' ) )
            // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:
            {
            root_0 = (Object)adaptor.nil();


            set707=(Token)input.LT(1);

            if ( input.LA(1)==170||input.LA(1)==172||input.LA(1)==188||input.LA(1)==201 ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, 
                (Object)adaptor.create(set707)
                );
                state.errorRecovery=false;
                state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);


            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }

        finally {
        	// do for sure before leaving
        }
        return retval;
    }
    // $ANTLR end "bool"

    // $ANTLR start synpred1_Objc
    public final void synpred1_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:5: ( type_declaration field_name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:122:6: type_declaration field_name
        {
        pushFollow(FOLLOW_type_declaration_in_synpred1_Objc507);
        type_declaration();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_field_name_in_synpred1_Objc509);
        field_name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred1_Objc

    // $ANTLR start synpred2_Objc
    public final void synpred2_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:171:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred2_Objc768);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred2_Objc

    // $ANTLR start synpred3_Objc
    public final void synpred3_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:4: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:260:5: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1340);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred3_Objc

    // $ANTLR start synpred4_Objc
    public final void synpred4_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:5: ( clasical_method_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:284:6: clasical_method_call_predicate
        {
        pushFollow(FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1471);
        clasical_method_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred4_Objc

    // $ANTLR start synpred5_Objc
    public final void synpred5_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:5: ( object_access_simple_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:285:6: object_access_simple_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1482);
        object_access_simple_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred5_Objc1484);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred5_Objc

    // $ANTLR start synpred6_Objc
    public final void synpred6_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:286:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred6_Objc1497);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred6_Objc1499);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred6_Objc

    // $ANTLR start synpred7_Objc
    public final void synpred7_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:5: ( name ';' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:329:6: name ';'
        {
        pushFollow(FOLLOW_name_in_synpred7_Objc1754);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,136,FOLLOW_136_in_synpred7_Objc1756); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred7_Objc

    // $ANTLR start synpred8_Objc
    public final void synpred8_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:5: ( name 'in' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:330:6: name 'in'
        {
        pushFollow(FOLLOW_name_in_synpred8_Objc1773);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,193,FOLLOW_193_in_synpred8_Objc1775); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred8_Objc

    // $ANTLR start synpred9_Objc
    public final void synpred9_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:5: ( object_access op_assign )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:331:6: object_access op_assign
        {
        pushFollow(FOLLOW_object_access_in_synpred9_Objc1792);
        object_access();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_op_assign_in_synpred9_Objc1794);
        op_assign();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred9_Objc

    // $ANTLR start synpred10_Objc
    public final void synpred10_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:5: ( object_access_wrapper increment_decrement )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:420:6: object_access_wrapper increment_decrement
        {
        pushFollow(FOLLOW_object_access_wrapper_in_synpred10_Objc2380);
        object_access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_increment_decrement_in_synpred10_Objc2382);
        increment_decrement();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred10_Objc

    // $ANTLR start synpred11_Objc
    public final void synpred11_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:510:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred11_Objc2988);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred11_Objc

    // $ANTLR start synpred12_Objc
    public final void synpred12_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:5: ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:511:6: '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper
        {
        match(input,119,FOLLOW_119_in_synpred12_Objc3004); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred12_Objc3006);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_simple_expression_value_access_in_synpred12_Objc3008);
        simple_expression_value_access();

        state._fsp--;
        if (state.failed) return ;

        match(input,121,FOLLOW_121_in_synpred12_Objc3010); if (state.failed) return ;

        pushFollow(FOLLOW_access_wrapper_in_synpred12_Objc3012);
        access_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred12_Objc

    // $ANTLR start synpred13_Objc
    public final void synpred13_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:5: ( name '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:516:6: name '('
        {
        pushFollow(FOLLOW_name_in_synpred13_Objc3049);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,119,FOLLOW_119_in_synpred13_Objc3051); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred13_Objc

    // $ANTLR start synpred14_Objc
    public final void synpred14_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:5: ( block_call_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:521:6: block_call_predicate
        {
        pushFollow(FOLLOW_block_call_predicate_in_synpred14_Objc3087);
        block_call_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred14_Objc

    // $ANTLR start synpred15_Objc
    public final void synpred15_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:5: ( simple_expression_value ( access_wrapper name )* '(' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:6: simple_expression_value ( access_wrapper name )* '('
        {
        pushFollow(FOLLOW_simple_expression_value_in_synpred15_Objc3144);
        simple_expression_value();

        state._fsp--;
        if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:30: ( access_wrapper name )*
        loop170:
        do {
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( ((LA170_0 >= 131 && LA170_0 <= 132)) ) {
                alt170=1;
            }


            switch (alt170) {
        	case 1 :
        	    // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:524:31: access_wrapper name
        	    {
        	    pushFollow(FOLLOW_access_wrapper_in_synpred15_Objc3147);
        	    access_wrapper();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    pushFollow(FOLLOW_name_in_synpred15_Objc3149);
        	    name();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop170;
            }
        } while (true);


        match(input,119,FOLLOW_119_in_synpred15_Objc3153); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred15_Objc

    // $ANTLR start synpred16_Objc
    public final void synpred16_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:6: ( '&' )?
        int alt171=2;
        int LA171_0 = input.LA(1);

        if ( (LA171_0==117) ) {
            alt171=1;
        }
        switch (alt171) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:529:6: '&'
                {
                match(input,117,FOLLOW_117_in_synpred16_Objc3202); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred16_Objc3205);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,173,FOLLOW_173_in_synpred16_Objc3207); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred16_Objc

    // $ANTLR start synpred17_Objc
    public final void synpred17_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:5: ( ( '&' | '*' ) name )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:530:6: ( '&' | '*' ) name
        {
        if ( input.LA(1)==117||input.LA(1)==122 ) {
            input.consume();
            state.errorRecovery=false;
            state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        pushFollow(FOLLOW_name_in_synpred17_Objc3243);
        name();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred17_Objc

    // $ANTLR start synpred18_Objc
    public final void synpred18_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:577:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred18_Objc3604);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred18_Objc

    // $ANTLR start synpred19_Objc
    public final void synpred19_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:5: ( type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:606:6: type_cast_wrapper
        {
        pushFollow(FOLLOW_type_cast_wrapper_in_synpred19_Objc3738);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred19_Objc

    // $ANTLR start synpred20_Objc
    public final void synpred20_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:5: ( '(' type_cast_wrapper )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:607:6: '(' type_cast_wrapper
        {
        match(input,119,FOLLOW_119_in_synpred20_Objc3751); if (state.failed) return ;

        pushFollow(FOLLOW_type_cast_wrapper_in_synpred20_Objc3753);
        type_cast_wrapper();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred20_Objc

    // $ANTLR start synpred21_Objc
    public final void synpred21_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:5: ( ( '&' )? name '[' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:6: ( '&' )? name '['
        {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:6: ( '&' )?
        int alt172=2;
        int LA172_0 = input.LA(1);

        if ( (LA172_0==117) ) {
            alt172=1;
        }
        switch (alt172) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:617:6: '&'
                {
                match(input,117,FOLLOW_117_in_synpred21_Objc3829); if (state.failed) return ;

                }
                break;

        }


        pushFollow(FOLLOW_name_in_synpred21_Objc3832);
        name();

        state._fsp--;
        if (state.failed) return ;

        match(input,173,FOLLOW_173_in_synpred21_Objc3834); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred21_Objc

    // $ANTLR start synpred22_Objc
    public final void synpred22_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:698:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred22_Objc4321);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred22_Objc

    // $ANTLR start synpred23_Objc
    public final void synpred23_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:5: ( block_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:796:6: block_decl_predicate
        {
        pushFollow(FOLLOW_block_decl_predicate_in_synpred23_Objc4949);
        block_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred23_Objc

    // $ANTLR start synpred24_Objc
    public final void synpred24_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:813:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred24_Objc5106);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred24_Objc

    // $ANTLR start synpred25_Objc
    public final void synpred25_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:814:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred25_Objc5117);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred25_Objc

    // $ANTLR start synpred26_Objc
    public final void synpred26_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:5: ( type_decl_protocol_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:822:6: type_decl_protocol_predicate
        {
        pushFollow(FOLLOW_type_decl_protocol_predicate_in_synpred26_Objc5208);
        type_decl_protocol_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred26_Objc

    // $ANTLR start synpred27_Objc
    public final void synpred27_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:5: ( func_pointer_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:823:6: func_pointer_predicate
        {
        pushFollow(FOLLOW_func_pointer_predicate_in_synpred27_Objc5219);
        func_pointer_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred27_Objc

    // $ANTLR start synpred28_Objc
    public final void synpred28_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:5: ( block_type_decl_predicate )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:824:6: block_type_decl_predicate
        {
        pushFollow(FOLLOW_block_type_decl_predicate_in_synpred28_Objc5230);
        block_type_decl_predicate();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred28_Objc

    // $ANTLR start synpred29_Objc
    public final void synpred29_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:5: ( 'struct' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:6: 'struct' ( typedef_name )? '{'
        {
        match(input,199,FOLLOW_199_in_synpred29_Objc5542); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:15: ( typedef_name )?
        int alt173=2;
        int LA173_0 = input.LA(1);

        if ( (LA173_0==ID) ) {
            alt173=1;
        }
        switch (alt173) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:868:15: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred29_Objc5544);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,207,FOLLOW_207_in_synpred29_Objc5547); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred29_Objc

    // $ANTLR start synpred30_Objc
    public final void synpred30_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:5: ( 'union' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:6: 'union' ( typedef_name )? '{'
        {
        match(input,203,FOLLOW_203_in_synpred30_Objc5572); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:14: ( typedef_name )?
        int alt174=2;
        int LA174_0 = input.LA(1);

        if ( (LA174_0==ID) ) {
            alt174=1;
        }
        switch (alt174) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:873:14: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred30_Objc5574);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,207,FOLLOW_207_in_synpred30_Objc5577); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred30_Objc

    // $ANTLR start synpred31_Objc
    public final void synpred31_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:5: ( 'enum' ( typedef_name )? '{' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:6: 'enum' ( typedef_name )? '{'
        {
        match(input,186,FOLLOW_186_in_synpred31_Objc5602); if (state.failed) return ;

        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:13: ( typedef_name )?
        int alt175=2;
        int LA175_0 = input.LA(1);

        if ( (LA175_0==ID) ) {
            alt175=1;
        }
        switch (alt175) {
            case 1 :
                // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:878:13: typedef_name
                {
                pushFollow(FOLLOW_typedef_name_in_synpred31_Objc5604);
                typedef_name();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        match(input,207,FOLLOW_207_in_synpred31_Objc5607); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred31_Objc

    // $ANTLR start synpred32_Objc
    public final void synpred32_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:972:5: ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:972:6: DEFINE_LITERAL classical_method_call_wrapper '\\\\'
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred32_Objc6211); if (state.failed) return ;

        pushFollow(FOLLOW_classical_method_call_wrapper_in_synpred32_Objc6213);
        classical_method_call_wrapper();

        state._fsp--;
        if (state.failed) return ;

        match(input,174,FOLLOW_174_in_synpred32_Objc6215); if (state.failed) return ;

        }

    }
    // $ANTLR end synpred32_Objc

    // $ANTLR start synpred33_Objc
    public final void synpred33_Objc_fragment() throws RecognitionException {
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:973:5: ( DEFINE_LITERAL name element_value )
        // /Users/spalda2/workspace/objc2java/objc2j/src/cz/spalda2/objctojavacnv/antlr/Objc.g:973:6: DEFINE_LITERAL name element_value
        {
        match(input,DEFINE_LITERAL,FOLLOW_DEFINE_LITERAL_in_synpred33_Objc6227); if (state.failed) return ;

        pushFollow(FOLLOW_name_in_synpred33_Objc6229);
        name();

        state._fsp--;
        if (state.failed) return ;

        pushFollow(FOLLOW_element_value_in_synpred33_Objc6231);
        element_value();

        state._fsp--;
        if (state.failed) return ;

        }

    }
    // $ANTLR end synpred33_Objc

    // Delegated rules

    public final boolean synpred6_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred33_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred33_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred30_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred30_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred19_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred19_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred16_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred27_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred27_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred31_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred31_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred29_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred29_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred18_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred18_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred32_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred32_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred28_Objc() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred28_Objc_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA2 dfa2 = new DFA2(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA29 dfa29 = new DFA29(this);
    protected DFA58 dfa58 = new DFA58(this);
    protected DFA62 dfa62 = new DFA62(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA77 dfa77 = new DFA77(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA166 dfa166 = new DFA166(this);
    static final String DFA2_eotS =
        "\u0151\uffff";
    static final String DFA2_eofS =
        "\u0151\uffff";
    static final String DFA2_minS =
        "\1\26\6\uffff\3\56\6\uffff\1\56\10\uffff\6\56\1\100\1\56\4\uffff"+
        "\5\56\1\172\12\56\3\uffff\5\56\3\uffff\5\56\1\172\11\56\10\uffff"+
        "\u00f9\0\1\uffff";
    static final String DFA2_maxS =
        "\1\u00cd\6\uffff\3\u00cf\6\uffff\1\56\10\uffff\1\u00cf\1\u00cd\1"+
        "\u00cf\1\177\1\u00cf\1\u00cd\1\u00a2\1\u00cd\4\uffff\2\u00ad\1\u00c3"+
        "\1\u00c5\1\u00ad\1\172\3\u00cf\1\u00cd\2\u00cc\1\u00c5\2\u00d3\1"+
        "\177\3\uffff\1\56\3\u00d3\1\u00cd\3\uffff\2\u00ad\1\u00c3\1\u00c5"+
        "\1\u00ad\1\172\3\u00cf\1\u00cd\2\u00cc\1\u00c5\2\u00d3\10\uffff"+
        "\u00f9\0\1\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\6\1\3\uffff\4\1\1\2\1\3\1\uffff\1\5\1\6\1\7\1\10\1\11\1"+
        "\13\1\uffff\1\14\10\uffff\3\1\21\uffff\2\1\6\uffff\2\1\21\uffff"+
        "\1\4\u00ff\uffff\1\12";
    static final String DFA2_specialS =
        "\1\0\30\uffff\1\1\1\uffff\1\2\1\uffff\1\3\71\uffff\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1"+
        "\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
        "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
        "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\1"+
        "\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\120"+
        "\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132\1\133"+
        "\1\134\1\135\1\136\1\137\1\140\1\141\1\142\1\143\1\144\1\145\1\146"+
        "\1\147\1\150\1\151\1\152\1\153\1\154\1\155\1\156\1\157\1\160\1\161"+
        "\1\162\1\163\1\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174"+
        "\1\175\1\176\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085"+
        "\1\u0086\1\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d"+
        "\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095"+
        "\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d"+
        "\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5"+
        "\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad"+
        "\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4\1\u00b5"+
        "\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc\1\u00bd"+
        "\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1\u00c4\1\u00c5"+
        "\1\u00c6\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb\1\u00cc\1\u00cd"+
        "\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3\1\u00d4\1\u00d5"+
        "\1\u00d6\1\u00d7\1\u00d8\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00dd"+
        "\1\u00de\1\u00df\1\u00e0\1\u00e1\1\u00e2\1\u00e3\1\u00e4\1\u00e5"+
        "\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea\1\u00eb\1\u00ec\1\u00ed"+
        "\1\u00ee\1\u00ef\1\u00f0\1\u00f1\1\u00f2\1\u00f3\1\u00f4\1\u00f5"+
        "\1\u00f6\1\u00f7\1\u00f8\1\u00f9\1\u00fa\1\u00fb\1\u00fc\1\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\23\27\uffff\1\5\21\uffff\1\26\21\uffff\1\26\44\uffff\1\6"+
            "\20\uffff\1\30\15\uffff\1\17\3\uffff\1\16\1\21\4\uffff\1\20"+
            "\10\uffff\1\22\10\uffff\1\12\2\uffff\1\14\4\uffff\1\10\1\22"+
            "\3\uffff\1\2\2\uffff\1\1\1\3\1\uffff\1\4\1\25\1\7\2\uffff\1"+
            "\24\1\11\1\15\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\31\u00a0\uffff\1\32",
            "\1\33\u00a0\uffff\1\34",
            "\1\35\u00a0\uffff\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\37",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\43\106\uffff\1\41\4\uffff\1\42\15\uffff\1\17\106\uffff\1"+
            "\40",
            "\1\51\21\uffff\1\63\21\uffff\1\62\44\uffff\1\52\72\uffff\1"+
            "\56\2\uffff\1\60\4\uffff\1\54\4\uffff\1\46\2\uffff\1\45\1\47"+
            "\1\uffff\1\50\1\uffff\1\53\3\uffff\1\55\1\61\1\57",
            "\1\66\106\uffff\1\65\22\uffff\1\17\106\uffff\1\64",
            "\1\71\21\uffff\1\73\21\uffff\1\72\54\uffff\1\70",
            "\1\76\106\uffff\1\75\22\uffff\1\17\106\uffff\1\74",
            "\1\104\21\uffff\1\116\21\uffff\1\115\44\uffff\1\105\72\uffff"+
            "\1\111\2\uffff\1\113\4\uffff\1\107\4\uffff\1\101\2\uffff\1\100"+
            "\1\102\1\uffff\1\103\1\uffff\1\106\3\uffff\1\110\1\114\1\112",
            "\1\120\21\uffff\1\120\51\uffff\1\120\3\uffff\1\120\7\uffff"+
            "\1\17\1\120\16\uffff\1\120\3\uffff\1\120\1\uffff\1\120\3\uffff"+
            "\1\120",
            "\1\133\21\uffff\1\145\21\uffff\1\144\44\uffff\1\134\72\uffff"+
            "\1\140\2\uffff\1\142\4\uffff\1\136\4\uffff\1\130\2\uffff\1\127"+
            "\1\131\1\uffff\1\132\1\uffff\1\135\3\uffff\1\137\1\143\1\141",
            "",
            "",
            "",
            "",
            "\1\153\106\uffff\1\152\2\uffff\1\146\1\uffff\1\150\16\uffff"+
            "\1\147\43\uffff\1\151",
            "\1\161\106\uffff\1\160\2\uffff\1\155\1\uffff\1\156\16\uffff"+
            "\1\154\43\uffff\1\157",
            "\1\171\106\uffff\1\170\2\uffff\1\163\1\uffff\1\166\16\uffff"+
            "\1\165\43\uffff\1\167\24\uffff\1\162\1\164",
            "\1\u0081\106\uffff\1\u0080\2\uffff\1\173\1\uffff\1\176\16\uffff"+
            "\1\175\43\uffff\1\177\24\uffff\1\172\2\uffff\1\174",
            "\1\u0087\106\uffff\1\u0086\2\uffff\1\u0082\1\uffff\1\u0084"+
            "\16\uffff\1\u0083\43\uffff\1\u0085",
            "\1\u0088",
            "\1\u0089\u00a0\uffff\1\u008a",
            "\1\u008b\u00a0\uffff\1\u008c",
            "\1\u008d\u00a0\uffff\1\u008e",
            "\1\u0096\u0086\uffff\1\u0090\11\uffff\1\u0093\2\uffff\1\u0092"+
            "\1\u0094\1\uffff\1\u0095\6\uffff\1\u0091\1\u008f",
            "\1\u009d\u0086\uffff\1\u0097\11\uffff\1\u009a\2\uffff\1\u0099"+
            "\1\u009b\1\uffff\1\u009c\6\uffff\1\u0098",
            "\1\u00a3\u0090\uffff\1\u00a0\2\uffff\1\u009f\1\u00a1\1\uffff"+
            "\1\u00a2\6\uffff\1\u009e",
            "\1\u00a8\u0090\uffff\1\u00a5\2\uffff\1\u00a4\1\u00a6\1\uffff"+
            "\1\u00a7",
            "\1\u00ae\21\uffff\1\u00b8\21\uffff\1\u00b7\44\uffff\1\u00af"+
            "\72\uffff\1\u00b3\2\uffff\1\u00b5\4\uffff\1\u00b1\4\uffff\1"+
            "\u00ab\2\uffff\1\u00aa\1\u00ac\1\uffff\1\u00ad\1\uffff\1\u00b0"+
            "\3\uffff\1\u00b2\1\u00b6\1\u00b4\5\uffff\1\u00a9",
            "\1\u00be\21\uffff\1\u00c8\21\uffff\1\u00c7\44\uffff\1\u00bf"+
            "\72\uffff\1\u00c3\2\uffff\1\u00c5\4\uffff\1\u00c1\4\uffff\1"+
            "\u00bb\2\uffff\1\u00ba\1\u00bc\1\uffff\1\u00bd\1\uffff\1\u00c0"+
            "\3\uffff\1\u00c2\1\u00c6\1\u00c4\5\uffff\1\u00b9",
            "\1\u00ca\21\uffff\1\u00cc\21\uffff\1\u00cb\54\uffff\1\u00c9",
            "",
            "",
            "",
            "\1\u00cd",
            "\1\u00d1\21\uffff\1\u00d3\21\uffff\1\u00d2\43\uffff\1\u00ce"+
            "\4\uffff\1\u00ce\2\uffff\1\u00ce\1\u00cf\2\uffff\1\u00ce\3\uffff"+
            "\1\u00ce\4\uffff\1\u00ce\1\uffff\1\u00ce\4\uffff\1\u00ce\76"+
            "\uffff\1\u00ce\1\uffff\1\u00d0",
            "\1\u00d6\21\uffff\1\u00d8\21\uffff\1\u00d7\54\uffff\1\u00d5"+
            "\123\uffff\1\u00d4",
            "\1\u00db\21\uffff\1\u00dd\21\uffff\1\u00dc\54\uffff\1\u00da"+
            "\123\uffff\1\u00d9",
            "\1\u00e2\21\uffff\1\u00ec\21\uffff\1\u00eb\44\uffff\1\u00e3"+
            "\72\uffff\1\u00e7\2\uffff\1\u00e9\4\uffff\1\u00e5\4\uffff\1"+
            "\u00df\2\uffff\1\u00de\1\u00e0\1\uffff\1\u00e1\1\uffff\1\u00e4"+
            "\3\uffff\1\u00e6\1\u00ea\1\u00e8",
            "",
            "",
            "",
            "\1\u00f2\106\uffff\1\u00f1\2\uffff\1\u00ed\1\uffff\1\u00ef"+
            "\16\uffff\1\u00ee\43\uffff\1\u00f0",
            "\1\u00f8\106\uffff\1\u00f7\2\uffff\1\u00f4\1\uffff\1\u00f5"+
            "\16\uffff\1\u00f3\43\uffff\1\u00f6",
            "\1\u0100\106\uffff\1\u00ff\2\uffff\1\u00fa\1\uffff\1\u00fd"+
            "\16\uffff\1\u00fc\43\uffff\1\u00fe\24\uffff\1\u00f9\1\u00fb",
            "\1\u0108\106\uffff\1\u0107\2\uffff\1\u0102\1\uffff\1\u0105"+
            "\16\uffff\1\u0104\43\uffff\1\u0106\24\uffff\1\u0101\2\uffff"+
            "\1\u0103",
            "\1\u010e\106\uffff\1\u010d\2\uffff\1\u0109\1\uffff\1\u010b"+
            "\16\uffff\1\u010a\43\uffff\1\u010c",
            "\1\u010f",
            "\1\u0110\u00a0\uffff\1\u0111",
            "\1\u0112\u00a0\uffff\1\u0113",
            "\1\u0114\u00a0\uffff\1\u0115",
            "\1\u011d\u0086\uffff\1\u0117\11\uffff\1\u011a\2\uffff\1\u0119"+
            "\1\u011b\1\uffff\1\u011c\6\uffff\1\u0118\1\u0116",
            "\1\u0124\u0086\uffff\1\u011e\11\uffff\1\u0121\2\uffff\1\u0120"+
            "\1\u0122\1\uffff\1\u0123\6\uffff\1\u011f",
            "\1\u012a\u0090\uffff\1\u0127\2\uffff\1\u0126\1\u0128\1\uffff"+
            "\1\u0129\6\uffff\1\u0125",
            "\1\u012f\u0090\uffff\1\u012c\2\uffff\1\u012b\1\u012d\1\uffff"+
            "\1\u012e",
            "\1\u0135\21\uffff\1\u013f\21\uffff\1\u013e\44\uffff\1\u0136"+
            "\72\uffff\1\u013a\2\uffff\1\u013c\4\uffff\1\u0138\4\uffff\1"+
            "\u0132\2\uffff\1\u0131\1\u0133\1\uffff\1\u0134\1\uffff\1\u0137"+
            "\3\uffff\1\u0139\1\u013d\1\u013b\5\uffff\1\u0130",
            "\1\u0145\21\uffff\1\u014f\21\uffff\1\u014e\44\uffff\1\u0146"+
            "\72\uffff\1\u014a\2\uffff\1\u014c\4\uffff\1\u0148\4\uffff\1"+
            "\u0142\2\uffff\1\u0141\1\u0143\1\uffff\1\u0144\1\uffff\1\u0147"+
            "\3\uffff\1\u0149\1\u014d\1\u014b\5\uffff\1\u0140",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "121:1: code_internal : ( ( type_declaration field_name )=> variable_declaration_wrapper | implementation_wrapper | forward_class_declaration | protocol_declaration_wrapper | interface_declaration_wrapper | extern_declaration_wrapper | define_declaration | typedef_declaration_wrapper | static_declaration_wrapper | type_declaration_struct_enum_union_anonymous | comments | ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA2_0 = input.LA(1);

                         
                        int index2_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_0==194) && (synpred1_Objc())) {s = 1;}

                        else if ( (LA2_0==191) && (synpred1_Objc())) {s = 2;}

                        else if ( (LA2_0==195) && (synpred1_Objc())) {s = 3;}

                        else if ( (LA2_0==197) && (synpred1_Objc())) {s = 4;}

                        else if ( (LA2_0==ID) && (synpred1_Objc())) {s = 5;}

                        else if ( (LA2_0==119) && (synpred1_Objc())) {s = 6;}

                        else if ( (LA2_0==199) ) {s = 7;}

                        else if ( (LA2_0==186) ) {s = 8;}

                        else if ( (LA2_0==203) ) {s = 9;}

                        else if ( (LA2_0==178) && (synpred1_Objc())) {s = 10;}

                        else if ( (LA2_0==205) && (synpred1_Objc())) {s = 11;}

                        else if ( (LA2_0==181) && (synpred1_Objc())) {s = 12;}

                        else if ( (LA2_0==204) && (synpred1_Objc())) {s = 13;}

                        else if ( (LA2_0==154) ) {s = 14;}

                        else if ( (LA2_0==150) ) {s = 15;}

                        else if ( (LA2_0==160) ) {s = 16;}

                        else if ( (LA2_0==155) ) {s = 17;}

                        else if ( (LA2_0==169||LA2_0==187) ) {s = 18;}

                        else if ( (LA2_0==DEFINE_LITERAL) ) {s = 19;}

                        else if ( (LA2_0==202) ) {s = 20;}

                        else if ( (LA2_0==198) ) {s = 21;}

                        else if ( (LA2_0==MULTI_COMMENT_LIT||LA2_0==SINGLE_COMMENT_LIT) ) {s = 22;}

                        else if ( (LA2_0==136) ) {s = 24;}

                         
                        input.seek(index2_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA2_25 = input.LA(1);

                         
                        int index2_25 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_25==207) ) {s = 32;}

                        else if ( (LA2_25==117) && (synpred1_Objc())) {s = 33;}

                        else if ( (LA2_25==122) && (synpred1_Objc())) {s = 34;}

                        else if ( (LA2_25==ID) && (synpred1_Objc())) {s = 35;}

                        else if ( (LA2_25==136) ) {s = 15;}

                         
                        input.seek(index2_25);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA2_27 = input.LA(1);

                         
                        int index2_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_27==207) ) {s = 52;}

                        else if ( (LA2_27==117) && (synpred1_Objc())) {s = 53;}

                        else if ( (LA2_27==ID) && (synpred1_Objc())) {s = 54;}

                        else if ( (LA2_27==136) ) {s = 15;}

                         
                        input.seek(index2_27);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA2_29 = input.LA(1);

                         
                        int index2_29 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA2_29==207) ) {s = 60;}

                        else if ( (LA2_29==117) && (synpred1_Objc())) {s = 61;}

                        else if ( (LA2_29==ID) && (synpred1_Objc())) {s = 62;}

                        else if ( (LA2_29==136) ) {s = 15;}

                         
                        input.seek(index2_29);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA2_87 = input.LA(1);

                         
                        int index2_87 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_87);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA2_88 = input.LA(1);

                         
                        int index2_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_88);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA2_89 = input.LA(1);

                         
                        int index2_89 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_89);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA2_90 = input.LA(1);

                         
                        int index2_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_90);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA2_91 = input.LA(1);

                         
                        int index2_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_91);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA2_92 = input.LA(1);

                         
                        int index2_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_92);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA2_93 = input.LA(1);

                         
                        int index2_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_93);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA2_94 = input.LA(1);

                         
                        int index2_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_94);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA2_95 = input.LA(1);

                         
                        int index2_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_95);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA2_96 = input.LA(1);

                         
                        int index2_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_96);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA2_97 = input.LA(1);

                         
                        int index2_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_97);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA2_98 = input.LA(1);

                         
                        int index2_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_98);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA2_99 = input.LA(1);

                         
                        int index2_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_99);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA2_100 = input.LA(1);

                         
                        int index2_100 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_100);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA2_101 = input.LA(1);

                         
                        int index2_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_101);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA2_102 = input.LA(1);

                         
                        int index2_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_102);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA2_103 = input.LA(1);

                         
                        int index2_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_103);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA2_104 = input.LA(1);

                         
                        int index2_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_104);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA2_105 = input.LA(1);

                         
                        int index2_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_105);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA2_106 = input.LA(1);

                         
                        int index2_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_106);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA2_107 = input.LA(1);

                         
                        int index2_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_107);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA2_108 = input.LA(1);

                         
                        int index2_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_108);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA2_109 = input.LA(1);

                         
                        int index2_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_109);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA2_110 = input.LA(1);

                         
                        int index2_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_110);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA2_111 = input.LA(1);

                         
                        int index2_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_111);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA2_112 = input.LA(1);

                         
                        int index2_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_112);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA2_113 = input.LA(1);

                         
                        int index2_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_113);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA2_114 = input.LA(1);

                         
                        int index2_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_114);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA2_115 = input.LA(1);

                         
                        int index2_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_115);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA2_116 = input.LA(1);

                         
                        int index2_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_116);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA2_117 = input.LA(1);

                         
                        int index2_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_117);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA2_118 = input.LA(1);

                         
                        int index2_118 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_118);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA2_119 = input.LA(1);

                         
                        int index2_119 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_119);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA2_120 = input.LA(1);

                         
                        int index2_120 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_120);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA2_121 = input.LA(1);

                         
                        int index2_121 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_121);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA2_122 = input.LA(1);

                         
                        int index2_122 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_122);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA2_123 = input.LA(1);

                         
                        int index2_123 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_123);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA2_124 = input.LA(1);

                         
                        int index2_124 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_124);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA2_125 = input.LA(1);

                         
                        int index2_125 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_125);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA2_126 = input.LA(1);

                         
                        int index2_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_126);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA2_127 = input.LA(1);

                         
                        int index2_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_127);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA2_128 = input.LA(1);

                         
                        int index2_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_128);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA2_129 = input.LA(1);

                         
                        int index2_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_129);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA2_130 = input.LA(1);

                         
                        int index2_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_130);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA2_131 = input.LA(1);

                         
                        int index2_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_131);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA2_132 = input.LA(1);

                         
                        int index2_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_132);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA2_133 = input.LA(1);

                         
                        int index2_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_133);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA2_134 = input.LA(1);

                         
                        int index2_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_134);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA2_135 = input.LA(1);

                         
                        int index2_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_135);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA2_136 = input.LA(1);

                         
                        int index2_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_136);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA2_137 = input.LA(1);

                         
                        int index2_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_137);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA2_138 = input.LA(1);

                         
                        int index2_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_138);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA2_139 = input.LA(1);

                         
                        int index2_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_139);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA2_140 = input.LA(1);

                         
                        int index2_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_140);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA2_141 = input.LA(1);

                         
                        int index2_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_141);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA2_142 = input.LA(1);

                         
                        int index2_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_142);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA2_143 = input.LA(1);

                         
                        int index2_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_143);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA2_144 = input.LA(1);

                         
                        int index2_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_144);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA2_145 = input.LA(1);

                         
                        int index2_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_145);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA2_146 = input.LA(1);

                         
                        int index2_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_146);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA2_147 = input.LA(1);

                         
                        int index2_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_147);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA2_148 = input.LA(1);

                         
                        int index2_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_148);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA2_149 = input.LA(1);

                         
                        int index2_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_149);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA2_150 = input.LA(1);

                         
                        int index2_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_150);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA2_151 = input.LA(1);

                         
                        int index2_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_151);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA2_152 = input.LA(1);

                         
                        int index2_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_152);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA2_153 = input.LA(1);

                         
                        int index2_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_153);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA2_154 = input.LA(1);

                         
                        int index2_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_154);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA2_155 = input.LA(1);

                         
                        int index2_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_155);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA2_156 = input.LA(1);

                         
                        int index2_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_156);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA2_157 = input.LA(1);

                         
                        int index2_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_157);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA2_158 = input.LA(1);

                         
                        int index2_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_158);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA2_159 = input.LA(1);

                         
                        int index2_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_159);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA2_160 = input.LA(1);

                         
                        int index2_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_160);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA2_161 = input.LA(1);

                         
                        int index2_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_161);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA2_162 = input.LA(1);

                         
                        int index2_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_162);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA2_163 = input.LA(1);

                         
                        int index2_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_163);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA2_164 = input.LA(1);

                         
                        int index2_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_164);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA2_165 = input.LA(1);

                         
                        int index2_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_165);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA2_166 = input.LA(1);

                         
                        int index2_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_166);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA2_167 = input.LA(1);

                         
                        int index2_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_167);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA2_168 = input.LA(1);

                         
                        int index2_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_168);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA2_169 = input.LA(1);

                         
                        int index2_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_169);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA2_170 = input.LA(1);

                         
                        int index2_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_170);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA2_171 = input.LA(1);

                         
                        int index2_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_171);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA2_172 = input.LA(1);

                         
                        int index2_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_172);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA2_173 = input.LA(1);

                         
                        int index2_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_173);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA2_174 = input.LA(1);

                         
                        int index2_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_174);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA2_175 = input.LA(1);

                         
                        int index2_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_175);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA2_176 = input.LA(1);

                         
                        int index2_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_176);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA2_177 = input.LA(1);

                         
                        int index2_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_177);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA2_178 = input.LA(1);

                         
                        int index2_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_178);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA2_179 = input.LA(1);

                         
                        int index2_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_179);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA2_180 = input.LA(1);

                         
                        int index2_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_180);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA2_181 = input.LA(1);

                         
                        int index2_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_181);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA2_182 = input.LA(1);

                         
                        int index2_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_182);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA2_183 = input.LA(1);

                         
                        int index2_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_183);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA2_184 = input.LA(1);

                         
                        int index2_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_184);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA2_185 = input.LA(1);

                         
                        int index2_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_185);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA2_186 = input.LA(1);

                         
                        int index2_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_186);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA2_187 = input.LA(1);

                         
                        int index2_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_187);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA2_188 = input.LA(1);

                         
                        int index2_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_188);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA2_189 = input.LA(1);

                         
                        int index2_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_189);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA2_190 = input.LA(1);

                         
                        int index2_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_190);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA2_191 = input.LA(1);

                         
                        int index2_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_191);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA2_192 = input.LA(1);

                         
                        int index2_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_192);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA2_193 = input.LA(1);

                         
                        int index2_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_193);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA2_194 = input.LA(1);

                         
                        int index2_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_194);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA2_195 = input.LA(1);

                         
                        int index2_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_195);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA2_196 = input.LA(1);

                         
                        int index2_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_196);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA2_197 = input.LA(1);

                         
                        int index2_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_197);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA2_198 = input.LA(1);

                         
                        int index2_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_198);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA2_199 = input.LA(1);

                         
                        int index2_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_199);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA2_200 = input.LA(1);

                         
                        int index2_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_200);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA2_201 = input.LA(1);

                         
                        int index2_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_201);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA2_202 = input.LA(1);

                         
                        int index2_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_202);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA2_203 = input.LA(1);

                         
                        int index2_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_203);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA2_204 = input.LA(1);

                         
                        int index2_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_204);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA2_205 = input.LA(1);

                         
                        int index2_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_205);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA2_206 = input.LA(1);

                         
                        int index2_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_206);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA2_207 = input.LA(1);

                         
                        int index2_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_207);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA2_208 = input.LA(1);

                         
                        int index2_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_208);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA2_209 = input.LA(1);

                         
                        int index2_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_209);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA2_210 = input.LA(1);

                         
                        int index2_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_210);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA2_211 = input.LA(1);

                         
                        int index2_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_211);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA2_212 = input.LA(1);

                         
                        int index2_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_212);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA2_213 = input.LA(1);

                         
                        int index2_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_213);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA2_214 = input.LA(1);

                         
                        int index2_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_214);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA2_215 = input.LA(1);

                         
                        int index2_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_215);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA2_216 = input.LA(1);

                         
                        int index2_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_216);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA2_217 = input.LA(1);

                         
                        int index2_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_217);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA2_218 = input.LA(1);

                         
                        int index2_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_218);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA2_219 = input.LA(1);

                         
                        int index2_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_219);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA2_220 = input.LA(1);

                         
                        int index2_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_220);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA2_221 = input.LA(1);

                         
                        int index2_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_221);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA2_222 = input.LA(1);

                         
                        int index2_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_222);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA2_223 = input.LA(1);

                         
                        int index2_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_223);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA2_224 = input.LA(1);

                         
                        int index2_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_224);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA2_225 = input.LA(1);

                         
                        int index2_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_225);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA2_226 = input.LA(1);

                         
                        int index2_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_226);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA2_227 = input.LA(1);

                         
                        int index2_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_227);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA2_228 = input.LA(1);

                         
                        int index2_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_228);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA2_229 = input.LA(1);

                         
                        int index2_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_229);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA2_230 = input.LA(1);

                         
                        int index2_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_230);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA2_231 = input.LA(1);

                         
                        int index2_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_231);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA2_232 = input.LA(1);

                         
                        int index2_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_232);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA2_233 = input.LA(1);

                         
                        int index2_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_233);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA2_234 = input.LA(1);

                         
                        int index2_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_234);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA2_235 = input.LA(1);

                         
                        int index2_235 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_235);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA2_236 = input.LA(1);

                         
                        int index2_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_236);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA2_237 = input.LA(1);

                         
                        int index2_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_237);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA2_238 = input.LA(1);

                         
                        int index2_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_238);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA2_239 = input.LA(1);

                         
                        int index2_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_239);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA2_240 = input.LA(1);

                         
                        int index2_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_240);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA2_241 = input.LA(1);

                         
                        int index2_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_241);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA2_242 = input.LA(1);

                         
                        int index2_242 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_242);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA2_243 = input.LA(1);

                         
                        int index2_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_243);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA2_244 = input.LA(1);

                         
                        int index2_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_244);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA2_245 = input.LA(1);

                         
                        int index2_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_245);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA2_246 = input.LA(1);

                         
                        int index2_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_246);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA2_247 = input.LA(1);

                         
                        int index2_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_247);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA2_248 = input.LA(1);

                         
                        int index2_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_248);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA2_249 = input.LA(1);

                         
                        int index2_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_249);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA2_250 = input.LA(1);

                         
                        int index2_250 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_250);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA2_251 = input.LA(1);

                         
                        int index2_251 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_251);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA2_252 = input.LA(1);

                         
                        int index2_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_252);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA2_253 = input.LA(1);

                         
                        int index2_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_253);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA2_254 = input.LA(1);

                         
                        int index2_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_254);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA2_255 = input.LA(1);

                         
                        int index2_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_255);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA2_256 = input.LA(1);

                         
                        int index2_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_256);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA2_257 = input.LA(1);

                         
                        int index2_257 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_257);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA2_258 = input.LA(1);

                         
                        int index2_258 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_258);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA2_259 = input.LA(1);

                         
                        int index2_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_259);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA2_260 = input.LA(1);

                         
                        int index2_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_260);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA2_261 = input.LA(1);

                         
                        int index2_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_261);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA2_262 = input.LA(1);

                         
                        int index2_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_262);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA2_263 = input.LA(1);

                         
                        int index2_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_263);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA2_264 = input.LA(1);

                         
                        int index2_264 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_264);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA2_265 = input.LA(1);

                         
                        int index2_265 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_265);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA2_266 = input.LA(1);

                         
                        int index2_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_266);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA2_267 = input.LA(1);

                         
                        int index2_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_267);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA2_268 = input.LA(1);

                         
                        int index2_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_268);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA2_269 = input.LA(1);

                         
                        int index2_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_269);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA2_270 = input.LA(1);

                         
                        int index2_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_270);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA2_271 = input.LA(1);

                         
                        int index2_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_271);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA2_272 = input.LA(1);

                         
                        int index2_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_272);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA2_273 = input.LA(1);

                         
                        int index2_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_273);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA2_274 = input.LA(1);

                         
                        int index2_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_274);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA2_275 = input.LA(1);

                         
                        int index2_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_275);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA2_276 = input.LA(1);

                         
                        int index2_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_276);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA2_277 = input.LA(1);

                         
                        int index2_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_277);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA2_278 = input.LA(1);

                         
                        int index2_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_278);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA2_279 = input.LA(1);

                         
                        int index2_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_279);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA2_280 = input.LA(1);

                         
                        int index2_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_280);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA2_281 = input.LA(1);

                         
                        int index2_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_281);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA2_282 = input.LA(1);

                         
                        int index2_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_282);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA2_283 = input.LA(1);

                         
                        int index2_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_283);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA2_284 = input.LA(1);

                         
                        int index2_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_284);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA2_285 = input.LA(1);

                         
                        int index2_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_285);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA2_286 = input.LA(1);

                         
                        int index2_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_286);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA2_287 = input.LA(1);

                         
                        int index2_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_287);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA2_288 = input.LA(1);

                         
                        int index2_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_288);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA2_289 = input.LA(1);

                         
                        int index2_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_289);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA2_290 = input.LA(1);

                         
                        int index2_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_290);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA2_291 = input.LA(1);

                         
                        int index2_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_291);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA2_292 = input.LA(1);

                         
                        int index2_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_292);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA2_293 = input.LA(1);

                         
                        int index2_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_293);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA2_294 = input.LA(1);

                         
                        int index2_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_294);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA2_295 = input.LA(1);

                         
                        int index2_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_295);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA2_296 = input.LA(1);

                         
                        int index2_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_296);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA2_297 = input.LA(1);

                         
                        int index2_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_297);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA2_298 = input.LA(1);

                         
                        int index2_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_298);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA2_299 = input.LA(1);

                         
                        int index2_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_299);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA2_300 = input.LA(1);

                         
                        int index2_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_300);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA2_301 = input.LA(1);

                         
                        int index2_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_301);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA2_302 = input.LA(1);

                         
                        int index2_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_302);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA2_303 = input.LA(1);

                         
                        int index2_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_303);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA2_304 = input.LA(1);

                         
                        int index2_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_304);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA2_305 = input.LA(1);

                         
                        int index2_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_305);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA2_306 = input.LA(1);

                         
                        int index2_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_306);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA2_307 = input.LA(1);

                         
                        int index2_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_307);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA2_308 = input.LA(1);

                         
                        int index2_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_308);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA2_309 = input.LA(1);

                         
                        int index2_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_309);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA2_310 = input.LA(1);

                         
                        int index2_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_310);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA2_311 = input.LA(1);

                         
                        int index2_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_311);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA2_312 = input.LA(1);

                         
                        int index2_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_312);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA2_313 = input.LA(1);

                         
                        int index2_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_313);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA2_314 = input.LA(1);

                         
                        int index2_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_314);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA2_315 = input.LA(1);

                         
                        int index2_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_315);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA2_316 = input.LA(1);

                         
                        int index2_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_316);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA2_317 = input.LA(1);

                         
                        int index2_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_317);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA2_318 = input.LA(1);

                         
                        int index2_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_318);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA2_319 = input.LA(1);

                         
                        int index2_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_319);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA2_320 = input.LA(1);

                         
                        int index2_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_320);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA2_321 = input.LA(1);

                         
                        int index2_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_321);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA2_322 = input.LA(1);

                         
                        int index2_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_322);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA2_323 = input.LA(1);

                         
                        int index2_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_323);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA2_324 = input.LA(1);

                         
                        int index2_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_324);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA2_325 = input.LA(1);

                         
                        int index2_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_325);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA2_326 = input.LA(1);

                         
                        int index2_326 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_326);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA2_327 = input.LA(1);

                         
                        int index2_327 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_327);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA2_328 = input.LA(1);

                         
                        int index2_328 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_328);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA2_329 = input.LA(1);

                         
                        int index2_329 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_329);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA2_330 = input.LA(1);

                         
                        int index2_330 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_330);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA2_331 = input.LA(1);

                         
                        int index2_331 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_331);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA2_332 = input.LA(1);

                         
                        int index2_332 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_332);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA2_333 = input.LA(1);

                         
                        int index2_333 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_333);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA2_334 = input.LA(1);

                         
                        int index2_334 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_334);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA2_335 = input.LA(1);

                         
                        int index2_335 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred1_Objc()) ) {s = 62;}

                        else if ( (true) ) {s = 336;}

                         
                        input.seek(index2_335);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 2, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA25_eotS =
        "\156\uffff";
    static final String DFA25_eofS =
        "\156\uffff";
    static final String DFA25_minS =
        "\3\56\40\uffff\1\56\2\uffff\1\20\6\uffff\1\56\16\uffff\1\166\7\uffff"+
        "\1\161\4\uffff\1\161\16\uffff\1\171\1\uffff\1\0\10\uffff\1\0\5\uffff"+
        "\1\0\3\uffff\1\0";
    static final String DFA25_maxS =
        "\1\u00cf\1\u00d1\1\u00cd\40\uffff\1\56\2\uffff\1\u00d4\6\uffff\1"+
        "\u00cd\16\uffff\1\u00d1\7\uffff\1\u00d2\4\uffff\1\u00d2\16\uffff"+
        "\1\u00ad\1\uffff\1\0\10\uffff\1\0\5\uffff\1\0\3\uffff\1\0";
    static final String DFA25_acceptS =
        "\3\uffff\2\3\1\4\12\uffff\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\uffff\1\1\1\2"+
        "\1\uffff\1\3\6\uffff\16\3\1\uffff\7\3\1\uffff\4\3\1\uffff\5\3\12"+
        "\uffff\1\1\1\uffff\1\2\7\3\1\uffff\5\3\5\uffff";
    static final String DFA25_specialS =
        "\1\0\1\1\1\2\43\uffff\1\3\25\uffff\1\4\7\uffff\1\5\4\uffff\1\6\20"+
        "\uffff\1\7\10\uffff\1\10\5\uffff\1\11\3\uffff\1\12}>";
    static final String[] DFA25_transitionS = {
            "\1\1\21\uffff\1\41\21\uffff\1\41\42\uffff\1\3\1\uffff\1\2\2"+
            "\uffff\1\4\15\uffff\1\33\33\uffff\1\20\1\uffff\1\22\1\21\5\uffff"+
            "\1\40\4\uffff\1\5\1\34\1\uffff\1\5\1\35\1\uffff\1\24\1\26\1"+
            "\5\2\uffff\1\31\1\36\1\5\1\25\1\uffff\2\5\1\30\1\5\1\23\1\5"+
            "\1\27\2\uffff\3\5\1\32\1\37",
            "\1\5\106\uffff\1\5\1\47\1\44\1\5\1\uffff\1\5\1\47\1\uffff\1"+
            "\45\1\47\2\uffff\1\45\1\47\2\43\1\uffff\1\47\2\uffff\1\5\1\uffff"+
            "\1\47\1\uffff\1\47\4\uffff\1\47\32\uffff\1\46\43\uffff\1\47",
            "\1\67\106\uffff\1\73\1\uffff\1\57\2\uffff\1\55\67\uffff\1\60"+
            "\2\uffff\1\62\4\uffff\1\72\4\uffff\1\56\2\uffff\1\64\1\65\1"+
            "\uffff\1\66\1\uffff\1\70\3\uffff\1\71\1\63\1\61",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\74",
            "",
            "",
            "\1\110\35\uffff\1\104\24\uffff\1\111\23\uffff\1\106\30\uffff"+
            "\1\114\4\uffff\1\103\1\uffff\1\76\2\uffff\1\105\2\uffff\1\116"+
            "\2\uffff\1\75\1\116\22\uffff\1\107\13\uffff\1\102\2\uffff\1"+
            "\101\6\uffff\1\112\1\uffff\1\112\1\113\1\uffff\1\5\1\77\1\100"+
            "\12\uffff\1\112\14\uffff\1\112\12\uffff\1\115",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\130\u0083\uffff\1\5\2\uffff\1\5\11\uffff\1\5\2\uffff\2\5"+
            "\1\uffff\1\5\6\uffff\2\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\134\1\131\3\uffff\1\134\1\uffff\1\133\1\134\2\uffff\1\133"+
            "\1\134\2\132\1\uffff\1\134\4\uffff\1\134\1\uffff\1\134\4\uffff"+
            "\1\134\76\uffff\1\134",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\141\1\uffff\3\141\1\uffff\1\137\2\uffff\1\141\1\uffff\1"+
            "\141\1\140\2\uffff\1\141\1\140\1\uffff\2\136\1\141\3\uffff\2"+
            "\141\1\uffff\6\141\1\uffff\1\142\31\uffff\1\135\1\uffff\1\143"+
            "\1\141\37\uffff\1\141\1\uffff\1\141",
            "",
            "",
            "",
            "",
            "\1\147\1\uffff\3\147\1\uffff\1\145\2\uffff\1\147\1\uffff\1"+
            "\147\1\146\2\uffff\1\147\1\146\1\uffff\2\144\1\147\3\uffff\2"+
            "\147\1\uffff\6\147\1\uffff\1\150\33\uffff\1\151\1\147\37\uffff"+
            "\1\147\1\uffff\1\147",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\155\1\5\16\uffff\1\5\43\uffff\1\5",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA25_eot = DFA.unpackEncodedString(DFA25_eotS);
    static final short[] DFA25_eof = DFA.unpackEncodedString(DFA25_eofS);
    static final char[] DFA25_min = DFA.unpackEncodedStringToUnsignedChars(DFA25_minS);
    static final char[] DFA25_max = DFA.unpackEncodedStringToUnsignedChars(DFA25_maxS);
    static final short[] DFA25_accept = DFA.unpackEncodedString(DFA25_acceptS);
    static final short[] DFA25_special = DFA.unpackEncodedString(DFA25_specialS);
    static final short[][] DFA25_transition;

    static {
        int numStates = DFA25_transitionS.length;
        DFA25_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA25_transition[i] = DFA.unpackEncodedString(DFA25_transitionS[i]);
        }
    }

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = DFA25_eot;
            this.eof = DFA25_eof;
            this.min = DFA25_min;
            this.max = DFA25_max;
            this.accept = DFA25_accept;
            this.special = DFA25_special;
            this.transition = DFA25_transition;
        }
        public String getDescription() {
            return "283:1: block_internal : ( ( clasical_method_call_predicate )=> classical_method_call_wrapper | ( object_access_simple_wrapper increment_decrement )=> object_access_simple_wrapper increment_decrement | ( object_access op_assign )=> variable_assignment_wrapper | variable_declaration_wrapper | synchronized_call_wrapper | try_stmt_wrapper | throw_stmt_wrapper | static_declaration_wrapper | do_stmt | if_stmt | else_stmt | switch_stmt | return_stmt | for_stmt_wrapper | while_stmt_wrapper | ';' | break_stmt | continue_stmt | goto_stmt | block_multiline_wrapper | method_msg ( ( access_wrapper name )* op_assign element_value )? | comments );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_0 = input.LA(1);

                         
                        int index25_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA25_0==ID) ) {s = 1;}

                        else if ( (LA25_0==119) ) {s = 2;}

                        else if ( (LA25_0==117) && (synpred6_Objc())) {s = 3;}

                        else if ( (LA25_0==122) && (synpred6_Objc())) {s = 4;}

                        else if ( (LA25_0==178||LA25_0==181||LA25_0==186||LA25_0==191||(LA25_0 >= 194 && LA25_0 <= 195)||LA25_0==197||LA25_0==199||(LA25_0 >= 203 && LA25_0 <= 205)) ) {s = 5;}

                        else if ( (LA25_0==164) ) {s = 16;}

                        else if ( (LA25_0==167) ) {s = 17;}

                        else if ( (LA25_0==166) ) {s = 18;}

                        else if ( (LA25_0==198) ) {s = 19;}

                        else if ( (LA25_0==184) ) {s = 20;}

                        else if ( (LA25_0==192) ) {s = 21;}

                        else if ( (LA25_0==185) ) {s = 22;}

                        else if ( (LA25_0==200) ) {s = 23;}

                        else if ( (LA25_0==196) ) {s = 24;}

                        else if ( (LA25_0==189) ) {s = 25;}

                        else if ( (LA25_0==206) ) {s = 26;}

                        else if ( (LA25_0==136) ) {s = 27;}

                        else if ( (LA25_0==179) ) {s = 28;}

                        else if ( (LA25_0==182) ) {s = 29;}

                        else if ( (LA25_0==190) ) {s = 30;}

                        else if ( (LA25_0==207) ) {s = 31;}

                        else if ( (LA25_0==173) ) {s = 32;}

                        else if ( (LA25_0==MULTI_COMMENT_LIT||LA25_0==SINGLE_COMMENT_LIT) ) {s = 33;}

                         
                        input.seek(index25_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_1 = input.LA(1);

                         
                        int index25_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA25_1 >= 131 && LA25_1 <= 132)) ) {s = 35;}

                        else if ( (LA25_1==119) && (synpred4_Objc())) {s = 36;}

                        else if ( (LA25_1==125||LA25_1==129) && (synpred5_Objc())) {s = 37;}

                        else if ( (LA25_1==173) ) {s = 38;}

                        else if ( (LA25_1==118||LA25_1==123||LA25_1==126||LA25_1==130||LA25_1==134||LA25_1==139||LA25_1==141||LA25_1==146||LA25_1==209) && (synpred6_Objc())) {s = 39;}

                        else if ( (LA25_1==ID||LA25_1==117||LA25_1==120||LA25_1==122||LA25_1==137) ) {s = 5;}

                         
                        input.seek(index25_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA25_2==122) ) {s = 45;}

                        else if ( (LA25_2==191) && (synpred6_Objc())) {s = 46;}

                        else if ( (LA25_2==119) && (synpred6_Objc())) {s = 47;}

                        else if ( (LA25_2==178) && (synpred6_Objc())) {s = 48;}

                        else if ( (LA25_2==205) && (synpred6_Objc())) {s = 49;}

                        else if ( (LA25_2==181) && (synpred6_Objc())) {s = 50;}

                        else if ( (LA25_2==204) && (synpred6_Objc())) {s = 51;}

                        else if ( (LA25_2==194) && (synpred6_Objc())) {s = 52;}

                        else if ( (LA25_2==195) && (synpred6_Objc())) {s = 53;}

                        else if ( (LA25_2==197) && (synpred6_Objc())) {s = 54;}

                        else if ( (LA25_2==ID) && (synpred6_Objc())) {s = 55;}

                        else if ( (LA25_2==199) && (synpred6_Objc())) {s = 56;}

                        else if ( (LA25_2==203) && (synpred6_Objc())) {s = 57;}

                        else if ( (LA25_2==186) && (synpred6_Objc())) {s = 58;}

                        else if ( (LA25_2==117) && (synpred6_Objc())) {s = 59;}

                         
                        input.seek(index25_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_38 = input.LA(1);

                         
                        int index25_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA25_38==128) && (synpred6_Objc())) {s = 61;}

                        else if ( (LA25_38==119) && (synpred6_Objc())) {s = 62;}

                        else if ( (LA25_38==176) && (synpred6_Objc())) {s = 63;}

                        else if ( (LA25_38==177) && (synpred6_Objc())) {s = 64;}

                        else if ( (LA25_38==163) && (synpred6_Objc())) {s = 65;}

                        else if ( (LA25_38==160) && (synpred6_Objc())) {s = 66;}

                        else if ( (LA25_38==117) && (synpred6_Objc())) {s = 67;}

                        else if ( (LA25_38==ID) ) {s = 68;}

                        else if ( (LA25_38==122) && (synpred6_Objc())) {s = 69;}

                        else if ( (LA25_38==STRING_LITERAL) && (synpred6_Objc())) {s = 70;}

                        else if ( (LA25_38==148) && (synpred6_Objc())) {s = 71;}

                        else if ( (LA25_38==CHAR_LITERAL) && (synpred6_Objc())) {s = 72;}

                        else if ( (LA25_38==NUMBER_LITERAL) ) {s = 73;}

                        else if ( (LA25_38==170||LA25_38==172||LA25_38==188||LA25_38==201) && (synpred6_Objc())) {s = 74;}

                        else if ( (LA25_38==173) && (synpred6_Objc())) {s = 75;}

                        else if ( (LA25_38==112) && (synpred6_Objc())) {s = 76;}

                        else if ( (LA25_38==212) && (synpred6_Objc())) {s = 77;}

                        else if ( (LA25_38==125||LA25_38==129) && (synpred6_Objc())) {s = 78;}

                        else if ( (LA25_38==175) ) {s = 5;}

                         
                        input.seek(index25_38);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_60 = input.LA(1);

                         
                        int index25_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA25_60==119) && (synpred4_Objc())) {s = 89;}

                        else if ( ((LA25_60 >= 131 && LA25_60 <= 132)) ) {s = 90;}

                        else if ( (LA25_60==125||LA25_60==129) && (synpred5_Objc())) {s = 91;}

                        else if ( (LA25_60==118||LA25_60==123||LA25_60==126||LA25_60==130||LA25_60==134||LA25_60==139||LA25_60==141||LA25_60==146||LA25_60==209) && (synpred6_Objc())) {s = 92;}

                         
                        input.seek(index25_60);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_68 = input.LA(1);

                         
                        int index25_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA25_68==173) && (synpred6_Objc())) {s = 93;}

                        else if ( ((LA25_68 >= 131 && LA25_68 <= 132)) && (synpred6_Objc())) {s = 94;}

                        else if ( (LA25_68==119) && (synpred6_Objc())) {s = 95;}

                        else if ( (LA25_68==125||LA25_68==129) && (synpred6_Objc())) {s = 96;}

                        else if ( (LA25_68==113||(LA25_68 >= 115 && LA25_68 <= 117)||LA25_68==122||LA25_68==124||LA25_68==128||LA25_68==133||(LA25_68 >= 137 && LA25_68 <= 138)||(LA25_68 >= 140 && LA25_68 <= 145)||LA25_68==176||LA25_68==208||LA25_68==210) && (synpred6_Objc())) {s = 97;}

                        else if ( (LA25_68==147) && (synpred6_Objc())) {s = 98;}

                        else if ( (LA25_68==175) ) {s = 99;}

                         
                        input.seek(index25_68);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA25_73 = input.LA(1);

                         
                        int index25_73 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA25_73 >= 131 && LA25_73 <= 132)) && (synpred6_Objc())) {s = 100;}

                        else if ( (LA25_73==119) && (synpred6_Objc())) {s = 101;}

                        else if ( (LA25_73==125||LA25_73==129) && (synpred6_Objc())) {s = 102;}

                        else if ( (LA25_73==113||(LA25_73 >= 115 && LA25_73 <= 117)||LA25_73==122||LA25_73==124||LA25_73==128||LA25_73==133||(LA25_73 >= 137 && LA25_73 <= 138)||(LA25_73 >= 140 && LA25_73 <= 145)||LA25_73==176||LA25_73==208||LA25_73==210) && (synpred6_Objc())) {s = 103;}

                        else if ( (LA25_73==147) && (synpred6_Objc())) {s = 104;}

                        else if ( (LA25_73==175) ) {s = 105;}

                         
                        input.seek(index25_73);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA25_90 = input.LA(1);

                         
                        int index25_90 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred4_Objc()) ) {s = 89;}

                        else if ( (synpred5_Objc()) ) {s = 91;}

                        else if ( (synpred6_Objc()) ) {s = 104;}

                         
                        input.seek(index25_90);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA25_99 = input.LA(1);

                         
                        int index25_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 104;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index25_99);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA25_105 = input.LA(1);

                         
                        int index25_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 104;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index25_105);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA25_109 = input.LA(1);

                         
                        int index25_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred6_Objc()) ) {s = 104;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index25_109);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA29_eotS =
        "\126\uffff";
    static final String DFA29_eofS =
        "\126\uffff";
    static final String DFA29_minS =
        "\3\56\17\uffff\1\20\7\uffff\1\56\25\uffff\1\161\4\uffff\1\161\16"+
        "\uffff\1\171\6\uffff\1\0\5\uffff\1\0\3\uffff\1\0";
    static final String DFA29_maxS =
        "\1\u00cd\1\u00d1\1\u00cd\17\uffff\1\u00d4\7\uffff\1\u00cd\25\uffff"+
        "\1\u00d2\4\uffff\1\u00d2\16\uffff\1\u00ad\6\uffff\1\0\5\uffff\1"+
        "\0\3\uffff\1\0";
    static final String DFA29_acceptS =
        "\3\uffff\2\3\1\4\12\uffff\1\1\1\2\1\uffff\2\3\6\uffff\25\3\1\uffff"+
        "\4\3\1\uffff\5\3\12\uffff\6\3\1\uffff\5\3\5\uffff";
    static final String DFA29_specialS =
        "\1\0\1\1\1\2\17\uffff\1\3\35\uffff\1\4\4\uffff\1\5\25\uffff\1\6"+
        "\5\uffff\1\7\3\uffff\1\10}>";
    static final String[] DFA29_transitionS = {
            "\1\1\106\uffff\1\3\1\uffff\1\2\2\uffff\1\4\67\uffff\1\5\2\uffff"+
            "\1\5\4\uffff\1\5\4\uffff\1\5\2\uffff\2\5\1\uffff\1\5\1\uffff"+
            "\1\5\3\uffff\3\5",
            "\1\5\106\uffff\1\5\1\24\1\uffff\1\5\1\uffff\1\5\1\24\2\uffff"+
            "\1\24\3\uffff\1\24\2\23\1\uffff\1\24\1\uffff\1\20\1\5\1\uffff"+
            "\1\24\1\uffff\1\24\4\uffff\1\24\32\uffff\1\22\23\uffff\1\21"+
            "\17\uffff\1\24",
            "\1\44\106\uffff\1\50\1\uffff\1\34\2\uffff\1\32\67\uffff\1\35"+
            "\2\uffff\1\37\4\uffff\1\47\4\uffff\1\33\2\uffff\1\41\1\42\1"+
            "\uffff\1\43\1\uffff\1\45\3\uffff\1\46\1\40\1\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\64\35\uffff\1\60\24\uffff\1\65\23\uffff\1\62\30\uffff\1"+
            "\70\4\uffff\1\57\1\uffff\1\52\2\uffff\1\61\2\uffff\1\72\2\uffff"+
            "\1\51\1\72\22\uffff\1\63\13\uffff\1\56\2\uffff\1\55\6\uffff"+
            "\1\66\1\uffff\1\66\1\67\1\uffff\1\5\1\53\1\54\12\uffff\1\66"+
            "\14\uffff\1\66\12\uffff\1\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\104\u0083\uffff\1\5\2\uffff\1\5\11\uffff\1\5\2\uffff\2\5"+
            "\1\uffff\1\5\6\uffff\2\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\111\1\uffff\3\111\1\uffff\1\107\2\uffff\1\111\1\uffff\1"+
            "\111\1\110\2\uffff\1\111\1\110\1\uffff\2\106\1\111\3\uffff\2"+
            "\111\1\uffff\6\111\1\uffff\1\112\31\uffff\1\105\1\uffff\1\113"+
            "\1\111\37\uffff\1\111\1\uffff\1\111",
            "",
            "",
            "",
            "",
            "\1\117\1\uffff\3\117\1\uffff\1\115\2\uffff\1\117\1\uffff\1"+
            "\117\1\116\2\uffff\1\117\1\116\1\uffff\2\114\1\117\3\uffff\2"+
            "\117\1\uffff\6\117\1\uffff\1\120\33\uffff\1\121\1\117\37\uffff"+
            "\1\117\1\uffff\1\117",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\125\1\5\16\uffff\1\5\43\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff"
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "328:1: for_stmt_body : ( ( name ';' )=> name for_classic_stmt ')' block | ( name 'in' )=> name for_in_stmt ')' block | ( object_access op_assign )=> variable_assignment_wrapper for_classic_stmt ')' block | field_declaration_simple ( ( op_assign_wrapper element_value for_classic_stmt ) | for_in_stmt ) ')' block );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA29_0 = input.LA(1);

                         
                        int index29_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA29_0==ID) ) {s = 1;}

                        else if ( (LA29_0==119) ) {s = 2;}

                        else if ( (LA29_0==117) && (synpred9_Objc())) {s = 3;}

                        else if ( (LA29_0==122) && (synpred9_Objc())) {s = 4;}

                        else if ( (LA29_0==178||LA29_0==181||LA29_0==186||LA29_0==191||(LA29_0 >= 194 && LA29_0 <= 195)||LA29_0==197||LA29_0==199||(LA29_0 >= 203 && LA29_0 <= 205)) ) {s = 5;}

                         
                        input.seek(index29_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA29_1 = input.LA(1);

                         
                        int index29_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA29_1==136) && (synpred7_Objc())) {s = 16;}

                        else if ( (LA29_1==193) && (synpred8_Objc())) {s = 17;}

                        else if ( (LA29_1==173) ) {s = 18;}

                        else if ( ((LA29_1 >= 131 && LA29_1 <= 132)) && (synpred9_Objc())) {s = 19;}

                        else if ( (LA29_1==118||LA29_1==123||LA29_1==126||LA29_1==130||LA29_1==134||LA29_1==139||LA29_1==141||LA29_1==146||LA29_1==209) && (synpred9_Objc())) {s = 20;}

                        else if ( (LA29_1==ID||LA29_1==117||LA29_1==120||LA29_1==122||LA29_1==137) ) {s = 5;}

                         
                        input.seek(index29_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA29_2 = input.LA(1);

                         
                        int index29_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA29_2==122) ) {s = 26;}

                        else if ( (LA29_2==191) && (synpred9_Objc())) {s = 27;}

                        else if ( (LA29_2==119) && (synpred9_Objc())) {s = 28;}

                        else if ( (LA29_2==178) && (synpred9_Objc())) {s = 29;}

                        else if ( (LA29_2==205) && (synpred9_Objc())) {s = 30;}

                        else if ( (LA29_2==181) && (synpred9_Objc())) {s = 31;}

                        else if ( (LA29_2==204) && (synpred9_Objc())) {s = 32;}

                        else if ( (LA29_2==194) && (synpred9_Objc())) {s = 33;}

                        else if ( (LA29_2==195) && (synpred9_Objc())) {s = 34;}

                        else if ( (LA29_2==197) && (synpred9_Objc())) {s = 35;}

                        else if ( (LA29_2==ID) && (synpred9_Objc())) {s = 36;}

                        else if ( (LA29_2==199) && (synpred9_Objc())) {s = 37;}

                        else if ( (LA29_2==203) && (synpred9_Objc())) {s = 38;}

                        else if ( (LA29_2==186) && (synpred9_Objc())) {s = 39;}

                        else if ( (LA29_2==117) && (synpred9_Objc())) {s = 40;}

                         
                        input.seek(index29_2);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA29_18 = input.LA(1);

                         
                        int index29_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA29_18==128) && (synpred9_Objc())) {s = 41;}

                        else if ( (LA29_18==119) && (synpred9_Objc())) {s = 42;}

                        else if ( (LA29_18==176) && (synpred9_Objc())) {s = 43;}

                        else if ( (LA29_18==177) && (synpred9_Objc())) {s = 44;}

                        else if ( (LA29_18==163) && (synpred9_Objc())) {s = 45;}

                        else if ( (LA29_18==160) && (synpred9_Objc())) {s = 46;}

                        else if ( (LA29_18==117) && (synpred9_Objc())) {s = 47;}

                        else if ( (LA29_18==ID) ) {s = 48;}

                        else if ( (LA29_18==122) && (synpred9_Objc())) {s = 49;}

                        else if ( (LA29_18==STRING_LITERAL) && (synpred9_Objc())) {s = 50;}

                        else if ( (LA29_18==148) && (synpred9_Objc())) {s = 51;}

                        else if ( (LA29_18==CHAR_LITERAL) && (synpred9_Objc())) {s = 52;}

                        else if ( (LA29_18==NUMBER_LITERAL) ) {s = 53;}

                        else if ( (LA29_18==170||LA29_18==172||LA29_18==188||LA29_18==201) && (synpred9_Objc())) {s = 54;}

                        else if ( (LA29_18==173) && (synpred9_Objc())) {s = 55;}

                        else if ( (LA29_18==112) && (synpred9_Objc())) {s = 56;}

                        else if ( (LA29_18==212) && (synpred9_Objc())) {s = 57;}

                        else if ( (LA29_18==125||LA29_18==129) && (synpred9_Objc())) {s = 58;}

                        else if ( (LA29_18==175) ) {s = 5;}

                         
                        input.seek(index29_18);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA29_48 = input.LA(1);

                         
                        int index29_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA29_48==173) && (synpred9_Objc())) {s = 69;}

                        else if ( ((LA29_48 >= 131 && LA29_48 <= 132)) && (synpred9_Objc())) {s = 70;}

                        else if ( (LA29_48==119) && (synpred9_Objc())) {s = 71;}

                        else if ( (LA29_48==125||LA29_48==129) && (synpred9_Objc())) {s = 72;}

                        else if ( (LA29_48==113||(LA29_48 >= 115 && LA29_48 <= 117)||LA29_48==122||LA29_48==124||LA29_48==128||LA29_48==133||(LA29_48 >= 137 && LA29_48 <= 138)||(LA29_48 >= 140 && LA29_48 <= 145)||LA29_48==176||LA29_48==208||LA29_48==210) && (synpred9_Objc())) {s = 73;}

                        else if ( (LA29_48==147) && (synpred9_Objc())) {s = 74;}

                        else if ( (LA29_48==175) ) {s = 75;}

                         
                        input.seek(index29_48);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA29_53 = input.LA(1);

                         
                        int index29_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA29_53 >= 131 && LA29_53 <= 132)) && (synpred9_Objc())) {s = 76;}

                        else if ( (LA29_53==119) && (synpred9_Objc())) {s = 77;}

                        else if ( (LA29_53==125||LA29_53==129) && (synpred9_Objc())) {s = 78;}

                        else if ( (LA29_53==113||(LA29_53 >= 115 && LA29_53 <= 117)||LA29_53==122||LA29_53==124||LA29_53==128||LA29_53==133||(LA29_53 >= 137 && LA29_53 <= 138)||(LA29_53 >= 140 && LA29_53 <= 145)||LA29_53==176||LA29_53==208||LA29_53==210) && (synpred9_Objc())) {s = 79;}

                        else if ( (LA29_53==147) && (synpred9_Objc())) {s = 80;}

                        else if ( (LA29_53==175) ) {s = 81;}

                         
                        input.seek(index29_53);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA29_75 = input.LA(1);

                         
                        int index29_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 80;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index29_75);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA29_81 = input.LA(1);

                         
                        int index29_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 80;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index29_81);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA29_85 = input.LA(1);

                         
                        int index29_85 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred9_Objc()) ) {s = 80;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index29_85);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 29, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA58_eotS =
        "\74\uffff";
    static final String DFA58_eofS =
        "\1\2\73\uffff";
    static final String DFA58_minS =
        "\1\26\73\uffff";
    static final String DFA58_maxS =
        "\1\u00d3\73\uffff";
    static final String DFA58_acceptS =
        "\1\uffff\1\1\1\2\71\uffff";
    static final String DFA58_specialS =
        "\74\uffff}>";
    static final String[] DFA58_transitionS = {
            "\1\2\27\uffff\1\2\21\uffff\1\2\21\uffff\1\2\36\uffff\1\2\1\uffff"+
            "\3\2\1\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\1\1\uffff\2\2\1\1"+
            "\3\uffff\1\2\1\uffff\4\2\1\uffff\6\2\1\uffff\1\2\1\uffff\7\2"+
            "\4\uffff\1\2\3\uffff\4\2\1\uffff\1\2\3\uffff\4\2\1\uffff\12"+
            "\2\1\uffff\4\2\1\uffff\7\2\1\uffff\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA58_eot = DFA.unpackEncodedString(DFA58_eotS);
    static final short[] DFA58_eof = DFA.unpackEncodedString(DFA58_eofS);
    static final char[] DFA58_min = DFA.unpackEncodedStringToUnsignedChars(DFA58_minS);
    static final char[] DFA58_max = DFA.unpackEncodedStringToUnsignedChars(DFA58_maxS);
    static final short[] DFA58_accept = DFA.unpackEncodedString(DFA58_acceptS);
    static final short[] DFA58_special = DFA.unpackEncodedString(DFA58_specialS);
    static final short[][] DFA58_transition;

    static {
        int numStates = DFA58_transitionS.length;
        DFA58_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA58_transition[i] = DFA.unpackEncodedString(DFA58_transitionS[i]);
        }
    }

    class DFA58 extends DFA {

        public DFA58(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 58;
            this.eot = DFA58_eot;
            this.eof = DFA58_eof;
            this.min = DFA58_min;
            this.max = DFA58_max;
            this.accept = DFA58_accept;
            this.special = DFA58_special;
            this.transition = DFA58_transition;
        }
        public String getDescription() {
            return "503:21: ( increment_decrement )?";
        }
    }
    static final String DFA62_eotS =
        "\u0155\uffff";
    static final String DFA62_eofS =
        "\115\uffff\1\2\u0107\uffff";
    static final String DFA62_minS =
        "\2\20\16\uffff\1\20\7\uffff\1\161\23\uffff\1\56\1\165\1\20\4\56"+
        "\3\165\1\161\3\56\17\uffff\5\20\15\uffff\7\0\34\uffff\62\0\5\uffff"+
        "\20\0\22\uffff\3\0\20\uffff\1\0\10\uffff\1\0\34\uffff\2\0\2\uffff"+
        "\4\0\5\uffff\2\0\66\uffff";
    static final String DFA62_maxS =
        "\1\u00c9\1\u00d4\16\uffff\1\u00d4\7\uffff\1\u00d2\23\uffff\1\u00cd"+
        "\1\u00ad\1\u00d4\1\u00cd\2\u00cc\1\u00c5\1\u00ad\1\u00c3\1\u00c5"+
        "\1\u00d2\3\u00c5\17\uffff\4\u00d4\1\u00d3\15\uffff\7\0\34\uffff"+
        "\62\0\5\uffff\20\0\22\uffff\3\0\20\uffff\1\0\10\uffff\1\0\34\uffff"+
        "\2\0\2\uffff\4\0\5\uffff\2\0\66\uffff";
    static final String DFA62_acceptS =
        "\2\uffff\1\3\14\uffff\1\1\1\uffff\7\1\1\uffff\3\1\67\uffff\10\1"+
        "\173\uffff\1\1\3\uffff\1\1\20\uffff\1\1\21\uffff\1\1\24\uffff\2"+
        "\1\4\uffff\5\1\67\uffff\1\2";
    static final String DFA62_specialS =
        "\1\uffff\1\0\52\uffff\1\1\35\uffff\1\2\1\3\1\4\1\5\15\uffff\1\6"+
        "\1\7\1\10\1\11\1\12\1\13\1\14\34\uffff\1\15\1\16\1\17\1\20\1\21"+
        "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
        "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
        "\1\71\1\72\1\73\1\74\1\75\1\76\5\uffff\1\77\1\100\1\101\1\102\1"+
        "\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115"+
        "\1\116\22\uffff\1\117\1\120\1\121\20\uffff\1\122\10\uffff\1\123"+
        "\34\uffff\1\124\1\125\2\uffff\1\126\1\127\1\130\1\131\5\uffff\1"+
        "\132\1\133\66\uffff}>";
    static final String[] DFA62_transitionS = {
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\35\uffff\1\2\1\uffff"+
            "\1\1\2\uffff\1\2\31\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\2\2\2\uffff\2\2\12\uffff\1\2\14\uffff\1\2",
            "\1\2\35\uffff\1\30\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\20\2\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff\2"+
            "\2\2\uffff\2\2\1\21\2\uffff\1\23\4\uffff\1\33\1\uffff\1\2\2"+
            "\uffff\1\17\2\uffff\1\25\1\26\1\uffff\1\27\1\uffff\1\31\1\uffff"+
            "\1\2\1\uffff\1\32\1\24\1\22\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\66\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\56\2\uffff\1\54\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff\2"+
            "\2\2\uffff\2\2\1\57\2\uffff\1\61\4\uffff\1\71\1\uffff\1\2\2"+
            "\uffff\1\55\2\uffff\1\63\1\64\1\uffff\1\65\1\uffff\1\67\1\uffff"+
            "\1\2\1\uffff\1\70\1\62\1\60\6\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\1\uffff\2\2\1\114\1\uffff\1\2\1\uffff\1\115\1\112\1\uffff"+
            "\2\2\2\uffff\2\2\1\uffff\3\2\3\uffff\1\111\1\2\1\uffff\6\2\1"+
            "\uffff\1\2\31\uffff\1\113\2\uffff\1\2\37\uffff\1\2\1\uffff\1"+
            "\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\133\u0083\uffff\1\123\2\uffff\1\125\11\uffff\1\130\2\uffff"+
            "\1\127\1\131\1\uffff\1\132\6\uffff\1\126\1\124",
            "\1\137\3\uffff\1\140\1\135\16\uffff\1\134\43\uffff\1\136",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\2\uffff\1\141\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff\2"+
            "\2\2\uffff\3\2\2\uffff\1\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1"+
            "\2\2\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\3"+
            "\2\6\uffff\1\2",
            "\1\u0085\u0086\uffff\1\177\11\uffff\1\u0082\2\uffff\1\u0081"+
            "\1\u0083\1\uffff\1\u0084\6\uffff\1\u0080\1\176",
            "\1\u008c\u0086\uffff\1\u0086\11\uffff\1\u0089\2\uffff\1\u0088"+
            "\1\u008a\1\uffff\1\u008b\6\uffff\1\u0087",
            "\1\u0092\u0090\uffff\1\u008f\2\uffff\1\u008e\1\u0090\1\uffff"+
            "\1\u0091\6\uffff\1\u008d",
            "\1\u0097\u0090\uffff\1\u0094\2\uffff\1\u0093\1\u0095\1\uffff"+
            "\1\u0096",
            "\1\u009b\3\uffff\1\u009c\1\u0099\16\uffff\1\u0098\43\uffff"+
            "\1\u009a",
            "\1\u00a1\3\uffff\1\u00a2\1\u009f\16\uffff\1\u009e\43\uffff"+
            "\1\u00a0\24\uffff\1\u009d\1\u00a3",
            "\1\u00a8\3\uffff\1\u00a9\1\u00a6\16\uffff\1\u00a5\43\uffff"+
            "\1\u00a7\24\uffff\1\u00a4\2\uffff\1\u00aa",
            "\1\2\1\uffff\2\2\1\u00ae\1\uffff\1\2\1\uffff\1\u00af\1\u00ac"+
            "\1\uffff\2\2\2\uffff\2\2\1\uffff\3\2\3\uffff\1\u00ab\1\2\1\uffff"+
            "\6\2\1\uffff\1\2\31\uffff\1\u00ad\2\uffff\1\2\37\uffff\1\2\1"+
            "\uffff\1\2",
            "\1\u00b9\u0090\uffff\1\u00b6\2\uffff\1\u00b5\1\u00b7\1\uffff"+
            "\1\u00b8",
            "\1\u00be\u0090\uffff\1\u00bb\2\uffff\1\u00ba\1\u00bc\1\uffff"+
            "\1\u00bd",
            "\1\u00c3\u0090\uffff\1\u00c0\2\uffff\1\u00bf\1\u00c1\1\uffff"+
            "\1\u00c2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\u00c4\24\uffff\1\2\23\uffff\1\2\30\uffff\1"+
            "\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\2"+
            "\2\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\2\2\12\uffff\1\2\14\uffff\1\2\12\uffff\1\2",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\u00d9\1\uffff\1\2\1\uffff\1\u00da\1\u00d8\2\uffff\1"+
            "\2\2\uffff\2\2\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff"+
            "\1\2\1\uffff\1\2\1\u00d7\2\uffff\2\2\3\uffff\1\u00d6\6\uffff"+
            "\1\2\14\uffff\1\2\12\uffff\1\2",
            "\1\2\35\uffff\1\u00ea\24\uffff\1\u00f3\23\uffff\1\2\30\uffff"+
            "\1\2\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\1\uffff\1\u00eb\2\2\12\uffff\1\2\14\uffff\1\2\12\uffff"+
            "\1\2",
            "\1\2\35\uffff\1\2\24\uffff\1\2\23\uffff\1\2\30\uffff\1\2\4"+
            "\uffff\1\2\1\uffff\1\2\1\uffff\1\u00fd\1\2\2\uffff\1\2\2\uffff"+
            "\2\2\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\2\2\12\uffff\1\2\14\uffff\1\2\12\uffff\1\2",
            "\1\u011a\5\uffff\1\2\27\uffff\1\u0116\21\uffff\1\2\2\uffff"+
            "\1\u011b\16\uffff\1\2\4\uffff\1\u0118\31\uffff\1\2\1\uffff\2"+
            "\2\1\u0115\1\uffff\1\u011e\1\uffff\1\2\1\u0117\1\uffff\1\2\1"+
            "\u0110\1\uffff\2\2\1\u0110\1\uffff\3\2\1\uffff\4\2\1\uffff\6"+
            "\2\1\uffff\1\2\1\u0119\7\2\4\uffff\1\u0114\2\uffff\1\u0113\4"+
            "\2\1\uffff\1\2\1\u011c\1\uffff\1\u011c\1\u011d\2\2\1\u0111\1"+
            "\u0112\12\2\1\u011c\4\2\1\uffff\7\2\1\u011c\7\2\1\uffff\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA62_eot = DFA.unpackEncodedString(DFA62_eotS);
    static final short[] DFA62_eof = DFA.unpackEncodedString(DFA62_eofS);
    static final char[] DFA62_min = DFA.unpackEncodedStringToUnsignedChars(DFA62_minS);
    static final char[] DFA62_max = DFA.unpackEncodedStringToUnsignedChars(DFA62_maxS);
    static final short[] DFA62_accept = DFA.unpackEncodedString(DFA62_acceptS);
    static final short[] DFA62_special = DFA.unpackEncodedString(DFA62_specialS);
    static final short[][] DFA62_transition;

    static {
        int numStates = DFA62_transitionS.length;
        DFA62_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA62_transition[i] = DFA.unpackEncodedString(DFA62_transitionS[i]);
        }
    }

    class DFA62 extends DFA {

        public DFA62(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 62;
            this.eot = DFA62_eot;
            this.eof = DFA62_eof;
            this.min = DFA62_min;
            this.max = DFA62_max;
            this.accept = DFA62_accept;
            this.special = DFA62_special;
            this.transition = DFA62_transition;
        }
        public String getDescription() {
            return "509:1: cast_expression : ( ( type_cast_wrapper )=> type_cast_wrapper ( increment_decrement )? simple_expression_value_access | ( '(' type_cast_wrapper simple_expression_value_access ')' access_wrapper )=> '(' type_cast_wrapper simple_expression_value_access ')' ( access_wrapper simple_name_or_classical_function_call )+ | simple_expression_value_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA62_1 = input.LA(1);

                         
                        int index62_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA62_1==191) && (synpred11_Objc())) {s = 15;}

                        else if ( (LA62_1==119) ) {s = 16;}

                        else if ( (LA62_1==178) && (synpred11_Objc())) {s = 17;}

                        else if ( (LA62_1==205) && (synpred11_Objc())) {s = 18;}

                        else if ( (LA62_1==181) && (synpred11_Objc())) {s = 19;}

                        else if ( (LA62_1==204) && (synpred11_Objc())) {s = 20;}

                        else if ( (LA62_1==194) && (synpred11_Objc())) {s = 21;}

                        else if ( (LA62_1==195) && (synpred11_Objc())) {s = 22;}

                        else if ( (LA62_1==197) && (synpred11_Objc())) {s = 23;}

                        else if ( (LA62_1==ID) ) {s = 24;}

                        else if ( (LA62_1==199) && (synpred11_Objc())) {s = 25;}

                        else if ( (LA62_1==203) && (synpred11_Objc())) {s = 26;}

                        else if ( (LA62_1==186) && (synpred11_Objc())) {s = 27;}

                        else if ( (LA62_1==CHAR_LITERAL||LA62_1==NUMBER_LITERAL||LA62_1==STRING_LITERAL||LA62_1==112||LA62_1==117||LA62_1==122||LA62_1==125||(LA62_1 >= 128 && LA62_1 <= 129)||LA62_1==148||LA62_1==160||LA62_1==163||LA62_1==170||(LA62_1 >= 172 && LA62_1 <= 173)||(LA62_1 >= 176 && LA62_1 <= 177)||LA62_1==188||LA62_1==201||LA62_1==212) ) {s = 2;}

                         
                        input.seek(index62_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA62_44 = input.LA(1);

                         
                        int index62_44 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA62_44==178) && (synpred11_Objc())) {s = 83;}

                        else if ( (LA62_44==205) && (synpred11_Objc())) {s = 84;}

                        else if ( (LA62_44==181) && (synpred11_Objc())) {s = 85;}

                        else if ( (LA62_44==204) && (synpred11_Objc())) {s = 86;}

                        else if ( (LA62_44==194) && (synpred11_Objc())) {s = 87;}

                        else if ( (LA62_44==191) && (synpred11_Objc())) {s = 88;}

                        else if ( (LA62_44==195) && (synpred11_Objc())) {s = 89;}

                        else if ( (LA62_44==197) && (synpred11_Objc())) {s = 90;}

                        else if ( (LA62_44==ID) ) {s = 91;}

                         
                        input.seek(index62_44);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA62_74 = input.LA(1);

                         
                        int index62_74 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA62_74==181) && (synpred11_Objc())) {s = 214;}

                        else if ( (LA62_74==173) ) {s = 215;}

                        else if ( (LA62_74==122) ) {s = 216;}

                        else if ( (LA62_74==117) ) {s = 217;}

                        else if ( (LA62_74==121) && (synpred11_Objc())) {s = 218;}

                        else if ( (LA62_74==CHAR_LITERAL||LA62_74==ID||LA62_74==NUMBER_LITERAL||LA62_74==STRING_LITERAL||LA62_74==112||LA62_74==119||LA62_74==125||(LA62_74 >= 128 && LA62_74 <= 129)||LA62_74==148||LA62_74==160||LA62_74==163||LA62_74==170||LA62_74==172||(LA62_74 >= 176 && LA62_74 <= 177)||LA62_74==188||LA62_74==201||LA62_74==212) ) {s = 2;}

                         
                        input.seek(index62_74);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA62_75 = input.LA(1);

                         
                        int index62_75 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA62_75==ID) ) {s = 234;}

                        else if ( (LA62_75==175) && (synpred11_Objc())) {s = 235;}

                        else if ( (LA62_75==CHAR_LITERAL||LA62_75==STRING_LITERAL||LA62_75==112||LA62_75==117||LA62_75==119||LA62_75==122||LA62_75==125||(LA62_75 >= 128 && LA62_75 <= 129)||LA62_75==148||LA62_75==160||LA62_75==163||LA62_75==170||(LA62_75 >= 172 && LA62_75 <= 173)||(LA62_75 >= 176 && LA62_75 <= 177)||LA62_75==188||LA62_75==201||LA62_75==212) ) {s = 2;}

                        else if ( (LA62_75==NUMBER_LITERAL) ) {s = 243;}

                         
                        input.seek(index62_75);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA62_76 = input.LA(1);

                         
                        int index62_76 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA62_76==121) && (synpred11_Objc())) {s = 253;}

                        else if ( (LA62_76==CHAR_LITERAL||LA62_76==ID||LA62_76==NUMBER_LITERAL||LA62_76==STRING_LITERAL||LA62_76==112||LA62_76==117||LA62_76==119||LA62_76==122||LA62_76==125||(LA62_76 >= 128 && LA62_76 <= 129)||LA62_76==148||LA62_76==160||LA62_76==163||LA62_76==170||(LA62_76 >= 172 && LA62_76 <= 173)||(LA62_76 >= 176 && LA62_76 <= 177)||LA62_76==188||LA62_76==201||LA62_76==212) ) {s = 2;}

                         
                        input.seek(index62_76);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA62_77 = input.LA(1);

                         
                        int index62_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA62_77==125||LA62_77==129) ) {s = 272;}

                        else if ( (LA62_77==176) ) {s = 273;}

                        else if ( (LA62_77==177) && (synpred11_Objc())) {s = 274;}

                        else if ( (LA62_77==163) && (synpred11_Objc())) {s = 275;}

                        else if ( (LA62_77==160) ) {s = 276;}

                        else if ( (LA62_77==117) ) {s = 277;}

                        else if ( (LA62_77==ID) ) {s = 278;}

                        else if ( (LA62_77==122) ) {s = 279;}

                        else if ( (LA62_77==STRING_LITERAL) && (synpred11_Objc())) {s = 280;}

                        else if ( (LA62_77==148) && (synpred11_Objc())) {s = 281;}

                        else if ( (LA62_77==CHAR_LITERAL) && (synpred11_Objc())) {s = 282;}

                        else if ( (LA62_77==NUMBER_LITERAL) && (synpred11_Objc())) {s = 283;}

                        else if ( (LA62_77==170||LA62_77==172||LA62_77==188||LA62_77==201) && (synpred11_Objc())) {s = 284;}

                        else if ( (LA62_77==173) ) {s = 285;}

                        else if ( (LA62_77==119) ) {s = 286;}

                        else if ( (LA62_77==EOF||LA62_77==DEFINE_LITERAL||LA62_77==MULTI_COMMENT_LIT||LA62_77==SINGLE_COMMENT_LIT||LA62_77==113||(LA62_77 >= 115 && LA62_77 <= 116)||LA62_77==121||LA62_77==124||(LA62_77 >= 127 && LA62_77 <= 128)||(LA62_77 >= 131 && LA62_77 <= 133)||(LA62_77 >= 135 && LA62_77 <= 138)||(LA62_77 >= 140 && LA62_77 <= 145)||LA62_77==147||(LA62_77 >= 149 && LA62_77 <= 155)||(LA62_77 >= 164 && LA62_77 <= 167)||LA62_77==169||(LA62_77 >= 174 && LA62_77 <= 175)||(LA62_77 >= 178 && LA62_77 <= 187)||(LA62_77 >= 189 && LA62_77 <= 192)||(LA62_77 >= 194 && LA62_77 <= 200)||(LA62_77 >= 202 && LA62_77 <= 208)||(LA62_77 >= 210 && LA62_77 <= 211)) ) {s = 2;}

                         
                        input.seek(index62_77);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA62_91 = input.LA(1);

                         
                        int index62_91 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_91);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA62_92 = input.LA(1);

                         
                        int index62_92 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_92);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA62_93 = input.LA(1);

                         
                        int index62_93 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_93);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA62_94 = input.LA(1);

                         
                        int index62_94 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_94);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA62_95 = input.LA(1);

                         
                        int index62_95 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_95);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA62_96 = input.LA(1);

                         
                        int index62_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_96);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA62_97 = input.LA(1);

                         
                        int index62_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_97);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA62_126 = input.LA(1);

                         
                        int index62_126 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_126);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA62_127 = input.LA(1);

                         
                        int index62_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_127);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA62_128 = input.LA(1);

                         
                        int index62_128 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_128);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA62_129 = input.LA(1);

                         
                        int index62_129 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_129);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA62_130 = input.LA(1);

                         
                        int index62_130 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_130);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA62_131 = input.LA(1);

                         
                        int index62_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_131);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA62_132 = input.LA(1);

                         
                        int index62_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_132);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA62_133 = input.LA(1);

                         
                        int index62_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_133);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA62_134 = input.LA(1);

                         
                        int index62_134 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_134);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA62_135 = input.LA(1);

                         
                        int index62_135 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_135);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA62_136 = input.LA(1);

                         
                        int index62_136 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_136);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA62_137 = input.LA(1);

                         
                        int index62_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_137);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA62_138 = input.LA(1);

                         
                        int index62_138 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_138);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA62_139 = input.LA(1);

                         
                        int index62_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_139);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA62_140 = input.LA(1);

                         
                        int index62_140 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_140);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA62_141 = input.LA(1);

                         
                        int index62_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_141);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA62_142 = input.LA(1);

                         
                        int index62_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_142);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA62_143 = input.LA(1);

                         
                        int index62_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_143);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA62_144 = input.LA(1);

                         
                        int index62_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_144);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA62_145 = input.LA(1);

                         
                        int index62_145 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_145);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA62_146 = input.LA(1);

                         
                        int index62_146 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_146);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA62_147 = input.LA(1);

                         
                        int index62_147 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_147);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA62_148 = input.LA(1);

                         
                        int index62_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_148);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA62_149 = input.LA(1);

                         
                        int index62_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_149);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA62_150 = input.LA(1);

                         
                        int index62_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_150);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA62_151 = input.LA(1);

                         
                        int index62_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_151);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA62_152 = input.LA(1);

                         
                        int index62_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_152);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA62_153 = input.LA(1);

                         
                        int index62_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_153);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA62_154 = input.LA(1);

                         
                        int index62_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_154);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA62_155 = input.LA(1);

                         
                        int index62_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_155);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA62_156 = input.LA(1);

                         
                        int index62_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_156);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA62_157 = input.LA(1);

                         
                        int index62_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_157);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA62_158 = input.LA(1);

                         
                        int index62_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_158);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA62_159 = input.LA(1);

                         
                        int index62_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_159);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA62_160 = input.LA(1);

                         
                        int index62_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_160);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA62_161 = input.LA(1);

                         
                        int index62_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_161);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA62_162 = input.LA(1);

                         
                        int index62_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_162);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA62_163 = input.LA(1);

                         
                        int index62_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_163);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA62_164 = input.LA(1);

                         
                        int index62_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_164);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA62_165 = input.LA(1);

                         
                        int index62_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_165);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA62_166 = input.LA(1);

                         
                        int index62_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_166);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA62_167 = input.LA(1);

                         
                        int index62_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_167);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA62_168 = input.LA(1);

                         
                        int index62_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_168);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA62_169 = input.LA(1);

                         
                        int index62_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_169);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA62_170 = input.LA(1);

                         
                        int index62_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_170);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA62_171 = input.LA(1);

                         
                        int index62_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_171);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA62_172 = input.LA(1);

                         
                        int index62_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_172);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA62_173 = input.LA(1);

                         
                        int index62_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_173);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA62_174 = input.LA(1);

                         
                        int index62_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_174);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA62_175 = input.LA(1);

                         
                        int index62_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_175);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA62_181 = input.LA(1);

                         
                        int index62_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_181);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA62_182 = input.LA(1);

                         
                        int index62_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_182);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA62_183 = input.LA(1);

                         
                        int index62_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_183);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA62_184 = input.LA(1);

                         
                        int index62_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_184);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA62_185 = input.LA(1);

                         
                        int index62_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_185);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA62_186 = input.LA(1);

                         
                        int index62_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_186);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA62_187 = input.LA(1);

                         
                        int index62_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_187);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA62_188 = input.LA(1);

                         
                        int index62_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_188);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA62_189 = input.LA(1);

                         
                        int index62_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_189);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA62_190 = input.LA(1);

                         
                        int index62_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_190);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA62_191 = input.LA(1);

                         
                        int index62_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_191);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA62_192 = input.LA(1);

                         
                        int index62_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_192);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA62_193 = input.LA(1);

                         
                        int index62_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_193);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA62_194 = input.LA(1);

                         
                        int index62_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_194);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA62_195 = input.LA(1);

                         
                        int index62_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred12_Objc()) ) {s = 340;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_195);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA62_196 = input.LA(1);

                         
                        int index62_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_196);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA62_215 = input.LA(1);

                         
                        int index62_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_215);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA62_216 = input.LA(1);

                         
                        int index62_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_216);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA62_217 = input.LA(1);

                         
                        int index62_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_217);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA62_234 = input.LA(1);

                         
                        int index62_234 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_234);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA62_243 = input.LA(1);

                         
                        int index62_243 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_243);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA62_272 = input.LA(1);

                         
                        int index62_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_272);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA62_273 = input.LA(1);

                         
                        int index62_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_273);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA62_276 = input.LA(1);

                         
                        int index62_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_276);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA62_277 = input.LA(1);

                         
                        int index62_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_277);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA62_278 = input.LA(1);

                         
                        int index62_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_278);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA62_279 = input.LA(1);

                         
                        int index62_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_279);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA62_285 = input.LA(1);

                         
                        int index62_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_285);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA62_286 = input.LA(1);

                         
                        int index62_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred11_Objc()) ) {s = 284;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index62_286);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 62, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA61_eotS =
        "\75\uffff";
    static final String DFA61_eofS =
        "\1\1\74\uffff";
    static final String DFA61_minS =
        "\1\26\74\uffff";
    static final String DFA61_maxS =
        "\1\u00d3\74\uffff";
    static final String DFA61_acceptS =
        "\1\uffff\1\2\72\uffff\1\1";
    static final String DFA61_specialS =
        "\75\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\36\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\2\1\1\uffff\3\1\1\uffff"+
            "\2\74\1\1\1\uffff\4\1\1\uffff\6\1\1\uffff\1\1\1\uffff\7\1\4"+
            "\uffff\1\1\3\uffff\4\1\1\uffff\1\1\3\uffff\4\1\1\uffff\12\1"+
            "\1\uffff\4\1\1\uffff\7\1\1\uffff\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()+ loopback of 511:138: ( access_wrapper simple_name_or_classical_function_call )+";
        }
    }
    static final String DFA64_eotS =
        "\u0092\uffff";
    static final String DFA64_eofS =
        "\1\uffff\1\3\u0090\uffff";
    static final String DFA64_minS =
        "\1\56\1\26\1\20\73\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\35"+
        "\uffff\17\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1\uffff";
    static final String DFA64_maxS =
        "\1\56\1\u00d3\1\u00d4\73\uffff\1\u00cd\3\uffff\1\u00d4\4\uffff\1"+
        "\56\1\u00d2\35\uffff\17\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1"+
        "\uffff";
    static final String DFA64_acceptS =
        "\3\uffff\1\2\73\uffff\3\1\1\uffff\4\1\2\uffff\12\1\42\uffff\17\1"+
        "\2\uffff\3\1\1\uffff\4\1\3\uffff\1\1";
    static final String DFA64_specialS =
        "\2\uffff\1\0\77\uffff\1\1\5\uffff\1\2\35\uffff\1\3\1\4\1\5\1\6\1"+
        "\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\17\uffff\1"+
        "\22\1\23\3\uffff\1\24\4\uffff\1\25\1\26\1\27\1\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\1",
            "\1\3\27\uffff\1\3\21\uffff\1\3\21\uffff\1\3\36\uffff\1\3\1"+
            "\uffff\3\3\1\uffff\1\2\1\uffff\2\3\1\uffff\2\3\1\uffff\3\3\1"+
            "\uffff\3\3\1\uffff\4\3\1\uffff\6\3\1\uffff\1\3\1\uffff\7\3\4"+
            "\uffff\1\3\3\uffff\4\3\1\uffff\1\3\3\uffff\4\3\1\uffff\12\3"+
            "\1\uffff\4\3\1\uffff\7\3\1\uffff\7\3\1\uffff\2\3",
            "\1\113\35\uffff\1\110\21\uffff\1\100\2\uffff\1\114\16\uffff"+
            "\1\77\4\uffff\1\111\30\uffff\1\117\4\uffff\1\107\1\uffff\1\102"+
            "\1\uffff\1\122\1\76\2\uffff\1\121\2\uffff\1\101\1\121\22\uffff"+
            "\1\112\13\uffff\1\106\2\uffff\1\105\6\uffff\1\115\1\uffff\1"+
            "\115\1\116\2\uffff\1\103\1\104\1\3\2\uffff\1\3\4\uffff\1\3\1"+
            "\uffff\1\115\2\uffff\1\3\2\uffff\2\3\1\uffff\1\3\1\uffff\1\3"+
            "\1\uffff\1\115\1\uffff\3\3\6\uffff\1\120",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\146\u0083\uffff\1\3\2\uffff\1\3\11\uffff\1\3\2\uffff\2\3"+
            "\1\uffff\1\3\6\uffff\2\3",
            "",
            "",
            "",
            "\1\175\35\uffff\1\161\24\uffff\1\176\23\uffff\1\173\30\uffff"+
            "\1\u0081\4\uffff\1\172\1\uffff\1\151\2\uffff\1\147\2\uffff\1"+
            "\u0083\2\uffff\1\165\1\u0083\22\uffff\1\174\13\uffff\1\171\2"+
            "\uffff\1\170\6\uffff\1\177\1\uffff\1\177\1\u0080\2\uffff\1\166"+
            "\1\167\1\152\2\uffff\1\154\4\uffff\1\164\1\uffff\1\177\2\uffff"+
            "\1\150\2\uffff\1\156\1\157\1\uffff\1\160\1\uffff\1\162\1\uffff"+
            "\1\177\1\uffff\1\163\1\155\1\153\6\uffff\1\u0082",
            "",
            "",
            "",
            "",
            "\1\u0084",
            "\1\u008c\21\uffff\1\u008b\36\uffff\1\u0091\1\uffff\2\u0091"+
            "\1\u0090\1\uffff\1\u0087\1\uffff\1\u008e\1\u008f\1\uffff\1\u0091"+
            "\1\u0088\1\uffff\1\u008d\1\u0091\1\u0088\1\uffff\2\u0086\1\u0091"+
            "\3\uffff\1\u0089\1\u0091\1\uffff\6\u0091\1\uffff\1\u008a\31"+
            "\uffff\1\u0085\2\uffff\1\u0091\37\uffff\1\u0091\1\uffff\1\u0091",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "515:1: simple_name_or_classical_function_call : ( ( name '(' )=> name ( '(' ( classical_method_params_push )? ')' ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA64_2 = input.LA(1);

                         
                        int index64_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_2==122) ) {s = 62;}

                        else if ( (LA64_2==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 63;}

                        else if ( (LA64_2==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 64;}

                        else if ( (LA64_2==128) && (synpred13_Objc())) {s = 65;}

                        else if ( (LA64_2==119) ) {s = 66;}

                        else if ( (LA64_2==176) && (synpred13_Objc())) {s = 67;}

                        else if ( (LA64_2==177) && (synpred13_Objc())) {s = 68;}

                        else if ( (LA64_2==163) && (synpred13_Objc())) {s = 69;}

                        else if ( (LA64_2==160) && (synpred13_Objc())) {s = 70;}

                        else if ( (LA64_2==117) ) {s = 71;}

                        else if ( (LA64_2==ID) ) {s = 72;}

                        else if ( (LA64_2==STRING_LITERAL) && (synpred13_Objc())) {s = 73;}

                        else if ( (LA64_2==148) && (synpred13_Objc())) {s = 74;}

                        else if ( (LA64_2==CHAR_LITERAL) && (synpred13_Objc())) {s = 75;}

                        else if ( (LA64_2==NUMBER_LITERAL) && (synpred13_Objc())) {s = 76;}

                        else if ( (LA64_2==170||LA64_2==172||LA64_2==188||LA64_2==201) && (synpred13_Objc())) {s = 77;}

                        else if ( (LA64_2==173) && (synpred13_Objc())) {s = 78;}

                        else if ( (LA64_2==112) && (synpred13_Objc())) {s = 79;}

                        else if ( (LA64_2==212) && (synpred13_Objc())) {s = 80;}

                        else if ( (LA64_2==125||LA64_2==129) && (synpred13_Objc())) {s = 81;}

                        else if ( (LA64_2==121) && (synpred13_Objc())) {s = 82;}

                        else if ( (LA64_2==178||LA64_2==181||LA64_2==186||LA64_2==191||(LA64_2 >= 194 && LA64_2 <= 195)||LA64_2==197||LA64_2==199||(LA64_2 >= 203 && LA64_2 <= 205)) ) {s = 3;}

                         
                        input.seek(index64_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA64_66 = input.LA(1);

                         
                        int index64_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_66==122) ) {s = 103;}

                        else if ( (LA64_66==191) ) {s = 104;}

                        else if ( (LA64_66==119) ) {s = 105;}

                        else if ( (LA64_66==178) ) {s = 106;}

                        else if ( (LA64_66==205) ) {s = 107;}

                        else if ( (LA64_66==181) ) {s = 108;}

                        else if ( (LA64_66==204) ) {s = 109;}

                        else if ( (LA64_66==194) ) {s = 110;}

                        else if ( (LA64_66==195) ) {s = 111;}

                        else if ( (LA64_66==197) ) {s = 112;}

                        else if ( (LA64_66==ID) ) {s = 113;}

                        else if ( (LA64_66==199) ) {s = 114;}

                        else if ( (LA64_66==203) ) {s = 115;}

                        else if ( (LA64_66==186) ) {s = 116;}

                        else if ( (LA64_66==128) && (synpred13_Objc())) {s = 117;}

                        else if ( (LA64_66==176) && (synpred13_Objc())) {s = 118;}

                        else if ( (LA64_66==177) && (synpred13_Objc())) {s = 119;}

                        else if ( (LA64_66==163) && (synpred13_Objc())) {s = 120;}

                        else if ( (LA64_66==160) && (synpred13_Objc())) {s = 121;}

                        else if ( (LA64_66==117) && (synpred13_Objc())) {s = 122;}

                        else if ( (LA64_66==STRING_LITERAL) && (synpred13_Objc())) {s = 123;}

                        else if ( (LA64_66==148) && (synpred13_Objc())) {s = 124;}

                        else if ( (LA64_66==CHAR_LITERAL) && (synpred13_Objc())) {s = 125;}

                        else if ( (LA64_66==NUMBER_LITERAL) && (synpred13_Objc())) {s = 126;}

                        else if ( (LA64_66==170||LA64_66==172||LA64_66==188||LA64_66==201) && (synpred13_Objc())) {s = 127;}

                        else if ( (LA64_66==173) && (synpred13_Objc())) {s = 128;}

                        else if ( (LA64_66==112) && (synpred13_Objc())) {s = 129;}

                        else if ( (LA64_66==212) && (synpred13_Objc())) {s = 130;}

                        else if ( (LA64_66==125||LA64_66==129) && (synpred13_Objc())) {s = 131;}

                         
                        input.seek(index64_66);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA64_72 = input.LA(1);

                         
                        int index64_72 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA64_72==173) ) {s = 133;}

                        else if ( ((LA64_72 >= 131 && LA64_72 <= 132)) && (synpred13_Objc())) {s = 134;}

                        else if ( (LA64_72==119) && (synpred13_Objc())) {s = 135;}

                        else if ( (LA64_72==125||LA64_72==129) && (synpred13_Objc())) {s = 136;}

                        else if ( (LA64_72==137) ) {s = 137;}

                        else if ( (LA64_72==147) && (synpred13_Objc())) {s = 138;}

                        else if ( (LA64_72==SINGLE_COMMENT_LIT) && (synpred13_Objc())) {s = 139;}

                        else if ( (LA64_72==MULTI_COMMENT_LIT) && (synpred13_Objc())) {s = 140;}

                        else if ( (LA64_72==127) && (synpred13_Objc())) {s = 141;}

                        else if ( (LA64_72==121) ) {s = 142;}

                        else if ( (LA64_72==122) ) {s = 143;}

                        else if ( (LA64_72==117) ) {s = 144;}

                        else if ( (LA64_72==113||(LA64_72 >= 115 && LA64_72 <= 116)||LA64_72==124||LA64_72==128||LA64_72==133||LA64_72==138||(LA64_72 >= 140 && LA64_72 <= 145)||LA64_72==176||LA64_72==208||LA64_72==210) && (synpred13_Objc())) {s = 145;}

                         
                        input.seek(index64_72);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA64_102 = input.LA(1);

                         
                        int index64_102 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_102);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA64_103 = input.LA(1);

                         
                        int index64_103 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_103);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA64_104 = input.LA(1);

                         
                        int index64_104 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_104);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA64_105 = input.LA(1);

                         
                        int index64_105 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_105);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA64_106 = input.LA(1);

                         
                        int index64_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_106);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA64_107 = input.LA(1);

                         
                        int index64_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_107);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA64_108 = input.LA(1);

                         
                        int index64_108 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_108);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA64_109 = input.LA(1);

                         
                        int index64_109 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_109);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA64_110 = input.LA(1);

                         
                        int index64_110 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_110);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA64_111 = input.LA(1);

                         
                        int index64_111 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_111);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA64_112 = input.LA(1);

                         
                        int index64_112 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_112);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA64_113 = input.LA(1);

                         
                        int index64_113 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_113);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA64_114 = input.LA(1);

                         
                        int index64_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_114);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA64_115 = input.LA(1);

                         
                        int index64_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_115);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA64_116 = input.LA(1);

                         
                        int index64_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_116);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA64_132 = input.LA(1);

                         
                        int index64_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_132);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA64_133 = input.LA(1);

                         
                        int index64_133 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_133);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA64_137 = input.LA(1);

                         
                        int index64_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_137);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA64_142 = input.LA(1);

                         
                        int index64_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_142);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA64_143 = input.LA(1);

                         
                        int index64_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_143);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA64_144 = input.LA(1);

                         
                        int index64_144 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred13_Objc()) ) {s = 145;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index64_144);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 64, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA70_eotS =
        "\u0626\uffff";
    static final String DFA70_eofS =
        "\6\uffff\1\15\1\uffff\1\15\1\uffff\3\15\2\uffff\1\15\74\uffff\1"+
        "\15\74\uffff\1\15\u0102\uffff\1\15\143\uffff\1\15\143\uffff\1\15"+
        "\47\uffff\1\15\47\uffff\1\15\u0381\uffff";
    static final String DFA70_minS =
        "\1\20\4\uffff\1\56\1\26\1\56\1\26\1\127\3\26\2\uffff\1\26\3\20\71"+
        "\uffff\1\26\2\20\72\uffff\1\26\2\20\72\uffff\2\20\72\uffff\2\20"+
        "\72\uffff\3\20\71\uffff\2\20\2\56\2\167\4\56\1\127\3\56\4\20\1\26"+
        "\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\25\uffff\2\20\72\uffff"+
        "\1\26\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\25\uffff\2\20"+
        "\72\uffff\1\26\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\25\uffff"+
        "\1\26\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\25\uffff\1\26"+
        "\7\uffff\1\56\3\uffff\1\20\4\uffff\1\56\1\100\25\uffff\23\0\7\uffff"+
        "\1\0\3\uffff\1\0\4\uffff\2\0\25\uffff\105\0\1\uffff\7\0\1\uffff"+
        "\7\0\1\uffff\6\0\1\uffff\6\0\1\uffff\76\0\102\uffff\17\0\17\uffff"+
        "\2\0\3\uffff\1\0\4\uffff\3\0\1\uffff\1\0\7\uffff\1\0\3\uffff\1\0"+
        "\4\uffff\2\0\25\uffff\2\0\102\uffff\17\0\17\uffff\2\0\3\uffff\1"+
        "\0\4\uffff\3\0\1\uffff\1\0\7\uffff\1\0\3\uffff\1\0\4\uffff\2\0\25"+
        "\uffff\2\0\102\uffff\17\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1"+
        "\uffff\2\0\102\uffff\17\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1"+
        "\uffff\2\0\102\uffff\17\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1"+
        "\uffff";
    static final String DFA70_maxS =
        "\1\u00c9\4\uffff\1\56\1\u00d3\1\56\1\u00d3\1\127\3\u00d3\2\uffff"+
        "\1\u00d3\1\u00d4\1\u00c9\1\u00d4\71\uffff\1\u00d3\1\u00c9\1\u00d4"+
        "\72\uffff\1\u00d3\1\u00c9\1\u00d4\72\uffff\1\u00c9\1\u00d4\72\uffff"+
        "\1\u00c9\1\u00d4\72\uffff\1\u00d4\1\u00c9\1\u00d4\71\uffff\1\u00c9"+
        "\1\u00d4\1\u00cf\1\u00cd\2\167\1\56\1\u00d2\1\56\1\u00d2\1\127\3"+
        "\u00d2\1\u00d4\3\u00c9\1\u00d3\7\uffff\1\u00cd\3\uffff\1\u00d4\4"+
        "\uffff\1\56\1\u00d2\25\uffff\1\u00c9\1\u00d4\72\uffff\1\u00d3\7"+
        "\uffff\1\u00cd\3\uffff\1\u00d4\4\uffff\1\56\1\u00d2\25\uffff\1\u00c9"+
        "\1\u00d4\72\uffff\1\u00d3\7\uffff\1\u00cd\3\uffff\1\u00d4\4\uffff"+
        "\1\56\1\u00d2\25\uffff\1\u00d3\7\uffff\1\u00cd\3\uffff\1\u00d4\4"+
        "\uffff\1\56\1\u00d2\25\uffff\1\u00d3\7\uffff\1\u00cd\3\uffff\1\u00d4"+
        "\4\uffff\1\56\1\u00d2\25\uffff\23\0\7\uffff\1\0\3\uffff\1\0\4\uffff"+
        "\2\0\25\uffff\105\0\1\uffff\7\0\1\uffff\7\0\1\uffff\6\0\1\uffff"+
        "\6\0\1\uffff\76\0\102\uffff\17\0\17\uffff\2\0\3\uffff\1\0\4\uffff"+
        "\3\0\1\uffff\1\0\7\uffff\1\0\3\uffff\1\0\4\uffff\2\0\25\uffff\2"+
        "\0\102\uffff\17\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1\uffff\1"+
        "\0\7\uffff\1\0\3\uffff\1\0\4\uffff\2\0\25\uffff\2\0\102\uffff\17"+
        "\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1\uffff\2\0\102\uffff\17"+
        "\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1\uffff\2\0\102\uffff\17"+
        "\0\17\uffff\2\0\3\uffff\1\0\4\uffff\3\0\1\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\2\1\1\2\1\3\10\uffff\1\5\u0187\uffff\3\4\1\uffff\4\4\2"+
        "\uffff\12\4\120\uffff\3\4\1\uffff\4\4\2\uffff\12\4\120\uffff\3\4"+
        "\1\uffff\4\4\2\uffff\12\4\24\uffff\3\4\1\uffff\4\4\2\uffff\12\4"+
        "\24\uffff\3\4\1\uffff\4\4\2\uffff\12\4\46\uffff\3\4\1\uffff\4\4"+
        "\2\uffff\12\4\u00fe\uffff\17\4\2\uffff\3\4\1\uffff\4\4\3\uffff\1"+
        "\4\11\uffff\3\4\1\uffff\4\4\2\uffff\12\4\136\uffff\17\4\2\uffff"+
        "\3\4\1\uffff\4\4\3\uffff\1\4\11\uffff\3\4\1\uffff\4\4\2\uffff\12"+
        "\4\136\uffff\17\4\2\uffff\3\4\1\uffff\4\4\3\uffff\1\4\123\uffff"+
        "\17\4\2\uffff\3\4\1\uffff\4\4\3\uffff\1\4\123\uffff\17\4\2\uffff"+
        "\3\4\1\uffff\4\4\3\uffff\1\4";
    static final String DFA70_specialS =
        "\1\0\21\uffff\1\1\73\uffff\1\2\74\uffff\1\3\73\uffff\1\4\73\uffff"+
        "\1\5\74\uffff\1\6\127\uffff\1\7\5\uffff\1\10\26\uffff\1\11\106\uffff"+
        "\1\12\5\uffff\1\13\26\uffff\1\14\106\uffff\1\15\5\uffff\1\16\41"+
        "\uffff\1\17\5\uffff\1\20\41\uffff\1\21\5\uffff\1\22\25\uffff\1\23"+
        "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
        "\1\41\1\42\1\43\1\44\1\45\7\uffff\1\46\3\uffff\1\47\4\uffff\1\50"+
        "\1\51\25\uffff\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
        "\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
        "\1\101\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
        "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
        "\1\127\1\130\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140\1\141"+
        "\1\142\1\143\1\144\1\145\1\146\1\147\1\150\1\151\1\152\1\153\1\154"+
        "\1\155\1\156\1\uffff\1\157\1\160\1\161\1\162\1\163\1\164\1\165\1"+
        "\uffff\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\uffff\1\175\1"+
        "\176\1\177\1\u0080\1\u0081\1\u0082\1\uffff\1\u0083\1\u0084\1\u0085"+
        "\1\u0086\1\u0087\1\u0088\1\uffff\1\u0089\1\u008a\1\u008b\1\u008c"+
        "\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094"+
        "\1\u0095\1\u0096\1\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c"+
        "\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4"+
        "\1\u00a5\1\u00a6\1\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac"+
        "\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\u00b4"+
        "\1\u00b5\1\u00b6\1\u00b7\1\u00b8\1\u00b9\1\u00ba\1\u00bb\1\u00bc"+
        "\1\u00bd\1\u00be\1\u00bf\1\u00c0\1\u00c1\1\u00c2\1\u00c3\1\u00c4"+
        "\1\u00c5\1\u00c6\102\uffff\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00cb"+
        "\1\u00cc\1\u00cd\1\u00ce\1\u00cf\1\u00d0\1\u00d1\1\u00d2\1\u00d3"+
        "\1\u00d4\1\u00d5\17\uffff\1\u00d6\1\u00d7\3\uffff\1\u00d8\4\uffff"+
        "\1\u00d9\1\u00da\1\u00db\1\uffff\1\u00dc\7\uffff\1\u00dd\3\uffff"+
        "\1\u00de\4\uffff\1\u00df\1\u00e0\25\uffff\1\u00e1\1\u00e2\102\uffff"+
        "\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e7\1\u00e8\1\u00e9\1\u00ea"+
        "\1\u00eb\1\u00ec\1\u00ed\1\u00ee\1\u00ef\1\u00f0\1\u00f1\17\uffff"+
        "\1\u00f2\1\u00f3\3\uffff\1\u00f4\4\uffff\1\u00f5\1\u00f6\1\u00f7"+
        "\1\uffff\1\u00f8\7\uffff\1\u00f9\3\uffff\1\u00fa\4\uffff\1\u00fb"+
        "\1\u00fc\25\uffff\1\u00fd\1\u00fe\102\uffff\1\u00ff\1\u0100\1\u0101"+
        "\1\u0102\1\u0103\1\u0104\1\u0105\1\u0106\1\u0107\1\u0108\1\u0109"+
        "\1\u010a\1\u010b\1\u010c\1\u010d\17\uffff\1\u010e\1\u010f\3\uffff"+
        "\1\u0110\4\uffff\1\u0111\1\u0112\1\u0113\1\uffff\1\u0114\1\u0115"+
        "\102\uffff\1\u0116\1\u0117\1\u0118\1\u0119\1\u011a\1\u011b\1\u011c"+
        "\1\u011d\1\u011e\1\u011f\1\u0120\1\u0121\1\u0122\1\u0123\1\u0124"+
        "\17\uffff\1\u0125\1\u0126\3\uffff\1\u0127\4\uffff\1\u0128\1\u0129"+
        "\1\u012a\1\uffff\1\u012b\1\u012c\102\uffff\1\u012d\1\u012e\1\u012f"+
        "\1\u0130\1\u0131\1\u0132\1\u0133\1\u0134\1\u0135\1\u0136\1\u0137"+
        "\1\u0138\1\u0139\1\u013a\1\u013b\17\uffff\1\u013c\1\u013d\3\uffff"+
        "\1\u013e\4\uffff\1\u013f\1\u0140\1\u0141\1\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\12\35\uffff\1\6\24\uffff\1\13\23\uffff\1\10\35\uffff\1\5"+
            "\1\uffff\1\15\2\uffff\1\7\31\uffff\1\11\13\uffff\1\4\2\uffff"+
            "\1\3\6\uffff\1\14\1\uffff\1\14\1\15\2\uffff\1\1\1\2\12\uffff"+
            "\1\14\14\uffff\1\14",
            "",
            "",
            "",
            "",
            "\1\17",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\22\1\uffff\2\15\1\uffff\2\15\1\uffff"+
            "\3\15\1\uffff\2\21\1\15\1\uffff\4\15\1\uffff\6\15\1\uffff\1"+
            "\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1\15\3\uffff"+
            "\1\20\3\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff\7"+
            "\15\1\uffff\2\15",
            "\1\114",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\116\1\uffff\2\15\1\uffff\2\15\1\uffff"+
            "\3\15\1\uffff\2\115\1\15\1\uffff\4\15\1\uffff\6\15\1\uffff\1"+
            "\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1\15\3\uffff"+
            "\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff\7\15\1"+
            "\uffff\2\15",
            "\1\u0089",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u008b\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u008a\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u00c7\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u00c6\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u0103\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u0102\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "",
            "",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u0140\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u013f\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\1\u013e\3\15\1\uffff\12\15\1\uffff\4\15\1\uffff"+
            "\7\15\1\uffff\7\15\1\uffff\2\15",
            "\1\u0185\35\uffff\1\u0181\24\uffff\1\u0186\23\uffff\1\u0183"+
            "\30\uffff\1\u0189\4\uffff\1\u0180\1\uffff\1\u017b\2\uffff\1"+
            "\u0182\2\uffff\1\u018b\2\uffff\1\u017a\1\u018b\22\uffff\1\u0184"+
            "\13\uffff\1\u017f\2\uffff\1\u017e\6\uffff\1\u0187\1\uffff\1"+
            "\u0187\1\u0188\2\uffff\1\u017c\1\u017d\12\uffff\1\u0187\14\uffff"+
            "\1\u0187\12\uffff\1\u018a",
            "\1\15\35\uffff\1\u018c\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u01a1\35\uffff\1\u019e\21\uffff\1\u0196\2\uffff\1\u01a2"+
            "\16\uffff\1\u0195\4\uffff\1\u019f\30\uffff\1\u01a5\4\uffff\1"+
            "\u019d\1\uffff\1\u0198\1\uffff\1\u01a8\1\u0194\2\uffff\1\u01a7"+
            "\2\uffff\1\u0197\1\u01a7\22\uffff\1\u01a0\13\uffff\1\u019c\2"+
            "\uffff\1\u019b\6\uffff\1\u01a3\1\uffff\1\u01a3\1\u01a4\2\uffff"+
            "\1\u0199\1\u019a\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u01a3"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u01a3\1\uffff\3\15\6\uffff\1\u01a6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u01b5\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u01b4\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "\1\15\35\uffff\1\u01f0\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u0205\35\uffff\1\u0202\21\uffff\1\u01fa\2\uffff\1\u0206"+
            "\16\uffff\1\u01f9\4\uffff\1\u0203\30\uffff\1\u0209\4\uffff\1"+
            "\u0201\1\uffff\1\u01fc\1\uffff\1\u020c\1\u01f8\2\uffff\1\u020b"+
            "\2\uffff\1\u01fb\1\u020b\22\uffff\1\u0204\13\uffff\1\u0200\2"+
            "\uffff\1\u01ff\6\uffff\1\u0207\1\uffff\1\u0207\1\u0208\2\uffff"+
            "\1\u01fd\1\u01fe\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u0207"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u0207\1\uffff\3\15\6\uffff\1\u020a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u0219\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u0218\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "\1\15\35\uffff\1\u0254\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u0269\35\uffff\1\u0266\21\uffff\1\u025e\2\uffff\1\u026a"+
            "\16\uffff\1\u025d\4\uffff\1\u0267\30\uffff\1\u026d\4\uffff\1"+
            "\u0265\1\uffff\1\u0260\1\uffff\1\u0270\1\u025c\2\uffff\1\u026f"+
            "\2\uffff\1\u025f\1\u026f\22\uffff\1\u0268\13\uffff\1\u0264\2"+
            "\uffff\1\u0263\6\uffff\1\u026b\1\uffff\1\u026b\1\u026c\2\uffff"+
            "\1\u0261\1\u0262\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u026b"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u026b\1\uffff\3\15\6\uffff\1\u026e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\35\uffff\1\u027c\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u0291\35\uffff\1\u028e\21\uffff\1\u0286\2\uffff\1\u0292"+
            "\16\uffff\1\u0285\4\uffff\1\u028f\30\uffff\1\u0295\4\uffff\1"+
            "\u028d\1\uffff\1\u0288\1\uffff\1\u0298\1\u0284\2\uffff\1\u0297"+
            "\2\uffff\1\u0287\1\u0297\22\uffff\1\u0290\13\uffff\1\u028c\2"+
            "\uffff\1\u028b\6\uffff\1\u0293\1\uffff\1\u0293\1\u0294\2\uffff"+
            "\1\u0289\1\u028a\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u0293"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u0293\1\uffff\3\15\6\uffff\1\u0296",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\35\uffff\1\u02a4\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u02b9\35\uffff\1\u02b6\21\uffff\1\u02ae\2\uffff\1\u02ba"+
            "\16\uffff\1\u02ad\4\uffff\1\u02b7\30\uffff\1\u02bd\4\uffff\1"+
            "\u02b5\1\uffff\1\u02b0\1\uffff\1\u02c0\1\u02ac\2\uffff\1\u02bf"+
            "\2\uffff\1\u02af\1\u02bf\22\uffff\1\u02b8\13\uffff\1\u02b4\2"+
            "\uffff\1\u02b3\6\uffff\1\u02bb\1\uffff\1\u02bb\1\u02bc\2\uffff"+
            "\1\u02b1\1\u02b2\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u02bb"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u02bb\1\uffff\3\15\6\uffff\1\u02be",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02d7\35\uffff\1\u02d3\24\uffff\1\u02d8\23\uffff\1\u02d5"+
            "\30\uffff\1\u02db\4\uffff\1\u02d2\1\uffff\1\u02cd\2\uffff\1"+
            "\u02d4\2\uffff\1\u02dd\2\uffff\1\u02cc\1\u02dd\22\uffff\1\u02d6"+
            "\13\uffff\1\u02d1\2\uffff\1\u02d0\6\uffff\1\u02d9\1\uffff\1"+
            "\u02d9\1\u02da\2\uffff\1\u02ce\1\u02cf\12\uffff\1\u02d9\14\uffff"+
            "\1\u02d9\12\uffff\1\u02dc",
            "\1\15\35\uffff\1\u02de\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u02f3\35\uffff\1\u02f0\21\uffff\1\u02e8\2\uffff\1\u02f4"+
            "\16\uffff\1\u02e7\4\uffff\1\u02f1\30\uffff\1\u02f7\4\uffff\1"+
            "\u02ef\1\uffff\1\u02ea\1\uffff\1\u02fa\1\u02e6\2\uffff\1\u02f9"+
            "\2\uffff\1\u02e9\1\u02f9\22\uffff\1\u02f2\13\uffff\1\u02ee\2"+
            "\uffff\1\u02ed\6\uffff\1\u02f5\1\uffff\1\u02f5\1\u02f6\2\uffff"+
            "\1\u02eb\1\u02ec\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u02f5"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u02f5\1\uffff\3\15\6\uffff\1\u02f8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0310\35\uffff\1\u030c\24\uffff\1\u0311\23\uffff\1\u030e"+
            "\35\uffff\1\u030b\1\uffff\1\u0306\2\uffff\1\u030d\31\uffff\1"+
            "\u030f\13\uffff\1\u030a\2\uffff\1\u0309\6\uffff\1\u0312\1\uffff"+
            "\1\u0312\1\u0313\2\uffff\1\u0307\1\u0308\12\uffff\1\u0312\14"+
            "\uffff\1\u0312",
            "\1\u032a\35\uffff\1\u031d\24\uffff\1\u032b\23\uffff\1\u0328"+
            "\30\uffff\1\u032e\4\uffff\1\u0326\1\uffff\1\u0315\2\uffff\1"+
            "\u0327\2\uffff\1\u0330\2\uffff\1\u0321\1\u0330\22\uffff\1\u0329"+
            "\13\uffff\1\u0325\2\uffff\1\u0324\6\uffff\1\u032c\1\uffff\1"+
            "\u032c\1\u032d\2\uffff\1\u0322\1\u0323\1\u0316\2\uffff\1\u0318"+
            "\4\uffff\1\u0320\1\uffff\1\u032c\2\uffff\1\u0314\2\uffff\1\u031a"+
            "\1\u031b\1\uffff\1\u031c\1\uffff\1\u031e\1\uffff\1\u032c\1\uffff"+
            "\1\u031f\1\u0319\1\u0317\6\uffff\1\u032f",
            "\1\u0332\u00a0\uffff\1\u0331",
            "\1\u033c\110\uffff\1\u0334\1\uffff\1\u0340\70\uffff\1\u0335"+
            "\2\uffff\1\u0337\4\uffff\1\u033f\4\uffff\1\u0333\2\uffff\1\u0339"+
            "\1\u033a\1\uffff\1\u033b\1\uffff\1\u033d\3\uffff\1\u033e\1\u0338"+
            "\1\u0336",
            "\1\u0341",
            "\1\u0342",
            "\1\u0343",
            "\1\15\102\uffff\1\u0348\1\uffff\3\u0348\1\uffff\1\u0346\2\uffff"+
            "\1\u0348\1\uffff\1\u0348\1\u0347\2\uffff\1\u0348\1\u0347\1\uffff"+
            "\2\u0345\1\u0348\3\uffff\2\u0348\1\uffff\6\u0348\1\uffff\1\u0349"+
            "\31\uffff\1\u0344\1\uffff\1\u034a\1\u0348\37\uffff\1\u0348\1"+
            "\uffff\1\u0348",
            "\1\u034c",
            "\1\15\102\uffff\1\u0350\1\uffff\3\u0350\1\uffff\1\u034e\2\uffff"+
            "\1\u0350\1\uffff\1\u0350\1\u034f\2\uffff\1\u0350\1\u034f\1\uffff"+
            "\2\u034d\1\u0350\3\uffff\2\u0350\1\uffff\6\u0350\1\uffff\1\u0351"+
            "\33\uffff\1\u0352\1\u0350\37\uffff\1\u0350\1\uffff\1\u0350",
            "\1\u0354",
            "\1\15\102\uffff\1\u0358\1\uffff\3\u0358\1\uffff\1\u0356\2\uffff"+
            "\1\u0358\1\uffff\1\u0358\1\u0357\2\uffff\1\u0358\1\u0357\1\uffff"+
            "\2\u0355\1\u0358\3\uffff\2\u0358\1\uffff\6\u0358\1\uffff\1\u0359"+
            "\33\uffff\1\u035a\1\u0358\37\uffff\1\u0358\1\uffff\1\u0358",
            "\1\15\102\uffff\1\u035f\1\uffff\3\u035f\1\uffff\1\u035d\2\uffff"+
            "\1\u035f\1\uffff\1\u035f\1\u035e\2\uffff\1\u035f\1\u035e\1\uffff"+
            "\2\u035c\1\u035f\3\uffff\2\u035f\1\uffff\6\u035f\1\uffff\1\u0360"+
            "\33\uffff\1\u0361\1\u035f\37\uffff\1\u035f\1\uffff\1\u035f",
            "\1\15\102\uffff\1\u0366\1\uffff\3\u0366\1\uffff\1\u0364\2\uffff"+
            "\1\u0366\1\uffff\1\u0366\1\u0365\2\uffff\1\u0366\1\u0365\1\uffff"+
            "\2\u0363\1\u0366\3\uffff\2\u0366\1\uffff\6\u0366\1\uffff\1\u0367"+
            "\33\uffff\1\u0368\1\u0366\37\uffff\1\u0366\1\uffff\1\u0366",
            "\1\u0375\35\uffff\1\u0371\24\uffff\1\u0376\23\uffff\1\u0373"+
            "\30\uffff\1\u0379\4\uffff\1\u0370\1\uffff\1\u036b\2\uffff\1"+
            "\u0372\2\uffff\1\u037b\2\uffff\1\u036a\1\u037b\22\uffff\1\u0374"+
            "\13\uffff\1\u036f\2\uffff\1\u036e\6\uffff\1\u0377\1\uffff\1"+
            "\u0377\1\u0378\2\uffff\1\u036c\1\u036d\12\uffff\1\u0377\14\uffff"+
            "\1\u0377\12\uffff\1\u037a",
            "\1\u0386\35\uffff\1\u0382\24\uffff\1\u0387\23\uffff\1\u0384"+
            "\35\uffff\1\u0381\1\uffff\1\u037c\2\uffff\1\u0383\31\uffff\1"+
            "\u0385\13\uffff\1\u0380\2\uffff\1\u037f\6\uffff\1\u0388\1\uffff"+
            "\1\u0388\1\u0389\2\uffff\1\u037d\1\u037e\12\uffff\1\u0388\14"+
            "\uffff\1\u0388",
            "\1\u0394\35\uffff\1\u0390\24\uffff\1\u0395\23\uffff\1\u0392"+
            "\35\uffff\1\u038f\1\uffff\1\u038a\2\uffff\1\u0391\31\uffff\1"+
            "\u0393\13\uffff\1\u038e\2\uffff\1\u038d\6\uffff\1\u0396\1\uffff"+
            "\1\u0396\1\u0397\2\uffff\1\u038b\1\u038c\12\uffff\1\u0396\14"+
            "\uffff\1\u0396",
            "\1\u03a2\35\uffff\1\u039e\24\uffff\1\u03a3\23\uffff\1\u03a0"+
            "\35\uffff\1\u039d\1\uffff\1\u0398\2\uffff\1\u039f\31\uffff\1"+
            "\u03a1\13\uffff\1\u039c\2\uffff\1\u039b\6\uffff\1\u03a4\1\uffff"+
            "\1\u03a4\1\u03a5\2\uffff\1\u0399\1\u039a\12\uffff\1\u03a4\14"+
            "\uffff\1\u03a4",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u03a6\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u03a7\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03ea\u0083\uffff\1\15\2\uffff\1\15\11\uffff\1\15\2\uffff"+
            "\2\15\1\uffff\1\15\6\uffff\2\15",
            "",
            "",
            "",
            "\1\u0401\35\uffff\1\u03f5\24\uffff\1\u0402\23\uffff\1\u03ff"+
            "\30\uffff\1\u0405\4\uffff\1\u03fe\1\uffff\1\u03ed\2\uffff\1"+
            "\u03eb\2\uffff\1\u0407\2\uffff\1\u03f9\1\u0407\22\uffff\1\u0400"+
            "\13\uffff\1\u03fd\2\uffff\1\u03fc\6\uffff\1\u0403\1\uffff\1"+
            "\u0403\1\u0404\2\uffff\1\u03fa\1\u03fb\1\u03ee\2\uffff\1\u03f0"+
            "\4\uffff\1\u03f8\1\uffff\1\u0403\2\uffff\1\u03ec\2\uffff\1\u03f2"+
            "\1\u03f3\1\uffff\1\u03f4\1\uffff\1\u03f6\1\uffff\1\u0403\1\uffff"+
            "\1\u03f7\1\u03f1\1\u03ef\6\uffff\1\u0406",
            "",
            "",
            "",
            "",
            "\1\u0408",
            "\1\u0410\21\uffff\1\u040f\36\uffff\1\u0415\1\uffff\2\u0415"+
            "\1\u0414\1\uffff\1\u040b\1\uffff\1\u0412\1\u0413\1\uffff\1\u0415"+
            "\1\u040c\1\uffff\1\u0411\1\u0415\1\u040c\1\uffff\2\u040a\1\u0415"+
            "\3\uffff\1\u040d\1\u0415\1\uffff\6\u0415\1\uffff\1\u040e\31"+
            "\uffff\1\u0409\2\uffff\1\u0415\37\uffff\1\u0415\1\uffff\1\u0415",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\35\uffff\1\u0416\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u042b\35\uffff\1\u0428\21\uffff\1\u0420\2\uffff\1\u042c"+
            "\16\uffff\1\u041f\4\uffff\1\u0429\30\uffff\1\u042f\4\uffff\1"+
            "\u0427\1\uffff\1\u0422\1\uffff\1\u0432\1\u041e\2\uffff\1\u0431"+
            "\2\uffff\1\u0421\1\u0431\22\uffff\1\u042a\13\uffff\1\u0426\2"+
            "\uffff\1\u0425\6\uffff\1\u042d\1\uffff\1\u042d\1\u042e\2\uffff"+
            "\1\u0423\1\u0424\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u042d"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u042d\1\uffff\3\15\6\uffff\1\u0430",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u043e\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u043f\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0482\u0083\uffff\1\15\2\uffff\1\15\11\uffff\1\15\2\uffff"+
            "\2\15\1\uffff\1\15\6\uffff\2\15",
            "",
            "",
            "",
            "\1\u0499\35\uffff\1\u048d\24\uffff\1\u049a\23\uffff\1\u0497"+
            "\30\uffff\1\u049d\4\uffff\1\u0496\1\uffff\1\u0485\2\uffff\1"+
            "\u0483\2\uffff\1\u049f\2\uffff\1\u0491\1\u049f\22\uffff\1\u0498"+
            "\13\uffff\1\u0495\2\uffff\1\u0494\6\uffff\1\u049b\1\uffff\1"+
            "\u049b\1\u049c\2\uffff\1\u0492\1\u0493\1\u0486\2\uffff\1\u0488"+
            "\4\uffff\1\u0490\1\uffff\1\u049b\2\uffff\1\u0484\2\uffff\1\u048a"+
            "\1\u048b\1\uffff\1\u048c\1\uffff\1\u048e\1\uffff\1\u049b\1\uffff"+
            "\1\u048f\1\u0489\1\u0487\6\uffff\1\u049e",
            "",
            "",
            "",
            "",
            "\1\u04a0",
            "\1\u04a8\21\uffff\1\u04a7\36\uffff\1\u04ad\1\uffff\2\u04ad"+
            "\1\u04ac\1\uffff\1\u04a3\1\uffff\1\u04aa\1\u04ab\1\uffff\1\u04ad"+
            "\1\u04a4\1\uffff\1\u04a9\1\u04ad\1\u04a4\1\uffff\2\u04a2\1\u04ad"+
            "\3\uffff\1\u04a5\1\u04ad\1\uffff\6\u04ad\1\uffff\1\u04a6\31"+
            "\uffff\1\u04a1\2\uffff\1\u04ad\37\uffff\1\u04ad\1\uffff\1\u04ad",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\35\uffff\1\u04ae\24\uffff\1\15\23\uffff\1\15\35\uffff"+
            "\1\15\4\uffff\1\15\31\uffff\1\15\25\uffff\1\15\1\uffff\1\15"+
            "\17\uffff\1\15\14\uffff\1\15",
            "\1\u04c3\35\uffff\1\u04c0\21\uffff\1\u04b8\2\uffff\1\u04c4"+
            "\16\uffff\1\u04b7\4\uffff\1\u04c1\30\uffff\1\u04c7\4\uffff\1"+
            "\u04bf\1\uffff\1\u04ba\1\uffff\1\u04ca\1\u04b6\2\uffff\1\u04c9"+
            "\2\uffff\1\u04b9\1\u04c9\22\uffff\1\u04c2\13\uffff\1\u04be\2"+
            "\uffff\1\u04bd\6\uffff\1\u04c5\1\uffff\1\u04c5\1\u04c6\2\uffff"+
            "\1\u04bb\1\u04bc\1\15\2\uffff\1\15\4\uffff\1\15\1\uffff\1\u04c5"+
            "\2\uffff\1\15\2\uffff\2\15\1\uffff\1\15\1\uffff\1\15\1\uffff"+
            "\1\u04c5\1\uffff\3\15\6\uffff\1\u04c8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u04d6\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u04d7\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u051a\u0083\uffff\1\15\2\uffff\1\15\11\uffff\1\15\2\uffff"+
            "\2\15\1\uffff\1\15\6\uffff\2\15",
            "",
            "",
            "",
            "\1\u0531\35\uffff\1\u0525\24\uffff\1\u0532\23\uffff\1\u052f"+
            "\30\uffff\1\u0535\4\uffff\1\u052e\1\uffff\1\u051d\2\uffff\1"+
            "\u051b\2\uffff\1\u0537\2\uffff\1\u0529\1\u0537\22\uffff\1\u0530"+
            "\13\uffff\1\u052d\2\uffff\1\u052c\6\uffff\1\u0533\1\uffff\1"+
            "\u0533\1\u0534\2\uffff\1\u052a\1\u052b\1\u051e\2\uffff\1\u0520"+
            "\4\uffff\1\u0528\1\uffff\1\u0533\2\uffff\1\u051c\2\uffff\1\u0522"+
            "\1\u0523\1\uffff\1\u0524\1\uffff\1\u0526\1\uffff\1\u0533\1\uffff"+
            "\1\u0527\1\u0521\1\u051f\6\uffff\1\u0536",
            "",
            "",
            "",
            "",
            "\1\u0538",
            "\1\u0540\21\uffff\1\u053f\36\uffff\1\u0545\1\uffff\2\u0545"+
            "\1\u0544\1\uffff\1\u053b\1\uffff\1\u0542\1\u0543\1\uffff\1\u0545"+
            "\1\u053c\1\uffff\1\u0541\1\u0545\1\u053c\1\uffff\2\u053a\1\u0545"+
            "\3\uffff\1\u053d\1\u0545\1\uffff\6\u0545\1\uffff\1\u053e\31"+
            "\uffff\1\u0539\2\uffff\1\u0545\37\uffff\1\u0545\1\uffff\1\u0545",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u0546\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u0547\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u058a\u0083\uffff\1\15\2\uffff\1\15\11\uffff\1\15\2\uffff"+
            "\2\15\1\uffff\1\15\6\uffff\2\15",
            "",
            "",
            "",
            "\1\u05a1\35\uffff\1\u0595\24\uffff\1\u05a2\23\uffff\1\u059f"+
            "\30\uffff\1\u05a5\4\uffff\1\u059e\1\uffff\1\u058d\2\uffff\1"+
            "\u058b\2\uffff\1\u05a7\2\uffff\1\u0599\1\u05a7\22\uffff\1\u05a0"+
            "\13\uffff\1\u059d\2\uffff\1\u059c\6\uffff\1\u05a3\1\uffff\1"+
            "\u05a3\1\u05a4\2\uffff\1\u059a\1\u059b\1\u058e\2\uffff\1\u0590"+
            "\4\uffff\1\u0598\1\uffff\1\u05a3\2\uffff\1\u058c\2\uffff\1\u0592"+
            "\1\u0593\1\uffff\1\u0594\1\uffff\1\u0596\1\uffff\1\u05a3\1\uffff"+
            "\1\u0597\1\u0591\1\u058f\6\uffff\1\u05a6",
            "",
            "",
            "",
            "",
            "\1\u05a8",
            "\1\u05b0\21\uffff\1\u05af\36\uffff\1\u05b5\1\uffff\2\u05b5"+
            "\1\u05b4\1\uffff\1\u05ab\1\uffff\1\u05b2\1\u05b3\1\uffff\1\u05b5"+
            "\1\u05ac\1\uffff\1\u05b1\1\u05b5\1\u05ac\1\uffff\2\u05aa\1\u05b5"+
            "\3\uffff\1\u05ad\1\u05b5\1\uffff\6\u05b5\1\uffff\1\u05ae\31"+
            "\uffff\1\u05a9\2\uffff\1\u05b5\37\uffff\1\u05b5\1\uffff\1\u05b5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\15\27\uffff\1\15\21\uffff\1\15\21\uffff\1\15\36\uffff\1"+
            "\15\1\uffff\3\15\1\uffff\1\u05b6\1\uffff\2\15\1\uffff\2\15\1"+
            "\uffff\3\15\1\uffff\2\u05b7\1\15\1\uffff\4\15\1\uffff\6\15\1"+
            "\uffff\1\15\1\uffff\7\15\4\uffff\1\15\3\uffff\4\15\1\uffff\1"+
            "\15\3\uffff\4\15\1\uffff\12\15\1\uffff\4\15\1\uffff\7\15\1\uffff"+
            "\7\15\1\uffff\2\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05fa\u0083\uffff\1\15\2\uffff\1\15\11\uffff\1\15\2\uffff"+
            "\2\15\1\uffff\1\15\6\uffff\2\15",
            "",
            "",
            "",
            "\1\u0611\35\uffff\1\u0605\24\uffff\1\u0612\23\uffff\1\u060f"+
            "\30\uffff\1\u0615\4\uffff\1\u060e\1\uffff\1\u05fd\2\uffff\1"+
            "\u05fb\2\uffff\1\u0617\2\uffff\1\u0609\1\u0617\22\uffff\1\u0610"+
            "\13\uffff\1\u060d\2\uffff\1\u060c\6\uffff\1\u0613\1\uffff\1"+
            "\u0613\1\u0614\2\uffff\1\u060a\1\u060b\1\u05fe\2\uffff\1\u0600"+
            "\4\uffff\1\u0608\1\uffff\1\u0613\2\uffff\1\u05fc\2\uffff\1\u0602"+
            "\1\u0603\1\uffff\1\u0604\1\uffff\1\u0606\1\uffff\1\u0613\1\uffff"+
            "\1\u0607\1\u0601\1\u05ff\6\uffff\1\u0616",
            "",
            "",
            "",
            "",
            "\1\u0618",
            "\1\u0620\21\uffff\1\u061f\36\uffff\1\u0625\1\uffff\2\u0625"+
            "\1\u0624\1\uffff\1\u061b\1\uffff\1\u0622\1\u0623\1\uffff\1\u0625"+
            "\1\u061c\1\uffff\1\u0621\1\u0625\1\u061c\1\uffff\2\u061a\1\u0625"+
            "\3\uffff\1\u061d\1\u0625\1\uffff\6\u0625\1\uffff\1\u061e\31"+
            "\uffff\1\u0619\2\uffff\1\u0625\37\uffff\1\u0625\1\uffff\1\u0625",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "520:1: simple_expression_value_access : ( ( block_call_predicate )=> block_call_wrapper | selector_wrapper '(' name ( ':' ( name ':' )* )? ')' | '@protocol' '(' name ')' -> ^( DIRECTIVE name ) | ( simple_expression_value ( access_wrapper name )* '(' )=> simple_expression_value ( access_wrapper name )* ( '(' ( classical_method_params_push )? ')' ) | simple_expression_value2 ( access_wrapper simple_expression_value )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_0 = input.LA(1);

                         
                        int index70_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_0==176) && (synpred14_Objc())) {s = 1;}

                        else if ( (LA70_0==177) && (synpred14_Objc())) {s = 2;}

                        else if ( (LA70_0==163) ) {s = 3;}

                        else if ( (LA70_0==160) ) {s = 4;}

                        else if ( (LA70_0==117) ) {s = 5;}

                        else if ( (LA70_0==ID) ) {s = 6;}

                        else if ( (LA70_0==122) ) {s = 7;}

                        else if ( (LA70_0==STRING_LITERAL) ) {s = 8;}

                        else if ( (LA70_0==148) ) {s = 9;}

                        else if ( (LA70_0==CHAR_LITERAL) ) {s = 10;}

                        else if ( (LA70_0==NUMBER_LITERAL) ) {s = 11;}

                        else if ( (LA70_0==170||LA70_0==172||LA70_0==188||LA70_0==201) ) {s = 12;}

                        else if ( (LA70_0==119||LA70_0==173) ) {s = 13;}

                         
                        input.seek(index70_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA70_18 = input.LA(1);

                         
                        int index70_18 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_18==122) ) {s = 404;}

                        else if ( (LA70_18==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 405;}

                        else if ( (LA70_18==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 406;}

                        else if ( (LA70_18==128) && (synpred15_Objc())) {s = 407;}

                        else if ( (LA70_18==119) ) {s = 408;}

                        else if ( (LA70_18==176) && (synpred15_Objc())) {s = 409;}

                        else if ( (LA70_18==177) && (synpred15_Objc())) {s = 410;}

                        else if ( (LA70_18==163) && (synpred15_Objc())) {s = 411;}

                        else if ( (LA70_18==160) && (synpred15_Objc())) {s = 412;}

                        else if ( (LA70_18==117) ) {s = 413;}

                        else if ( (LA70_18==ID) ) {s = 414;}

                        else if ( (LA70_18==STRING_LITERAL) && (synpred15_Objc())) {s = 415;}

                        else if ( (LA70_18==148) && (synpred15_Objc())) {s = 416;}

                        else if ( (LA70_18==CHAR_LITERAL) && (synpred15_Objc())) {s = 417;}

                        else if ( (LA70_18==NUMBER_LITERAL) && (synpred15_Objc())) {s = 418;}

                        else if ( (LA70_18==170||LA70_18==172||LA70_18==188||LA70_18==201) && (synpred15_Objc())) {s = 419;}

                        else if ( (LA70_18==173) && (synpred15_Objc())) {s = 420;}

                        else if ( (LA70_18==112) && (synpred15_Objc())) {s = 421;}

                        else if ( (LA70_18==212) && (synpred15_Objc())) {s = 422;}

                        else if ( (LA70_18==125||LA70_18==129) && (synpred15_Objc())) {s = 423;}

                        else if ( (LA70_18==121) && (synpred15_Objc())) {s = 424;}

                        else if ( (LA70_18==178||LA70_18==181||LA70_18==186||LA70_18==191||(LA70_18 >= 194 && LA70_18 <= 195)||LA70_18==197||LA70_18==199||(LA70_18 >= 203 && LA70_18 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_18);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA70_78 = input.LA(1);

                         
                        int index70_78 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_78==122) ) {s = 504;}

                        else if ( (LA70_78==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 505;}

                        else if ( (LA70_78==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 506;}

                        else if ( (LA70_78==128) && (synpred15_Objc())) {s = 507;}

                        else if ( (LA70_78==119) ) {s = 508;}

                        else if ( (LA70_78==176) && (synpred15_Objc())) {s = 509;}

                        else if ( (LA70_78==177) && (synpred15_Objc())) {s = 510;}

                        else if ( (LA70_78==163) && (synpred15_Objc())) {s = 511;}

                        else if ( (LA70_78==160) && (synpred15_Objc())) {s = 512;}

                        else if ( (LA70_78==117) ) {s = 513;}

                        else if ( (LA70_78==ID) ) {s = 514;}

                        else if ( (LA70_78==STRING_LITERAL) && (synpred15_Objc())) {s = 515;}

                        else if ( (LA70_78==148) && (synpred15_Objc())) {s = 516;}

                        else if ( (LA70_78==CHAR_LITERAL) && (synpred15_Objc())) {s = 517;}

                        else if ( (LA70_78==NUMBER_LITERAL) && (synpred15_Objc())) {s = 518;}

                        else if ( (LA70_78==170||LA70_78==172||LA70_78==188||LA70_78==201) && (synpred15_Objc())) {s = 519;}

                        else if ( (LA70_78==173) && (synpred15_Objc())) {s = 520;}

                        else if ( (LA70_78==112) && (synpred15_Objc())) {s = 521;}

                        else if ( (LA70_78==212) && (synpred15_Objc())) {s = 522;}

                        else if ( (LA70_78==125||LA70_78==129) && (synpred15_Objc())) {s = 523;}

                        else if ( (LA70_78==121) && (synpred15_Objc())) {s = 524;}

                        else if ( (LA70_78==178||LA70_78==181||LA70_78==186||LA70_78==191||(LA70_78 >= 194 && LA70_78 <= 195)||LA70_78==197||LA70_78==199||(LA70_78 >= 203 && LA70_78 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_78);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA70_139 = input.LA(1);

                         
                        int index70_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_139==122) ) {s = 604;}

                        else if ( (LA70_139==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 605;}

                        else if ( (LA70_139==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 606;}

                        else if ( (LA70_139==128) && (synpred15_Objc())) {s = 607;}

                        else if ( (LA70_139==119) ) {s = 608;}

                        else if ( (LA70_139==176) && (synpred15_Objc())) {s = 609;}

                        else if ( (LA70_139==177) && (synpred15_Objc())) {s = 610;}

                        else if ( (LA70_139==163) && (synpred15_Objc())) {s = 611;}

                        else if ( (LA70_139==160) && (synpred15_Objc())) {s = 612;}

                        else if ( (LA70_139==117) ) {s = 613;}

                        else if ( (LA70_139==ID) ) {s = 614;}

                        else if ( (LA70_139==STRING_LITERAL) && (synpred15_Objc())) {s = 615;}

                        else if ( (LA70_139==148) && (synpred15_Objc())) {s = 616;}

                        else if ( (LA70_139==CHAR_LITERAL) && (synpred15_Objc())) {s = 617;}

                        else if ( (LA70_139==NUMBER_LITERAL) && (synpred15_Objc())) {s = 618;}

                        else if ( (LA70_139==170||LA70_139==172||LA70_139==188||LA70_139==201) && (synpred15_Objc())) {s = 619;}

                        else if ( (LA70_139==173) && (synpred15_Objc())) {s = 620;}

                        else if ( (LA70_139==112) && (synpred15_Objc())) {s = 621;}

                        else if ( (LA70_139==212) && (synpred15_Objc())) {s = 622;}

                        else if ( (LA70_139==125||LA70_139==129) && (synpred15_Objc())) {s = 623;}

                        else if ( (LA70_139==121) && (synpred15_Objc())) {s = 624;}

                        else if ( (LA70_139==178||LA70_139==181||LA70_139==186||LA70_139==191||(LA70_139 >= 194 && LA70_139 <= 195)||LA70_139==197||LA70_139==199||(LA70_139 >= 203 && LA70_139 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_139);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA70_199 = input.LA(1);

                         
                        int index70_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_199==122) ) {s = 644;}

                        else if ( (LA70_199==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 645;}

                        else if ( (LA70_199==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 646;}

                        else if ( (LA70_199==128) && (synpred15_Objc())) {s = 647;}

                        else if ( (LA70_199==119) ) {s = 648;}

                        else if ( (LA70_199==176) && (synpred15_Objc())) {s = 649;}

                        else if ( (LA70_199==177) && (synpred15_Objc())) {s = 650;}

                        else if ( (LA70_199==163) && (synpred15_Objc())) {s = 651;}

                        else if ( (LA70_199==160) && (synpred15_Objc())) {s = 652;}

                        else if ( (LA70_199==117) ) {s = 653;}

                        else if ( (LA70_199==ID) ) {s = 654;}

                        else if ( (LA70_199==STRING_LITERAL) && (synpred15_Objc())) {s = 655;}

                        else if ( (LA70_199==148) && (synpred15_Objc())) {s = 656;}

                        else if ( (LA70_199==CHAR_LITERAL) && (synpred15_Objc())) {s = 657;}

                        else if ( (LA70_199==NUMBER_LITERAL) && (synpred15_Objc())) {s = 658;}

                        else if ( (LA70_199==170||LA70_199==172||LA70_199==188||LA70_199==201) && (synpred15_Objc())) {s = 659;}

                        else if ( (LA70_199==173) && (synpred15_Objc())) {s = 660;}

                        else if ( (LA70_199==112) && (synpred15_Objc())) {s = 661;}

                        else if ( (LA70_199==212) && (synpred15_Objc())) {s = 662;}

                        else if ( (LA70_199==125||LA70_199==129) && (synpred15_Objc())) {s = 663;}

                        else if ( (LA70_199==121) && (synpred15_Objc())) {s = 664;}

                        else if ( (LA70_199==178||LA70_199==181||LA70_199==186||LA70_199==191||(LA70_199 >= 194 && LA70_199 <= 195)||LA70_199==197||LA70_199==199||(LA70_199 >= 203 && LA70_199 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_199);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA70_259 = input.LA(1);

                         
                        int index70_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_259==122) ) {s = 684;}

                        else if ( (LA70_259==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 685;}

                        else if ( (LA70_259==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 686;}

                        else if ( (LA70_259==128) && (synpred15_Objc())) {s = 687;}

                        else if ( (LA70_259==119) ) {s = 688;}

                        else if ( (LA70_259==176) && (synpred15_Objc())) {s = 689;}

                        else if ( (LA70_259==177) && (synpred15_Objc())) {s = 690;}

                        else if ( (LA70_259==163) && (synpred15_Objc())) {s = 691;}

                        else if ( (LA70_259==160) && (synpred15_Objc())) {s = 692;}

                        else if ( (LA70_259==117) ) {s = 693;}

                        else if ( (LA70_259==ID) ) {s = 694;}

                        else if ( (LA70_259==STRING_LITERAL) && (synpred15_Objc())) {s = 695;}

                        else if ( (LA70_259==148) && (synpred15_Objc())) {s = 696;}

                        else if ( (LA70_259==CHAR_LITERAL) && (synpred15_Objc())) {s = 697;}

                        else if ( (LA70_259==NUMBER_LITERAL) && (synpred15_Objc())) {s = 698;}

                        else if ( (LA70_259==170||LA70_259==172||LA70_259==188||LA70_259==201) && (synpred15_Objc())) {s = 699;}

                        else if ( (LA70_259==173) && (synpred15_Objc())) {s = 700;}

                        else if ( (LA70_259==112) && (synpred15_Objc())) {s = 701;}

                        else if ( (LA70_259==212) && (synpred15_Objc())) {s = 702;}

                        else if ( (LA70_259==125||LA70_259==129) && (synpred15_Objc())) {s = 703;}

                        else if ( (LA70_259==121) && (synpred15_Objc())) {s = 704;}

                        else if ( (LA70_259==178||LA70_259==181||LA70_259==186||LA70_259==191||(LA70_259 >= 194 && LA70_259 <= 195)||LA70_259==197||LA70_259==199||(LA70_259 >= 203 && LA70_259 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_259);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA70_320 = input.LA(1);

                         
                        int index70_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_320==122) ) {s = 742;}

                        else if ( (LA70_320==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 743;}

                        else if ( (LA70_320==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 744;}

                        else if ( (LA70_320==128) && (synpred15_Objc())) {s = 745;}

                        else if ( (LA70_320==119) ) {s = 746;}

                        else if ( (LA70_320==176) && (synpred15_Objc())) {s = 747;}

                        else if ( (LA70_320==177) && (synpred15_Objc())) {s = 748;}

                        else if ( (LA70_320==163) && (synpred15_Objc())) {s = 749;}

                        else if ( (LA70_320==160) && (synpred15_Objc())) {s = 750;}

                        else if ( (LA70_320==117) ) {s = 751;}

                        else if ( (LA70_320==ID) ) {s = 752;}

                        else if ( (LA70_320==STRING_LITERAL) && (synpred15_Objc())) {s = 753;}

                        else if ( (LA70_320==148) && (synpred15_Objc())) {s = 754;}

                        else if ( (LA70_320==CHAR_LITERAL) && (synpred15_Objc())) {s = 755;}

                        else if ( (LA70_320==NUMBER_LITERAL) && (synpred15_Objc())) {s = 756;}

                        else if ( (LA70_320==170||LA70_320==172||LA70_320==188||LA70_320==201) && (synpred15_Objc())) {s = 757;}

                        else if ( (LA70_320==173) && (synpred15_Objc())) {s = 758;}

                        else if ( (LA70_320==112) && (synpred15_Objc())) {s = 759;}

                        else if ( (LA70_320==212) && (synpred15_Objc())) {s = 760;}

                        else if ( (LA70_320==125||LA70_320==129) && (synpred15_Objc())) {s = 761;}

                        else if ( (LA70_320==121) && (synpred15_Objc())) {s = 762;}

                        else if ( (LA70_320==178||LA70_320==181||LA70_320==186||LA70_320==191||(LA70_320 >= 194 && LA70_320 <= 195)||LA70_320==197||LA70_320==199||(LA70_320 >= 203 && LA70_320 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_320);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA70_408 = input.LA(1);

                         
                        int index70_408 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_408==122) ) {s = 1003;}

                        else if ( (LA70_408==191) ) {s = 1004;}

                        else if ( (LA70_408==119) ) {s = 1005;}

                        else if ( (LA70_408==178) ) {s = 1006;}

                        else if ( (LA70_408==205) ) {s = 1007;}

                        else if ( (LA70_408==181) ) {s = 1008;}

                        else if ( (LA70_408==204) ) {s = 1009;}

                        else if ( (LA70_408==194) ) {s = 1010;}

                        else if ( (LA70_408==195) ) {s = 1011;}

                        else if ( (LA70_408==197) ) {s = 1012;}

                        else if ( (LA70_408==ID) ) {s = 1013;}

                        else if ( (LA70_408==199) ) {s = 1014;}

                        else if ( (LA70_408==203) ) {s = 1015;}

                        else if ( (LA70_408==186) ) {s = 1016;}

                        else if ( (LA70_408==128) && (synpred15_Objc())) {s = 1017;}

                        else if ( (LA70_408==176) && (synpred15_Objc())) {s = 1018;}

                        else if ( (LA70_408==177) && (synpred15_Objc())) {s = 1019;}

                        else if ( (LA70_408==163) && (synpred15_Objc())) {s = 1020;}

                        else if ( (LA70_408==160) && (synpred15_Objc())) {s = 1021;}

                        else if ( (LA70_408==117) && (synpred15_Objc())) {s = 1022;}

                        else if ( (LA70_408==STRING_LITERAL) && (synpred15_Objc())) {s = 1023;}

                        else if ( (LA70_408==148) && (synpred15_Objc())) {s = 1024;}

                        else if ( (LA70_408==CHAR_LITERAL) && (synpred15_Objc())) {s = 1025;}

                        else if ( (LA70_408==NUMBER_LITERAL) && (synpred15_Objc())) {s = 1026;}

                        else if ( (LA70_408==170||LA70_408==172||LA70_408==188||LA70_408==201) && (synpred15_Objc())) {s = 1027;}

                        else if ( (LA70_408==173) && (synpred15_Objc())) {s = 1028;}

                        else if ( (LA70_408==112) && (synpred15_Objc())) {s = 1029;}

                        else if ( (LA70_408==212) && (synpred15_Objc())) {s = 1030;}

                        else if ( (LA70_408==125||LA70_408==129) && (synpred15_Objc())) {s = 1031;}

                         
                        input.seek(index70_408);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA70_414 = input.LA(1);

                         
                        int index70_414 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_414==173) ) {s = 1033;}

                        else if ( ((LA70_414 >= 131 && LA70_414 <= 132)) && (synpred15_Objc())) {s = 1034;}

                        else if ( (LA70_414==119) && (synpred15_Objc())) {s = 1035;}

                        else if ( (LA70_414==125||LA70_414==129) && (synpred15_Objc())) {s = 1036;}

                        else if ( (LA70_414==137) ) {s = 1037;}

                        else if ( (LA70_414==147) && (synpred15_Objc())) {s = 1038;}

                        else if ( (LA70_414==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 1039;}

                        else if ( (LA70_414==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 1040;}

                        else if ( (LA70_414==127) && (synpred15_Objc())) {s = 1041;}

                        else if ( (LA70_414==121) ) {s = 1042;}

                        else if ( (LA70_414==122) ) {s = 1043;}

                        else if ( (LA70_414==117) ) {s = 1044;}

                        else if ( (LA70_414==113||(LA70_414 >= 115 && LA70_414 <= 116)||LA70_414==124||LA70_414==128||LA70_414==133||LA70_414==138||(LA70_414 >= 140 && LA70_414 <= 145)||LA70_414==176||LA70_414==208||LA70_414==210) && (synpred15_Objc())) {s = 1045;}

                         
                        input.seek(index70_414);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA70_437 = input.LA(1);

                         
                        int index70_437 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_437==122) ) {s = 1054;}

                        else if ( (LA70_437==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 1055;}

                        else if ( (LA70_437==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 1056;}

                        else if ( (LA70_437==128) && (synpred15_Objc())) {s = 1057;}

                        else if ( (LA70_437==119) ) {s = 1058;}

                        else if ( (LA70_437==176) && (synpred15_Objc())) {s = 1059;}

                        else if ( (LA70_437==177) && (synpred15_Objc())) {s = 1060;}

                        else if ( (LA70_437==163) && (synpred15_Objc())) {s = 1061;}

                        else if ( (LA70_437==160) && (synpred15_Objc())) {s = 1062;}

                        else if ( (LA70_437==117) ) {s = 1063;}

                        else if ( (LA70_437==ID) ) {s = 1064;}

                        else if ( (LA70_437==STRING_LITERAL) && (synpred15_Objc())) {s = 1065;}

                        else if ( (LA70_437==148) && (synpred15_Objc())) {s = 1066;}

                        else if ( (LA70_437==CHAR_LITERAL) && (synpred15_Objc())) {s = 1067;}

                        else if ( (LA70_437==NUMBER_LITERAL) && (synpred15_Objc())) {s = 1068;}

                        else if ( (LA70_437==170||LA70_437==172||LA70_437==188||LA70_437==201) && (synpred15_Objc())) {s = 1069;}

                        else if ( (LA70_437==173) && (synpred15_Objc())) {s = 1070;}

                        else if ( (LA70_437==112) && (synpred15_Objc())) {s = 1071;}

                        else if ( (LA70_437==212) && (synpred15_Objc())) {s = 1072;}

                        else if ( (LA70_437==125||LA70_437==129) && (synpred15_Objc())) {s = 1073;}

                        else if ( (LA70_437==121) && (synpred15_Objc())) {s = 1074;}

                        else if ( (LA70_437==178||LA70_437==181||LA70_437==186||LA70_437==191||(LA70_437 >= 194 && LA70_437 <= 195)||LA70_437==197||LA70_437==199||(LA70_437 >= 203 && LA70_437 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_437);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA70_508 = input.LA(1);

                         
                        int index70_508 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_508==122) ) {s = 1155;}

                        else if ( (LA70_508==191) ) {s = 1156;}

                        else if ( (LA70_508==119) ) {s = 1157;}

                        else if ( (LA70_508==178) ) {s = 1158;}

                        else if ( (LA70_508==205) ) {s = 1159;}

                        else if ( (LA70_508==181) ) {s = 1160;}

                        else if ( (LA70_508==204) ) {s = 1161;}

                        else if ( (LA70_508==194) ) {s = 1162;}

                        else if ( (LA70_508==195) ) {s = 1163;}

                        else if ( (LA70_508==197) ) {s = 1164;}

                        else if ( (LA70_508==ID) ) {s = 1165;}

                        else if ( (LA70_508==199) ) {s = 1166;}

                        else if ( (LA70_508==203) ) {s = 1167;}

                        else if ( (LA70_508==186) ) {s = 1168;}

                        else if ( (LA70_508==128) && (synpred15_Objc())) {s = 1169;}

                        else if ( (LA70_508==176) && (synpred15_Objc())) {s = 1170;}

                        else if ( (LA70_508==177) && (synpred15_Objc())) {s = 1171;}

                        else if ( (LA70_508==163) && (synpred15_Objc())) {s = 1172;}

                        else if ( (LA70_508==160) && (synpred15_Objc())) {s = 1173;}

                        else if ( (LA70_508==117) && (synpred15_Objc())) {s = 1174;}

                        else if ( (LA70_508==STRING_LITERAL) && (synpred15_Objc())) {s = 1175;}

                        else if ( (LA70_508==148) && (synpred15_Objc())) {s = 1176;}

                        else if ( (LA70_508==CHAR_LITERAL) && (synpred15_Objc())) {s = 1177;}

                        else if ( (LA70_508==NUMBER_LITERAL) && (synpred15_Objc())) {s = 1178;}

                        else if ( (LA70_508==170||LA70_508==172||LA70_508==188||LA70_508==201) && (synpred15_Objc())) {s = 1179;}

                        else if ( (LA70_508==173) && (synpred15_Objc())) {s = 1180;}

                        else if ( (LA70_508==112) && (synpred15_Objc())) {s = 1181;}

                        else if ( (LA70_508==212) && (synpred15_Objc())) {s = 1182;}

                        else if ( (LA70_508==125||LA70_508==129) && (synpred15_Objc())) {s = 1183;}

                         
                        input.seek(index70_508);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA70_514 = input.LA(1);

                         
                        int index70_514 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_514==173) ) {s = 1185;}

                        else if ( ((LA70_514 >= 131 && LA70_514 <= 132)) && (synpred15_Objc())) {s = 1186;}

                        else if ( (LA70_514==119) && (synpred15_Objc())) {s = 1187;}

                        else if ( (LA70_514==125||LA70_514==129) && (synpred15_Objc())) {s = 1188;}

                        else if ( (LA70_514==137) ) {s = 1189;}

                        else if ( (LA70_514==147) && (synpred15_Objc())) {s = 1190;}

                        else if ( (LA70_514==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 1191;}

                        else if ( (LA70_514==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 1192;}

                        else if ( (LA70_514==127) && (synpred15_Objc())) {s = 1193;}

                        else if ( (LA70_514==121) ) {s = 1194;}

                        else if ( (LA70_514==122) ) {s = 1195;}

                        else if ( (LA70_514==117) ) {s = 1196;}

                        else if ( (LA70_514==113||(LA70_514 >= 115 && LA70_514 <= 116)||LA70_514==124||LA70_514==128||LA70_514==133||LA70_514==138||(LA70_514 >= 140 && LA70_514 <= 145)||LA70_514==176||LA70_514==208||LA70_514==210) && (synpred15_Objc())) {s = 1197;}

                         
                        input.seek(index70_514);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA70_537 = input.LA(1);

                         
                        int index70_537 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_537==122) ) {s = 1206;}

                        else if ( (LA70_537==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 1207;}

                        else if ( (LA70_537==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 1208;}

                        else if ( (LA70_537==128) && (synpred15_Objc())) {s = 1209;}

                        else if ( (LA70_537==119) ) {s = 1210;}

                        else if ( (LA70_537==176) && (synpred15_Objc())) {s = 1211;}

                        else if ( (LA70_537==177) && (synpred15_Objc())) {s = 1212;}

                        else if ( (LA70_537==163) && (synpred15_Objc())) {s = 1213;}

                        else if ( (LA70_537==160) && (synpred15_Objc())) {s = 1214;}

                        else if ( (LA70_537==117) ) {s = 1215;}

                        else if ( (LA70_537==ID) ) {s = 1216;}

                        else if ( (LA70_537==STRING_LITERAL) && (synpred15_Objc())) {s = 1217;}

                        else if ( (LA70_537==148) && (synpred15_Objc())) {s = 1218;}

                        else if ( (LA70_537==CHAR_LITERAL) && (synpred15_Objc())) {s = 1219;}

                        else if ( (LA70_537==NUMBER_LITERAL) && (synpred15_Objc())) {s = 1220;}

                        else if ( (LA70_537==170||LA70_537==172||LA70_537==188||LA70_537==201) && (synpred15_Objc())) {s = 1221;}

                        else if ( (LA70_537==173) && (synpred15_Objc())) {s = 1222;}

                        else if ( (LA70_537==112) && (synpred15_Objc())) {s = 1223;}

                        else if ( (LA70_537==212) && (synpred15_Objc())) {s = 1224;}

                        else if ( (LA70_537==125||LA70_537==129) && (synpred15_Objc())) {s = 1225;}

                        else if ( (LA70_537==121) && (synpred15_Objc())) {s = 1226;}

                        else if ( (LA70_537==178||LA70_537==181||LA70_537==186||LA70_537==191||(LA70_537 >= 194 && LA70_537 <= 195)||LA70_537==197||LA70_537==199||(LA70_537 >= 203 && LA70_537 <= 205)) ) {s = 13;}

                         
                        input.seek(index70_537);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA70_608 = input.LA(1);

                         
                        int index70_608 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_608==122) ) {s = 1307;}

                        else if ( (LA70_608==191) ) {s = 1308;}

                        else if ( (LA70_608==119) ) {s = 1309;}

                        else if ( (LA70_608==178) ) {s = 1310;}

                        else if ( (LA70_608==205) ) {s = 1311;}

                        else if ( (LA70_608==181) ) {s = 1312;}

                        else if ( (LA70_608==204) ) {s = 1313;}

                        else if ( (LA70_608==194) ) {s = 1314;}

                        else if ( (LA70_608==195) ) {s = 1315;}

                        else if ( (LA70_608==197) ) {s = 1316;}

                        else if ( (LA70_608==ID) ) {s = 1317;}

                        else if ( (LA70_608==199) ) {s = 1318;}

                        else if ( (LA70_608==203) ) {s = 1319;}

                        else if ( (LA70_608==186) ) {s = 1320;}

                        else if ( (LA70_608==128) && (synpred15_Objc())) {s = 1321;}

                        else if ( (LA70_608==176) && (synpred15_Objc())) {s = 1322;}

                        else if ( (LA70_608==177) && (synpred15_Objc())) {s = 1323;}

                        else if ( (LA70_608==163) && (synpred15_Objc())) {s = 1324;}

                        else if ( (LA70_608==160) && (synpred15_Objc())) {s = 1325;}

                        else if ( (LA70_608==117) && (synpred15_Objc())) {s = 1326;}

                        else if ( (LA70_608==STRING_LITERAL) && (synpred15_Objc())) {s = 1327;}

                        else if ( (LA70_608==148) && (synpred15_Objc())) {s = 1328;}

                        else if ( (LA70_608==CHAR_LITERAL) && (synpred15_Objc())) {s = 1329;}

                        else if ( (LA70_608==NUMBER_LITERAL) && (synpred15_Objc())) {s = 1330;}

                        else if ( (LA70_608==170||LA70_608==172||LA70_608==188||LA70_608==201) && (synpred15_Objc())) {s = 1331;}

                        else if ( (LA70_608==173) && (synpred15_Objc())) {s = 1332;}

                        else if ( (LA70_608==112) && (synpred15_Objc())) {s = 1333;}

                        else if ( (LA70_608==212) && (synpred15_Objc())) {s = 1334;}

                        else if ( (LA70_608==125||LA70_608==129) && (synpred15_Objc())) {s = 1335;}

                         
                        input.seek(index70_608);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA70_614 = input.LA(1);

                         
                        int index70_614 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_614==173) ) {s = 1337;}

                        else if ( ((LA70_614 >= 131 && LA70_614 <= 132)) && (synpred15_Objc())) {s = 1338;}

                        else if ( (LA70_614==119) && (synpred15_Objc())) {s = 1339;}

                        else if ( (LA70_614==125||LA70_614==129) && (synpred15_Objc())) {s = 1340;}

                        else if ( (LA70_614==137) ) {s = 1341;}

                        else if ( (LA70_614==147) && (synpred15_Objc())) {s = 1342;}

                        else if ( (LA70_614==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 1343;}

                        else if ( (LA70_614==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 1344;}

                        else if ( (LA70_614==127) && (synpred15_Objc())) {s = 1345;}

                        else if ( (LA70_614==121) ) {s = 1346;}

                        else if ( (LA70_614==122) ) {s = 1347;}

                        else if ( (LA70_614==117) ) {s = 1348;}

                        else if ( (LA70_614==113||(LA70_614 >= 115 && LA70_614 <= 116)||LA70_614==124||LA70_614==128||LA70_614==133||LA70_614==138||(LA70_614 >= 140 && LA70_614 <= 145)||LA70_614==176||LA70_614==208||LA70_614==210) && (synpred15_Objc())) {s = 1349;}

                         
                        input.seek(index70_614);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA70_648 = input.LA(1);

                         
                        int index70_648 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_648==122) ) {s = 1419;}

                        else if ( (LA70_648==191) ) {s = 1420;}

                        else if ( (LA70_648==119) ) {s = 1421;}

                        else if ( (LA70_648==178) ) {s = 1422;}

                        else if ( (LA70_648==205) ) {s = 1423;}

                        else if ( (LA70_648==181) ) {s = 1424;}

                        else if ( (LA70_648==204) ) {s = 1425;}

                        else if ( (LA70_648==194) ) {s = 1426;}

                        else if ( (LA70_648==195) ) {s = 1427;}

                        else if ( (LA70_648==197) ) {s = 1428;}

                        else if ( (LA70_648==ID) ) {s = 1429;}

                        else if ( (LA70_648==199) ) {s = 1430;}

                        else if ( (LA70_648==203) ) {s = 1431;}

                        else if ( (LA70_648==186) ) {s = 1432;}

                        else if ( (LA70_648==128) && (synpred15_Objc())) {s = 1433;}

                        else if ( (LA70_648==176) && (synpred15_Objc())) {s = 1434;}

                        else if ( (LA70_648==177) && (synpred15_Objc())) {s = 1435;}

                        else if ( (LA70_648==163) && (synpred15_Objc())) {s = 1436;}

                        else if ( (LA70_648==160) && (synpred15_Objc())) {s = 1437;}

                        else if ( (LA70_648==117) && (synpred15_Objc())) {s = 1438;}

                        else if ( (LA70_648==STRING_LITERAL) && (synpred15_Objc())) {s = 1439;}

                        else if ( (LA70_648==148) && (synpred15_Objc())) {s = 1440;}

                        else if ( (LA70_648==CHAR_LITERAL) && (synpred15_Objc())) {s = 1441;}

                        else if ( (LA70_648==NUMBER_LITERAL) && (synpred15_Objc())) {s = 1442;}

                        else if ( (LA70_648==170||LA70_648==172||LA70_648==188||LA70_648==201) && (synpred15_Objc())) {s = 1443;}

                        else if ( (LA70_648==173) && (synpred15_Objc())) {s = 1444;}

                        else if ( (LA70_648==112) && (synpred15_Objc())) {s = 1445;}

                        else if ( (LA70_648==212) && (synpred15_Objc())) {s = 1446;}

                        else if ( (LA70_648==125||LA70_648==129) && (synpred15_Objc())) {s = 1447;}

                         
                        input.seek(index70_648);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA70_654 = input.LA(1);

                         
                        int index70_654 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_654==173) ) {s = 1449;}

                        else if ( ((LA70_654 >= 131 && LA70_654 <= 132)) && (synpred15_Objc())) {s = 1450;}

                        else if ( (LA70_654==119) && (synpred15_Objc())) {s = 1451;}

                        else if ( (LA70_654==125||LA70_654==129) && (synpred15_Objc())) {s = 1452;}

                        else if ( (LA70_654==137) ) {s = 1453;}

                        else if ( (LA70_654==147) && (synpred15_Objc())) {s = 1454;}

                        else if ( (LA70_654==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 1455;}

                        else if ( (LA70_654==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 1456;}

                        else if ( (LA70_654==127) && (synpred15_Objc())) {s = 1457;}

                        else if ( (LA70_654==121) ) {s = 1458;}

                        else if ( (LA70_654==122) ) {s = 1459;}

                        else if ( (LA70_654==117) ) {s = 1460;}

                        else if ( (LA70_654==113||(LA70_654 >= 115 && LA70_654 <= 116)||LA70_654==124||LA70_654==128||LA70_654==133||LA70_654==138||(LA70_654 >= 140 && LA70_654 <= 145)||LA70_654==176||LA70_654==208||LA70_654==210) && (synpred15_Objc())) {s = 1461;}

                         
                        input.seek(index70_654);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA70_688 = input.LA(1);

                         
                        int index70_688 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_688==122) ) {s = 1531;}

                        else if ( (LA70_688==191) ) {s = 1532;}

                        else if ( (LA70_688==119) ) {s = 1533;}

                        else if ( (LA70_688==178) ) {s = 1534;}

                        else if ( (LA70_688==205) ) {s = 1535;}

                        else if ( (LA70_688==181) ) {s = 1536;}

                        else if ( (LA70_688==204) ) {s = 1537;}

                        else if ( (LA70_688==194) ) {s = 1538;}

                        else if ( (LA70_688==195) ) {s = 1539;}

                        else if ( (LA70_688==197) ) {s = 1540;}

                        else if ( (LA70_688==ID) ) {s = 1541;}

                        else if ( (LA70_688==199) ) {s = 1542;}

                        else if ( (LA70_688==203) ) {s = 1543;}

                        else if ( (LA70_688==186) ) {s = 1544;}

                        else if ( (LA70_688==128) && (synpred15_Objc())) {s = 1545;}

                        else if ( (LA70_688==176) && (synpred15_Objc())) {s = 1546;}

                        else if ( (LA70_688==177) && (synpred15_Objc())) {s = 1547;}

                        else if ( (LA70_688==163) && (synpred15_Objc())) {s = 1548;}

                        else if ( (LA70_688==160) && (synpred15_Objc())) {s = 1549;}

                        else if ( (LA70_688==117) && (synpred15_Objc())) {s = 1550;}

                        else if ( (LA70_688==STRING_LITERAL) && (synpred15_Objc())) {s = 1551;}

                        else if ( (LA70_688==148) && (synpred15_Objc())) {s = 1552;}

                        else if ( (LA70_688==CHAR_LITERAL) && (synpred15_Objc())) {s = 1553;}

                        else if ( (LA70_688==NUMBER_LITERAL) && (synpred15_Objc())) {s = 1554;}

                        else if ( (LA70_688==170||LA70_688==172||LA70_688==188||LA70_688==201) && (synpred15_Objc())) {s = 1555;}

                        else if ( (LA70_688==173) && (synpred15_Objc())) {s = 1556;}

                        else if ( (LA70_688==112) && (synpred15_Objc())) {s = 1557;}

                        else if ( (LA70_688==212) && (synpred15_Objc())) {s = 1558;}

                        else if ( (LA70_688==125||LA70_688==129) && (synpred15_Objc())) {s = 1559;}

                         
                        input.seek(index70_688);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA70_694 = input.LA(1);

                         
                        int index70_694 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA70_694==173) ) {s = 1561;}

                        else if ( ((LA70_694 >= 131 && LA70_694 <= 132)) && (synpred15_Objc())) {s = 1562;}

                        else if ( (LA70_694==119) && (synpred15_Objc())) {s = 1563;}

                        else if ( (LA70_694==125||LA70_694==129) && (synpred15_Objc())) {s = 1564;}

                        else if ( (LA70_694==137) ) {s = 1565;}

                        else if ( (LA70_694==147) && (synpred15_Objc())) {s = 1566;}

                        else if ( (LA70_694==SINGLE_COMMENT_LIT) && (synpred15_Objc())) {s = 1567;}

                        else if ( (LA70_694==MULTI_COMMENT_LIT) && (synpred15_Objc())) {s = 1568;}

                        else if ( (LA70_694==127) && (synpred15_Objc())) {s = 1569;}

                        else if ( (LA70_694==121) ) {s = 1570;}

                        else if ( (LA70_694==122) ) {s = 1571;}

                        else if ( (LA70_694==117) ) {s = 1572;}

                        else if ( (LA70_694==113||(LA70_694 >= 115 && LA70_694 <= 116)||LA70_694==124||LA70_694==128||LA70_694==133||LA70_694==138||(LA70_694 >= 140 && LA70_694 <= 145)||LA70_694==176||LA70_694==208||LA70_694==210) && (synpred15_Objc())) {s = 1573;}

                         
                        input.seek(index70_694);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA70_716 = input.LA(1);

                         
                        int index70_716 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_716);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA70_717 = input.LA(1);

                         
                        int index70_717 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_717);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA70_718 = input.LA(1);

                         
                        int index70_718 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_718);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA70_719 = input.LA(1);

                         
                        int index70_719 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_719);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA70_720 = input.LA(1);

                         
                        int index70_720 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_720);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA70_721 = input.LA(1);

                         
                        int index70_721 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_721);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA70_722 = input.LA(1);

                         
                        int index70_722 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_722);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA70_723 = input.LA(1);

                         
                        int index70_723 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_723);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA70_724 = input.LA(1);

                         
                        int index70_724 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_724);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA70_725 = input.LA(1);

                         
                        int index70_725 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_725);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA70_726 = input.LA(1);

                         
                        int index70_726 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_726);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA70_727 = input.LA(1);

                         
                        int index70_727 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_727);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA70_728 = input.LA(1);

                         
                        int index70_728 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_728);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA70_729 = input.LA(1);

                         
                        int index70_729 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_729);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA70_730 = input.LA(1);

                         
                        int index70_730 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_730);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA70_731 = input.LA(1);

                         
                        int index70_731 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_731);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA70_732 = input.LA(1);

                         
                        int index70_732 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_732);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA70_733 = input.LA(1);

                         
                        int index70_733 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_733);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA70_734 = input.LA(1);

                         
                        int index70_734 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_734);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA70_742 = input.LA(1);

                         
                        int index70_742 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_742);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA70_746 = input.LA(1);

                         
                        int index70_746 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_746);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA70_751 = input.LA(1);

                         
                        int index70_751 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_751);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA70_752 = input.LA(1);

                         
                        int index70_752 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_752);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA70_774 = input.LA(1);

                         
                        int index70_774 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_774);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA70_775 = input.LA(1);

                         
                        int index70_775 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_775);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA70_776 = input.LA(1);

                         
                        int index70_776 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_776);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA70_777 = input.LA(1);

                         
                        int index70_777 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_777);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA70_778 = input.LA(1);

                         
                        int index70_778 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_778);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA70_779 = input.LA(1);

                         
                        int index70_779 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_779);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA70_780 = input.LA(1);

                         
                        int index70_780 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_780);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA70_781 = input.LA(1);

                         
                        int index70_781 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_781);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA70_782 = input.LA(1);

                         
                        int index70_782 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_782);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA70_783 = input.LA(1);

                         
                        int index70_783 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_783);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA70_784 = input.LA(1);

                         
                        int index70_784 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_784);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA70_785 = input.LA(1);

                         
                        int index70_785 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_785);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA70_786 = input.LA(1);

                         
                        int index70_786 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_786);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA70_787 = input.LA(1);

                         
                        int index70_787 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_787);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA70_788 = input.LA(1);

                         
                        int index70_788 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_788);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA70_789 = input.LA(1);

                         
                        int index70_789 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_789);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA70_790 = input.LA(1);

                         
                        int index70_790 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_790);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA70_791 = input.LA(1);

                         
                        int index70_791 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_791);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA70_792 = input.LA(1);

                         
                        int index70_792 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_792);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA70_793 = input.LA(1);

                         
                        int index70_793 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_793);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA70_794 = input.LA(1);

                         
                        int index70_794 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_794);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA70_795 = input.LA(1);

                         
                        int index70_795 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_795);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA70_796 = input.LA(1);

                         
                        int index70_796 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_796);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA70_797 = input.LA(1);

                         
                        int index70_797 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_797);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA70_798 = input.LA(1);

                         
                        int index70_798 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_798);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA70_799 = input.LA(1);

                         
                        int index70_799 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_799);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA70_800 = input.LA(1);

                         
                        int index70_800 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_800);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA70_801 = input.LA(1);

                         
                        int index70_801 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_801);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA70_802 = input.LA(1);

                         
                        int index70_802 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_802);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA70_803 = input.LA(1);

                         
                        int index70_803 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_803);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA70_804 = input.LA(1);

                         
                        int index70_804 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_804);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA70_805 = input.LA(1);

                         
                        int index70_805 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_805);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA70_806 = input.LA(1);

                         
                        int index70_806 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_806);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA70_807 = input.LA(1);

                         
                        int index70_807 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_807);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA70_808 = input.LA(1);

                         
                        int index70_808 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_808);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA70_809 = input.LA(1);

                         
                        int index70_809 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_809);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA70_810 = input.LA(1);

                         
                        int index70_810 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_810);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA70_811 = input.LA(1);

                         
                        int index70_811 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_811);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA70_812 = input.LA(1);

                         
                        int index70_812 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_812);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA70_813 = input.LA(1);

                         
                        int index70_813 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_813);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA70_814 = input.LA(1);

                         
                        int index70_814 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_814);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA70_815 = input.LA(1);

                         
                        int index70_815 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_815);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA70_816 = input.LA(1);

                         
                        int index70_816 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_816);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA70_817 = input.LA(1);

                         
                        int index70_817 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_817);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA70_818 = input.LA(1);

                         
                        int index70_818 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_818);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA70_819 = input.LA(1);

                         
                        int index70_819 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_819);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA70_820 = input.LA(1);

                         
                        int index70_820 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_820);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA70_821 = input.LA(1);

                         
                        int index70_821 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_821);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA70_822 = input.LA(1);

                         
                        int index70_822 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_822);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA70_823 = input.LA(1);

                         
                        int index70_823 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_823);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA70_824 = input.LA(1);

                         
                        int index70_824 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_824);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA70_825 = input.LA(1);

                         
                        int index70_825 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_825);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA70_826 = input.LA(1);

                         
                        int index70_826 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_826);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA70_827 = input.LA(1);

                         
                        int index70_827 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_827);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA70_828 = input.LA(1);

                         
                        int index70_828 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_828);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA70_829 = input.LA(1);

                         
                        int index70_829 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_829);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA70_830 = input.LA(1);

                         
                        int index70_830 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_830);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA70_831 = input.LA(1);

                         
                        int index70_831 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_831);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA70_832 = input.LA(1);

                         
                        int index70_832 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_832);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA70_833 = input.LA(1);

                         
                        int index70_833 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_833);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA70_834 = input.LA(1);

                         
                        int index70_834 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_834);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA70_835 = input.LA(1);

                         
                        int index70_835 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_835);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA70_836 = input.LA(1);

                         
                        int index70_836 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_836);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA70_837 = input.LA(1);

                         
                        int index70_837 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_837);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA70_838 = input.LA(1);

                         
                        int index70_838 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_838);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA70_839 = input.LA(1);

                         
                        int index70_839 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_839);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA70_840 = input.LA(1);

                         
                        int index70_840 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_840);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA70_841 = input.LA(1);

                         
                        int index70_841 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_841);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA70_842 = input.LA(1);

                         
                        int index70_842 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_842);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA70_844 = input.LA(1);

                         
                        int index70_844 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_844);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA70_845 = input.LA(1);

                         
                        int index70_845 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_845);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA70_846 = input.LA(1);

                         
                        int index70_846 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_846);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA70_847 = input.LA(1);

                         
                        int index70_847 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_847);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA70_848 = input.LA(1);

                         
                        int index70_848 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_848);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA70_849 = input.LA(1);

                         
                        int index70_849 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_849);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA70_850 = input.LA(1);

                         
                        int index70_850 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_850);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA70_852 = input.LA(1);

                         
                        int index70_852 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_852);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA70_853 = input.LA(1);

                         
                        int index70_853 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_853);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA70_854 = input.LA(1);

                         
                        int index70_854 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_854);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA70_855 = input.LA(1);

                         
                        int index70_855 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_855);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA70_856 = input.LA(1);

                         
                        int index70_856 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_856);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA70_857 = input.LA(1);

                         
                        int index70_857 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_857);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA70_858 = input.LA(1);

                         
                        int index70_858 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_858);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA70_860 = input.LA(1);

                         
                        int index70_860 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_860);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA70_861 = input.LA(1);

                         
                        int index70_861 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_861);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA70_862 = input.LA(1);

                         
                        int index70_862 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_862);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA70_863 = input.LA(1);

                         
                        int index70_863 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_863);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA70_864 = input.LA(1);

                         
                        int index70_864 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_864);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA70_865 = input.LA(1);

                         
                        int index70_865 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_865);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA70_867 = input.LA(1);

                         
                        int index70_867 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_867);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA70_868 = input.LA(1);

                         
                        int index70_868 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_868);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA70_869 = input.LA(1);

                         
                        int index70_869 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_869);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA70_870 = input.LA(1);

                         
                        int index70_870 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_870);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA70_871 = input.LA(1);

                         
                        int index70_871 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_871);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA70_872 = input.LA(1);

                         
                        int index70_872 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_872);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA70_874 = input.LA(1);

                         
                        int index70_874 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_874);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA70_875 = input.LA(1);

                         
                        int index70_875 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_875);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA70_876 = input.LA(1);

                         
                        int index70_876 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_876);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA70_877 = input.LA(1);

                         
                        int index70_877 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_877);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA70_878 = input.LA(1);

                         
                        int index70_878 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_878);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA70_879 = input.LA(1);

                         
                        int index70_879 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_879);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA70_880 = input.LA(1);

                         
                        int index70_880 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_880);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA70_881 = input.LA(1);

                         
                        int index70_881 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_881);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA70_882 = input.LA(1);

                         
                        int index70_882 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_882);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA70_883 = input.LA(1);

                         
                        int index70_883 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_883);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA70_884 = input.LA(1);

                         
                        int index70_884 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_884);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA70_885 = input.LA(1);

                         
                        int index70_885 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_885);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA70_886 = input.LA(1);

                         
                        int index70_886 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_886);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA70_887 = input.LA(1);

                         
                        int index70_887 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_887);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA70_888 = input.LA(1);

                         
                        int index70_888 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_888);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA70_889 = input.LA(1);

                         
                        int index70_889 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_889);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA70_890 = input.LA(1);

                         
                        int index70_890 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_890);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA70_891 = input.LA(1);

                         
                        int index70_891 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_891);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA70_892 = input.LA(1);

                         
                        int index70_892 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_892);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA70_893 = input.LA(1);

                         
                        int index70_893 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_893);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA70_894 = input.LA(1);

                         
                        int index70_894 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_894);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA70_895 = input.LA(1);

                         
                        int index70_895 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_895);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA70_896 = input.LA(1);

                         
                        int index70_896 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_896);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA70_897 = input.LA(1);

                         
                        int index70_897 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_897);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA70_898 = input.LA(1);

                         
                        int index70_898 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_898);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA70_899 = input.LA(1);

                         
                        int index70_899 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_899);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA70_900 = input.LA(1);

                         
                        int index70_900 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_900);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA70_901 = input.LA(1);

                         
                        int index70_901 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_901);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA70_902 = input.LA(1);

                         
                        int index70_902 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_902);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA70_903 = input.LA(1);

                         
                        int index70_903 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_903);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA70_904 = input.LA(1);

                         
                        int index70_904 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_904);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA70_905 = input.LA(1);

                         
                        int index70_905 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_905);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA70_906 = input.LA(1);

                         
                        int index70_906 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_906);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA70_907 = input.LA(1);

                         
                        int index70_907 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_907);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA70_908 = input.LA(1);

                         
                        int index70_908 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_908);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA70_909 = input.LA(1);

                         
                        int index70_909 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_909);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA70_910 = input.LA(1);

                         
                        int index70_910 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_910);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA70_911 = input.LA(1);

                         
                        int index70_911 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_911);

                        if ( s>=0 ) return s;
                        break;
                    case 175 : 
                        int LA70_912 = input.LA(1);

                         
                        int index70_912 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_912);

                        if ( s>=0 ) return s;
                        break;
                    case 176 : 
                        int LA70_913 = input.LA(1);

                         
                        int index70_913 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_913);

                        if ( s>=0 ) return s;
                        break;
                    case 177 : 
                        int LA70_914 = input.LA(1);

                         
                        int index70_914 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_914);

                        if ( s>=0 ) return s;
                        break;
                    case 178 : 
                        int LA70_915 = input.LA(1);

                         
                        int index70_915 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_915);

                        if ( s>=0 ) return s;
                        break;
                    case 179 : 
                        int LA70_916 = input.LA(1);

                         
                        int index70_916 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_916);

                        if ( s>=0 ) return s;
                        break;
                    case 180 : 
                        int LA70_917 = input.LA(1);

                         
                        int index70_917 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_917);

                        if ( s>=0 ) return s;
                        break;
                    case 181 : 
                        int LA70_918 = input.LA(1);

                         
                        int index70_918 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_918);

                        if ( s>=0 ) return s;
                        break;
                    case 182 : 
                        int LA70_919 = input.LA(1);

                         
                        int index70_919 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_919);

                        if ( s>=0 ) return s;
                        break;
                    case 183 : 
                        int LA70_920 = input.LA(1);

                         
                        int index70_920 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_920);

                        if ( s>=0 ) return s;
                        break;
                    case 184 : 
                        int LA70_921 = input.LA(1);

                         
                        int index70_921 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_921);

                        if ( s>=0 ) return s;
                        break;
                    case 185 : 
                        int LA70_922 = input.LA(1);

                         
                        int index70_922 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_922);

                        if ( s>=0 ) return s;
                        break;
                    case 186 : 
                        int LA70_923 = input.LA(1);

                         
                        int index70_923 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_923);

                        if ( s>=0 ) return s;
                        break;
                    case 187 : 
                        int LA70_924 = input.LA(1);

                         
                        int index70_924 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_924);

                        if ( s>=0 ) return s;
                        break;
                    case 188 : 
                        int LA70_925 = input.LA(1);

                         
                        int index70_925 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_925);

                        if ( s>=0 ) return s;
                        break;
                    case 189 : 
                        int LA70_926 = input.LA(1);

                         
                        int index70_926 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_926);

                        if ( s>=0 ) return s;
                        break;
                    case 190 : 
                        int LA70_927 = input.LA(1);

                         
                        int index70_927 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_927);

                        if ( s>=0 ) return s;
                        break;
                    case 191 : 
                        int LA70_928 = input.LA(1);

                         
                        int index70_928 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_928);

                        if ( s>=0 ) return s;
                        break;
                    case 192 : 
                        int LA70_929 = input.LA(1);

                         
                        int index70_929 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_929);

                        if ( s>=0 ) return s;
                        break;
                    case 193 : 
                        int LA70_930 = input.LA(1);

                         
                        int index70_930 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_930);

                        if ( s>=0 ) return s;
                        break;
                    case 194 : 
                        int LA70_931 = input.LA(1);

                         
                        int index70_931 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_931);

                        if ( s>=0 ) return s;
                        break;
                    case 195 : 
                        int LA70_932 = input.LA(1);

                         
                        int index70_932 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_932);

                        if ( s>=0 ) return s;
                        break;
                    case 196 : 
                        int LA70_933 = input.LA(1);

                         
                        int index70_933 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_933);

                        if ( s>=0 ) return s;
                        break;
                    case 197 : 
                        int LA70_934 = input.LA(1);

                         
                        int index70_934 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_934);

                        if ( s>=0 ) return s;
                        break;
                    case 198 : 
                        int LA70_935 = input.LA(1);

                         
                        int index70_935 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_935);

                        if ( s>=0 ) return s;
                        break;
                    case 199 : 
                        int LA70_1002 = input.LA(1);

                         
                        int index70_1002 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1002);

                        if ( s>=0 ) return s;
                        break;
                    case 200 : 
                        int LA70_1003 = input.LA(1);

                         
                        int index70_1003 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1003);

                        if ( s>=0 ) return s;
                        break;
                    case 201 : 
                        int LA70_1004 = input.LA(1);

                         
                        int index70_1004 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1004);

                        if ( s>=0 ) return s;
                        break;
                    case 202 : 
                        int LA70_1005 = input.LA(1);

                         
                        int index70_1005 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1005);

                        if ( s>=0 ) return s;
                        break;
                    case 203 : 
                        int LA70_1006 = input.LA(1);

                         
                        int index70_1006 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1006);

                        if ( s>=0 ) return s;
                        break;
                    case 204 : 
                        int LA70_1007 = input.LA(1);

                         
                        int index70_1007 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1007);

                        if ( s>=0 ) return s;
                        break;
                    case 205 : 
                        int LA70_1008 = input.LA(1);

                         
                        int index70_1008 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1008);

                        if ( s>=0 ) return s;
                        break;
                    case 206 : 
                        int LA70_1009 = input.LA(1);

                         
                        int index70_1009 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1009);

                        if ( s>=0 ) return s;
                        break;
                    case 207 : 
                        int LA70_1010 = input.LA(1);

                         
                        int index70_1010 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1010);

                        if ( s>=0 ) return s;
                        break;
                    case 208 : 
                        int LA70_1011 = input.LA(1);

                         
                        int index70_1011 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1011);

                        if ( s>=0 ) return s;
                        break;
                    case 209 : 
                        int LA70_1012 = input.LA(1);

                         
                        int index70_1012 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1012);

                        if ( s>=0 ) return s;
                        break;
                    case 210 : 
                        int LA70_1013 = input.LA(1);

                         
                        int index70_1013 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1013);

                        if ( s>=0 ) return s;
                        break;
                    case 211 : 
                        int LA70_1014 = input.LA(1);

                         
                        int index70_1014 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1014);

                        if ( s>=0 ) return s;
                        break;
                    case 212 : 
                        int LA70_1015 = input.LA(1);

                         
                        int index70_1015 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1015);

                        if ( s>=0 ) return s;
                        break;
                    case 213 : 
                        int LA70_1016 = input.LA(1);

                         
                        int index70_1016 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1016);

                        if ( s>=0 ) return s;
                        break;
                    case 214 : 
                        int LA70_1032 = input.LA(1);

                         
                        int index70_1032 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1032);

                        if ( s>=0 ) return s;
                        break;
                    case 215 : 
                        int LA70_1033 = input.LA(1);

                         
                        int index70_1033 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1033);

                        if ( s>=0 ) return s;
                        break;
                    case 216 : 
                        int LA70_1037 = input.LA(1);

                         
                        int index70_1037 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1037);

                        if ( s>=0 ) return s;
                        break;
                    case 217 : 
                        int LA70_1042 = input.LA(1);

                         
                        int index70_1042 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1042);

                        if ( s>=0 ) return s;
                        break;
                    case 218 : 
                        int LA70_1043 = input.LA(1);

                         
                        int index70_1043 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1043);

                        if ( s>=0 ) return s;
                        break;
                    case 219 : 
                        int LA70_1044 = input.LA(1);

                         
                        int index70_1044 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1044);

                        if ( s>=0 ) return s;
                        break;
                    case 220 : 
                        int LA70_1046 = input.LA(1);

                         
                        int index70_1046 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1046);

                        if ( s>=0 ) return s;
                        break;
                    case 221 : 
                        int LA70_1054 = input.LA(1);

                         
                        int index70_1054 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1054);

                        if ( s>=0 ) return s;
                        break;
                    case 222 : 
                        int LA70_1058 = input.LA(1);

                         
                        int index70_1058 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1058);

                        if ( s>=0 ) return s;
                        break;
                    case 223 : 
                        int LA70_1063 = input.LA(1);

                         
                        int index70_1063 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1063);

                        if ( s>=0 ) return s;
                        break;
                    case 224 : 
                        int LA70_1064 = input.LA(1);

                         
                        int index70_1064 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1064);

                        if ( s>=0 ) return s;
                        break;
                    case 225 : 
                        int LA70_1086 = input.LA(1);

                         
                        int index70_1086 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1086);

                        if ( s>=0 ) return s;
                        break;
                    case 226 : 
                        int LA70_1087 = input.LA(1);

                         
                        int index70_1087 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1087);

                        if ( s>=0 ) return s;
                        break;
                    case 227 : 
                        int LA70_1154 = input.LA(1);

                         
                        int index70_1154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1154);

                        if ( s>=0 ) return s;
                        break;
                    case 228 : 
                        int LA70_1155 = input.LA(1);

                         
                        int index70_1155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1155);

                        if ( s>=0 ) return s;
                        break;
                    case 229 : 
                        int LA70_1156 = input.LA(1);

                         
                        int index70_1156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1156);

                        if ( s>=0 ) return s;
                        break;
                    case 230 : 
                        int LA70_1157 = input.LA(1);

                         
                        int index70_1157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1157);

                        if ( s>=0 ) return s;
                        break;
                    case 231 : 
                        int LA70_1158 = input.LA(1);

                         
                        int index70_1158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1158);

                        if ( s>=0 ) return s;
                        break;
                    case 232 : 
                        int LA70_1159 = input.LA(1);

                         
                        int index70_1159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1159);

                        if ( s>=0 ) return s;
                        break;
                    case 233 : 
                        int LA70_1160 = input.LA(1);

                         
                        int index70_1160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1160);

                        if ( s>=0 ) return s;
                        break;
                    case 234 : 
                        int LA70_1161 = input.LA(1);

                         
                        int index70_1161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1161);

                        if ( s>=0 ) return s;
                        break;
                    case 235 : 
                        int LA70_1162 = input.LA(1);

                         
                        int index70_1162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1162);

                        if ( s>=0 ) return s;
                        break;
                    case 236 : 
                        int LA70_1163 = input.LA(1);

                         
                        int index70_1163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1163);

                        if ( s>=0 ) return s;
                        break;
                    case 237 : 
                        int LA70_1164 = input.LA(1);

                         
                        int index70_1164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1164);

                        if ( s>=0 ) return s;
                        break;
                    case 238 : 
                        int LA70_1165 = input.LA(1);

                         
                        int index70_1165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1165);

                        if ( s>=0 ) return s;
                        break;
                    case 239 : 
                        int LA70_1166 = input.LA(1);

                         
                        int index70_1166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1166);

                        if ( s>=0 ) return s;
                        break;
                    case 240 : 
                        int LA70_1167 = input.LA(1);

                         
                        int index70_1167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1167);

                        if ( s>=0 ) return s;
                        break;
                    case 241 : 
                        int LA70_1168 = input.LA(1);

                         
                        int index70_1168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1168);

                        if ( s>=0 ) return s;
                        break;
                    case 242 : 
                        int LA70_1184 = input.LA(1);

                         
                        int index70_1184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1184);

                        if ( s>=0 ) return s;
                        break;
                    case 243 : 
                        int LA70_1185 = input.LA(1);

                         
                        int index70_1185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1185);

                        if ( s>=0 ) return s;
                        break;
                    case 244 : 
                        int LA70_1189 = input.LA(1);

                         
                        int index70_1189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1189);

                        if ( s>=0 ) return s;
                        break;
                    case 245 : 
                        int LA70_1194 = input.LA(1);

                         
                        int index70_1194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1194);

                        if ( s>=0 ) return s;
                        break;
                    case 246 : 
                        int LA70_1195 = input.LA(1);

                         
                        int index70_1195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1195);

                        if ( s>=0 ) return s;
                        break;
                    case 247 : 
                        int LA70_1196 = input.LA(1);

                         
                        int index70_1196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1196);

                        if ( s>=0 ) return s;
                        break;
                    case 248 : 
                        int LA70_1198 = input.LA(1);

                         
                        int index70_1198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1198);

                        if ( s>=0 ) return s;
                        break;
                    case 249 : 
                        int LA70_1206 = input.LA(1);

                         
                        int index70_1206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1206);

                        if ( s>=0 ) return s;
                        break;
                    case 250 : 
                        int LA70_1210 = input.LA(1);

                         
                        int index70_1210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1210);

                        if ( s>=0 ) return s;
                        break;
                    case 251 : 
                        int LA70_1215 = input.LA(1);

                         
                        int index70_1215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1215);

                        if ( s>=0 ) return s;
                        break;
                    case 252 : 
                        int LA70_1216 = input.LA(1);

                         
                        int index70_1216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1216);

                        if ( s>=0 ) return s;
                        break;
                    case 253 : 
                        int LA70_1238 = input.LA(1);

                         
                        int index70_1238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1238);

                        if ( s>=0 ) return s;
                        break;
                    case 254 : 
                        int LA70_1239 = input.LA(1);

                         
                        int index70_1239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1239);

                        if ( s>=0 ) return s;
                        break;
                    case 255 : 
                        int LA70_1306 = input.LA(1);

                         
                        int index70_1306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1306);

                        if ( s>=0 ) return s;
                        break;
                    case 256 : 
                        int LA70_1307 = input.LA(1);

                         
                        int index70_1307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1307);

                        if ( s>=0 ) return s;
                        break;
                    case 257 : 
                        int LA70_1308 = input.LA(1);

                         
                        int index70_1308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1308);

                        if ( s>=0 ) return s;
                        break;
                    case 258 : 
                        int LA70_1309 = input.LA(1);

                         
                        int index70_1309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1309);

                        if ( s>=0 ) return s;
                        break;
                    case 259 : 
                        int LA70_1310 = input.LA(1);

                         
                        int index70_1310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1310);

                        if ( s>=0 ) return s;
                        break;
                    case 260 : 
                        int LA70_1311 = input.LA(1);

                         
                        int index70_1311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1311);

                        if ( s>=0 ) return s;
                        break;
                    case 261 : 
                        int LA70_1312 = input.LA(1);

                         
                        int index70_1312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1312);

                        if ( s>=0 ) return s;
                        break;
                    case 262 : 
                        int LA70_1313 = input.LA(1);

                         
                        int index70_1313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1313);

                        if ( s>=0 ) return s;
                        break;
                    case 263 : 
                        int LA70_1314 = input.LA(1);

                         
                        int index70_1314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1314);

                        if ( s>=0 ) return s;
                        break;
                    case 264 : 
                        int LA70_1315 = input.LA(1);

                         
                        int index70_1315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1315);

                        if ( s>=0 ) return s;
                        break;
                    case 265 : 
                        int LA70_1316 = input.LA(1);

                         
                        int index70_1316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1316);

                        if ( s>=0 ) return s;
                        break;
                    case 266 : 
                        int LA70_1317 = input.LA(1);

                         
                        int index70_1317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1317);

                        if ( s>=0 ) return s;
                        break;
                    case 267 : 
                        int LA70_1318 = input.LA(1);

                         
                        int index70_1318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1318);

                        if ( s>=0 ) return s;
                        break;
                    case 268 : 
                        int LA70_1319 = input.LA(1);

                         
                        int index70_1319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1319);

                        if ( s>=0 ) return s;
                        break;
                    case 269 : 
                        int LA70_1320 = input.LA(1);

                         
                        int index70_1320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1320);

                        if ( s>=0 ) return s;
                        break;
                    case 270 : 
                        int LA70_1336 = input.LA(1);

                         
                        int index70_1336 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1336);

                        if ( s>=0 ) return s;
                        break;
                    case 271 : 
                        int LA70_1337 = input.LA(1);

                         
                        int index70_1337 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1337);

                        if ( s>=0 ) return s;
                        break;
                    case 272 : 
                        int LA70_1341 = input.LA(1);

                         
                        int index70_1341 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1341);

                        if ( s>=0 ) return s;
                        break;
                    case 273 : 
                        int LA70_1346 = input.LA(1);

                         
                        int index70_1346 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1346);

                        if ( s>=0 ) return s;
                        break;
                    case 274 : 
                        int LA70_1347 = input.LA(1);

                         
                        int index70_1347 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1347);

                        if ( s>=0 ) return s;
                        break;
                    case 275 : 
                        int LA70_1348 = input.LA(1);

                         
                        int index70_1348 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1348);

                        if ( s>=0 ) return s;
                        break;
                    case 276 : 
                        int LA70_1350 = input.LA(1);

                         
                        int index70_1350 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1350);

                        if ( s>=0 ) return s;
                        break;
                    case 277 : 
                        int LA70_1351 = input.LA(1);

                         
                        int index70_1351 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1351);

                        if ( s>=0 ) return s;
                        break;
                    case 278 : 
                        int LA70_1418 = input.LA(1);

                         
                        int index70_1418 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1418);

                        if ( s>=0 ) return s;
                        break;
                    case 279 : 
                        int LA70_1419 = input.LA(1);

                         
                        int index70_1419 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1419);

                        if ( s>=0 ) return s;
                        break;
                    case 280 : 
                        int LA70_1420 = input.LA(1);

                         
                        int index70_1420 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1420);

                        if ( s>=0 ) return s;
                        break;
                    case 281 : 
                        int LA70_1421 = input.LA(1);

                         
                        int index70_1421 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1421);

                        if ( s>=0 ) return s;
                        break;
                    case 282 : 
                        int LA70_1422 = input.LA(1);

                         
                        int index70_1422 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1422);

                        if ( s>=0 ) return s;
                        break;
                    case 283 : 
                        int LA70_1423 = input.LA(1);

                         
                        int index70_1423 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1423);

                        if ( s>=0 ) return s;
                        break;
                    case 284 : 
                        int LA70_1424 = input.LA(1);

                         
                        int index70_1424 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1424);

                        if ( s>=0 ) return s;
                        break;
                    case 285 : 
                        int LA70_1425 = input.LA(1);

                         
                        int index70_1425 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1425);

                        if ( s>=0 ) return s;
                        break;
                    case 286 : 
                        int LA70_1426 = input.LA(1);

                         
                        int index70_1426 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1426);

                        if ( s>=0 ) return s;
                        break;
                    case 287 : 
                        int LA70_1427 = input.LA(1);

                         
                        int index70_1427 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1427);

                        if ( s>=0 ) return s;
                        break;
                    case 288 : 
                        int LA70_1428 = input.LA(1);

                         
                        int index70_1428 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1428);

                        if ( s>=0 ) return s;
                        break;
                    case 289 : 
                        int LA70_1429 = input.LA(1);

                         
                        int index70_1429 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1429);

                        if ( s>=0 ) return s;
                        break;
                    case 290 : 
                        int LA70_1430 = input.LA(1);

                         
                        int index70_1430 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1430);

                        if ( s>=0 ) return s;
                        break;
                    case 291 : 
                        int LA70_1431 = input.LA(1);

                         
                        int index70_1431 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1431);

                        if ( s>=0 ) return s;
                        break;
                    case 292 : 
                        int LA70_1432 = input.LA(1);

                         
                        int index70_1432 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1432);

                        if ( s>=0 ) return s;
                        break;
                    case 293 : 
                        int LA70_1448 = input.LA(1);

                         
                        int index70_1448 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1448);

                        if ( s>=0 ) return s;
                        break;
                    case 294 : 
                        int LA70_1449 = input.LA(1);

                         
                        int index70_1449 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1449);

                        if ( s>=0 ) return s;
                        break;
                    case 295 : 
                        int LA70_1453 = input.LA(1);

                         
                        int index70_1453 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1453);

                        if ( s>=0 ) return s;
                        break;
                    case 296 : 
                        int LA70_1458 = input.LA(1);

                         
                        int index70_1458 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1458);

                        if ( s>=0 ) return s;
                        break;
                    case 297 : 
                        int LA70_1459 = input.LA(1);

                         
                        int index70_1459 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1459);

                        if ( s>=0 ) return s;
                        break;
                    case 298 : 
                        int LA70_1460 = input.LA(1);

                         
                        int index70_1460 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1460);

                        if ( s>=0 ) return s;
                        break;
                    case 299 : 
                        int LA70_1462 = input.LA(1);

                         
                        int index70_1462 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1462);

                        if ( s>=0 ) return s;
                        break;
                    case 300 : 
                        int LA70_1463 = input.LA(1);

                         
                        int index70_1463 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1463);

                        if ( s>=0 ) return s;
                        break;
                    case 301 : 
                        int LA70_1530 = input.LA(1);

                         
                        int index70_1530 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1530);

                        if ( s>=0 ) return s;
                        break;
                    case 302 : 
                        int LA70_1531 = input.LA(1);

                         
                        int index70_1531 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1531);

                        if ( s>=0 ) return s;
                        break;
                    case 303 : 
                        int LA70_1532 = input.LA(1);

                         
                        int index70_1532 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1532);

                        if ( s>=0 ) return s;
                        break;
                    case 304 : 
                        int LA70_1533 = input.LA(1);

                         
                        int index70_1533 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1533);

                        if ( s>=0 ) return s;
                        break;
                    case 305 : 
                        int LA70_1534 = input.LA(1);

                         
                        int index70_1534 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1534);

                        if ( s>=0 ) return s;
                        break;
                    case 306 : 
                        int LA70_1535 = input.LA(1);

                         
                        int index70_1535 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1535);

                        if ( s>=0 ) return s;
                        break;
                    case 307 : 
                        int LA70_1536 = input.LA(1);

                         
                        int index70_1536 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1536);

                        if ( s>=0 ) return s;
                        break;
                    case 308 : 
                        int LA70_1537 = input.LA(1);

                         
                        int index70_1537 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1537);

                        if ( s>=0 ) return s;
                        break;
                    case 309 : 
                        int LA70_1538 = input.LA(1);

                         
                        int index70_1538 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1538);

                        if ( s>=0 ) return s;
                        break;
                    case 310 : 
                        int LA70_1539 = input.LA(1);

                         
                        int index70_1539 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1539);

                        if ( s>=0 ) return s;
                        break;
                    case 311 : 
                        int LA70_1540 = input.LA(1);

                         
                        int index70_1540 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1540);

                        if ( s>=0 ) return s;
                        break;
                    case 312 : 
                        int LA70_1541 = input.LA(1);

                         
                        int index70_1541 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1541);

                        if ( s>=0 ) return s;
                        break;
                    case 313 : 
                        int LA70_1542 = input.LA(1);

                         
                        int index70_1542 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1542);

                        if ( s>=0 ) return s;
                        break;
                    case 314 : 
                        int LA70_1543 = input.LA(1);

                         
                        int index70_1543 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1543);

                        if ( s>=0 ) return s;
                        break;
                    case 315 : 
                        int LA70_1544 = input.LA(1);

                         
                        int index70_1544 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1544);

                        if ( s>=0 ) return s;
                        break;
                    case 316 : 
                        int LA70_1560 = input.LA(1);

                         
                        int index70_1560 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1560);

                        if ( s>=0 ) return s;
                        break;
                    case 317 : 
                        int LA70_1561 = input.LA(1);

                         
                        int index70_1561 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1561);

                        if ( s>=0 ) return s;
                        break;
                    case 318 : 
                        int LA70_1565 = input.LA(1);

                         
                        int index70_1565 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1565);

                        if ( s>=0 ) return s;
                        break;
                    case 319 : 
                        int LA70_1570 = input.LA(1);

                         
                        int index70_1570 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1570);

                        if ( s>=0 ) return s;
                        break;
                    case 320 : 
                        int LA70_1571 = input.LA(1);

                         
                        int index70_1571 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1571);

                        if ( s>=0 ) return s;
                        break;
                    case 321 : 
                        int LA70_1572 = input.LA(1);

                         
                        int index70_1572 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred15_Objc()) ) {s = 1573;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index70_1572);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA69_eotS =
        "\75\uffff";
    static final String DFA69_eofS =
        "\1\1\74\uffff";
    static final String DFA69_minS =
        "\1\26\74\uffff";
    static final String DFA69_maxS =
        "\1\u00d3\74\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\2\72\uffff\1\1";
    static final String DFA69_specialS =
        "\75\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1\27\uffff\1\1\21\uffff\1\1\21\uffff\1\1\36\uffff\1\1\1\uffff"+
            "\3\1\1\uffff\1\1\1\uffff\2\1\1\uffff\2\1\1\uffff\3\1\1\uffff"+
            "\2\74\1\1\1\uffff\4\1\1\uffff\6\1\1\uffff\1\1\1\uffff\7\1\4"+
            "\uffff\1\1\3\uffff\4\1\1\uffff\1\1\3\uffff\4\1\1\uffff\12\1"+
            "\1\uffff\4\1\1\uffff\7\1\1\uffff\7\1\1\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "()* loopback of 525:30: ( access_wrapper simple_expression_value )*";
        }
    }
    static final String DFA72_eotS =
        "\u0146\uffff";
    static final String DFA72_eofS =
        "\2\uffff\1\13\6\uffff\1\162\u013c\uffff";
    static final String DFA72_minS =
        "\1\20\1\56\1\26\6\uffff\1\26\1\20\73\uffff\1\20\73\uffff\2\20\2"+
        "\56\2\167\4\56\1\127\3\56\4\20\126\0\2\uffff\6\0\2\uffff\6\0\2\uffff"+
        "\5\0\2\uffff\5\0\2\uffff\74\0";
    static final String DFA72_maxS =
        "\1\u00c9\1\56\1\u00d3\6\uffff\1\u00d3\1\u00d4\73\uffff\1\u00d4\73"+
        "\uffff\1\u00c9\1\u00d4\1\u00cf\1\u00cd\2\167\1\56\1\u00d2\1\56\1"+
        "\u00d2\1\127\3\u00d2\1\u00d4\3\u00c9\126\0\2\uffff\6\0\2\uffff\6"+
        "\0\2\uffff\5\0\2\uffff\5\0\2\uffff\74\0";
    static final String DFA72_acceptS =
        "\3\uffff\1\2\1\3\1\4\1\5\1\6\1\7\2\uffff\1\10\73\uffff\73\2\150"+
        "\uffff\1\1\7\uffff\1\1\7\uffff\1\1\6\uffff\1\1\6\uffff\1\1\75\uffff";
    static final String DFA72_specialS =
        "\1\0\10\uffff\1\1\177\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6"+
        "\4\uffff\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1"+
        "\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
        "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
        "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
        "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
        "\1\105\1\106\1\107\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
        "\1\120\1\121\1\122\1\123\1\124\1\125\1\126\1\127\1\130\1\131\1\132"+
        "\1\133\1\134\2\uffff\1\135\1\136\1\137\1\140\1\141\1\142\2\uffff"+
        "\1\143\1\144\1\145\1\146\1\147\1\150\2\uffff\1\151\1\152\1\153\1"+
        "\154\1\155\2\uffff\1\156\1\157\1\160\1\161\1\162\2\uffff\1\163\1"+
        "\164\1\165\1\166\1\167\1\170\1\171\1\172\1\173\1\174\1\175\1\176"+
        "\1\177\1\u0080\1\u0081\1\u0082\1\u0083\1\u0084\1\u0085\1\u0086\1"+
        "\u0087\1\u0088\1\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1"+
        "\u008f\1\u0090\1\u0091\1\u0092\1\u0093\1\u0094\1\u0095\1\u0096\1"+
        "\u0097\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\u009e\1"+
        "\u009f\1\u00a0\1\u00a1\1\u00a2\1\u00a3\1\u00a4\1\u00a5\1\u00a6\1"+
        "\u00a7\1\u00a8\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae}>";
    static final String[] DFA72_transitionS = {
            "\1\6\35\uffff\1\2\24\uffff\1\7\23\uffff\1\4\35\uffff\1\1\4\uffff"+
            "\1\3\31\uffff\1\5\25\uffff\1\10\1\uffff\1\10\17\uffff\1\10\14"+
            "\uffff\1\10",
            "\1\11",
            "\1\13\27\uffff\1\13\21\uffff\1\13\21\uffff\1\13\36\uffff\1"+
            "\13\1\uffff\3\13\1\uffff\1\13\1\uffff\2\13\1\uffff\2\13\1\uffff"+
            "\3\13\1\uffff\3\13\1\uffff\4\13\1\uffff\6\13\1\uffff\1\13\1"+
            "\uffff\7\13\4\uffff\1\13\3\uffff\4\13\1\uffff\1\13\3\uffff\1"+
            "\12\3\13\1\uffff\12\13\1\uffff\4\13\1\uffff\7\13\1\uffff\7\13"+
            "\1\uffff\2\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\170\27\uffff\1\115\21\uffff\1\154\21\uffff\1\153\36\uffff"+
            "\1\173\1\uffff\2\173\1\111\1\uffff\1\110\1\uffff\1\113\1\116"+
            "\1\uffff\1\117\1\u0081\1\uffff\1\176\1\117\1\u0081\1\uffff\2"+
            "\107\1\173\1\uffff\1\u0080\1\146\2\173\1\uffff\6\173\1\uffff"+
            "\1\112\1\uffff\1\156\1\164\1\175\1\172\1\157\1\163\1\166\4\uffff"+
            "\1\165\3\uffff\1\133\1\174\1\135\1\134\1\uffff\1\167\3\uffff"+
            "\1\106\1\155\1\177\1\173\1\uffff\1\127\1\147\1\160\1\131\1\150"+
            "\1\161\1\137\1\141\1\125\1\167\1\uffff\1\144\1\151\1\121\1\140"+
            "\1\uffff\1\120\1\122\1\143\1\123\1\136\1\124\1\142\1\uffff\1"+
            "\171\1\126\1\132\1\130\1\145\1\152\1\173\1\uffff\1\173\1\114",
            "\1\u008d\35\uffff\1\u0089\24\uffff\1\u008e\23\uffff\1\u008b"+
            "\30\uffff\1\u0091\4\uffff\1\u0088\1\uffff\1\u0083\2\uffff\1"+
            "\u008a\2\uffff\1\u0093\2\uffff\1\u0082\1\u0093\22\uffff\1\u008c"+
            "\13\uffff\1\u0087\2\uffff\1\u0086\6\uffff\1\u008f\1\uffff\1"+
            "\u008f\1\u0090\2\uffff\1\u0084\1\u0085\12\uffff\1\u008f\14\uffff"+
            "\1\u008f\12\uffff\1\u0092",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u009f\35\uffff\1\u009b\24\uffff\1\u00a0\23\uffff\1\u009d"+
            "\30\uffff\1\u00a3\4\uffff\1\u009a\1\uffff\1\u0095\2\uffff\1"+
            "\u009c\2\uffff\1\u00a5\2\uffff\1\u0094\1\u00a5\22\uffff\1\u009e"+
            "\13\uffff\1\u0099\2\uffff\1\u0098\6\uffff\1\u00a1\1\uffff\1"+
            "\u00a1\1\u00a2\2\uffff\1\u0096\1\u0097\12\uffff\1\u00a1\14\uffff"+
            "\1\u00a1\12\uffff\1\u00a4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00b0\35\uffff\1\u00ac\24\uffff\1\u00b1\23\uffff\1\u00ae"+
            "\35\uffff\1\u00ab\1\uffff\1\u00a6\2\uffff\1\u00ad\31\uffff\1"+
            "\u00af\13\uffff\1\u00aa\2\uffff\1\u00a9\6\uffff\1\u00b2\1\uffff"+
            "\1\u00b2\1\u00b3\2\uffff\1\u00a7\1\u00a8\12\uffff\1\u00b2\14"+
            "\uffff\1\u00b2",
            "\1\u00ca\35\uffff\1\u00bd\24\uffff\1\u00cb\23\uffff\1\u00c8"+
            "\30\uffff\1\u00ce\4\uffff\1\u00c6\1\uffff\1\u00b5\2\uffff\1"+
            "\u00c7\2\uffff\1\u00d0\2\uffff\1\u00c1\1\u00d0\22\uffff\1\u00c9"+
            "\13\uffff\1\u00c5\2\uffff\1\u00c4\6\uffff\1\u00cc\1\uffff\1"+
            "\u00cc\1\u00cd\2\uffff\1\u00c2\1\u00c3\1\u00b6\2\uffff\1\u00b8"+
            "\4\uffff\1\u00c0\1\uffff\1\u00cc\2\uffff\1\u00b4\2\uffff\1\u00ba"+
            "\1\u00bb\1\uffff\1\u00bc\1\uffff\1\u00be\1\uffff\1\u00cc\1\uffff"+
            "\1\u00bf\1\u00b9\1\u00b7\6\uffff\1\u00cf",
            "\1\u00d2\u00a0\uffff\1\u00d1",
            "\1\u00dc\110\uffff\1\u00d4\1\uffff\1\u00e0\70\uffff\1\u00d5"+
            "\2\uffff\1\u00d7\4\uffff\1\u00df\4\uffff\1\u00d3\2\uffff\1\u00d9"+
            "\1\u00da\1\uffff\1\u00db\1\uffff\1\u00dd\3\uffff\1\u00de\1\u00d8"+
            "\1\u00d6",
            "\1\u00e1",
            "\1\u00e2",
            "\1\u00e3",
            "\1\13\102\uffff\1\u00e8\1\uffff\3\u00e8\1\uffff\1\u00e6\2\uffff"+
            "\1\u00e8\1\uffff\1\u00e8\1\u00e7\2\uffff\1\u00e8\1\u00e7\1\uffff"+
            "\2\u00e5\1\u00e8\3\uffff\2\u00e8\1\uffff\6\u00e8\1\uffff\1\u00e9"+
            "\31\uffff\1\u00e4\1\uffff\1\u00ea\1\u00e8\37\uffff\1\u00e8\1"+
            "\uffff\1\u00e8",
            "\1\u00ec",
            "\1\13\102\uffff\1\u00f0\1\uffff\3\u00f0\1\uffff\1\u00ee\2\uffff"+
            "\1\u00f0\1\uffff\1\u00f0\1\u00ef\2\uffff\1\u00f0\1\u00ef\1\uffff"+
            "\2\u00ed\1\u00f0\3\uffff\2\u00f0\1\uffff\6\u00f0\1\uffff\1\u00f1"+
            "\33\uffff\1\u00f2\1\u00f0\37\uffff\1\u00f0\1\uffff\1\u00f0",
            "\1\u00f4",
            "\1\13\102\uffff\1\u00f8\1\uffff\3\u00f8\1\uffff\1\u00f6\2\uffff"+
            "\1\u00f8\1\uffff\1\u00f8\1\u00f7\2\uffff\1\u00f8\1\u00f7\1\uffff"+
            "\2\u00f5\1\u00f8\3\uffff\2\u00f8\1\uffff\6\u00f8\1\uffff\1\u00f9"+
            "\33\uffff\1\u00fa\1\u00f8\37\uffff\1\u00f8\1\uffff\1\u00f8",
            "\1\13\102\uffff\1\u00ff\1\uffff\3\u00ff\1\uffff\1\u00fd\2\uffff"+
            "\1\u00ff\1\uffff\1\u00ff\1\u00fe\2\uffff\1\u00ff\1\u00fe\1\uffff"+
            "\2\u00fc\1\u00ff\3\uffff\2\u00ff\1\uffff\6\u00ff\1\uffff\1\u0100"+
            "\33\uffff\1\u0101\1\u00ff\37\uffff\1\u00ff\1\uffff\1\u00ff",
            "\1\13\102\uffff\1\u0106\1\uffff\3\u0106\1\uffff\1\u0104\2\uffff"+
            "\1\u0106\1\uffff\1\u0106\1\u0105\2\uffff\1\u0106\1\u0105\1\uffff"+
            "\2\u0103\1\u0106\3\uffff\2\u0106\1\uffff\6\u0106\1\uffff\1\u0107"+
            "\33\uffff\1\u0108\1\u0106\37\uffff\1\u0106\1\uffff\1\u0106",
            "\1\u0115\35\uffff\1\u0111\24\uffff\1\u0116\23\uffff\1\u0113"+
            "\30\uffff\1\u0119\4\uffff\1\u0110\1\uffff\1\u010b\2\uffff\1"+
            "\u0112\2\uffff\1\u011b\2\uffff\1\u010a\1\u011b\22\uffff\1\u0114"+
            "\13\uffff\1\u010f\2\uffff\1\u010e\6\uffff\1\u0117\1\uffff\1"+
            "\u0117\1\u0118\2\uffff\1\u010c\1\u010d\12\uffff\1\u0117\14\uffff"+
            "\1\u0117\12\uffff\1\u011a",
            "\1\u0126\35\uffff\1\u0122\24\uffff\1\u0127\23\uffff\1\u0124"+
            "\35\uffff\1\u0121\1\uffff\1\u011c\2\uffff\1\u0123\31\uffff\1"+
            "\u0125\13\uffff\1\u0120\2\uffff\1\u011f\6\uffff\1\u0128\1\uffff"+
            "\1\u0128\1\u0129\2\uffff\1\u011d\1\u011e\12\uffff\1\u0128\14"+
            "\uffff\1\u0128",
            "\1\u0134\35\uffff\1\u0130\24\uffff\1\u0135\23\uffff\1\u0132"+
            "\35\uffff\1\u012f\1\uffff\1\u012a\2\uffff\1\u0131\31\uffff\1"+
            "\u0133\13\uffff\1\u012e\2\uffff\1\u012d\6\uffff\1\u0136\1\uffff"+
            "\1\u0136\1\u0137\2\uffff\1\u012b\1\u012c\12\uffff\1\u0136\14"+
            "\uffff\1\u0136",
            "\1\u0142\35\uffff\1\u013e\24\uffff\1\u0143\23\uffff\1\u0140"+
            "\35\uffff\1\u013d\1\uffff\1\u0138\2\uffff\1\u013f\31\uffff\1"+
            "\u0141\13\uffff\1\u013c\2\uffff\1\u013b\6\uffff\1\u0144\1\uffff"+
            "\1\u0144\1\u0145\2\uffff\1\u0139\1\u013a\12\uffff\1\u0144\14"+
            "\uffff\1\u0144",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff"
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "528:1: simple_expression_value : ( ( ( '&' )? name '[' )=> ( '&' )? name '[' element_value ']' -> ^( ARRAY_VALUE name element_value ) | ( ( '&' | '*' ) name )=> ( '&' | '*' ) name | string | string_objc | CHAR_LITERAL -> ^( CHAR CHAR_LITERAL ) | NUMBER_LITERAL -> ^( NUMBER NUMBER_LITERAL ) | bool -> ^( BOOL bool ) | name );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_0 = input.LA(1);

                         
                        int index72_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA72_0==117) ) {s = 1;}

                        else if ( (LA72_0==ID) ) {s = 2;}

                        else if ( (LA72_0==122) && (synpred17_Objc())) {s = 3;}

                        else if ( (LA72_0==STRING_LITERAL) ) {s = 4;}

                        else if ( (LA72_0==148) ) {s = 5;}

                        else if ( (LA72_0==CHAR_LITERAL) ) {s = 6;}

                        else if ( (LA72_0==NUMBER_LITERAL) ) {s = 7;}

                        else if ( (LA72_0==170||LA72_0==172||LA72_0==188||LA72_0==201) ) {s = 8;}

                         
                        input.seek(index72_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA72_9 = input.LA(1);

                         
                        int index72_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA72_9==173) ) {s = 70;}

                        else if ( ((LA72_9 >= 131 && LA72_9 <= 132)) && (synpred17_Objc())) {s = 71;}

                        else if ( (LA72_9==119) && (synpred17_Objc())) {s = 72;}

                        else if ( (LA72_9==117) && (synpred17_Objc())) {s = 73;}

                        else if ( (LA72_9==147) && (synpred17_Objc())) {s = 74;}

                        else if ( (LA72_9==121) && (synpred17_Objc())) {s = 75;}

                        else if ( (LA72_9==211) && (synpred17_Objc())) {s = 76;}

                        else if ( (LA72_9==ID) && (synpred17_Objc())) {s = 77;}

                        else if ( (LA72_9==122) && (synpred17_Objc())) {s = 78;}

                        else if ( (LA72_9==124||LA72_9==128) && (synpred17_Objc())) {s = 79;}

                        else if ( (LA72_9==194) && (synpred17_Objc())) {s = 80;}

                        else if ( (LA72_9==191) && (synpred17_Objc())) {s = 81;}

                        else if ( (LA72_9==195) && (synpred17_Objc())) {s = 82;}

                        else if ( (LA72_9==197) && (synpred17_Objc())) {s = 83;}

                        else if ( (LA72_9==199) && (synpred17_Objc())) {s = 84;}

                        else if ( (LA72_9==186) && (synpred17_Objc())) {s = 85;}

                        else if ( (LA72_9==203) && (synpred17_Objc())) {s = 86;}

                        else if ( (LA72_9==178) && (synpred17_Objc())) {s = 87;}

                        else if ( (LA72_9==205) && (synpred17_Objc())) {s = 88;}

                        else if ( (LA72_9==181) && (synpred17_Objc())) {s = 89;}

                        else if ( (LA72_9==204) && (synpred17_Objc())) {s = 90;}

                        else if ( (LA72_9==164) && (synpred17_Objc())) {s = 91;}

                        else if ( (LA72_9==167) && (synpred17_Objc())) {s = 92;}

                        else if ( (LA72_9==166) && (synpred17_Objc())) {s = 93;}

                        else if ( (LA72_9==198) && (synpred17_Objc())) {s = 94;}

                        else if ( (LA72_9==184) && (synpred17_Objc())) {s = 95;}

                        else if ( (LA72_9==192) && (synpred17_Objc())) {s = 96;}

                        else if ( (LA72_9==185) && (synpred17_Objc())) {s = 97;}

                        else if ( (LA72_9==200) && (synpred17_Objc())) {s = 98;}

                        else if ( (LA72_9==196) && (synpred17_Objc())) {s = 99;}

                        else if ( (LA72_9==189) && (synpred17_Objc())) {s = 100;}

                        else if ( (LA72_9==206) && (synpred17_Objc())) {s = 101;}

                        else if ( (LA72_9==136) && (synpred17_Objc())) {s = 102;}

                        else if ( (LA72_9==179) && (synpred17_Objc())) {s = 103;}

                        else if ( (LA72_9==182) && (synpred17_Objc())) {s = 104;}

                        else if ( (LA72_9==190) && (synpred17_Objc())) {s = 105;}

                        else if ( (LA72_9==207) && (synpred17_Objc())) {s = 106;}

                        else if ( (LA72_9==SINGLE_COMMENT_LIT) && (synpred17_Objc())) {s = 107;}

                        else if ( (LA72_9==MULTI_COMMENT_LIT) && (synpred17_Objc())) {s = 108;}

                        else if ( (LA72_9==174) && (synpred17_Objc())) {s = 109;}

                        else if ( (LA72_9==149) && (synpred17_Objc())) {s = 110;}

                        else if ( (LA72_9==153) && (synpred17_Objc())) {s = 111;}

                        else if ( (LA72_9==180) && (synpred17_Objc())) {s = 112;}

                        else if ( (LA72_9==183) && (synpred17_Objc())) {s = 113;}

                        else if ( (LA72_9==EOF) && (synpred17_Objc())) {s = 114;}

                        else if ( (LA72_9==154) && (synpred17_Objc())) {s = 115;}

                        else if ( (LA72_9==150) && (synpred17_Objc())) {s = 116;}

                        else if ( (LA72_9==160) && (synpred17_Objc())) {s = 117;}

                        else if ( (LA72_9==155) && (synpred17_Objc())) {s = 118;}

                        else if ( (LA72_9==169||LA72_9==187) && (synpred17_Objc())) {s = 119;}

                        else if ( (LA72_9==DEFINE_LITERAL) && (synpred17_Objc())) {s = 120;}

                        else if ( (LA72_9==202) && (synpred17_Objc())) {s = 121;}

                        else if ( (LA72_9==152) && (synpred17_Objc())) {s = 122;}

                        else if ( (LA72_9==113||(LA72_9 >= 115 && LA72_9 <= 116)||LA72_9==133||(LA72_9 >= 137 && LA72_9 <= 138)||(LA72_9 >= 140 && LA72_9 <= 145)||LA72_9==176||LA72_9==208||LA72_9==210) && (synpred17_Objc())) {s = 123;}

                        else if ( (LA72_9==165) && (synpred17_Objc())) {s = 124;}

                        else if ( (LA72_9==151) && (synpred17_Objc())) {s = 125;}

                        else if ( (LA72_9==127) && (synpred17_Objc())) {s = 126;}

                        else if ( (LA72_9==175) && (synpred17_Objc())) {s = 127;}

                        else if ( (LA72_9==135) && (synpred17_Objc())) {s = 128;}

                        else if ( (LA72_9==125||LA72_9==129) && (synpred17_Objc())) {s = 129;}

                         
                        input.seek(index72_9);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA72_137 = input.LA(1);

                         
                        int index72_137 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA72_137==173) ) {s = 228;}

                        else if ( ((LA72_137 >= 131 && LA72_137 <= 132)) ) {s = 229;}

                        else if ( (LA72_137==119) ) {s = 230;}

                        else if ( (LA72_137==125||LA72_137==129) ) {s = 231;}

                        else if ( (LA72_137==113||(LA72_137 >= 115 && LA72_137 <= 117)||LA72_137==122||LA72_137==124||LA72_137==128||LA72_137==133||(LA72_137 >= 137 && LA72_137 <= 138)||(LA72_137 >= 140 && LA72_137 <= 145)||LA72_137==176||LA72_137==208||LA72_137==210) ) {s = 232;}

                        else if ( (LA72_137==147) ) {s = 233;}

                        else if ( (LA72_137==175) && (synpred16_Objc())) {s = 234;}

                        else if ( (LA72_137==ID) ) {s = 11;}

                         
                        input.seek(index72_137);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA72_139 = input.LA(1);

                         
                        int index72_139 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA72_139 >= 131 && LA72_139 <= 132)) ) {s = 237;}

                        else if ( (LA72_139==119) ) {s = 238;}

                        else if ( (LA72_139==125||LA72_139==129) ) {s = 239;}

                        else if ( (LA72_139==113||(LA72_139 >= 115 && LA72_139 <= 117)||LA72_139==122||LA72_139==124||LA72_139==128||LA72_139==133||(LA72_139 >= 137 && LA72_139 <= 138)||(LA72_139 >= 140 && LA72_139 <= 145)||LA72_139==176||LA72_139==208||LA72_139==210) ) {s = 240;}

                        else if ( (LA72_139==147) ) {s = 241;}

                        else if ( (LA72_139==175) && (synpred16_Objc())) {s = 242;}

                        else if ( (LA72_139==ID) ) {s = 11;}

                         
                        input.seek(index72_139);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA72_141 = input.LA(1);

                         
                        int index72_141 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA72_141 >= 131 && LA72_141 <= 132)) ) {s = 245;}

                        else if ( (LA72_141==119) ) {s = 246;}

                        else if ( (LA72_141==125||LA72_141==129) ) {s = 247;}

                        else if ( (LA72_141==113||(LA72_141 >= 115 && LA72_141 <= 117)||LA72_141==122||LA72_141==124||LA72_141==128||LA72_141==133||(LA72_141 >= 137 && LA72_141 <= 138)||(LA72_141 >= 140 && LA72_141 <= 145)||LA72_141==176||LA72_141==208||LA72_141==210) ) {s = 248;}

                        else if ( (LA72_141==147) ) {s = 249;}

                        else if ( (LA72_141==175) && (synpred16_Objc())) {s = 250;}

                        else if ( (LA72_141==ID) ) {s = 11;}

                         
                        input.seek(index72_141);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA72_142 = input.LA(1);

                         
                        int index72_142 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA72_142 >= 131 && LA72_142 <= 132)) ) {s = 252;}

                        else if ( (LA72_142==119) ) {s = 253;}

                        else if ( (LA72_142==125||LA72_142==129) ) {s = 254;}

                        else if ( (LA72_142==113||(LA72_142 >= 115 && LA72_142 <= 117)||LA72_142==122||LA72_142==124||LA72_142==128||LA72_142==133||(LA72_142 >= 137 && LA72_142 <= 138)||(LA72_142 >= 140 && LA72_142 <= 145)||LA72_142==176||LA72_142==208||LA72_142==210) ) {s = 255;}

                        else if ( (LA72_142==147) ) {s = 256;}

                        else if ( (LA72_142==175) && (synpred16_Objc())) {s = 257;}

                        else if ( (LA72_142==ID) ) {s = 11;}

                         
                        input.seek(index72_142);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA72_143 = input.LA(1);

                         
                        int index72_143 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA72_143 >= 131 && LA72_143 <= 132)) ) {s = 259;}

                        else if ( (LA72_143==119) ) {s = 260;}

                        else if ( (LA72_143==125||LA72_143==129) ) {s = 261;}

                        else if ( (LA72_143==113||(LA72_143 >= 115 && LA72_143 <= 117)||LA72_143==122||LA72_143==124||LA72_143==128||LA72_143==133||(LA72_143 >= 137 && LA72_143 <= 138)||(LA72_143 >= 140 && LA72_143 <= 145)||LA72_143==176||LA72_143==208||LA72_143==210) ) {s = 262;}

                        else if ( (LA72_143==147) ) {s = 263;}

                        else if ( (LA72_143==175) && (synpred16_Objc())) {s = 264;}

                        else if ( (LA72_143==ID) ) {s = 11;}

                         
                        input.seek(index72_143);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA72_148 = input.LA(1);

                         
                        int index72_148 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_148);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA72_149 = input.LA(1);

                         
                        int index72_149 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_149);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA72_150 = input.LA(1);

                         
                        int index72_150 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_150);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA72_151 = input.LA(1);

                         
                        int index72_151 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_151);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA72_152 = input.LA(1);

                         
                        int index72_152 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_152);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA72_153 = input.LA(1);

                         
                        int index72_153 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_153);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA72_154 = input.LA(1);

                         
                        int index72_154 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_154);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA72_155 = input.LA(1);

                         
                        int index72_155 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_155);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA72_156 = input.LA(1);

                         
                        int index72_156 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_156);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA72_157 = input.LA(1);

                         
                        int index72_157 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_157);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA72_158 = input.LA(1);

                         
                        int index72_158 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_158);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA72_159 = input.LA(1);

                         
                        int index72_159 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_159);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA72_160 = input.LA(1);

                         
                        int index72_160 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_160);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA72_161 = input.LA(1);

                         
                        int index72_161 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_161);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA72_162 = input.LA(1);

                         
                        int index72_162 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_162);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA72_163 = input.LA(1);

                         
                        int index72_163 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_163);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA72_164 = input.LA(1);

                         
                        int index72_164 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_164);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA72_165 = input.LA(1);

                         
                        int index72_165 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (synpred17_Objc()) ) {s = 129;}

                         
                        input.seek(index72_165);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA72_166 = input.LA(1);

                         
                        int index72_166 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_166);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA72_167 = input.LA(1);

                         
                        int index72_167 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_167);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA72_168 = input.LA(1);

                         
                        int index72_168 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_168);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA72_169 = input.LA(1);

                         
                        int index72_169 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_169);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA72_170 = input.LA(1);

                         
                        int index72_170 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_170);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA72_171 = input.LA(1);

                         
                        int index72_171 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_171);

                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA72_172 = input.LA(1);

                         
                        int index72_172 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_172);

                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA72_173 = input.LA(1);

                         
                        int index72_173 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_173);

                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA72_174 = input.LA(1);

                         
                        int index72_174 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_174);

                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA72_175 = input.LA(1);

                         
                        int index72_175 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_175);

                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA72_176 = input.LA(1);

                         
                        int index72_176 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_176);

                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA72_177 = input.LA(1);

                         
                        int index72_177 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_177);

                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA72_178 = input.LA(1);

                         
                        int index72_178 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_178);

                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA72_179 = input.LA(1);

                         
                        int index72_179 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_179);

                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA72_180 = input.LA(1);

                         
                        int index72_180 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_180);

                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA72_181 = input.LA(1);

                         
                        int index72_181 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_181);

                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA72_182 = input.LA(1);

                         
                        int index72_182 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_182);

                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA72_183 = input.LA(1);

                         
                        int index72_183 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_183);

                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA72_184 = input.LA(1);

                         
                        int index72_184 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_184);

                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA72_185 = input.LA(1);

                         
                        int index72_185 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_185);

                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA72_186 = input.LA(1);

                         
                        int index72_186 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_186);

                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA72_187 = input.LA(1);

                         
                        int index72_187 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_187);

                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA72_188 = input.LA(1);

                         
                        int index72_188 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_188);

                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA72_189 = input.LA(1);

                         
                        int index72_189 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_189);

                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA72_190 = input.LA(1);

                         
                        int index72_190 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_190);

                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA72_191 = input.LA(1);

                         
                        int index72_191 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_191);

                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA72_192 = input.LA(1);

                         
                        int index72_192 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_192);

                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA72_193 = input.LA(1);

                         
                        int index72_193 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_193);

                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA72_194 = input.LA(1);

                         
                        int index72_194 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_194);

                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA72_195 = input.LA(1);

                         
                        int index72_195 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_195);

                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA72_196 = input.LA(1);

                         
                        int index72_196 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_196);

                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA72_197 = input.LA(1);

                         
                        int index72_197 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_197);

                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA72_198 = input.LA(1);

                         
                        int index72_198 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_198);

                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA72_199 = input.LA(1);

                         
                        int index72_199 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_199);

                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA72_200 = input.LA(1);

                         
                        int index72_200 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_200);

                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA72_201 = input.LA(1);

                         
                        int index72_201 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_201);

                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA72_202 = input.LA(1);

                         
                        int index72_202 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_202);

                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA72_203 = input.LA(1);

                         
                        int index72_203 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_203);

                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA72_204 = input.LA(1);

                         
                        int index72_204 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_204);

                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA72_205 = input.LA(1);

                         
                        int index72_205 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_205);

                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA72_206 = input.LA(1);

                         
                        int index72_206 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_206);

                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA72_207 = input.LA(1);

                         
                        int index72_207 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_207);

                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA72_208 = input.LA(1);

                         
                        int index72_208 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_208);

                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA72_209 = input.LA(1);

                         
                        int index72_209 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_209);

                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA72_210 = input.LA(1);

                         
                        int index72_210 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_210);

                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA72_211 = input.LA(1);

                         
                        int index72_211 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_211);

                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA72_212 = input.LA(1);

                         
                        int index72_212 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_212);

                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA72_213 = input.LA(1);

                         
                        int index72_213 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_213);

                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA72_214 = input.LA(1);

                         
                        int index72_214 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_214);

                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA72_215 = input.LA(1);

                         
                        int index72_215 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_215);

                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA72_216 = input.LA(1);

                         
                        int index72_216 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_216);

                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA72_217 = input.LA(1);

                         
                        int index72_217 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_217);

                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA72_218 = input.LA(1);

                         
                        int index72_218 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_218);

                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA72_219 = input.LA(1);

                         
                        int index72_219 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_219);

                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA72_220 = input.LA(1);

                         
                        int index72_220 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_220);

                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA72_221 = input.LA(1);

                         
                        int index72_221 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_221);

                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA72_222 = input.LA(1);

                         
                        int index72_222 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_222);

                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA72_223 = input.LA(1);

                         
                        int index72_223 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_223);

                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA72_224 = input.LA(1);

                         
                        int index72_224 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_224);

                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA72_225 = input.LA(1);

                         
                        int index72_225 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_225);

                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA72_226 = input.LA(1);

                         
                        int index72_226 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_226);

                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA72_227 = input.LA(1);

                         
                        int index72_227 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_227);

                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA72_228 = input.LA(1);

                         
                        int index72_228 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_228);

                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA72_229 = input.LA(1);

                         
                        int index72_229 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_229);

                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA72_230 = input.LA(1);

                         
                        int index72_230 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_230);

                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA72_231 = input.LA(1);

                         
                        int index72_231 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_231);

                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA72_232 = input.LA(1);

                         
                        int index72_232 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_232);

                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA72_233 = input.LA(1);

                         
                        int index72_233 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_233);

                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA72_236 = input.LA(1);

                         
                        int index72_236 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_236);

                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA72_237 = input.LA(1);

                         
                        int index72_237 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_237);

                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA72_238 = input.LA(1);

                         
                        int index72_238 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_238);

                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA72_239 = input.LA(1);

                         
                        int index72_239 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_239);

                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA72_240 = input.LA(1);

                         
                        int index72_240 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_240);

                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA72_241 = input.LA(1);

                         
                        int index72_241 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_241);

                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA72_244 = input.LA(1);

                         
                        int index72_244 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_244);

                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA72_245 = input.LA(1);

                         
                        int index72_245 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_245);

                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA72_246 = input.LA(1);

                         
                        int index72_246 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_246);

                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA72_247 = input.LA(1);

                         
                        int index72_247 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_247);

                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA72_248 = input.LA(1);

                         
                        int index72_248 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_248);

                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA72_249 = input.LA(1);

                         
                        int index72_249 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_249);

                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA72_252 = input.LA(1);

                         
                        int index72_252 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_252);

                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA72_253 = input.LA(1);

                         
                        int index72_253 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_253);

                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA72_254 = input.LA(1);

                         
                        int index72_254 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_254);

                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA72_255 = input.LA(1);

                         
                        int index72_255 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_255);

                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA72_256 = input.LA(1);

                         
                        int index72_256 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_256);

                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA72_259 = input.LA(1);

                         
                        int index72_259 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_259);

                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA72_260 = input.LA(1);

                         
                        int index72_260 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_260);

                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA72_261 = input.LA(1);

                         
                        int index72_261 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_261);

                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA72_262 = input.LA(1);

                         
                        int index72_262 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_262);

                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA72_263 = input.LA(1);

                         
                        int index72_263 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_263);

                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA72_266 = input.LA(1);

                         
                        int index72_266 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_266);

                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA72_267 = input.LA(1);

                         
                        int index72_267 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_267);

                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA72_268 = input.LA(1);

                         
                        int index72_268 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_268);

                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA72_269 = input.LA(1);

                         
                        int index72_269 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_269);

                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA72_270 = input.LA(1);

                         
                        int index72_270 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_270);

                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA72_271 = input.LA(1);

                         
                        int index72_271 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_271);

                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA72_272 = input.LA(1);

                         
                        int index72_272 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_272);

                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA72_273 = input.LA(1);

                         
                        int index72_273 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_273);

                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA72_274 = input.LA(1);

                         
                        int index72_274 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_274);

                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA72_275 = input.LA(1);

                         
                        int index72_275 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_275);

                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA72_276 = input.LA(1);

                         
                        int index72_276 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_276);

                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA72_277 = input.LA(1);

                         
                        int index72_277 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_277);

                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA72_278 = input.LA(1);

                         
                        int index72_278 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_278);

                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA72_279 = input.LA(1);

                         
                        int index72_279 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_279);

                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA72_280 = input.LA(1);

                         
                        int index72_280 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_280);

                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA72_281 = input.LA(1);

                         
                        int index72_281 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_281);

                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA72_282 = input.LA(1);

                         
                        int index72_282 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_282);

                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA72_283 = input.LA(1);

                         
                        int index72_283 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_283);

                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA72_284 = input.LA(1);

                         
                        int index72_284 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_284);

                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA72_285 = input.LA(1);

                         
                        int index72_285 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_285);

                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA72_286 = input.LA(1);

                         
                        int index72_286 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_286);

                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA72_287 = input.LA(1);

                         
                        int index72_287 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_287);

                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA72_288 = input.LA(1);

                         
                        int index72_288 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_288);

                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA72_289 = input.LA(1);

                         
                        int index72_289 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_289);

                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA72_290 = input.LA(1);

                         
                        int index72_290 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_290);

                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA72_291 = input.LA(1);

                         
                        int index72_291 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_291);

                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA72_292 = input.LA(1);

                         
                        int index72_292 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_292);

                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA72_293 = input.LA(1);

                         
                        int index72_293 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_293);

                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA72_294 = input.LA(1);

                         
                        int index72_294 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_294);

                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA72_295 = input.LA(1);

                         
                        int index72_295 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_295);

                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA72_296 = input.LA(1);

                         
                        int index72_296 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_296);

                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA72_297 = input.LA(1);

                         
                        int index72_297 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_297);

                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA72_298 = input.LA(1);

                         
                        int index72_298 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_298);

                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA72_299 = input.LA(1);

                         
                        int index72_299 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_299);

                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA72_300 = input.LA(1);

                         
                        int index72_300 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_300);

                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA72_301 = input.LA(1);

                         
                        int index72_301 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_301);

                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA72_302 = input.LA(1);

                         
                        int index72_302 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_302);

                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA72_303 = input.LA(1);

                         
                        int index72_303 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_303);

                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA72_304 = input.LA(1);

                         
                        int index72_304 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_304);

                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA72_305 = input.LA(1);

                         
                        int index72_305 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_305);

                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA72_306 = input.LA(1);

                         
                        int index72_306 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_306);

                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA72_307 = input.LA(1);

                         
                        int index72_307 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_307);

                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA72_308 = input.LA(1);

                         
                        int index72_308 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_308);

                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA72_309 = input.LA(1);

                         
                        int index72_309 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_309);

                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA72_310 = input.LA(1);

                         
                        int index72_310 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_310);

                        if ( s>=0 ) return s;
                        break;
                    case 160 : 
                        int LA72_311 = input.LA(1);

                         
                        int index72_311 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_311);

                        if ( s>=0 ) return s;
                        break;
                    case 161 : 
                        int LA72_312 = input.LA(1);

                         
                        int index72_312 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_312);

                        if ( s>=0 ) return s;
                        break;
                    case 162 : 
                        int LA72_313 = input.LA(1);

                         
                        int index72_313 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_313);

                        if ( s>=0 ) return s;
                        break;
                    case 163 : 
                        int LA72_314 = input.LA(1);

                         
                        int index72_314 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_314);

                        if ( s>=0 ) return s;
                        break;
                    case 164 : 
                        int LA72_315 = input.LA(1);

                         
                        int index72_315 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_315);

                        if ( s>=0 ) return s;
                        break;
                    case 165 : 
                        int LA72_316 = input.LA(1);

                         
                        int index72_316 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_316);

                        if ( s>=0 ) return s;
                        break;
                    case 166 : 
                        int LA72_317 = input.LA(1);

                         
                        int index72_317 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_317);

                        if ( s>=0 ) return s;
                        break;
                    case 167 : 
                        int LA72_318 = input.LA(1);

                         
                        int index72_318 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_318);

                        if ( s>=0 ) return s;
                        break;
                    case 168 : 
                        int LA72_319 = input.LA(1);

                         
                        int index72_319 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_319);

                        if ( s>=0 ) return s;
                        break;
                    case 169 : 
                        int LA72_320 = input.LA(1);

                         
                        int index72_320 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_320);

                        if ( s>=0 ) return s;
                        break;
                    case 170 : 
                        int LA72_321 = input.LA(1);

                         
                        int index72_321 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_321);

                        if ( s>=0 ) return s;
                        break;
                    case 171 : 
                        int LA72_322 = input.LA(1);

                         
                        int index72_322 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_322);

                        if ( s>=0 ) return s;
                        break;
                    case 172 : 
                        int LA72_323 = input.LA(1);

                         
                        int index72_323 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_323);

                        if ( s>=0 ) return s;
                        break;
                    case 173 : 
                        int LA72_324 = input.LA(1);

                         
                        int index72_324 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_324);

                        if ( s>=0 ) return s;
                        break;
                    case 174 : 
                        int LA72_325 = input.LA(1);

                         
                        int index72_325 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred16_Objc()) ) {s = 264;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index72_325);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA77_eotS =
        "\102\uffff";
    static final String DFA77_eofS =
        "\46\uffff\1\2\33\uffff";
    static final String DFA77_minS =
        "\2\56\4\uffff\1\56\7\uffff\1\165\25\uffff\1\20\1\uffff\1\56\1\0"+
        "\10\uffff\1\0\21\uffff";
    static final String DFA77_maxS =
        "\1\172\1\u00cd\4\uffff\1\u00cd\7\uffff\1\u00ad\25\uffff\1\u00d4"+
        "\1\uffff\1\u00d1\1\0\10\uffff\1\0\21\uffff";
    static final String DFA77_acceptS =
        "\2\uffff\1\3\2\uffff\1\1\1\uffff\7\1\1\uffff\3\1\2\uffff\1\1\15"+
        "\2\2\1\1\uffff\1\1\2\uffff\1\1\21\uffff\4\1\4\uffff";
    static final String DFA77_specialS =
        "\1\uffff\1\0\4\uffff\1\1\7\uffff\1\2\25\uffff\1\3\1\uffff\1\4\1"+
        "\5\10\uffff\1\6\21\uffff}>";
    static final String[] DFA77_transitionS = {
            "\1\2\106\uffff\1\2\1\uffff\1\1\2\uffff\1\2",
            "\1\16\106\uffff\1\2\1\uffff\1\6\2\uffff\1\2\67\uffff\1\7\2"+
            "\uffff\1\11\4\uffff\1\21\4\uffff\1\5\2\uffff\1\13\1\14\1\uffff"+
            "\1\15\1\uffff\1\17\3\uffff\1\20\1\12\1\10",
            "",
            "",
            "",
            "",
            "\1\36\110\uffff\1\26\2\uffff\1\24\67\uffff\1\27\2\uffff\1\31"+
            "\4\uffff\1\41\4\uffff\1\25\2\uffff\1\33\1\34\1\uffff\1\35\1"+
            "\uffff\1\37\3\uffff\1\40\1\32\1\30",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\45\3\uffff\1\46\1\43\16\uffff\1\42\43\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\2\35\uffff\1\47\24\uffff\1\60\23\uffff\1\2\30\uffff\1\2"+
            "\4\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\2\2"+
            "\22\uffff\1\2\13\uffff\1\2\2\uffff\1\2\6\uffff\1\2\1\uffff\2"+
            "\2\1\uffff\1\50\2\2\12\uffff\1\2\14\uffff\1\2\12\uffff\1\2",
            "",
            "\1\73\106\uffff\1\72\1\2\1\75\2\uffff\1\74\1\2\1\uffff\2\2"+
            "\2\uffff\4\2\1\uffff\1\2\4\uffff\1\2\1\uffff\1\2\4\uffff\1\2"+
            "\76\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA77_eot = DFA.unpackEncodedString(DFA77_eotS);
    static final short[] DFA77_eof = DFA.unpackEncodedString(DFA77_eofS);
    static final char[] DFA77_min = DFA.unpackEncodedStringToUnsignedChars(DFA77_minS);
    static final char[] DFA77_max = DFA.unpackEncodedStringToUnsignedChars(DFA77_maxS);
    static final short[] DFA77_accept = DFA.unpackEncodedString(DFA77_acceptS);
    static final short[] DFA77_special = DFA.unpackEncodedString(DFA77_specialS);
    static final short[][] DFA77_transition;

    static {
        int numStates = DFA77_transitionS.length;
        DFA77_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA77_transition[i] = DFA.unpackEncodedString(DFA77_transitionS[i]);
        }
    }

    class DFA77 extends DFA {

        public DFA77(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 77;
            this.eot = DFA77_eot;
            this.eof = DFA77_eof;
            this.min = DFA77_min;
            this.max = DFA77_max;
            this.accept = DFA77_accept;
            this.special = DFA77_special;
            this.transition = DFA77_transition;
        }
        public String getDescription() {
            return "605:1: cast_lvalue : ( ( type_cast_wrapper )=> type_cast_wrapper lvalue_access | ( '(' type_cast_wrapper )=> '(' type_cast_wrapper lvalue_access ')' ( access_wrapper name )+ | lvalue_access );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA77_1 = input.LA(1);

                         
                        int index77_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_1==191) && (synpred19_Objc())) {s = 5;}

                        else if ( (LA77_1==119) ) {s = 6;}

                        else if ( (LA77_1==178) && (synpred19_Objc())) {s = 7;}

                        else if ( (LA77_1==205) && (synpred19_Objc())) {s = 8;}

                        else if ( (LA77_1==181) && (synpred19_Objc())) {s = 9;}

                        else if ( (LA77_1==204) && (synpred19_Objc())) {s = 10;}

                        else if ( (LA77_1==194) && (synpred19_Objc())) {s = 11;}

                        else if ( (LA77_1==195) && (synpred19_Objc())) {s = 12;}

                        else if ( (LA77_1==197) && (synpred19_Objc())) {s = 13;}

                        else if ( (LA77_1==ID) ) {s = 14;}

                        else if ( (LA77_1==199) && (synpred19_Objc())) {s = 15;}

                        else if ( (LA77_1==203) && (synpred19_Objc())) {s = 16;}

                        else if ( (LA77_1==186) && (synpred19_Objc())) {s = 17;}

                        else if ( (LA77_1==117||LA77_1==122) ) {s = 2;}

                         
                        input.seek(index77_1);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA77_6 = input.LA(1);

                         
                        int index77_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_6==122) && (synpred19_Objc())) {s = 20;}

                        else if ( (LA77_6==191) && (synpred20_Objc())) {s = 21;}

                        else if ( (LA77_6==119) && (synpred20_Objc())) {s = 22;}

                        else if ( (LA77_6==178) && (synpred20_Objc())) {s = 23;}

                        else if ( (LA77_6==205) && (synpred20_Objc())) {s = 24;}

                        else if ( (LA77_6==181) && (synpred20_Objc())) {s = 25;}

                        else if ( (LA77_6==204) && (synpred20_Objc())) {s = 26;}

                        else if ( (LA77_6==194) && (synpred20_Objc())) {s = 27;}

                        else if ( (LA77_6==195) && (synpred20_Objc())) {s = 28;}

                        else if ( (LA77_6==197) && (synpred20_Objc())) {s = 29;}

                        else if ( (LA77_6==ID) && (synpred20_Objc())) {s = 30;}

                        else if ( (LA77_6==199) && (synpred20_Objc())) {s = 31;}

                        else if ( (LA77_6==203) && (synpred20_Objc())) {s = 32;}

                        else if ( (LA77_6==186) && (synpred20_Objc())) {s = 33;}

                         
                        input.seek(index77_6);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA77_14 = input.LA(1);

                         
                        int index77_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_14==137) && (synpred19_Objc())) {s = 34;}

                        else if ( (LA77_14==122) && (synpred19_Objc())) {s = 35;}

                        else if ( (LA77_14==173) ) {s = 36;}

                        else if ( (LA77_14==117) && (synpred19_Objc())) {s = 37;}

                        else if ( (LA77_14==121) ) {s = 38;}

                         
                        input.seek(index77_14);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA77_36 = input.LA(1);

                         
                        int index77_36 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_36==ID) ) {s = 39;}

                        else if ( (LA77_36==175) && (synpred19_Objc())) {s = 40;}

                        else if ( (LA77_36==CHAR_LITERAL||LA77_36==STRING_LITERAL||LA77_36==112||LA77_36==117||LA77_36==119||LA77_36==122||LA77_36==125||(LA77_36 >= 128 && LA77_36 <= 129)||LA77_36==148||LA77_36==160||LA77_36==163||LA77_36==170||(LA77_36 >= 172 && LA77_36 <= 173)||(LA77_36 >= 176 && LA77_36 <= 177)||LA77_36==188||LA77_36==201||LA77_36==212) ) {s = 2;}

                        else if ( (LA77_36==NUMBER_LITERAL) ) {s = 48;}

                         
                        input.seek(index77_36);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA77_38 = input.LA(1);

                         
                        int index77_38 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA77_38==117) && (synpred19_Objc())) {s = 58;}

                        else if ( (LA77_38==ID) && (synpred19_Objc())) {s = 59;}

                        else if ( (LA77_38==122) && (synpred19_Objc())) {s = 60;}

                        else if ( (LA77_38==119) && (synpred19_Objc())) {s = 61;}

                        else if ( (LA77_38==EOF||LA77_38==118||LA77_38==123||(LA77_38 >= 125 && LA77_38 <= 126)||(LA77_38 >= 129 && LA77_38 <= 132)||LA77_38==134||LA77_38==139||LA77_38==141||LA77_38==146||LA77_38==209) ) {s = 2;}

                         
                        input.seek(index77_38);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA77_39 = input.LA(1);

                         
                        int index77_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_39);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA77_48 = input.LA(1);

                         
                        int index77_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred19_Objc()) ) {s = 61;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index77_48);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 77, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA117_eotS =
        "\172\uffff";
    static final String DFA117_eofS =
        "\172\uffff";
    static final String DFA117_minS =
        "\6\56\10\uffff\1\56\6\uffff\1\56\4\uffff\3\56\5\uffff\3\56\5\uffff"+
        "\1\56\11\uffff\1\56\7\uffff\3\56\5\uffff\1\56\7\uffff\3\56\11\uffff"+
        "\1\0\7\uffff\3\0\7\uffff\1\0\7\uffff\3\0\5\uffff";
    static final String DFA117_maxS =
        "\1\u00cd\2\u00ad\1\u00c3\1\u00c5\1\u00ad\10\uffff\1\171\6\uffff"+
        "\1\171\4\uffff\1\u00ad\1\171\1\u00c3\5\uffff\1\u00ad\1\171\1\u00c5"+
        "\5\uffff\1\171\11\uffff\1\171\7\uffff\1\u00ad\1\171\1\u00c3\5\uffff"+
        "\1\171\7\uffff\1\u00ad\1\171\1\u00c5\11\uffff\1\0\7\uffff\3\0\7"+
        "\uffff\1\0\7\uffff\3\0\5\uffff";
    static final String DFA117_acceptS =
        "\6\uffff\1\2\51\uffff\1\1\1\uffff\1\1\7\uffff\1\1\17\uffff\1\1\11"+
        "\uffff\1\1\1\uffff\1\1\7\uffff\1\1\11\uffff\1\1\7\uffff\1\1\11\uffff";
    static final String DFA117_specialS =
        "\16\uffff\1\0\6\uffff\1\1\5\uffff\1\2\7\uffff\1\3\6\uffff\1\4\11"+
        "\uffff\1\5\10\uffff\1\6\6\uffff\1\7\10\uffff\1\10\12\uffff\1\11"+
        "\7\uffff\1\12\1\13\1\14\7\uffff\1\15\7\uffff\1\16\1\17\1\20\5\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\5\110\uffff\1\6\72\uffff\1\6\2\uffff\1\6\4\uffff\1\6\4\uffff"+
            "\1\2\2\uffff\1\1\1\3\1\uffff\1\4\1\uffff\1\6\3\uffff\3\6",
            "\1\6\106\uffff\1\6\2\uffff\1\16\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6",
            "\1\6\106\uffff\1\6\2\uffff\1\25\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6",
            "\1\6\106\uffff\1\6\2\uffff\1\33\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6\24\uffff\1\32\1\34",
            "\1\6\106\uffff\1\6\2\uffff\1\43\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6\24\uffff\1\42\2\uffff\1\44",
            "\1\6\106\uffff\1\6\2\uffff\1\52\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\60\112\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\62\112\uffff\1\6",
            "",
            "",
            "",
            "",
            "\1\6\106\uffff\1\6\2\uffff\1\64\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6",
            "\1\72\112\uffff\1\6",
            "\1\6\106\uffff\1\6\2\uffff\1\75\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6\24\uffff\1\74\1\76",
            "",
            "",
            "",
            "",
            "",
            "\1\6\106\uffff\1\6\2\uffff\1\104\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6",
            "\1\112\112\uffff\1\6",
            "\1\6\106\uffff\1\6\2\uffff\1\115\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6\24\uffff\1\114\2\uffff\1\116",
            "",
            "",
            "",
            "",
            "",
            "\1\124\112\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\126\112\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\106\uffff\1\6\2\uffff\1\130\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6",
            "\1\136\112\uffff\1\6",
            "\1\6\106\uffff\1\6\2\uffff\1\141\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6\24\uffff\1\140\1\142",
            "",
            "",
            "",
            "",
            "",
            "\1\150\112\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\6\106\uffff\1\6\2\uffff\1\152\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6",
            "\1\160\112\uffff\1\6",
            "\1\6\106\uffff\1\6\2\uffff\1\163\1\uffff\1\6\16\uffff\1\6\43"+
            "\uffff\1\6\24\uffff\1\162\2\uffff\1\164",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "795:1: field_declaration : ( ( block_decl_predicate )=> block_decl | ( ( type_declaration field_name ) ( ',' field_name )* ( ( ( classical_method_params ( ';' | block_multiline_wrapper ) ) | ( op_assign_wrapper element_value_or_array_init ';' ) ) | ';' ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_14 = input.LA(1);

                         
                        int index117_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_14==ID) && (synpred23_Objc())) {s = 48;}

                        else if ( (LA117_14==121) ) {s = 6;}

                         
                        input.seek(index117_14);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA117_21 = input.LA(1);

                         
                        int index117_21 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_21==ID) && (synpred23_Objc())) {s = 50;}

                        else if ( (LA117_21==121) ) {s = 6;}

                         
                        input.seek(index117_21);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA117_27 = input.LA(1);

                         
                        int index117_27 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_27==ID) && (synpred23_Objc())) {s = 58;}

                        else if ( (LA117_27==121) ) {s = 6;}

                         
                        input.seek(index117_27);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA117_35 = input.LA(1);

                         
                        int index117_35 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_35==ID) && (synpred23_Objc())) {s = 74;}

                        else if ( (LA117_35==121) ) {s = 6;}

                         
                        input.seek(index117_35);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA117_42 = input.LA(1);

                         
                        int index117_42 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_42==ID) && (synpred23_Objc())) {s = 84;}

                        else if ( (LA117_42==121) ) {s = 6;}

                         
                        input.seek(index117_42);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA117_52 = input.LA(1);

                         
                        int index117_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_52==ID) && (synpred23_Objc())) {s = 86;}

                        else if ( (LA117_52==121) ) {s = 6;}

                         
                        input.seek(index117_52);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA117_61 = input.LA(1);

                         
                        int index117_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_61==ID) && (synpred23_Objc())) {s = 94;}

                        else if ( (LA117_61==121) ) {s = 6;}

                         
                        input.seek(index117_61);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA117_68 = input.LA(1);

                         
                        int index117_68 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_68==ID) && (synpred23_Objc())) {s = 104;}

                        else if ( (LA117_68==121) ) {s = 6;}

                         
                        input.seek(index117_68);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA117_77 = input.LA(1);

                         
                        int index117_77 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA117_77==ID) && (synpred23_Objc())) {s = 112;}

                        else if ( (LA117_77==121) ) {s = 6;}

                         
                        input.seek(index117_77);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA117_88 = input.LA(1);

                         
                        int index117_88 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_88);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA117_96 = input.LA(1);

                         
                        int index117_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_96);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA117_97 = input.LA(1);

                         
                        int index117_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_97);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA117_98 = input.LA(1);

                         
                        int index117_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_98);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA117_106 = input.LA(1);

                         
                        int index117_106 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_106);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA117_114 = input.LA(1);

                         
                        int index117_114 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_114);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA117_115 = input.LA(1);

                         
                        int index117_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_115);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA117_116 = input.LA(1);

                         
                        int index117_116 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred23_Objc()) ) {s = 112;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index117_116);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA130_eotS =
        "\174\uffff";
    static final String DFA130_eofS =
        "\174\uffff";
    static final String DFA130_minS =
        "\2\56\1\uffff\4\56\7\uffff\1\56\15\uffff\1\56\1\uffff\1\56\6\uffff"+
        "\1\56\1\uffff\1\56\15\uffff\1\172\13\uffff\1\56\1\uffff\1\56\15"+
        "\uffff\1\56\1\uffff\1\56\17\uffff\1\0\1\uffff\1\0\15\uffff\1\0\1"+
        "\uffff\1\0\6\uffff";
    static final String DFA130_maxS =
        "\1\u00cd\1\u00ad\1\uffff\1\u00ad\1\u00c3\1\u00c5\1\u00ad\7\uffff"+
        "\1\u00c5\15\uffff\1\u00ad\1\uffff\1\u00c3\6\uffff\1\u00ad\1\uffff"+
        "\1\u00c5\15\uffff\1\u008f\13\uffff\1\u00ad\1\uffff\1\u00c3\15\uffff"+
        "\1\u00ad\1\uffff\1\u00c5\17\uffff\1\0\1\uffff\1\0\15\uffff\1\0\1"+
        "\uffff\1\0\6\uffff";
    static final String DFA130_acceptS =
        "\2\uffff\1\2\4\uffff\1\4\1\5\1\6\1\7\4\uffff\1\3\5\uffff\1\3\7\uffff"+
        "\1\3\10\uffff\1\3\7\uffff\1\3\7\uffff\4\1\1\3\7\uffff\1\3\7\uffff"+
        "\1\3\7\uffff\1\3\10\uffff\1\1\1\3\7\uffff\1\3\7\uffff\1\3\7\uffff"+
        "\1\3\7\uffff";
    static final String DFA130_specialS =
        "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\7\uffff\1\6\15\uffff\1\7\1\uffff"+
        "\1\10\6\uffff\1\11\1\uffff\1\12\15\uffff\1\13\13\uffff\1\14\1\uffff"+
        "\1\15\15\uffff\1\16\1\uffff\1\17\17\uffff\1\20\1\uffff\1\21\15\uffff"+
        "\1\22\1\uffff\1\23\6\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\6\110\uffff\1\2\72\uffff\1\12\2\uffff\1\12\4\uffff\1\10\4"+
            "\uffff\1\1\2\uffff\1\3\1\4\1\uffff\1\5\1\uffff\1\7\3\uffff\1"+
            "\11\2\12",
            "\1\12\106\uffff\1\12\2\uffff\1\17\2\12\16\uffff\1\16\43\uffff"+
            "\1\12",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\25\2\12\16\uffff\1\12\43\uffff"+
            "\1\12",
            "\1\12\106\uffff\1\12\2\uffff\1\35\2\12\16\uffff\1\12\43\uffff"+
            "\1\12\24\uffff\1\34\1\36",
            "\1\12\106\uffff\1\12\2\uffff\1\46\2\12\16\uffff\1\12\43\uffff"+
            "\1\12\24\uffff\1\45\2\uffff\1\47",
            "\1\12\106\uffff\1\12\2\uffff\1\56\2\12\16\uffff\1\12\43\uffff"+
            "\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\65\u0090\uffff\1\67\2\uffff\1\66\1\70\1\uffff\1\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\72\2\12\16\uffff\1\12\43\uffff"+
            "\1\12",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\102\2\12\16\uffff\1\12\43\uffff"+
            "\1\12\24\uffff\1\101\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\112\2\12\16\uffff\1\12\43\uffff"+
            "\1\12",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\122\2\12\16\uffff\1\12\43\uffff"+
            "\1\12\24\uffff\1\121\2\uffff\1\123",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\24\uffff\1\133",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\134\2\12\16\uffff\1\12\43\uffff"+
            "\1\12",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\144\2\12\16\uffff\1\12\43\uffff"+
            "\1\12\24\uffff\1\143\1\145",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\154\2\12\16\uffff\1\12\43\uffff"+
            "\1\12",
            "",
            "\1\12\106\uffff\1\12\2\uffff\1\164\2\12\16\uffff\1\12\43\uffff"+
            "\1\12\24\uffff\1\163\2\uffff\1\165",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "821:1: type_declaration : ( ( type_decl_protocol_predicate )=> type_declaration_protocol | ( func_pointer_predicate )=> func_pointer | ( block_type_decl_predicate )=> block_type_decl | type_declaration_struct ( '&' )? ( '*' )? | type_declaration_enum ( '&' )? | type_declaration_union ( '&' )? | type_declaration_plane ( '&' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA130_0 = input.LA(1);

                         
                        int index130_0 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_0==191) ) {s = 1;}

                        else if ( (LA130_0==119) && (synpred27_Objc())) {s = 2;}

                        else if ( (LA130_0==194) ) {s = 3;}

                        else if ( (LA130_0==195) ) {s = 4;}

                        else if ( (LA130_0==197) ) {s = 5;}

                        else if ( (LA130_0==ID) ) {s = 6;}

                        else if ( (LA130_0==199) ) {s = 7;}

                        else if ( (LA130_0==186) ) {s = 8;}

                        else if ( (LA130_0==203) ) {s = 9;}

                        else if ( (LA130_0==178||LA130_0==181||(LA130_0 >= 204 && LA130_0 <= 205)) ) {s = 10;}

                         
                        input.seek(index130_0);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA130_1 = input.LA(1);

                         
                        int index130_1 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_1==137) ) {s = 14;}

                        else if ( (LA130_1==120) && (synpred28_Objc())) {s = 15;}

                        else if ( (LA130_1==ID||LA130_1==117||(LA130_1 >= 121 && LA130_1 <= 122)||LA130_1==173) ) {s = 10;}

                         
                        input.seek(index130_1);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA130_3 = input.LA(1);

                         
                        int index130_3 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_3==120) && (synpred28_Objc())) {s = 21;}

                        else if ( (LA130_3==ID||LA130_3==117||(LA130_3 >= 121 && LA130_3 <= 122)||LA130_3==137||LA130_3==173) ) {s = 10;}

                         
                        input.seek(index130_3);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA130_4 = input.LA(1);

                         
                        int index130_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_4==194) ) {s = 28;}

                        else if ( (LA130_4==120) && (synpred28_Objc())) {s = 29;}

                        else if ( (LA130_4==195) ) {s = 30;}

                        else if ( (LA130_4==ID||LA130_4==117||(LA130_4 >= 121 && LA130_4 <= 122)||LA130_4==137||LA130_4==173) ) {s = 10;}

                         
                        input.seek(index130_4);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA130_5 = input.LA(1);

                         
                        int index130_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_5==194) ) {s = 37;}

                        else if ( (LA130_5==120) && (synpred28_Objc())) {s = 38;}

                        else if ( (LA130_5==197) ) {s = 39;}

                        else if ( (LA130_5==ID||LA130_5==117||(LA130_5 >= 121 && LA130_5 <= 122)||LA130_5==137||LA130_5==173) ) {s = 10;}

                         
                        input.seek(index130_5);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA130_6 = input.LA(1);

                         
                        int index130_6 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_6==120) && (synpred28_Objc())) {s = 46;}

                        else if ( (LA130_6==ID||LA130_6==117||(LA130_6 >= 121 && LA130_6 <= 122)||LA130_6==137||LA130_6==173) ) {s = 10;}

                         
                        input.seek(index130_6);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA130_14 = input.LA(1);

                         
                        int index130_14 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_14==ID) ) {s = 53;}

                        else if ( (LA130_14==194) && (synpred26_Objc())) {s = 54;}

                        else if ( (LA130_14==191) && (synpred26_Objc())) {s = 55;}

                        else if ( (LA130_14==195) && (synpred26_Objc())) {s = 56;}

                        else if ( (LA130_14==197) && (synpred26_Objc())) {s = 57;}

                         
                        input.seek(index130_14);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA130_28 = input.LA(1);

                         
                        int index130_28 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_28==120) && (synpred28_Objc())) {s = 58;}

                        else if ( (LA130_28==ID||LA130_28==117||(LA130_28 >= 121 && LA130_28 <= 122)||LA130_28==137||LA130_28==173) ) {s = 10;}

                         
                        input.seek(index130_28);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA130_30 = input.LA(1);

                         
                        int index130_30 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_30==194) ) {s = 65;}

                        else if ( (LA130_30==120) && (synpred28_Objc())) {s = 66;}

                        else if ( (LA130_30==195) ) {s = 67;}

                        else if ( (LA130_30==ID||LA130_30==117||(LA130_30 >= 121 && LA130_30 <= 122)||LA130_30==137||LA130_30==173) ) {s = 10;}

                         
                        input.seek(index130_30);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA130_37 = input.LA(1);

                         
                        int index130_37 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_37==120) && (synpred28_Objc())) {s = 74;}

                        else if ( (LA130_37==ID||LA130_37==117||(LA130_37 >= 121 && LA130_37 <= 122)||LA130_37==137||LA130_37==173) ) {s = 10;}

                         
                        input.seek(index130_37);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA130_39 = input.LA(1);

                         
                        int index130_39 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_39==194) ) {s = 81;}

                        else if ( (LA130_39==120) && (synpred28_Objc())) {s = 82;}

                        else if ( (LA130_39==197) ) {s = 83;}

                        else if ( (LA130_39==ID||LA130_39==117||(LA130_39 >= 121 && LA130_39 <= 122)||LA130_39==137||LA130_39==173) ) {s = 10;}

                         
                        input.seek(index130_39);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA130_53 = input.LA(1);

                         
                        int index130_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_53==122) ) {s = 10;}

                        else if ( (LA130_53==143) && (synpred26_Objc())) {s = 91;}

                         
                        input.seek(index130_53);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA130_65 = input.LA(1);

                         
                        int index130_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_65==120) && (synpred28_Objc())) {s = 92;}

                        else if ( (LA130_65==ID||LA130_65==117||(LA130_65 >= 121 && LA130_65 <= 122)||LA130_65==137||LA130_65==173) ) {s = 10;}

                         
                        input.seek(index130_65);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA130_67 = input.LA(1);

                         
                        int index130_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_67==194) ) {s = 99;}

                        else if ( (LA130_67==120) && (synpred28_Objc())) {s = 100;}

                        else if ( (LA130_67==195) ) {s = 101;}

                        else if ( (LA130_67==ID||LA130_67==117||(LA130_67 >= 121 && LA130_67 <= 122)||LA130_67==137||LA130_67==173) ) {s = 10;}

                         
                        input.seek(index130_67);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA130_81 = input.LA(1);

                         
                        int index130_81 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_81==120) && (synpred28_Objc())) {s = 108;}

                        else if ( (LA130_81==ID||LA130_81==117||(LA130_81 >= 121 && LA130_81 <= 122)||LA130_81==137||LA130_81==173) ) {s = 10;}

                         
                        input.seek(index130_81);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA130_83 = input.LA(1);

                         
                        int index130_83 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA130_83==194) ) {s = 115;}

                        else if ( (LA130_83==120) && (synpred28_Objc())) {s = 116;}

                        else if ( (LA130_83==197) ) {s = 117;}

                        else if ( (LA130_83==ID||LA130_83==117||(LA130_83 >= 121 && LA130_83 <= 122)||LA130_83==137||LA130_83==173) ) {s = 10;}

                         
                        input.seek(index130_83);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA130_99 = input.LA(1);

                         
                        int index130_99 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 116;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index130_99);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA130_101 = input.LA(1);

                         
                        int index130_101 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 116;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index130_101);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA130_115 = input.LA(1);

                         
                        int index130_115 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 116;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index130_115);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA130_117 = input.LA(1);

                         
                        int index130_117 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred28_Objc()) ) {s = 116;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index130_117);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 130, _s, input);
            error(nvae);
            throw nvae;
        }

    }
    static final String DFA166_eotS =
        "\u0086\uffff";
    static final String DFA166_eofS =
        "\2\uffff\1\26\10\uffff\1\146\172\uffff";
    static final String DFA166_minS =
        "\1\26\1\56\1\20\1\uffff\2\20\3\uffff\1\56\1\uffff\1\26\44\uffff"+
        "\1\0\2\uffff\21\0\14\uffff\1\0\17\uffff\3\0\10\uffff\1\0\23\uffff"+
        "\1\0\3\uffff\2\0\1\uffff";
    static final String DFA166_maxS =
        "\1\26\1\56\1\u00d4\1\uffff\1\u00d4\1\u00c9\3\uffff\1\167\1\uffff"+
        "\1\u00d2\44\uffff\1\0\2\uffff\21\0\14\uffff\1\0\17\uffff\3\0\10"+
        "\uffff\1\0\23\uffff\1\0\3\uffff\2\0\1\uffff";
    static final String DFA166_acceptS =
        "\3\uffff\1\1\2\uffff\3\2\1\uffff\1\2\1\uffff\12\2\1\3\32\uffff\2"+
        "\1\21\uffff\1\1\13\2\1\uffff\16\2\4\uffff\10\2\1\uffff\23\2\1\uffff"+
        "\2\2\3\uffff\1\2";
    static final String DFA166_specialS =
        "\2\uffff\1\0\1\uffff\1\1\1\2\3\uffff\1\3\1\uffff\1\4\44\uffff\1"+
        "\5\2\uffff\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
        "\1\21\1\22\1\23\1\24\1\25\1\26\14\uffff\1\27\17\uffff\1\30\1\31"+
        "\1\32\10\uffff\1\33\23\uffff\1\34\3\uffff\1\35\1\36\1\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\1",
            "\1\2",
            "\1\17\5\uffff\1\26\27\uffff\1\13\21\uffff\1\26\2\uffff\1\20"+
            "\16\uffff\1\26\4\uffff\1\15\30\uffff\1\23\4\uffff\1\12\1\uffff"+
            "\1\4\2\uffff\1\14\1\uffff\1\26\1\25\2\uffff\1\5\1\25\1\uffff"+
            "\2\3\3\uffff\1\26\13\uffff\1\16\1\uffff\3\26\1\uffff\2\26\4"+
            "\uffff\1\11\2\uffff\1\10\1\uffff\1\26\3\uffff\1\26\1\21\1\uffff"+
            "\1\21\1\22\2\uffff\1\6\1\7\1\26\2\uffff\1\26\4\uffff\2\26\1"+
            "\21\2\uffff\1\26\2\uffff\2\26\1\uffff\3\26\1\uffff\1\21\4\26"+
            "\6\uffff\1\24",
            "",
            "\1\75\35\uffff\1\72\21\uffff\1\62\2\uffff\1\76\16\uffff\1\61"+
            "\4\uffff\1\73\30\uffff\1\101\4\uffff\1\71\1\uffff\1\64\1\uffff"+
            "\1\104\1\60\2\uffff\1\103\2\uffff\1\63\1\103\22\uffff\1\74\13"+
            "\uffff\1\70\2\uffff\1\67\6\uffff\1\77\1\uffff\1\77\1\100\2\uffff"+
            "\1\65\1\66\1\106\2\uffff\1\110\4\uffff\1\117\1\uffff\1\77\2"+
            "\uffff\1\105\2\uffff\1\112\1\113\1\uffff\1\114\1\uffff\1\115"+
            "\1\uffff\1\77\1\uffff\1\116\1\111\1\107\6\uffff\1\102",
            "\1\132\35\uffff\1\126\24\uffff\1\133\23\uffff\1\130\35\uffff"+
            "\1\125\1\uffff\1\120\2\uffff\1\127\31\uffff\1\131\13\uffff\1"+
            "\124\2\uffff\1\123\6\uffff\1\134\1\uffff\1\134\1\135\2\uffff"+
            "\1\121\1\122\12\uffff\1\134\14\uffff\1\134",
            "",
            "",
            "",
            "\1\26\110\uffff\1\136",
            "",
            "\1\170\27\uffff\1\153\21\uffff\1\174\21\uffff\1\173\36\uffff"+
            "\1\u0085\1\uffff\2\u0085\1\u0084\1\uffff\1\142\1\26\1\uffff"+
            "\1\u0083\1\uffff\1\144\1\143\2\uffff\1\144\1\143\1\uffff\2\141"+
            "\1\u0085\2\uffff\1\175\1\177\1\u0085\1\uffff\6\u0085\1\uffff"+
            "\1\145\2\uffff\1\164\1\u0081\1\176\1\uffff\1\163\1\166\4\uffff"+
            "\1\165\4\uffff\1\u0080\3\uffff\1\167\3\uffff\1\140\2\uffff\1"+
            "\u0085\1\uffff\1\157\2\uffff\1\161\4\uffff\1\155\1\167\3\uffff"+
            "\1\150\2\uffff\1\147\1\151\1\uffff\1\152\1\172\1\154\2\uffff"+
            "\1\171\1\156\1\162\1\160\2\uffff\1\u0085\1\uffff\1\u0085",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "971:1: define_declaration : ( ( DEFINE_LITERAL classical_method_call_wrapper '\\\\' )=> define_as_function | ( DEFINE_LITERAL name element_value )=> DEFINE_LITERAL name element_value -> ^( DEFINE name element_value ) | DEFINE_LITERAL name -> ^( DEFINE name ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_2 = input.LA(1);

                         
                        int index166_2 = input.index();
                        input.rewind();

                        s = -1;
                        if ( ((LA166_2 >= 131 && LA166_2 <= 132)) && (synpred32_Objc())) {s = 3;}

                        else if ( (LA166_2==119) ) {s = 4;}

                        else if ( (LA166_2==128) ) {s = 5;}

                        else if ( (LA166_2==176) && (synpred33_Objc())) {s = 6;}

                        else if ( (LA166_2==177) && (synpred33_Objc())) {s = 7;}

                        else if ( (LA166_2==163) && (synpred33_Objc())) {s = 8;}

                        else if ( (LA166_2==160) ) {s = 9;}

                        else if ( (LA166_2==117) && (synpred33_Objc())) {s = 10;}

                        else if ( (LA166_2==ID) ) {s = 11;}

                        else if ( (LA166_2==122) && (synpred33_Objc())) {s = 12;}

                        else if ( (LA166_2==STRING_LITERAL) && (synpred33_Objc())) {s = 13;}

                        else if ( (LA166_2==148) && (synpred33_Objc())) {s = 14;}

                        else if ( (LA166_2==CHAR_LITERAL) && (synpred33_Objc())) {s = 15;}

                        else if ( (LA166_2==NUMBER_LITERAL) && (synpred33_Objc())) {s = 16;}

                        else if ( (LA166_2==170||LA166_2==172||LA166_2==188||LA166_2==201) && (synpred33_Objc())) {s = 17;}

                        else if ( (LA166_2==173) && (synpred33_Objc())) {s = 18;}

                        else if ( (LA166_2==112) && (synpred33_Objc())) {s = 19;}

                        else if ( (LA166_2==212) && (synpred33_Objc())) {s = 20;}

                        else if ( (LA166_2==125||LA166_2==129) && (synpred33_Objc())) {s = 21;}

                        else if ( (LA166_2==EOF||LA166_2==DEFINE_LITERAL||LA166_2==MULTI_COMMENT_LIT||LA166_2==SINGLE_COMMENT_LIT||LA166_2==124||LA166_2==136||(LA166_2 >= 150 && LA166_2 <= 152)||(LA166_2 >= 154 && LA166_2 <= 155)||LA166_2==165||LA166_2==169||LA166_2==178||LA166_2==181||(LA166_2 >= 186 && LA166_2 <= 187)||LA166_2==191||(LA166_2 >= 194 && LA166_2 <= 195)||(LA166_2 >= 197 && LA166_2 <= 199)||(LA166_2 >= 202 && LA166_2 <= 205)) ) {s = 22;}

                         
                        input.seek(index166_2);

                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA166_4 = input.LA(1);

                         
                        int index166_4 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA166_4==122) ) {s = 48;}

                        else if ( (LA166_4==SINGLE_COMMENT_LIT) && (synpred32_Objc())) {s = 49;}

                        else if ( (LA166_4==MULTI_COMMENT_LIT) && (synpred32_Objc())) {s = 50;}

                        else if ( (LA166_4==128) ) {s = 51;}

                        else if ( (LA166_4==119) ) {s = 52;}

                        else if ( (LA166_4==176) ) {s = 53;}

                        else if ( (LA166_4==177) ) {s = 54;}

                        else if ( (LA166_4==163) ) {s = 55;}

                        else if ( (LA166_4==160) ) {s = 56;}

                        else if ( (LA166_4==117) ) {s = 57;}

                        else if ( (LA166_4==ID) ) {s = 58;}

                        else if ( (LA166_4==STRING_LITERAL) ) {s = 59;}

                        else if ( (LA166_4==148) ) {s = 60;}

                        else if ( (LA166_4==CHAR_LITERAL) ) {s = 61;}

                        else if ( (LA166_4==NUMBER_LITERAL) ) {s = 62;}

                        else if ( (LA166_4==170||LA166_4==172||LA166_4==188||LA166_4==201) ) {s = 63;}

                        else if ( (LA166_4==173) ) {s = 64;}

                        else if ( (LA166_4==112) ) {s = 65;}

                        else if ( (LA166_4==212) ) {s = 66;}

                        else if ( (LA166_4==125||LA166_4==129) ) {s = 67;}

                        else if ( (LA166_4==121) && (synpred32_Objc())) {s = 68;}

                        else if ( (LA166_4==191) && (synpred33_Objc())) {s = 69;}

                        else if ( (LA166_4==178) && (synpred33_Objc())) {s = 70;}

                        else if ( (LA166_4==205) && (synpred33_Objc())) {s = 71;}

                        else if ( (LA166_4==181) && (synpred33_Objc())) {s = 72;}

                        else if ( (LA166_4==204) && (synpred33_Objc())) {s = 73;}

                        else if ( (LA166_4==194) && (synpred33_Objc())) {s = 74;}

                        else if ( (LA166_4==195) && (synpred33_Objc())) {s = 75;}

                        else if ( (LA166_4==197) && (synpred33_Objc())) {s = 76;}

                        else if ( (LA166_4==199) && (synpred33_Objc())) {s = 77;}

                        else if ( (LA166_4==203) && (synpred33_Objc())) {s = 78;}

                        else if ( (LA166_4==186) && (synpred33_Objc())) {s = 79;}

                         
                        input.seek(index166_4);

                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA166_5 = input.LA(1);

                         
                        int index166_5 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA166_5==119) ) {s = 80;}

                        else if ( (LA166_5==176) && (synpred33_Objc())) {s = 81;}

                        else if ( (LA166_5==177) && (synpred33_Objc())) {s = 82;}

                        else if ( (LA166_5==163) && (synpred33_Objc())) {s = 83;}

                        else if ( (LA166_5==160) && (synpred33_Objc())) {s = 84;}

                        else if ( (LA166_5==117) && (synpred33_Objc())) {s = 85;}

                        else if ( (LA166_5==ID) && (synpred33_Objc())) {s = 86;}

                        else if ( (LA166_5==122) && (synpred33_Objc())) {s = 87;}

                        else if ( (LA166_5==STRING_LITERAL) && (synpred33_Objc())) {s = 88;}

                        else if ( (LA166_5==148) && (synpred33_Objc())) {s = 89;}

                        else if ( (LA166_5==CHAR_LITERAL) && (synpred33_Objc())) {s = 90;}

                        else if ( (LA166_5==NUMBER_LITERAL) && (synpred33_Objc())) {s = 91;}

                        else if ( (LA166_5==170||LA166_5==172||LA166_5==188||LA166_5==201) && (synpred33_Objc())) {s = 92;}

                        else if ( (LA166_5==173) && (synpred33_Objc())) {s = 93;}

                         
                        input.seek(index166_5);

                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA166_9 = input.LA(1);

                         
                        int index166_9 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA166_9==119) && (synpred33_Objc())) {s = 94;}

                        else if ( (LA166_9==ID) ) {s = 22;}

                         
                        input.seek(index166_9);

                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA166_11 = input.LA(1);

                         
                        int index166_11 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (LA166_11==173) ) {s = 96;}

                        else if ( ((LA166_11 >= 131 && LA166_11 <= 132)) ) {s = 97;}

                        else if ( (LA166_11==119) ) {s = 98;}

                        else if ( (LA166_11==125||LA166_11==129) && (synpred33_Objc())) {s = 99;}

                        else if ( (LA166_11==124||LA166_11==128) && (synpred33_Objc())) {s = 100;}

                        else if ( (LA166_11==147) && (synpred33_Objc())) {s = 101;}

                        else if ( (LA166_11==EOF) && (synpred33_Objc())) {s = 102;}

                        else if ( (LA166_11==194) && (synpred33_Objc())) {s = 103;}

                        else if ( (LA166_11==191) && (synpred33_Objc())) {s = 104;}

                        else if ( (LA166_11==195) && (synpred33_Objc())) {s = 105;}

                        else if ( (LA166_11==197) && (synpred33_Objc())) {s = 106;}

                        else if ( (LA166_11==ID) ) {s = 107;}

                        else if ( (LA166_11==199) && (synpred33_Objc())) {s = 108;}

                        else if ( (LA166_11==186) && (synpred33_Objc())) {s = 109;}

                        else if ( (LA166_11==203) && (synpred33_Objc())) {s = 110;}

                        else if ( (LA166_11==178) && (synpred33_Objc())) {s = 111;}

                        else if ( (LA166_11==205) && (synpred33_Objc())) {s = 112;}

                        else if ( (LA166_11==181) && (synpred33_Objc())) {s = 113;}

                        else if ( (LA166_11==204) && (synpred33_Objc())) {s = 114;}

                        else if ( (LA166_11==154) && (synpred33_Objc())) {s = 115;}

                        else if ( (LA166_11==150) && (synpred33_Objc())) {s = 116;}

                        else if ( (LA166_11==160) && (synpred33_Objc())) {s = 117;}

                        else if ( (LA166_11==155) && (synpred33_Objc())) {s = 118;}

                        else if ( (LA166_11==169||LA166_11==187) && (synpred33_Objc())) {s = 119;}

                        else if ( (LA166_11==DEFINE_LITERAL) && (synpred33_Objc())) {s = 120;}

                        else if ( (LA166_11==202) && (synpred33_Objc())) {s = 121;}

                        else if ( (LA166_11==198) && (synpred33_Objc())) {s = 122;}

                        else if ( (LA166_11==SINGLE_COMMENT_LIT) && (synpred33_Objc())) {s = 123;}

                        else if ( (LA166_11==MULTI_COMMENT_LIT) && (synpred33_Objc())) {s = 124;}

                        else if ( (LA166_11==136) && (synpred33_Objc())) {s = 125;}

                        else if ( (LA166_11==152) && (synpred33_Objc())) {s = 126;}

                        else if ( (LA166_11==137) ) {s = 127;}

                        else if ( (LA166_11==165) && (synpred33_Objc())) {s = 128;}

                        else if ( (LA166_11==151) && (synpred33_Objc())) {s = 129;}

                        else if ( (LA166_11==120) ) {s = 22;}

                        else if ( (LA166_11==122) ) {s = 131;}

                        else if ( (LA166_11==117) ) {s = 132;}

                        else if ( (LA166_11==113||(LA166_11 >= 115 && LA166_11 <= 116)||LA166_11==133||LA166_11==138||(LA166_11 >= 140 && LA166_11 <= 145)||LA166_11==176||LA166_11==208||LA166_11==210) && (synpred33_Objc())) {s = 133;}

                         
                        input.seek(index166_11);

                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA166_48 = input.LA(1);

                         
                        int index166_48 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_48);

                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA166_51 = input.LA(1);

                         
                        int index166_51 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_51);

                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA166_52 = input.LA(1);

                         
                        int index166_52 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_52);

                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA166_53 = input.LA(1);

                         
                        int index166_53 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_53);

                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA166_54 = input.LA(1);

                         
                        int index166_54 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_54);

                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA166_55 = input.LA(1);

                         
                        int index166_55 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_55);

                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA166_56 = input.LA(1);

                         
                        int index166_56 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_56);

                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA166_57 = input.LA(1);

                         
                        int index166_57 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_57);

                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA166_58 = input.LA(1);

                         
                        int index166_58 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_58);

                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA166_59 = input.LA(1);

                         
                        int index166_59 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_59);

                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA166_60 = input.LA(1);

                         
                        int index166_60 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_60);

                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA166_61 = input.LA(1);

                         
                        int index166_61 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_61);

                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA166_62 = input.LA(1);

                         
                        int index166_62 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_62);

                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA166_63 = input.LA(1);

                         
                        int index166_63 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_63);

                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA166_64 = input.LA(1);

                         
                        int index166_64 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_64);

                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA166_65 = input.LA(1);

                         
                        int index166_65 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_65);

                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA166_66 = input.LA(1);

                         
                        int index166_66 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_66);

                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA166_67 = input.LA(1);

                         
                        int index166_67 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred32_Objc()) ) {s = 68;}

                        else if ( (synpred33_Objc()) ) {s = 133;}

                         
                        input.seek(index166_67);

                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA166_80 = input.LA(1);

                         
                        int index166_80 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_80);

                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA166_96 = input.LA(1);

                         
                        int index166_96 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_96);

                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA166_97 = input.LA(1);

                         
                        int index166_97 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_97);

                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA166_98 = input.LA(1);

                         
                        int index166_98 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_98);

                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA166_107 = input.LA(1);

                         
                        int index166_107 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_107);

                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA166_127 = input.LA(1);

                         
                        int index166_127 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_127);

                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA166_131 = input.LA(1);

                         
                        int index166_131 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_131);

                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA166_132 = input.LA(1);

                         
                        int index166_132 = input.index();
                        input.rewind();

                        s = -1;
                        if ( (synpred33_Objc()) ) {s = 133;}

                        else if ( (true) ) {s = 22;}

                         
                        input.seek(index166_132);

                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}

            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }

    }
 

    public static final BitSet FOLLOW_code_internal_in_code483 = new BitSet(new long[]{0x0000400000400002L,0x0080000000040001L,0x8C2402010C400100L,0x0000000000003CECL});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_code_internal514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_wrapper_in_code_internal519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forward_class_declaration_in_code_internal524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_wrapper_in_code_internal530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_wrapper_in_code_internal537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_wrapper_in_code_internal544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_code_internal550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_code_internal556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_code_internal562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_enum_union_anonymous_in_code_internal568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_code_internal574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_code_internal580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_single_comment_in_comments592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multi_comment_in_comments598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SINGLE_COMMENT_LIT_in_single_comment613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MULTI_COMMENT_LIT_in_multi_comment635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_c_in_extern_wrapper664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_extern_c688 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_114_in_extern_c691 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_extern_c694 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFDFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0x00000000001FFFFFL});
    public static final BitSet FOLLOW_set_in_extern_c696 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_extern_c701 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_in_implementation_wrapper718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_implementation737 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_implementation740 = new BitSet(new long[]{0x0000400000400000L,0x1080000000040001L,0x8424002001800101L,0x0000000000003CECL});
    public static final BitSet FOLLOW_category_in_implementation743 = new BitSet(new long[]{0x0000400000400000L,0x1080000000040001L,0x8424002001800101L,0x0000000000003CECL});
    public static final BitSet FOLLOW_implementation_body_in_implementation748 = new BitSet(new long[]{0x0000400000400000L,0x1080000000040001L,0x8424002001800101L,0x0000000000003CECL});
    public static final BitSet FOLLOW_152_in_implementation753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_implementation_body772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implementation_method_wrapper_in_implementation_body778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_directives_in_implementation_body784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_declaration_in_implementation_body790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_implementation_body795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_implementation_body800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_implementation_body806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_implementation_body812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_implementation_body817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synthesize_in_directives828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_165_in_synthesize850 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_151_in_synthesize854 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_synthesize858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002100L});
    public static final BitSet FOLLOW_141_in_synthesize861 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synthesize863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synthesize867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_198_in_static_declaration_wrapper891 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_field_declaration_in_static_declaration_wrapper893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_block_call_predicate913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_block_call_predicate919 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_call_predicate921 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call_predicate923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_block_call_predicate930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_block_call_predicate932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_block_type_decl_predicate948 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_type_decl_predicate951 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_type_decl_predicate952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_block_type_decl972 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_type_decl975 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_type_decl976 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_type_decl977 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_block_params_in_block_type_decl979 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_type_decl982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_block_decl_predicate1004 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_decl_predicate1007 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_decl_predicate1009 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_decl_predicate1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_block_decl1029 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_block_decl1032 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_decl1034 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_decl1036 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_decl1037 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_block_params_in_block_decl1039 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_decl1042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_block_decl1043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0003000000000000L});
    public static final BitSet FOLLOW_block_call_in_block_decl1045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_in_block_call_wrapper1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_block_call1087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_block_call1089 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0xE76C20D000000100L,0x000000000008F9FDL});
    public static final BitSet FOLLOW_block_internal_in_block_call1091 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0xE76C20D000000100L,0x000000000008F9FDL});
    public static final BitSet FOLLOW_211_in_block_call1094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_block_call1115 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_block_params_in_block_call1117 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_call1120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call1123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_block_call1131 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_block_call1133 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_block_call1135 = new BitSet(new long[]{0x0000400000000000L,0x0280000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_block_params_in_block_call1137 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_block_call1140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_call1143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_in_synchronized_call_wrapper1157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_synchronized_call1180 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synchronized_call1182 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_synchronized_call1184 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_synchronized_call1186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_synchronized_call1188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_param_in_block_params1204 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_block_params1207 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_classical_param_in_block_params1209 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_block_multiline_in_block1238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block1250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_block_multiline1272 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0xE76C60D000000100L,0x000000000008F9FDL});
    public static final BitSet FOLLOW_block_internal_macro_in_block_multiline1277 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0xE76C60D000000100L,0x000000000008F9FDL});
    public static final BitSet FOLLOW_211_in_block_multiline1284 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_in_block_multiline_wrapper1296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_in_block_singleline_wrapper1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_singleline1344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_singleline1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_singleline1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_singleline1359 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_singleline1364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_singleline1369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_singleline1374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_singleline1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_singleline1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_block_singleline1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_singleline1395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_singleline1401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_singleline1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_singleline1412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_singleline1417 = new BitSet(new long[]{0x0000000000000002L,0x4840000000000000L,0x000000000004285CL,0x0000000000020000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_singleline1421 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_singleline1423 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x000000000004285CL,0x0000000000020000L});
    public static final BitSet FOLLOW_op_assign_in_block_singleline1427 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_block_singleline1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_singleline1437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_block_internal_macro1449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_internal_in_block_internal_macro1455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_block_internal1475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_block_internal1488 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_block_internal1490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_block_internal1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_declaration_wrapper_in_block_internal1510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_synchronized_call_wrapper_in_block_internal1516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_wrapper_in_block_internal1522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_wrapper_in_block_internal1527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_static_declaration_wrapper_in_block_internal1532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_do_stmt_in_block_internal1537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_block_internal1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_stmt_in_block_internal1547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switch_stmt_in_block_internal1552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_block_internal1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_wrapper_in_block_internal1562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_wrapper_in_block_internal1567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_block_internal1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_block_internal1577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_block_internal1582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_goto_stmt_in_block_internal1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_block_internal1592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_block_internal1598 = new BitSet(new long[]{0x0000000000000002L,0x4840000000000000L,0x000000000004285CL,0x0000000000020000L});
    public static final BitSet FOLLOW_access_wrapper_in_block_internal1602 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_block_internal1604 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x000000000004285CL,0x0000000000020000L});
    public static final BitSet FOLLOW_op_assign_in_block_internal1608 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_block_internal1610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_block_internal1618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_goto_stmt1630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_goto_stmt1632 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_goto_stmt1634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_goto_stmt1636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_while_stmt_wrapper1659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_206_in_while_stmt1682 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_while_stmt1684 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_while_stmt1686 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_while_stmt1688 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_while_stmt1690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_for_in_stmt1705 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_for_in_stmt1707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_for_classic_stmt1730 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100103L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_for_classic_stmt1735 = new BitSet(new long[]{0x0000400000010002L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_for_classic_stmt1737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1762 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1764 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_for_stmt_body1779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1781 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1783 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_wrapper_in_for_stmt_body1799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1801 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1803 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_simple_in_for_stmt_body1811 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000020002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_for_stmt_body1815 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_for_stmt_body1817 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_for_classic_stmt_in_for_stmt_body1819 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_for_in_stmt_in_for_stmt_body1824 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_for_stmt_body1827 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_for_stmt_body1829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_for_stmt1842 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_for_stmt1844 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_for_stmt_body_in_for_stmt1846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_for_stmt_wrapper1859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_196_in_return_stmt1882 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100103L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_or_semicolon_in_return_stmt1884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_switch_stmt1907 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_switch_stmt1909 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_switch_stmt1911 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_switch_stmt1913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_switch_stmt1915 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x63D8201000000100L,0x000000000008C111L});
    public static final BitSet FOLLOW_switch_body_in_switch_stmt1918 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x63D8201000000100L,0x000000000008C111L});
    public static final BitSet FOLLOW_211_in_switch_stmt1922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_case_stmt_in_switch_body1948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_default_stmt_in_switch_body1954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_switch_body1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_switch_body1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_case_stmt1981 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000008L,0x0000000000000001L});
    public static final BitSet FOLLOW_name_number_in_case_stmt1983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_case_stmt1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_183_in_default_stmt2008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_default_stmt2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_do_stmt2031 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_do_stmt2033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_206_in_do_stmt2035 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_do_stmt2037 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_do_stmt2039 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_do_stmt2041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_192_in_if_stmt2066 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_if_stmt2068 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_if_stmt2070 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_if_stmt2072 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_if_stmt2074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_else_stmt2097 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_else_stmt2099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_try_stmt_wrapper2121 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_try_stmt_wrapper2124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_catch_stmt_in_try_stmt_wrapper2127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000002200000L});
    public static final BitSet FOLLOW_finally_stmt_in_try_stmt_wrapper2130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_catch_stmt2156 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_catch_stmt2159 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2162 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_catch_stmt2165 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_catch_stmt2167 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_catch_stmt2170 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_catch_stmt2173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_finally_stmt2197 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_block_in_finally_stmt2200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_throw_stmt_in_throw_stmt_wrapper2219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_166_in_throw_stmt2238 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_throw_stmt2240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_throw_stmt2242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name2253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_name_number2273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_name_number2287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_name_number2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_variable_declaration_wrapper2316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variable_assignment_in_variable_assignment_wrapper2339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_assignment2362 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000020000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_variable_assignment2364 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_variable_assignment2366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2387 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_variable_increment2395 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L});
    public static final BitSet FOLLOW_object_access_wrapper_in_variable_increment2397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_implementation2412 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_implementation_common_in_method_implementation2414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_method_implementation_common2427 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_type_declaration_in_method_implementation_common2429 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_implementation_common2431 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_implementation_common2433 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_method_params_in_method_implementation_common2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_implementation_in_implementation_method_wrapper2448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_implementation_method_wrapper2452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_method_call_in_classical_method_call_wrapper2475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2496 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_clasical_method_call_predicate2499 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_clasical_method_call_predicate2501 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_clasical_method_call_predicate2505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_classical_method_call2520 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_classical_method_call2523 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_classical_method_call2525 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_classical_method_call2530 = new BitSet(new long[]{0x0000400000010000L,0x26A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_classical_method_params_push_in_classical_method_call2532 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_classical_method_call2535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2550 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_classical_method_params_push2553 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_method_param_push_in_classical_method_params_push2555 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2579 = new BitSet(new long[]{0x0000400000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_prefix_in_method_params_push2584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_method_params_push2586 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_127_in_method_params_push2591 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_method_param_push_in_method_params_push2594 = new BitSet(new long[]{0x0000400000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_comments_in_method_param_push2615 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_method_param_push2618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040001L});
    public static final BitSet FOLLOW_comments_in_method_param_push2620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_method_msg2649 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_method_msg2651 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_msg2653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000080L});
    public static final BitSet FOLLOW_135_in_method_msg2656 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_method_params_push_in_method_msg2658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_method_msg2662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_questionmark_if_stmt2688 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_questionmark_if_stmt2692 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_comments_in_questionmark_if_stmt2694 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_questionmark_if_stmt2697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_in_element_value2725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_element_value_or_semicolon2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_semicolon2756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_array_init2773 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000108200L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2776 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_array_init2779 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000108200L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_array_init2781 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_207_in_element_value_or_array_init2798 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000188200L});
    public static final BitSet FOLLOW_array_init_in_element_value_or_array_init2800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_element_value_or_array_init2803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040001L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_element_value_or_array_init2824 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_element_value_or_array_init2827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_simple_expression2862 = new BitSet(new long[]{0x0000000000000002L,0x143A000000000000L,0x00010000000BF621L,0x0000000000050000L});
    public static final BitSet FOLLOW_op2_unary_expression_or_questionmark_if_stmt_in_simple_expression2864 = new BitSet(new long[]{0x0000000000000002L,0x143A000000000000L,0x00010000000BF621L,0x0000000000050000L});
    public static final BitSet FOLLOW_128_in_cast_unary_expression12879 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x1003340900100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression12881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_unary_expression_in_cast_unary_expression12895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_wrapper_in_op2_unary_expression_or_questionmark_if_stmt2909 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_cast_unary_expression1_in_op2_unary_expression_or_questionmark_if_stmt2911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_questionmark_if_stmt_in_op2_unary_expression_or_questionmark_if_stmt2918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2931 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_cast_unary_expression2940 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x1003340900100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_212_in_cast_unary_expression2956 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x1003340900100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_unary_expression2972 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x1003340900100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_cast_expression_in_cast_unary_expression2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression2992 = new BitSet(new long[]{0x0000400000010000L,0x24A0000000800008L,0x1003340900100002L,0x0000000000000200L});
    public static final BitSet FOLLOW_increment_decrement_in_cast_expression2994 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x1003340900100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_cast_expression3016 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_expression3018 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x1003340900100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3020 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_cast_expression3022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_expression3025 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_simple_name_or_classical_function_call_in_cast_expression3027 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_cast_expression3035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call3056 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_name_or_classical_function_call3059 = new BitSet(new long[]{0x0000400000010000L,0x26A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_name_or_classical_function_call3061 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_name_or_classical_function_call3064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_name_or_classical_function_call3071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_wrapper_in_simple_expression_value_access3092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_wrapper_in_simple_expression_value_access3098 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access3100 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3102 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_simple_expression_value_access3105 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_simple_expression_value_access3110 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value_access3116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_simple_expression_value_access3122 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access3124 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3126 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value_access3128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access3157 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access3160 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value_access3162 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_simple_expression_value_access3167 = new BitSet(new long[]{0x0000400000010000L,0x26A1000000840009L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_classical_method_params_push_in_simple_expression_value_access3169 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value_access3172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value2_in_simple_expression_value_access3179 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_simple_expression_value_access3182 = new BitSet(new long[]{0x0000400000010000L,0x0420000000800008L,0x1000140000100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value_access3184 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_117_in_simple_expression_value3211 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_simple_expression_value3216 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value3218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_simple_expression_value3220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_simple_expression_value3248 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_simple_expression_value3259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_objc_in_simple_expression_value3264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHAR_LITERAL_in_simple_expression_value3269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_simple_expression_value3282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_bool_in_simple_expression_value3295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_simple_expression_value3309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_simple_expression_value23322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_msg_in_simple_expression_value23328 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_simple_expression_value23334 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_simple_expression_value23336 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_simple_expression_value23338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op2_in_op2_wrapper3352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_in_op_assign_wrapper3457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selector_in_selector_wrapper3525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_selector3548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_name_in_type_cast_wrapper3563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_type_cast_name3586 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_type_cast_declaration_in_type_cast_name3588 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_type_cast_name3590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_cast_declaration3608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_type_cast_declaration3614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_access_in_access_wrapper3642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_in_object_access_simple_wrapper3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_object_access_simple3682 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_object_access_simple3685 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_object_access_simple3687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_object_access_in_object_access_wrapper3704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_cast_lvalue_in_object_access3724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3742 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_cast_lvalue3757 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_cast_lvalue3759 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000000000L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3761 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_cast_lvalue3763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_cast_lvalue3766 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_cast_lvalue3768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_lvalue_access_in_cast_lvalue3776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3789 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3792 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_lvalue_access3802 = new BitSet(new long[]{0x0000400000000000L,0x0420000000000000L});
    public static final BitSet FOLLOW_lvalue_in_lvalue_access3804 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_lvalue_access3806 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_lvalue_access3809 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue_access3811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_117_in_lvalue3838 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_lvalue3843 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_lvalue3845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_lvalue3847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lvalue3863 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_lvalue3869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_lvalue3875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_break_stmt3891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_continue_stmt3912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_declaration_in_extern_declaration_wrapper3963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_extern_in_extern_declaration3984 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_field_declaration_in_extern_declaration3986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_optional_prefix_in_declarations4012 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_method_declaration_in_declarations4015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_property_prefix_in_declarations4029 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000410000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_optional_prefix_in_declarations4031 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_field_declaration_in_declarations4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_declarations4050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_field_declaration_wrapper4065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_ns_inline4087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_158_in_property_prefix4099 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_property_prefix4101 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4103 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_property_prefix4106 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4108 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_127_in_property_prefix4113 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4115 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_141_in_property_prefix4118 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_property_prefix4120 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_property_prefix4122 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_121_in_property_prefix4129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interface_declaration_in_interface_declaration_wrapper4142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_protocol_declaration_in_protocol_declaration_wrapper4162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_typedef_declaration_wrapper4180 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_typedef_declaration_in_typedef_declaration_wrapper4182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct_enum_union_anonymous4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_struct_enum_union_anonymous4209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_struct_enum_union_anonymous4215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typedef_internal_in_typedef_declaration4230 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4232 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_127_in_typedef_declaration4235 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_typedef_declaration4237 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_typedef_declaration4241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_func_pointer_predicate4253 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_func_pointer_predicate4255 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8024000000000000L,0x000000000000302CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer_predicate4257 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer_predicate4259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_func_pointer4274 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_func_pointer4276 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8024000000000000L,0x000000000000302CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4278 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer4280 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_func_pointer4282 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L,0x8024000000000000L,0x000000000000302CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4285 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_127_in_func_pointer4288 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8024000000000000L,0x000000000000302CL});
    public static final BitSet FOLLOW_type_declaration_plane_in_func_pointer4290 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_121_in_func_pointer4296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_typedef_internal4325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_typedef_internal4331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_typedef_internal4337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_typedef_internal4343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_typedef_internal4349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_typedef_name4364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_forward_class_declaration4382 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_class_name_in_forward_class_declaration4384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_forward_class_declaration4399 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_forward_class_declaration4401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_forward_class_declaration4416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_forward_class_declaration4431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_forward_class_declaration4446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_forward_class_declaration4448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_class_name4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_protocol_declaration4488 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_protocol_name_in_protocol_declaration4490 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000000451000201L});
    public static final BitSet FOLLOW_implements_interfaces_in_protocol_declaration4492 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000000451000001L});
    public static final BitSet FOLLOW_class_protocol_end_in_protocol_declaration4500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_declarations_in_class_protocol_end4514 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000000451000001L});
    public static final BitSet FOLLOW_152_in_class_protocol_end4521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_template4533 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_template_internal_in_template4535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_template4537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_implements_protocols_in_implements_interfaces4546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_implements_protocols4571 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000002CL});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4573 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_127_in_implements_protocols4576 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000002CL});
    public static final BitSet FOLLOW_type_dec_internal_in_implements_protocols4578 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_implements_protocols4582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_template_type_in_template_internal4604 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_template_internal4607 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_template_type_in_template_internal4609 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_template_type4629 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_template_name_in_template_type4631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_template_name4646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_protocol_name4669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_155_in_interface_declaration4693 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_interface_name_in_interface_declaration4695 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000000451000281L,0x0000000000008000L});
    public static final BitSet FOLLOW_superclass_name_in_interface_declaration4697 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000000451000001L,0x0000000000008000L});
    public static final BitSet FOLLOW_fields_body_in_interface_declaration4701 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000000451000001L});
    public static final BitSet FOLLOW_declarations_in_interface_declaration4706 = new BitSet(new long[]{0x0000000000000000L,0x1000000000040001L,0x0000000451000001L});
    public static final BitSet FOLLOW_152_in_interface_declaration4711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_fields_body4728 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x84240102A0000000L,0x0000000000083CACL});
    public static final BitSet FOLLOW_body_item_in_fields_body4734 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x84240102A0000000L,0x0000000000083CACL});
    public static final BitSet FOLLOW_211_in_fields_body4739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_wrapper_in_body_item4754 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424010000000000L,0x0000000000003CACL});
    public static final BitSet FOLLOW_field_modifiers_in_body_item4757 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x0000000000003CACL});
    public static final BitSet FOLLOW_typedef_declaration_wrapper_in_body_item4761 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_body_item4765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_body_item4772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_group_modifier_in_group_modifier_wrapper4785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_field_modifiers4830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_interface_name4845 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L});
    public static final BitSet FOLLOW_category_in_interface_name4847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_category4866 = new BitSet(new long[]{0x0000400000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_ID_in_category4868 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_category4871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_superclass_name4891 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_superclass_name4893 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_implements_interfaces_in_superclass_name4897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_in_fields_declarations4926 = new BitSet(new long[]{0x0000400000000002L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_block_decl_in_field_declaration4953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration4961 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4963 = new BitSet(new long[]{0x0000000000000000L,0xC8C0000000000000L,0x0000000000042944L,0x0000000000020000L});
    public static final BitSet FOLLOW_127_in_field_declaration4967 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration4969 = new BitSet(new long[]{0x0000000000000000L,0xC8C0000000000000L,0x0000000000042944L,0x0000000000020000L});
    public static final BitSet FOLLOW_classical_method_params_in_field_declaration4976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L,0x0000000000008000L});
    public static final BitSet FOLLOW_136_in_field_declaration4979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_multiline_wrapper_in_field_declaration4983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_field_declaration4990 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000840009L,0x1003340900100003L,0x0000000000108200L});
    public static final BitSet FOLLOW_element_value_or_array_init_in_field_declaration4992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_field_declaration4994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_field_declaration5000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_field_declaration_simple5015 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_field_declaration_simple5017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_classical_method_params5042 = new BitSet(new long[]{0x0000400000000000L,0x8280000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params5044 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_127_in_classical_method_params5048 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_classical_param_in_classical_method_params5050 = new BitSet(new long[]{0x0000000000000000L,0x8200000000000000L});
    public static final BitSet FOLLOW_121_in_classical_method_params5054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classical_type_declaration_in_classical_param5079 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_classical_param5081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_classical_type_declaration5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_classical_type_declaration5121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_classical_type_declaration5127 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_classical_type_declaration5137 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000002CL});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5139 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_classical_type_declaration5158 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000002CL});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5160 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_classical_type_declaration5179 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000002CL});
    public static final BitSet FOLLOW_type_dec_wrapper_in_classical_type_declaration5181 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_classical_type_declaration5183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_protocol_in_type_declaration5212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_in_type_declaration5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_type_decl_in_type_declaration5234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_in_type_declaration5240 = new BitSet(new long[]{0x0000000000000002L,0x0420000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5242 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_declaration5244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_in_type_declaration5251 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_in_type_declaration5260 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_plane_in_type_declaration5269 = new BitSet(new long[]{0x0000000000000002L,0x0020000000000000L});
    public static final BitSet FOLLOW_117_in_type_declaration5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_type_declaration_plane5286 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8020000000000000L,0x000000000000302CL});
    public static final BitSet FOLLOW_205_in_type_declaration_plane5289 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8020000000000000L,0x000000000000102CL});
    public static final BitSet FOLLOW_181_in_type_declaration_plane5292 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000102CL});
    public static final BitSet FOLLOW_204_in_type_declaration_plane5295 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000002CL});
    public static final BitSet FOLLOW_type_dec_in_type_declaration_plane5298 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_declaration_plane5301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_181_in_type_declaration_plane5303 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_declaration_plane5305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_type_decl_protocol_predicate5337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_type_decl_protocol_predicate5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_type_declaration_protocol5355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_type_declaration_protocol5357 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x8000000000000000L,0x000000000000002CL});
    public static final BitSet FOLLOW_type_dec_internal_in_type_declaration_protocol5359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_type_declaration_protocol5361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_type_declaration_struct_simple5383 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_simple5385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_type_declaration_union_simple5405 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_simple5407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_type_declaration_enum_simple5431 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_simple5433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_type_declaration_struct_full5453 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_struct_full5455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_struct_full5458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_type_declaration_union_full5482 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_union_full5484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_struct_wrapper_in_type_declaration_union_full5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_type_declaration_enum_full5511 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typedef_name_in_type_declaration_enum_full5513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_enum_wrapper_in_type_declaration_enum_full5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_full_in_type_declaration_struct5551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_struct_simple_in_type_declaration_struct5557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_full_in_type_declaration_union5581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_union_simple_in_type_declaration_union5587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_full_in_type_declaration_enum5611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_enum_simple_in_type_declaration_enum5617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_enum_wrapper5630 = new BitSet(new long[]{0x0000400000000000L,0x8000000000040001L});
    public static final BitSet FOLLOW_enum_element_in_enum_wrapper5640 = new BitSet(new long[]{0x0000400000000000L,0x8000000000040001L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_enum_wrapper5647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_enum_element5662 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_enum_element5665 = new BitSet(new long[]{0x0000000000000002L,0xC840000000000000L,0x0000000000042844L,0x0000000000020000L});
    public static final BitSet FOLLOW_op_assign_wrapper_in_enum_element5668 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_enum_element5670 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_enum_element5674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_enum_element5695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_struct_in_struct_wrapper5710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_207_in_struct5728 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_struct_internal_in_struct5737 = new BitSet(new long[]{0x0000400000000000L,0x0080000000040001L,0x8424000000000000L,0x00000000000838ACL});
    public static final BitSet FOLLOW_211_in_struct5744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_field_declaration_wrapper_in_struct_internal5758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comments_in_struct_internal5764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_in_type_dec_wrapper5779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_dec_internal_in_type_dec5799 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x0000200000000200L});
    public static final BitSet FOLLOW_137_in_type_dec5801 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ID_in_type_dec5803 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_type_dec5805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_143_in_type_dec5807 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_122_in_type_dec5811 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_array_size_in_type_dec5815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_knownTypes_in_type_dec_internal5832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_type_dec_internal5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_194_in_knownTypes5854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_knownTypes5860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_195_in_knownTypes5866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_194_in_knownTypes5869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_knownTypes5876 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000024L});
    public static final BitSet FOLLOW_194_in_knownTypes5879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_field_name5895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000080L});
    public static final BitSet FOLLOW_array_size_in_field_name5897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000200000000080L});
    public static final BitSet FOLLOW_field_crap_in_field_name5901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_array_size5932 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000008L,0x0000800000000000L});
    public static final BitSet FOLLOW_175_in_array_size5943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_field_crap5953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_NUMBER_LITERAL_in_field_crap5955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_wrapper_in_method_declaration5967 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_method_declaration_variants_in_method_declaration5969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_modifier_wrapper5981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_declaration_common_in_method_declaration_variants6018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_method_declaration_common6031 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_common6033 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_declaration_common6035 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_common6037 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_method_params_in_method_declaration_common6040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_method_declaration_common6043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_modifier_in_method_declaration_predicate6055 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_declaration_predicate6058 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_type_declaration_in_method_declaration_predicate6060 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_declaration_predicate6062 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_method_name_in_method_declaration_predicate6064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_method_name6082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_method_param_in_method_params6105 = new BitSet(new long[]{0x0000400000000002L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_prefix_in_method_param6125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_method_param6128 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_method_param6131 = new BitSet(new long[]{0x0000400000000000L,0x0080000000000000L,0x8424000000000000L,0x00000000000038ACL});
    public static final BitSet FOLLOW_type_declaration_in_method_param6133 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_method_param6135 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_param_name_in_method_param6139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_param_name6172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_prefix6191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_define_as_function_in_define_declaration6220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6234 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration6236 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_define_declaration6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_declaration6254 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_define_declaration6256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_define_as_function6280 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_define_as_function6282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_define_as_function6285 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x000000000000C111L});
    public static final BitSet FOLLOW_207_in_define_as_function6287 = new BitSet(new long[]{0x0000400000000000L,0x04A0000000040001L,0x6348201000000100L,0x0000000000004111L});
    public static final BitSet FOLLOW_block_singleline_wrapper_in_define_as_function6290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_211_in_define_as_function6292 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string6319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_string_objc6342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_string_objc6344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_declaration_in_synpred1_Objc507 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_field_name_in_synpred1_Objc509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred2_Objc768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred3_Objc1340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_clasical_method_call_predicate_in_synpred4_Objc1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_simple_wrapper_in_synpred5_Objc1482 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred5_Objc1484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred6_Objc1497 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000020000L});
    public static final BitSet FOLLOW_op_assign_in_synpred6_Objc1499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred7_Objc1754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_136_in_synpred7_Objc1756 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred8_Objc1773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_synpred8_Objc1775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_in_synpred9_Objc1792 = new BitSet(new long[]{0x0000000000000000L,0x4840000000000000L,0x0000000000042844L,0x0000000000020000L});
    public static final BitSet FOLLOW_op_assign_in_synpred9_Objc1794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_object_access_wrapper_in_synpred10_Objc2380 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_increment_decrement_in_synpred10_Objc2382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred11_Objc2988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred12_Objc3004 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred12_Objc3006 = new BitSet(new long[]{0x0000400000010000L,0x04A0000000800008L,0x1003340900100000L,0x0000000000000200L});
    public static final BitSet FOLLOW_simple_expression_value_access_in_synpred12_Objc3008 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_synpred12_Objc3010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred12_Objc3012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_name_in_synpred13_Objc3049 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_119_in_synpred13_Objc3051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_call_predicate_in_synpred14_Objc3087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_expression_value_in_synpred15_Objc3144 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_access_wrapper_in_synpred15_Objc3147 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred15_Objc3149 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_119_in_synpred15_Objc3153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_synpred16_Objc3202 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred16_Objc3205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_synpred16_Objc3207 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_synpred17_Objc3237 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred17_Objc3243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred18_Objc3604 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred19_Objc3738 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_synpred20_Objc3751 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_type_cast_wrapper_in_synpred20_Objc3753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_synpred21_Objc3829 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred21_Objc3832 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_173_in_synpred21_Objc3834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred22_Objc4321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_decl_predicate_in_synpred23_Objc4949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred24_Objc5106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred25_Objc5117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_decl_protocol_predicate_in_synpred26_Objc5208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_func_pointer_predicate_in_synpred27_Objc5219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_type_decl_predicate_in_synpred28_Objc5230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_synpred29_Objc5542 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred29_Objc5544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred29_Objc5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_synpred30_Objc5572 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred30_Objc5574 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred30_Objc5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_synpred31_Objc5602 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_typedef_name_in_synpred31_Objc5604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_207_in_synpred31_Objc5607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred32_Objc6211 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_classical_method_call_wrapper_in_synpred32_Objc6213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_synpred32_Objc6215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_LITERAL_in_synpred33_Objc6227 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_name_in_synpred33_Objc6229 = new BitSet(new long[]{0x0000400000010000L,0x24A1000000800008L,0x1003340900100003L,0x0000000000100200L});
    public static final BitSet FOLLOW_element_value_in_synpred33_Objc6231 = new BitSet(new long[]{0x0000000000000002L});

}